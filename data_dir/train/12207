#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;
const int MOD = 10000005;
const int di[] = { -1,0,1,0,1,-1,1,-1 };
const int dj[] = { 0,1,0,-1,1,-1,-1,1 };

int sx, sy, dx, dy;
map<int, set<int>> av;
bool allowed(int x, int y) {
	if (av.find(x) == av.end())
		return false;
	auto it = av[x].find(y);
	if (it == av[x].end())
		return false;
	av[x].erase(it);
	return true;
}
int bfs() {
	queue<pair<pii, int>> q;
	q.push(make_pair(pii(sx, sy), 0));
	while (!q.empty()) {
		int cx = q.front().first.first, cy = q.front().first.second;
		int d = q.front().second;
		if (cx == dx && cy == dy)
			return d;
		for (int i = 0; i < 8; i++)
			if (allowed(cx + di[i], cy + dj[i]))
				q.push(make_pair(pii(cx + di[i], cy + dj[i]), d + 1));
		q.pop();
	}
	return -1;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> sx >> sy >> dx >> dy;
	int n; cin >> n;
	for (int i = 0; i < n; i++) {
		int r, a, b;
		cin >> r >> a >> b;
		set<int> tmp = av[r];
		for (int j = a; j <= b; j++)
			tmp.insert(j);
		av[r] = tmp;
	}
	cout << bfs() << endl;
	//cin.ignore(), cin.get();
}