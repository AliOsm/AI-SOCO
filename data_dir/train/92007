#include <bits/stdc++.h>
using namespace std;
#define ll long long
//std::mt19937 rng((int) std::chrono::steady_clock::now().time_since_epoch().count());
ll NOD(ll a, ll b)
{
    while (a*b > 0)
    {
        if (a>b) a%=b;
        else
            b%=a;
    }
    return a+b;
}
ll n;
vector <ll> queries;


ll getw()
{
    ll p = rand();
    ll w = rand();
    ll r = rand();
    ll rez = (p*w*r)%n;
    rez++;
}



int main()
{
    srand(time(0));
 //    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
    ll i, j;
    cin>>n;

    if (n < 60)
    {
        vector <ll> a;
        for(i=1; i<=n; i++)
        {
            cout<<"? "<<i<<endl;
            ll q;
            cin>>q;
            a.push_back(q);
        }
        sort(a.begin(), a.end());
        cout<<"! "<<a[0]<<" "<<a[1] - a[0];
        return 0;
    }




    vector <ll> a;
    for(i=0; i<30; i++)
    {
        ll q = (rand()*rand())%n+1;
        a.push_back(q);
    }

      /*for(i= 0; i<10; i++)
        cout<<a[i]<<" ";*/
    vector <ll> ans;
    ll cur = 0;
        for(i=0; i<30; i++)
        {
            cout<<"? "<<a[i]<<endl;
            ll q;
            cin>>q;
            ans.push_back(q);
        }
        sort(ans.begin(), ans.end());
        vector <ll> maybe;
        for(i=0; i<ans.size(); i++)
        {
            for(j = i+1; j<ans.size(); j++)
            {
                maybe.push_back(ans[j] - ans[i]);
            }
        }
        vector <ll> qqq;
        for(i=0; i<maybe.size(); i++)
        {
            for(j = i+1; j<maybe.size(); j++)
            {
                qqq.push_back(NOD(maybe[i], maybe[j]));
            }
        }
        sort(qqq.begin(), qqq.end());

        ll high = 1000000000, low = 0;
        while (high>low+1)
        {
            ll mid = (high+low)/2;
            cout<<"> "<<mid<<endl;
            ll rez;
            cin>>rez;
            if (rez == 0)
            {
                high = mid;
            }
            else
                low = mid;
        }
      //  cout<<" !"<<low<<" "<<high<<endl;
    cout<<"! "<<high - (n - 1)*qqq[0]<<" "<<qqq[0]<<endl;




    return 0;
}
