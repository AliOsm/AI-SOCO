#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

typedef long long ll;
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

const int OFFSET = 100500;
enum {U,D,L,R};
int H, W, K, AX1[350005], AX2[350005], AY1[350005], AY2[350005], X[100005], Y[100005];
ll AT1[350005], AT2[350005];

int main()
{
    cin >> W >> H >> K;
    f(i,1,K) scanf("%d %d", &X[i], &Y[i]);
    int x = 0, y = 0, dx = 1, dy = 1;
    ll t = 0;
    f(i,0,325000) AX1[i] = AX2[i] = -1;
    while(true)
    {
        int diag1 = x+y;
        int diag2 = x-y+OFFSET;
        if(dx != dy && AX1[diag1] < 0) AX1[diag1] = x, AY1[diag1] = y, AT1[diag1] = t;
        else if(AX2[diag2] < 0) AX2[diag2] = x, AY2[diag2] = y, AT2[diag2] = t;

        vector<pii> dist(4);
        f(i,0,3) dist[i] = {INF,i};
        if(dy > 0) dist[U].first = H-y;
        if(dx > 0) dist[R].first = W-x;
        if(dx < 0) dist[L].first = x;
        if(dy < 0) dist[D].first = y;
        sort(all(dist));
        if(dist[0].first == dist[1].first) break;

        x += dx*dist[0].first;
        y += dy*dist[0].first;
        t += dist[0].first;
        if(dist[0].second == U || dist[0].second == D) dy = -dy;
        else dx = -dx;
    }

    f(i,1,K)
    {
        int diag1 = X[i]+Y[i];
        int diag2 = X[i]-Y[i]+OFFSET;
        ll nt = INFLL;
        if(AX1[diag1] >= 0)
        {
            ll temp = AT1[diag1] + abs(X[i] - AX1[diag1]);
            nt = min(nt, temp);
        }
        if(AX2[diag2] >= 0)
        {
            ll temp = AT2[diag2] + abs(X[i] - AX2[diag2]);
            nt = min(nt, temp);
        }
        if(nt < INFLL) printf("%I64d\n", nt);
        else printf("-1\n");
    }
}
