#include <bits/stdc++.h>
using namespace std;

int n;
char s[10005];
string S;
int dp[10005][2];
int solve(int i, int sz)
{
	if (i < 5)
		return dp[i][sz] = 0;
	if (n-i < sz+2)
		return dp[i][sz] = 0;
	if (i+sz+2 == n)
		return dp[i][sz] = 1;
	if (dp[i][sz] != -1)
		return dp[i][sz];
	string sub = S.substr(i, sz+2);
	int len = sz + 2;
	if (n - i - len < len)
		return dp[i][sz] = solve(i+len, sz) || solve(i+len, 1-sz);
	string sub2 = S.substr(i+len, len);
	if (sub == sub2)
	{
		return dp[i][sz] = solve(i+len, 1-sz);
	}
	else
	{
		return dp[i][sz] = solve(i+len, sz) || solve(i+len, 1-sz);
	}
}
int main()
{
	
	scanf("%s", s);
	n = strlen(s);
	S = string(s);
	memset(dp, -1, sizeof(dp));
	
	vector<string> ok;
	for (int i = 0; i < n; i++)
	{
		if (solve(i, 0))
		{
			ok.push_back(S.substr(i, 2));
		}
		if (solve(i, 1))
		{
			ok.push_back(S.substr(i, 3));
		}
	}
	int cnt = 0;
	sort(ok.begin(), ok.end());
	for (int i = 0; i < ok.size(); i++)
	{
		if (i == 0 || ok[i] != ok[i-1])
			cnt++;
	}
	cout<<cnt<<endl;
	for (int i = 0; i < ok.size(); i++)
	{
		if (i == 0 || ok[i] != ok[i-1])
			cout<<ok[i]<<endl;
	}
}