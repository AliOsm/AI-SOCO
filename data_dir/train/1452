#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
ordered_set;	

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<pii, int> para;
const ll inf = 1e18 + 7;
const ll maxN = 1e6 + 5;
const ll MOD = 1e9 + 7;

vector<pii> neigh = {{-1, 0}, {0, -1}};
int n;
string s[maxN];

bool BFS() {
	queue<pii> Q;
	map<pii, bool> used;
	REP(i, n) {
		if (i == n - 1) {
			REP(j, n) {
				if (s[i][j] == '1') {
					Q.push({i, j});
					used[{i, j}] = true;
				}
			}
			continue;
		}
		if (s[i][n - 1] == '1') {
			Q.push({i, n - 1});
			used[{i, n - 1}] = true;
		}
	}
	while (!Q.empty()) {
		pii p = Q.front(); Q.pop();
		used[p] = true;
		for (auto x: neigh) {
			int xx = p.st + x.st;
			int yy = p.nd + x.nd;
			if (xx >= 0 && yy >= 0) {
				if (s[xx][yy] == '1' && !used[{xx, yy}]) {
					used[{xx, yy}] = true;
					Q.push({xx, yy});
				}
			}
		}
	}
	REP(i, n) {
		REP(j, n) {
			if (s[i][j] == '1' && used.count({i, j}) == 0) {
				return false;
			}
		}
	}
	return true;
}

// sprawdz MODULO!
int main() {
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
	ios_base::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	int t; cin >> t;
	REP(_, t) {
		cin >> n;
		REP(i, n) {
			cin >> s[i];
		}
		if (BFS()) {
			cout << "YES\n";
		} else {
			cout << "NO\n";
		}
	}
	return 0;
}
 
