#include<iostream>
#include<cstdio>
#include<algorithm>
#include<queue>
#include<set>
#include<vector>
#include<map>
#include<stack>
#include<string>
#define FOR(i,n) for(int i=1;i<=n;i++)
#define FORZ(i,n) for(int i=0;i<n;i++)
#define ll long long
#define ull unsigned long long
#define pii pair<int,int>
#define piii pair<ll,pair<ll,ll>>
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define SIZE 10000002
#define MOD 1000000007
#define LD long double
#define gentum getnum
using namespace std;
 
inline ll getnum()
{
    char c = getchar();
    ll num,sign=1;
    for(;c<'0'||c>'9';c=getchar())if(c=='-')sign=-1;
    for(num=0;c>='0'&&c<='9';)
    {
        c-='0';
        num = num*10+c;
        c=getchar();
    }
    return num*sign;
}

pii P[100004];
int par[100004],Rank[100004],L[100004],R[100004],Cnt[100004],A[100004];
multiset<int> Set,Ans;

int find(int x)
{
    if(par[x]==x)return x;
    return par[x]=find(par[x]);
}
int unite(int x,int y,int n)
{
    int xx=find(x);
    int yy=find(y);

    if(xx==yy)return 0;

    int boss,notboss=xx;

    if(Rank[xx]<Rank[yy])par[xx]=yy,boss=yy;
    else if(Rank[xx]>Rank[yy])par[yy]=xx,boss=xx;
    else
    {
        par[yy]=xx;
        Rank[xx]++;
        boss=xx;
    }
    
    if(boss==xx)notboss=yy;    
    L[boss]=min(L[boss],L[notboss]);
    R[boss]=max(R[boss],R[notboss]);
 
    Set.erase(Cnt[boss]);
    Set.erase(Cnt[notboss]);

    Cnt[boss]=Cnt[boss]+Cnt[notboss];
    Set.insert(Cnt[boss]);

    return boss;
}

int main()
{
    int n=getnum();

    for(int i=1;i<=n;i++)A[i]=getnum(),P[i]=mp(A[i],i);

    sort(P+1,P+n+1);

    int tot=0,ans;

    for(int i=1,j=1;i<=n;i++,j++)
    {
        while(true)
        {
            int x=P[i].ss;
            par[x]=x;
            L[x]=x;
            R[x]=x;
            Cnt[x]=1;
            Set.insert(1);

            if(par[x+1]!=0)unite(x,x+1,n);
            if(par[x-1]!=0)unite(x,x-1,n);

            if(P[i].ff==P[i+1].ff)i++;
            else break;
        }

        auto it=Set.end();it--;
        int mn=*Set.begin();
        int mx=*it;

        if(mn==mx)
        {
            if(Set.size()>tot)tot=Set.size(),ans=P[i].ff+1;
            else if(Set.size()==tot)ans=min(ans,P[i].ff+1);
        }
    }

    cout<<ans<<endl;
}