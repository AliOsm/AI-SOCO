#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;


typedef tree<int, null_type, less<int>, rb_tree_tag,
        tree_order_statistics_node_update>
        new_data_set;


#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define PSET(x,y) fixed<<setprecision(y)<<x
#define pb push_back
#define pii pair<int,int>
#define pf push_front
#define mp make_pair
#define vi vector<int>
#define vip vector<pair<int,int> >
#define ff first
#define ss second
#define int long long
#define SIZE 200010
#define mod 1000000007
#define BIG 998244353
#define s(t) scanf("%d",&t)
#define p(t) printf("%d\n",t)
#define mii map<int,int>
#define MSET(table,i) memset(table, i, sizeof(table))
#define endl '\n'
//#define tc int t;cin>>t;while(t--)
#define pi  3.1415926358
#define print(x) for(auto el: x) cout<<el<<" ";cout<<endl
#define bits(x) __builtin_popcount(x)
#define minimum(a,n) min_element(a,a+n)-a
#define maximum(a,n) max_element(a,a+n)-a
#define pqbig priority_queue<int>
#define pqsmall priority_queue<pii,vector<pii>,greater<pii> >
#define all(v) v.begin(),v.end()
#define sitr set<int>:: iterator
#define mitr map<int,int>:: iterator


#define trace1(x)                cerr<<#x<<": "<<x<<endl
#define trace2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define trace3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define trace4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define trace5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define trace6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl

const int N=1e5+5;
vi adj[N];
set<int> graph[N];
int color[N];
int n,m;
vi groups[3];

int32_t main()
{
    fast;
    cin>>n>>m;
    for(int i=1;i<=m;i++)
    {
        int x,y;cin>>x>>y;
        adj[x].pb(y);
        adj[y].pb(x);
        graph[x].insert(y);
        graph[y].insert(x);
    }   

    int grp=0;
    mii done;

    for(int i=1;i<=n;i++)
    {
        if(done.count(i))
            continue;


        if(grp>2)
        {
            cout<<-1;
            return 0;
        }

        groups[grp].pb(i);

        for(int j=1;j<=n;j++)
        {
            if(i==j)
                continue;
            if(graph[i].find(j)==graph[i].end())
                groups[grp].pb(j),done[j]++;
        }
        grp++;
    }

    if(groups[0].size()==0 or groups[1].size()==0 or groups[2].size()==0)
    {
        cout<<-1;
        return 0;
    }

    if(groups[0].size()+groups[1].size()+groups[2].size()!=n)
    {
        cout<<-1;
        return 0;
    }

    int cnt=0;

    for(int i=0;i<3;i++)
    {
        for(int j=i+1;j<3;j++)
        {
            for(int k=0;k<groups[i].size();k++)
            {
                for(int l=0;l<groups[j].size();l++)
                {
                    int el=groups[i][k];
                    int val=groups[j][l];

                    if(graph[el].find(val)==graph[el].end())
                    {
                        cout<<-1;
                        return 0;
                    }

                    cnt++;
                }
            }
        }
    }

    if(cnt!=m)
    {
        cout<<-1;
        return 0;
    }

    for(int i=0;i<3;i++)
    {
        for(int j=0;j<groups[i].size();j++)
            color[groups[i][j]]=i+1;
    }

    for(int i=1;i<=n;i++)
        cout<<color[i]<<' ';

}
