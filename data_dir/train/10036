#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<functional>
#include<string>
#include<algorithm>
#include<time.h>
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
template <class T> inline void scand(T &x){char c;x=0;while((c=getchar())<'0');while(c>='0'&&c<='9')x=x*10+(c-48),c=getchar();}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned int UI;
typedef int Int;
template <class T> inline void gmax(T &a,T b){if(b>a)a=b;}
template <class T> inline void gmin(T &a,T b){if(b<a)a=b;}
using namespace std;
const int N=1e5+10,M=0,L=0,Z=1e9+7,t30=1<<30,maxint=2147483647,ms31=522133279,ms63=1061109567,ms127=2139062143;
const double eps=1e-8,PI=acos(-1.0);//.0
map<int,int>mapa,mapb,mapc;
int n,i,x;
int a[N],b[N];
int main()
{
    while(~scanf("%d",&n))
    {
        mapa.clear();mapb.clear();mapc.clear();
        for(i=1;i<=n;i++)
        {
            scanf("%d",&a[i]);
            mapa[a[i]]++;
        }
        for(i=1;i<=n-1;i++)
        {
            scanf("%d",&b[i]);
            mapb[b[i]]++;
        }
        for(i=1;i<=n-2;i++)
        {
            scanf("%d",&x);
            mapc[x]++;
        }
        for(i=1;i<=n;i++)
        {
            x=a[i];
            if(mapb[x]<mapa[x])
            {
                printf("%d\n",x);
                break;
            }
        }
        for(i=1;i<=n-1;i++)
        {
            x=b[i];
            if(mapc[x]<mapb[x])
            {
                printf("%d\n",x);
                break;
            }
        }
    }
    return 0;
}
/*
【题意】
有n个错误
我们一开始修正一个
后来又修正一个
问两次修正的错误分别是什么
（注意，修正的错误可能会重复）

【类型】
哈希判重

【分析】
用map[x]记录第错误x有几个
然后暴力一下就好了

此外排序也可以做的

【优化】

【trick】

【数据】
Sample test(s)

input
5
1 5 8 123 7
123 7 5 1
5 1 7
output
8
123

input
6
1 4 3 3 5 7
3 7 5 4 3
4 3 7 5
output
1
3

*/