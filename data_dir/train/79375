// Kono Giorno Giovanna wa yume ga aru

#pragma GCC optimize ("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("avx,avx2,fma,sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")

#include <bits/stdc++.h>
using namespace std;

//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/rope>
//using namespace __gnu_pbds;
//using namespace __gnu_cxx;
//
//template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;
//const long long mod = 998244353;
mt19937 rng((int) chrono::steady_clock::now().time_since_epoch().count());
//
//// watch this
//using ll = long long;
//typedef long long LL;
//using uint = unsigned int;
#define ll long long
#undef ll
const int mxN = 200010;

struct PT {
	long long x, y;
	PT operator-(PT o) {
		return PT { x - o.x, y - o.y };
	}
	bool operator<(const PT & o) const {
		if (x != o.x)
			return x < o.x;
		return y < o.y;
	}
};

long long cross(PT a, PT b) {
	return a.x * b.y - a.y * b.x;
}

PT conv(PT a) {
	return PT { a.x, a.y - a.x * a.x };
}

int main(int argc, char** argv) {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
#endif

	int N;
	cin >> N;
	vector<PT> ps(N);
	for (int i = 0; i < N; i++) {
		cin >> ps[i].x >> ps[i].y;
	}
	sort(begin(ps), end(ps));
	vector<PT> all;
	for (int i = 0, j = 0; i < N; i = j) {
		while (j < N && ps[j].x == ps[i].x)
			j++;
		all.push_back(conv(ps[j - 1]));
	}
	reverse(all.begin(), all.end());
	vector<PT> res;
	for (int i = 0; i < (int) all.size(); i++) {
		while (res.size() >= 2
				&& cross(res.back() - res[res.size() - 2],
						all[i] - res[res.size() - 2]) <= 0)
			res.pop_back();
		res.push_back(all[i]);
	}
	cout << res.size() - 1 << '\n';
	return 0;
}
