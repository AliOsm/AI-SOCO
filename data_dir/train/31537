#include <bits/stdc++.h>
using namespace std;

// Template Headers {{{
using pii = pair<int, int>; using vpii = vector<pii>;
using vi = vector<int>; using vvi = vector<vi>;
using ll = long long; using vll = vector<long long>;
template <class T> using min_queue = priority_queue<T, vector<T>, greater<T>>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
template <class T, class U> istream &operator>>(istream &, pair<T, U> &);
template <class T, class U> ostream &operator<<(ostream &, const pair<T, U> &);
template <class T> struct Inf { static constexpr T inf() { return std::numeric_limits<T>::has_infinity() ? std::numeric_limits<T>::infinty() : std::numeric_limits<T>::max(); } };
template <> struct Inf<int> { static constexpr int inf() { return 0x3f3f3f3f; } };
template <> struct Inf<long long> { static constexpr long long inf() { return 0x3f3f3f3f3f3f3f3fLL; } };
constexpr int INF = Inf<int>::inf(); constexpr ll BINF = Inf<ll>::inf();
// mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
// }}}

int solve() {
	string s, t; cin >> s >> t;
	int n = s.size(), m = t.size();
	vi matLeft(m, -1), matRight(m, -1);

	int now = 0;
	for (int i = 0; i < n; i++) {
		if (now >= m) break;
		if (s[i] == t[now]) {
			matLeft[now] = i;
			now++;
		}
	}
	int now2 = m - 1;
	for (int i = n - 1; i >= 0; i--) {
		if (now2 < 0) break;
		// cerr << i << ' ' << now2 << ' ' << s[i] << ' ' << t[now2] << endl;
		if (s[i] == t[now2]) {
			matRight[now2] = i;
			now2--;
		}
	}
	// cerr << matLeft << matRight;
	int ans = 0;
	for (int i = 0; i <= m; i++) {
		int st = i == 0 ? 0 : matLeft[i - 1] + 1;
		int en = i == m ? n - 1 : matRight[i] - 1;
		if (st > en) continue;
		ans = max(ans, en - st + 1);
	}
	cout << ans << endl;
	return 0;
}

// Template Main {{{
int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << "Case #" << i << ": ", solve();
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it, os << " \n"[++it==v.end()];
	return os;
}

template <class T, class U> istream &operator>>(istream &is, pair<T, U> &p) {
	return is >> p.first >> p.second;
}

template <class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) {
	return os << p.first << ' ' << p.second;
}
// }}}

// vim: fdm=marker
