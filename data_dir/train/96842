#include<bits/stdc++.h>
using namespace std;
int n1,n2,n,m;
int a[55],b[55],fir[1<<19],sec[1<<19];
int total1,total2;
int  gen(int *a, int *sub, int n)
{
  int tot = (1<<n);
  int mask;
    int res = 0;
    for(mask=0;mask<tot;mask++)
    {
        int sum = 0;
        int i;
        for(i=0;i<n;i++)
        {
            if(mask & (1<<i))
            {
                sum += a[i];
                if(sum >=m)sum-=m;
            }
        }
        sub[mask] = sum%m;
        res = max(res,sub[mask]);
    }
    sort(sub,sub+tot);
    return res;
}
int main()
{
    scanf("%d%d",&n,&m);
    n1 = n;
    if(n > 6)
    {
        n1 = n/2;
        n2 = n-n1;
    }
    int i;
    for(i=0;i<n1;i++)scanf("%d",&a[i]);
    for(i=0;i<n2;i++)scanf("%d",&b[i]);
    total1 = (1<<n1);
    total2 = (1<<n2);
    int ans = 0;
    ans = max(ans, gen(a,fir,n1));

    ans = max(ans,gen(b,sec,n2));
   map<int,int> cnt1,cnt2;
    for(i=0;i<total1;i++)
        cnt1[fir[i]]++;
    for(i=0;i<total2;i++)
        cnt2[sec[i]]++;
    int lim = 10;
    
    ans = max(ans,fir[total1-1]);
    ans = max(ans,sec[total2-1]);
    map<int,int>::iterator I;
    total1 = total2 = 0;
    for(I=cnt1.begin();I!=cnt1.end();I++)
        fir[total1++] = I->first;
    for(I=cnt2.begin();I!=cnt2.end();I++)
        sec[total2++] = I->first;
    for(i=0;i<total1;i++)
    {
        int cur = upper_bound(sec,sec+total2,m-1-fir[i]) - sec;
        //printf("%d\n",cur+fir[i]);
       // if(cur>0 && cur <= total2)
     //   ans = max(ans,(sec[cur-1]+fir[i])%m);
        int  j;
        int  mi = max(0,cur-lim);
        int ma = min(cur+lim,total2);
        for(j=mi;j<ma;j++)
            ans = max(ans, (sec[j]+fir[i])%m);
        cur = upper_bound(sec,sec+total2,2*m-1-fir[i])-sec;
        mi = max(0,cur-lim);
         ma = min(cur+lim,total2);
        for(j=mi;j<ma;j++)
            ans = max(ans, (sec[j]+fir[i])%m);
        
        cur = lower_bound(sec,sec+total2,m-1-fir[i]) - sec;
        
         mi = max(0,cur-lim);
         ma = min(cur+lim,total2);
        for(j=mi;j<ma;j++)
            ans = max(ans, (sec[j]+fir[i])%m);
        
         cur = lower_bound(sec,sec+total2,2*m-1-fir[i]) - sec;
        
          mi = max(0,cur-lim);
         ma = min(cur+lim,total2);
        for(j=mi;j<ma;j++)
            ans = max(ans, (sec[j]+fir[i])%m);
        
        
        
        
    }
    printf("%d\n",ans);
}