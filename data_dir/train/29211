#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cstring>
#include <cmath>
using namespace std;
typedef long long Long;

struct Cylinder {
	Long h,r,v,rank,id;
	Cylinder(Long h=0,Long r=0,Long id=0) : h(h), r(r), id(id) {
		v = r*r*h;
		rank = -1;
	}
	bool operator<(const Cylinder &C)const{
		if(v != C.v)return v < C.v;
		return id > C.id;
	}
};
bool byId(const Cylinder &A, const Cylinder &B){
	return A.id < B.id;
}
Long F[100010];
void ins(int x,Long v){
	x++;
	while(x < 100010){
		F[x] = max(v, F[x]);
		x += x & -x;
	}
}
Long que(int x){
	if(x < 0)return 0;
	x++;
	Long ret = 0;
	while(x > 0){
		ret = max(F[x], ret);
		x -= x & -x;
	}
	return ret;
}

int main()
{
	int N;
	cin >> N;
	vector<Cylinder> V;
	for(int i = 0; i < N; ++i){
		int h,r;
		cin >> r >> h;
		V.push_back(Cylinder(h,r,i));
	}
	sort(V.begin(),V.end());
	for(int i = 0; i < N; ++i){
		V[i].rank = i;
	}
	sort(V.begin(),V.end(),byId);
	for(int i = 0; i < N; ++i){
//		cout << V[i].rank << endl;
	}
	Long b = 0;
	for(int i = 0; i < N; ++i){
		Long t = que(V[i].rank);
		t += V[i].v;
		b = max(b, t);
		ins(V[i].rank, t);
	}
	printf("%0.10lf\n",b*acos(-1));
	
	
	
}
