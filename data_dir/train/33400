#include <bits/stdc++.h>
using namespace std;

const int N = 205;

int n, m, u, v, i, pathLength, sum[2], a[N], b[N], path[N], cap[N][N];
bool visited[N];

int getPath(int src, int dst, int len, int capacity) {
	path[len] = src;

	if (src == dst) {
		pathLength = len + 1;
		return capacity;
	}

	int ret = 0;
	visited[src] = 1;

	for (int i = 1; i <= 2 * n + 1; ++i) {
		if (visited[i] || cap[src][i] <= 0) {
			continue;
		}

		ret = getPath(i, dst, len + 1, min(capacity, cap[src][i]));

		if (ret > 0) {
			break;
		}
	}

	return ret;
}

int maxFlow(int src, int dst) {
	int totalFlow = 0;

	while (1) {
		memset(visited, 0, sizeof(visited));

		int flow = getPath(src, dst, 0, INT_MAX);

		if (flow <= 0) {
			break;
		}

		for (i = 1; i < pathLength; ++i) {
			u = path[i - 1];
			v = path[i];

			cap[u][v] -= flow;
			cap[v][u] += flow;
		}

		totalFlow += flow;
	}

	return totalFlow;
}

int main() {
	cin >> n >> m;
	for (u = 1; u <= n; ++u) {
		scanf("%d", a + u);
		sum[0] += a[u];
		cap[0][u] = cap[u][u + n] = a[u];
	}
	for (u = 1; u <= n; ++u) {
		scanf("%d", b + u);
		sum[1] += b[u];
		cap[u + n][2 * n + 1] = b[u];
	}

	while (m--) {
		scanf("%d %d", &u, &v);
		cap[u][v + n] = a[u];
		cap[v][u + n] = a[v];
	}

	int flow = maxFlow(0, 2 * n + 1);

	if (flow != sum[0] || flow != sum[1]) {
		return cout << "NO", 0;
	}

	printf("YES\n");
	for (u = 1; u <= n; ++u) {
		for (v = 1 + n; v <= 2 * n; ++v) {
			printf("%d ", cap[v][u]);
		}
		printf("\n");
	}
	return 0;
}