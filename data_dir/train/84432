#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef long double real;

#ifdef WIN32
#define INT64 "%I64d"
#define UINT64 "%I64u"
#else
#define INT64 "%lld"
#define UINT64 "%llu"
#endif

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

const int MaxN = 100005, MaxC = 0x3F3F3F3F, NA = -1;

int a [MaxN] [2];
int p [2];
int n;

int main (void)
{
 int i, j, k, res;

 while (scanf (" %d", &n) != EOF)
 {
  map <int, int> m;
  for (i = 0; i < n; i++)
  {
   scanf (" %d %d", &a[i][0], &a[i][1]);
   m[a[i][0]]++;
   if (a[i][1] != a[i][0])
    m[a[i][1]]++;
  }
  res = n + 1;
  for (map <int, int> :: iterator it = m.begin (); it != m.end (); it++)
  {
   j = it -> second;
   if (j + j >= n)
   {
    k = it -> first;
    p[0] = p[1] = 0;
    for (i = 0; i < n; i++)
    {
     if (a[i][0] == k)
      p[0]++;
     else if (a[i][1] == k)
      p[1]++;
    }
    assert (p[0] + p[1] == j);
    res = min (res, max (0, ((n + 1) >> 1) - p[0]));
   }
  }
  if (res > n)
   res = NA;
  printf ("%d\n", res);
 }

 return 0;
}
