#include <iostream>
#include <stdio.h>
#include <cmath>
#include <vector>

using namespace std;
const int N = (int)4e5;
const long long md = (long long) 1e9 + 7;

int n, m, k, dans;
int us[N], h[N];
long long st2[N], ans = 1;
vector<int> g[N];

long long dfsc(int v, int p = -1, int he = 0) {
//    cout << "dfs " << v << "\n";
    if(us[v] == 2)
        return 1;
    if(us[v] == 1) {
        dans -= he - h[v];
//        cout << ((st2[he - h[v]] + md - 2LL) % md) << "\n";
        return ((st2[he - h[v]] + md - 2LL)) % md;
    };
    long long ans = 1;
    us[v] = 1;
    h[v] = he;
    bool was = 0;
    for(int i = 0; i < g[v].size(); i++) {
        if(g[v][i] != p || was)
            ans = (ans * dfsc(g[v][i], v, he + 1)) % md;
        else
            was = 1;
    }
    us[v] = 2;
//    cout << "dfs " << v << " = " << ans << "\n";
    return ans;
}


int main() {
    scanf("%d", &n);
    dans = n;
    st2[0] = 1;
    for(int i = 1; i <= n; i++) {
        int x;
        scanf("%d", &x);
        g[x].push_back(i);
        g[i].push_back(x);

        st2[i] = (st2[i - 1] * 2LL) % md;
    }
//    long long ans = 1;
//    printf("%I64d\n", ans);
    for(int i = 1; i <= n; i++) {
        if(us[i] == 0)
            ans = (dfsc(i) * ans) % md;
    }
//    cout << dans << " ";
//    printf("%I64d\n", ans);
//    cout << dans << "\n";
    ans = (ans * st2[dans]) % md;
    printf("%I64d\n", ans);
    return 0;
}
