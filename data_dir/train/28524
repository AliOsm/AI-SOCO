#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define fi first
#define se second 
#define pb push_back
#define all(x) (x).begin() , (x).end()
#define rep(i,a,b) for( ll i = a ; i < b ; i += 1 )
#define sz(v) int(v.size())
ll t = 1 ;
const ll N = 104 ;
ll dp[N][N][N] , prv[N][N][N] , lps[N] ;
void compute_lps( string virus )
{
	ll len = 0 , i = 1 ;
	while( i < sz(virus) )
	{
		if( virus[i] == virus[len] )
			lps[i++] = ++len ;
		else if(len)
			len = lps[len-1] ;
		else
			lps[i++] = 0 ;
	}
}
void solve()
{
	memset(dp,-1,sizeof(dp));
	memset(prv,-1,sizeof(prv));
	memset(lps,0,sizeof(lps));
    string a , b , virus ;
    cin >> a >> b >> virus ;
    compute_lps(virus);
    dp[0][0][0] = 0 ;
    ll n = sz(a) , m = sz(b) , virLen = sz(virus) ;
    rep( i , 0 , n + 1 )
    {
		rep( j , 0 , m + 1 )
		{
			rep( k , 0 , virLen )
			{
				if( dp[i][j][k] >= 0 )
				{
					//cout<<dp[i][j][k] << '\n' ;
					ll cur_best = dp[i][j][k] ;
					if( i + 1 <= n )
					{
						if( dp[i+1][j][k] < cur_best )
						{
							dp[i+1][j][k] = cur_best ;
							prv[i+1][j][k] = 1 ;
						}
					}
					if( j + 1 <= m )
					{
						if( dp[i][j+1][k] < cur_best )
						{
							dp[i][j+1][k] = cur_best;
							prv[i][j+1][k] = 2 ;
						}
					}
					if( i + 1 <= n and j + 1 <= m and a[i] == b[j] )
					{
						ll nv = k ;
						char ch = a[i] ;
						while(true)
						{
							if( virus[nv] == ch )
							{
								++nv;
								break;
							}
							if( nv == 0 )break;
							nv = lps[nv-1] ;
						}
						if( nv < virLen)
						{
							if( dp[i+1][j+1][nv] < cur_best + 1)
							{
								dp[i+1][j+1][nv] = cur_best + 1 ;
								prv[i+1][j+1][nv] = 3 + k ;
							}
						}
					}
				}
			}
		}
	}
	ll cv = 0 ;
	rep( i , 1 , virLen )
	{
		if( dp[n][m][cv] < dp[n][m][i] )
			cv = i ;
	}
	string ans = "" ;
	if( dp[n][m][cv] == 0 )
		cout << 0 ;
	else
	{
		//cout<<dp[n][m][cv]<<"\n";
		ll p1 = n , p2 = m ;
		while( p1 > 0 and p2 > 0 )
		{
			if( prv[p1][p2][cv] == 1 )
			{
				p1--;
				continue;
			}
			if( prv[p1][p2][cv] == 2 )
			{
				p2--;
				continue;
			}
			cv = prv[p1][p2][cv] - 3 ;
			p1--;
			p2--;
			ans = a[p1] + ans ;
		}
		cout << ans ;
	}
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //cin>>t;
    while(t--){
        solve();
    }
    return 0 ;
}
