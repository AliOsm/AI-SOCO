// g++ -std=c++14 -O2 -Wall -Wextra a.cpp
//In The Name Of God :
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
using namespace std ;
using namespace __gnu_pbds;
#define X first 
#define Y second
#define int  long long
typedef long long ll ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
#define size(x) ((int)((x).size()))
typedef pair < int , int > pii ; 
typedef pair < pii , int > pii_i ;
typedef pair < int , pii > pi_ii ;
typedef pair < pii , pii > pii_ii ;
#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%
const int maxL = 20 ;
const int inf = 1e9+100 ;
typedef long long ll ;
int mod = 10007 ;
//ll mod1 = 1e9+7 ;
//int inf = 1e18+100 ;
typedef long double ld ;
const int maxn = 1e6+10 ;
const int maxk = 210 ;
const int baze = 330 ;
set < long > st ;
long d [ maxn ] ;
long ar [ maxn ] ;
int fen [ maxn ] ;
long n , q ;
long l , r , type ;

void add ( int pos , int val ) 
{
  for ( pos ++ ; pos <= n ; pos += (pos&(-pos)) )
    fen [ pos ] += val ; 
}

int get ( int pos )
{
  int ret = 0 ;
  for ( pos ++ ; pos ; pos -= (pos&(-pos)) )
    ret += fen [ pos ] ;
  return ret ;
} 
int dp [ maxn ] ;

int32_t main ( )
{  
  for ( int i = 1 ; i < maxn ; i ++ )
    for ( int j = i ; j < maxn ; j += i )
      d [ j ] ++ ;
  long temp = 0 ;
  temp = scanf ("%d%d" , &n , &q ) ;
  for ( int i = 0 ; i < n ; i ++ )
    {
      temp = scanf ( "%d" , ar + i ) ;
      add ( i , ar [ i ] ) ;
      if ( ar [ i ] > 2 )
	st . insert ( i ) ; 
    }
  vector < long > hlp ;
  while ( q -- )
    {
      temp = scanf ( "%d%d%d" , &type , &l , &r ) ;
      l--;
      if ( type == 1 )
	{
	  auto it = st . lower_bound ( l ) ;
	  while ( 1 )
	    {
	      if ( it == st . end ( ) || *it >= r )
		break ;
	      else
		{
		  hlp . push_back ( *it ) ;
		  it ++ ;
		  if ( d [ ar [ hlp . back ( ) ] ] <= 2 )
		    st . erase ( hlp.back() ) ;
		}
	    }
	  while ( size ( hlp ) )
	    {
	      int i = hlp . back ( ) ;
	      add ( i , d[ar[i]]-ar[i] ) ;
	      ar [ i ] = d [ ar [ i ] ] ;
	      hlp . pop_back ( ) ;
	    } 
	}
      else
	if ( l == 0 )
	  printf ("%lld\n" , get ( r-1 ) ) ;
	else 
	  printf ( "%lld\n" , get ( r-1 ) - get ( l-1 ) ) ;
    } 
}
