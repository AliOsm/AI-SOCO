#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef complex<double> point;
#define F first
#define S second

int dp[255][255][255];

int main()
{
	#ifdef DGC
		freopen("a.txt", "r", stdin);
		//freopen("b.txt", "w", stdout);
	#endif

	ios_base::sync_with_stdio(0), cin.tie(0);

	int n, q;
	string s;
	cin >> n >> q >> s;

	vector<vector<int>> nxt(n+1, vector<int>(26, n));
	for (int i = n-1; i >= 0; --i)
	{
		nxt[i][s[i]-'a'] = i;
		for (int j = 0; j < 26; ++j)
			nxt[i][j] = min(nxt[i][j], nxt[i+1][j]);
	}

	memset(dp, 63, sizeof dp);
	const int inf = dp[0][0][0];
	dp[0][0][0] = -1;

	char op, x;
	vector<int> pos(3);
	vector<string> w(3);
	for (int p; q--; )
	{
		cin >> op >> p;
		--p;
		if (op == '+')
		{
			cin >> x;
			w[p].push_back(x);
			++pos[p];

			for (int i = (p==0)*(pos[0]-1); i <= pos[0]; ++i)
				for (int j = (p==1)*(pos[1]-1); j <= pos[1]; ++j)
					for (int k = (p==2)*(pos[2]-1); k <= pos[2]; ++k)
						if (dp[i][j][k] != inf)
						{
							if (i < pos[0])
							{
								int nx = nxt[ dp[i][j][k]+1 ][ w[0][i]-'a' ];
								if (nx < n)
									dp[i+1][j][k] = min(dp[i+1][j][k], nx);
							}

							if (j < pos[1])
							{
								int nx = nxt[ dp[i][j][k]+1 ][ w[1][j]-'a' ];
								if (nx < n)
									dp[i][j+1][k] = min(dp[i][j+1][k], nx);
							}

							if (k < pos[2])
							{
								int nx = nxt[ dp[i][j][k]+1 ][ w[2][k]-'a' ];
								if (nx < n)
									dp[i][j][k+1] = min(dp[i][j][k+1], nx);
							}
						}
		}
		else
		{
			w[p].pop_back();

			for (int i = (p==0)*(pos[0]); i <= pos[0]; ++i)
				for (int j = (p==1)*(pos[1]); j <= pos[1]; ++j)
					for (int k = (p==2)*(pos[2]); k <= pos[2]; ++k)
						dp[i][j][k] = inf;

			--pos[p];
		}

		if (dp[pos[0]][pos[1]][pos[2]] < n)
			cout << "YES\n";
		else
			cout << "NO\n";
	}

	return 0;
}