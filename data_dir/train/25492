#include <cstdio>
#include <string>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
using namespace std;
#define pii pair<int,  int>
#define VI vector<int>
#define pb push_back
#define x first
#define y second
#define mp make_pair
int m;
inline void rotate(int &x, int &y, int a, int b) {
	int dx = x - a;
	int dy = y - b;
	int nx = a - dy;
	int ny = b + dx;
	x = nx;
	y = ny;
}
inline int dist(int x1, int y1, int x2, int y2) {
	return ((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}
inline bool is_square(int x1, int y1,
					  int x2, int y2,
					  int x3, int y3,
					  int x4, int y4) {
	int d1 = dist(x1, y1, x2, y2);
	if (!d1) return 0;
	int d2 = dist(x2, y2, x3, y3);
	if (d2 != d1) return 0;
	int d3 = dist(x3, y3, x4, y4);
	if (d3 != d1) return 0;
	int d4 = dist(x4, y4, x1, y1);
	if (d4 != d1) return 0;
	int d13 = dist(x1, y1, x3, y3);
	if (d13 != 2 * d1) return 0;
	int d24 = dist(x2, y2, x4, y4);
	if (d24 != 2 * d1) return 0;
	return 1;
}
int main() {
	cin >> m;
	while(m--) {
		int x[4], y[4], a[4], b[4];
		for(int i = 0; i < 4; ++i) {
			cin >> x[i] >> y[i] >> a[i] >> b[i];
		}
		int best = 1e9;
		for(int i = 0; i < 4; ++i) {
			for(int j = 0; j < 4; ++j) {
				for(int k = 0; k < 4; ++k) {
					for(int l = 0; l < 4; ++l) {
						int cur = i + j + k + l;
						if (cur < best) {
							VI perm(0);
							for(int t = 0; t < 4; ++t) {
								perm.pb(t);
							}
							do {
								if (is_square(x[perm[0]], y[perm[0]],
											  x[perm[1]], y[perm[1]],
											  x[perm[2]], y[perm[2]],
											  x[perm[3]], y[perm[3]])) {
									best = cur;
									break;
								}
							} while(next_permutation(perm.begin(), perm.end()));
						}
						rotate(x[3], y[3], a[3], b[3]);
					}
					rotate(x[2], y[2], a[2], b[2]);
				}
				rotate(x[1], y[1], a[1], b[1]);
			}
			rotate(x[0], y[0], a[0], b[0]);
		}
		if (best > 20) best = -1;
		cout << best << endl;
	}
}
