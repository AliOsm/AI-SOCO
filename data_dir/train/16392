#include <bits/stdc++.h>
#define F first
#define S second
using namespace std;

const int N=200005;
const int M=450;

long long n,I,Tries,G[2*N];
pair < int , int > T[2*N][27];

long long ANS;

vector < string > H,L; 
vector < long long > V1,V2;

string S;

bool D[M+5][N];

void Z(string s,int x) {
	int z[2*N];
	for (int i=0; i<s.size(); i++) z[i]=0;
	for (int i=0; i<S.size(); i++) D[x][i]=0;
	
	for (int i=1,l=0,r=0; i<s.size(); i++) {
		if (i<=r) z[i]=min(r-i+1,z[i-l]);
		while (i+z[i]<s.size() && s[z[i]]==s[i+z[i]]) ++z[i];
		if (i+z[i]-1>r) l=i,r=i+z[i]-1;
 	}

	for (int i=0; i<S.size(); i++) 
		if (z[H[x].size()+1+i]>=H[x].size()) D[x][i]=1;
}

void Upd (int x,int len,int idx,int type)  {
	if (len==L[idx].size()) {
		if (type) G[x]++;
			 else G[x]--;
		return ;
	}
	
	int t=L[idx][len]-'a';
	if (T[x][t].S!=I) T[x][t].F=++Tries,T[x][t].S=I;
	Upd(T[x][t].F,len+1,idx,type);
}

long long Get(int x,int idx,int F) {
	if (idx==F) return G[x];
	int t=S[idx]-'a';
	if (T[x][t].S!=I) return G[x];
	return Get(T[x][t].F,idx+1,F)+G[x];
}

vector < long long > Solve()  {
	vector < long long > v;
	
	for (int i=0; i<H.size(); i++) {
		string s=H[i]; s+='#'; s+=S;
		Z(s,i);
	}
	
	Tries=1,I++;
	
	for (int i=0; i<L.size(); i++) 
		Upd(1,0,i,1);

	for (int i=1; i<S.size(); i++) {
		int res=0;
		for (int j=0; j<H.size(); j++) res+=D[j][i];
		res+=Get(1,i,min(i+M,(int)S.size()));
		v.push_back(res);
	}
	
	for (int i=0; i<L.size(); i++) 
		Upd(1,0,i,0);
	
	return v;
}

main () {
	cin>>S;
	cin>>n;
	
	for (int i=1; i<=n; i++) {
		string s;
		cin>>s;
		if (s.size()>M) H.push_back(s);		
				   else L.push_back(s);
	}
	
	V1=Solve();
	
	reverse(S.begin(),S.end());
	
	for (int i=0; i<H.size(); i++)
		reverse(H[i].begin(),H[i].end());
	
	for (int i=0; i<L.size(); i++)
		reverse(L[i].begin(),L[i].end());
			
	V2=Solve();
	
	reverse(V2.begin(),V2.end());
	
	for (int i=0; i<V1.size(); i++) 
		ANS+=V1[i]*V2[i];

	cout<<ANS<<endl;
}