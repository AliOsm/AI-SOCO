#pragma GCC optimize ("Ofast")
#include "bits/stdc++.h"
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
using namespace __gnu_pbds;
using namespace std;
typedef long long int ll;
#define int long long int
#define pb push_back
#define fi first
#define se second
#define deb cerr << "Line no." << __LINE__
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
const int mod = 987654323;
const int mod1 = 998244353;
typedef double f80;
#ifndef LOCAL
#define endl '\n'
#endif

template<typename T>
using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
    uniform_int_distribution<int> uid(l, r);
    return uid(rng);
}
int pwr(int a,int b,int mod){
    int ans = 1;
    while(b){
        if(b & 1) ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}
string s;
int n, q;
const int N = 2e5 + 5;
int p[N];
char ch[N];
int ans[N];
ordered_set<int> pos[3];
string t;
int gg(char ch){
    if(ch == 'R') return 0;
    if(ch == 'S') return 1;
    if(ch == 'P') return 2;
}
int check(int l,int r,vector<pii> &lol){
    if(l > r) return 0;
    bool b1 = 0, b2 = 0, b3 = 0, b4 = 0;
    for(pii &x : lol){
        if(x.fi < l){
            if(x.se == 1) b1 = 1;
            if(x.se == 2) b2 = 1;
        }
        if(x.fi > r){
            if(x.se == 1) b3 = 1;
            if(x.se == 2) b4 = 1;
        }
    }
    if(!b1 && b2) return 0;
    if(!b3 && b4) return 0;
    return pos[0].order_of_key(r + 1) - pos[0].order_of_key(l);
}
int getval(){
    int val = 0;
    if(pos[2].empty()){
        val = sz(pos[0]);
    }
    else if(!pos[1].empty()){
        vector<pii> lol;
        lol.pb({*pos[1].begin(), 1});
        lol.pb({*pos[1].rbegin(), 1});
        lol.pb({*pos[2].begin(), 2});
        lol.pb({*pos[2].rbegin(), 2});
        sort(all(lol));
        unique(all(lol));
        val += check(0, lol[0].fi - 1, lol);
        fr(j, 1, sz(lol) - 1){
            val += check(lol[j - 1].fi + 1, lol[j].fi - 1, lol);
        }
        val += check(lol.back().fi + 1, n - 1, lol);
    }
    return val;
}
void go(){
    fr(i, 0, 2) pos[i].clear();
    t = s;
    fr(i, 0, n - 1){
        pos[gg(t[i])].insert(i);
    }
    ans[0] += getval();
    fr(i, 1, q){
        pos[gg(t[p[i]])].erase(p[i]);
        t[p[i]] = ch[i];
        pos[gg(t[p[i]])].insert(p[i]);
        ans[i] += getval();
    }
}
void solve(){
    cin >> n >> q;
    cin >> s;
    fr(i, 1, q){
        cin >> p[i] >> ch[i];
        p[i]--;
    }
    go();
    fr(i, 0, n - 1){
        if(s[i] == 'R') s[i] = 'S';
        else if(s[i] == 'S') s[i] = 'P';
        else if(s[i] == 'P') s[i] = 'R';
    }
    fr(i, 1, q){
        if(ch[i] == 'R') ch[i] = 'S';
        else if(ch[i] == 'S') ch[i] = 'P';
        else if(ch[i] == 'P') ch[i] = 'R';
    }
    go();
    fr(i, 0, n - 1){
        if(s[i] == 'S') s[i] = 'P';
        else if(s[i] == 'P') s[i] = 'R';
        else if(s[i] == 'R') s[i] = 'S';
    }
    fr(i, 1, q){
        if(ch[i] == 'S') ch[i] = 'P';
        else if(ch[i] == 'P') ch[i] = 'R';
        else if(ch[i] == 'R') ch[i] = 'S';
    }
    go();
    fr(i, 0, q){
        cout << ans[i] << endl;
    }
}
signed main(){
    IO;
    #ifdef LOCAL
        freopen("inp.txt","r", stdin);
        // freopen("out.txt", "w", stdout);
    #endif
    clock_t clk = clock();
    int t = 1;
    // cin >> t;
    fr(tt, 1, t){
        solve();
    }
    cerr << endl << setprecision(10) << fixed << (double)(clock() - clk) / CLOCKS_PER_SEC;
    return 0;
}