#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <string>
#include <math.h>
#include <stdlib.h>
#include <algorithm>
#include<time.h>
using namespace std;
typedef long long ll;
const int N = 10000;
int n, a[101];
int dp[101][N + 1];
bool vis[101];
int call(int v, int rem){
	if (!rem)
		return v;
	if (dp[v][rem] != -1)
		return dp[v][rem];
	return dp[v][rem] = call(a[v], rem - 1);
}
bool can(int t){
	for (int i = 1; i <= n; ++i){
		int x = call(i, t);
		int y = call(x, t);
		if (y != i)
			return 0;
	}
	return 1;
}
ll gcd(ll a, ll b){
	if (!b)
		return a;
	return gcd(b, a % b);
}
ll lcm(ll a, ll b){
	return a / gcd(a, b)*b;
}
vector<ll>s;
ll res = 1;
int call2(int v, int rem){
	vis[v] = 1;
	while (rem){
		v = a[v];
		vis[v] = 1;
		--rem;
	}
	return v;
}
int main() {
	cin >> n;
	memset(dp, -1, sizeof(dp));
	for (int i = 1; i <= n; ++i)
		cin >> a[i];
	for (int i = 1; i <= N; ++i){
		if (can(i)){
			cout << i << endl;
			return 0;
		}
	}
	for (int i = 1; i <= n; ++i){
		int R = -1;
		if (vis[i])
			continue;
		for (int t = 1; t <= 101; ++t){
			if (call2(i, t) == i){
				R = t;
				break;
			}
		}
		if (R == -1){
			cout << -1;
			return 0;
		}
		if (R % 2 == 0)
			R /= 2;
		s.push_back(R);
	}
	for (int i = 0; i < s.size(); ++i)
		res = lcm(res, s[i]);
	cout << res << endl;
	return 0;
}