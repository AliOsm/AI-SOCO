#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <fstream>
#include <list>
#include <set>
#include <climits>
#include <map>
#include <queue>
#include <stack>
#include <complex>
#include <cmath>
#include <sstream>
#include <deque>
#include <utility>
#include <bitset>
#include <numeric>

using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define REV(i,a,b) for(int i=(a);i>=(b);i--)
#define mp make_pair
#define pb push_back
#define oo (1 << 30)
#define sz(v) (int)v.size()
#define all(c) (c).begin(),(c).end()
#define rall(c) (c).rbegin(),(c).rend()
#define mem(s,v) memset(s,v,sizeof(s))
#define MAX 1005
#define iter(it,s) for(__typeof(s.begin())it=s.begin();it!=s.end();it++)

typedef long long ll;
typedef complex<double> point;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<pi> vpi;
#define EPS 1e-9
#define vec(a,b) ((b)-(a))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define X real()
#define Y imag()

int dx[] = { 0, 0, 1, -1, 1, 1, -1, -1, 0 };
int dy[] = { 1, -1, 0, 0, -1, 1, -1, 1, 0 };

int main() {
#ifndef ONLINE_JUDGE
	freopen("test.in", "rt", stdin);
#endif
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	vector<vi> v(n);
	vi cnt(n);
	FOR (i , 0 , n)
		cin >> cnt[i];
	set<int> s;
	map<int, pi> idx;
	FOR (i , 0 , n) {
		FOR (j , 0 , cnt[i]) {
			int x;
			cin >> x;
			v[i].pb(x);
			idx[x] = mp(i + 1, j + 1);
			s.insert(x);
		}
	}
	vi nums(all(s));
	vector<vi> fin(n);
	int c = 0;
	FOR (i , 0 , n)
		FOR (j , 0 , cnt[i])
			fin[i].pb(nums[c++]);
	vector<pair<pi, pi> > res;
	FOR (i , 0 , n) {
		FOR (j , 0 , cnt[i]) {
			int a = idx[fin[i][j]].first, b = idx[fin[i][j]].second;
			if (fin[i][j] != v[i][j]) {
				res.pb(mp(mp(i + 1, j + 1), mp(a, b)));
				swap(idx[fin[i][j]], idx[v[i][j]]);
				swap(v[i][j], v[a - 1][b - 1]);
			}
		}
	}
	cout << sz(res) << endl;
	FOR (i , 0 , sz(res))
		cout << res[i].first.first << " " << res[i].first.second << " "
				<< res[i].second.first << " " << res[i].second.second << endl;
	return 0;
}
