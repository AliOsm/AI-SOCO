/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>


#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define int long long

using namespace std;

class D2RGBSubstringHardVersion {
public:
    int n, k;
    string s;

    int get(string o) {
        int mismatch = 0, res = k;
        for (int i = 0; i < n; ++i) {
            if (s[i] != o[i]) ++mismatch;
            if (i < k - 1) continue;
            res = min(res, mismatch);
            if (s[i - k + 1] != o[i - k + 1]) --mismatch;
        }
        return res;
    }

    void solve(std::istream &in, std::ostream &out) {
        in >> n >> k;
        in >> s;
        string rgb = "";
        while (rgb.size() < n + 10) rgb += "RGB";
        int res = k;
        for (int i = 0; i < 3; ++i) {
            res = min(res, get(rgb.substr(i, n)));
        }
        out << res << '\n';
    }
};


int32_t main() {
    D2RGBSubstringHardVersion solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    int n;
    in >> n;
    for (int i = 0; i < n; ++i) {
        solver.solve(in, out);
    }

    return 0;
}
