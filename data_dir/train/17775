#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
template <typename T> inline T sqr(T t) {return t*t;}
#define pb push_back
#define mp make_pair
#define endl "\n"

inline void files(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    #ifdef _WIN32
        return;
    #endif // _WIN32
    //freopen("lca.in", "r", stdin);//freopen("output.out", "w", stdout);
}

int n, x;
struct str{
    int l, r, cost;
} a[200100];

ll ans = 1e18;

vector <str> vec[200100];
vector <int> dp[200100];

bool cmp1(str f, str s){
    return (f.r < s.r);
}

int main(){
    files();
    cin >> n >> x;
    for (int i = 1; i <= n; i++){
        cin >> a[i].l >> a[i].r >> a[i].cost;
        vec[a[i].r-a[i].l+1].pb(a[i]);
    }
    for (int i = 1; i <= 200000; i++){
        sort(vec[i].begin(), vec[i].end(), cmp1);
        for (int j = 0; j < vec[i].size(); j++){
            dp[i].pb(vec[i][j].cost);
            if (j > 0)
                dp[i][j] = min(dp[i][j], dp[i][j-1]);
        }
    }
    for (int i = 1; i <= 200000; i++){
        if (x-i<=0)
            continue;
        int cur = x-i;
        if (vec[cur].size()==0)
            continue;
        for (int j = 0; j < vec[i].size(); j++){
            int l = 0, r = vec[cur].size()-1;
            while(r-l>1){
                int mid = (l+r)>>1;
                if (vec[cur][mid].r < vec[i][j].l)
                    l = mid; else
                    r = mid;
            }
            int l1;
            if (vec[cur][r].r < vec[i][j].l)
                l1 = r; else
            if (vec[cur][l].r < vec[i][j].l)
                l1 = l; else
                continue;
            ans = min(ans, (ll)dp[cur][l1]+vec[i][j].cost);
        }
    }
    if (ans == 1e18)
        ans = -1;
    cout << ans;
}
