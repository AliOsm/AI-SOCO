#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
//#define pii pair<ll, ll>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-10
//#define endl "\n"
#define pdd pair<double, double>
//#define mp make_pair

const int INF = 1000*1000*1000;
const int MAXN = 101*1000;

struct edge {
	int me, next, min, upward;
	bool dir, done;
};

int n;
vector<edge> adj[MAXN];

void calculate(edge &x) {
	if (x.done) return;
	x.done = true;
	x.upward = 0;
	x.min = 0;
	FOREACH(it, adj[x.next]) if (it->next != x.me) {
		calculate(*it);
		x.upward += it->upward;
		if (it->dir == false) x.upward++;
		int new_min = it->min + (it->dir?1:-1);
		if (new_min < x.min) x.min = new_min;
	}
}

int main() {
	cin >> n;
	FOR(i, 1, n) {
		int a, b;
		cin >> a >> b;
		a--; b--;
		edge x;
		x.me = a;
		x.next = b;
		x.dir = true;
		x.done = false;
		adj[a].pb(x);
		edge y;
		y.me = b;
		y.next = a;
		y.dir = false;
		y.done = false;
		adj[b].pb(y);
	}
	int res = INF;
	FOR(mid, 0, n) {
		int sum = 0;
		vector<int> tmp;
		FOREACH(it, adj[mid]) {
			calculate(*it);
			tmp.pb(it->min + (it->dir?1:-1));
			sum += it->upward + (it->dir?0:1);
		}
		sort(all(tmp));
		if (Size(adj[mid]) > 1) sum = min(sum, sum+tmp[0]+tmp[1]);
		res = min(res, sum);
	}
	cout << res << endl;
	return 0;
}

