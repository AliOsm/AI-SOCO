#include <iostream>
#include <bits/stdc++.h>
 
using namespace std;
const int Inf = 100100;
int b[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53};
int n,a[110],dp[110][(1 << 16) + 5],GCD[70];
 
int Rec(int i, int Mask)
{
    if(i == n)  return 0;
 
    if(dp[i][Mask] != -1)  return dp[i][Mask];
 
    int Res = Inf;
    for(int j = 1;j<=60;j++)
    {
        int n1 = __builtin_popcount(Mask);
        int n2 = __builtin_popcount(GCD[j]);
        int ResMask = Mask | GCD[j];
        if(__builtin_popcount(ResMask) == (n1 + n2))  Res = min(Res, abs(a[i] - j) + Rec(i + 1, Mask | GCD[j]));
    }
    return dp[i][Mask] = Res;
}
 
 
void path(int i, int Mask)
{
 
    if(i == n)  exit(0);
 
    int optimal = Rec(i, Mask);
    for(int j = 1;j<=60;j++)
    {
        int n1 = __builtin_popcount(Mask);
        int n2 = __builtin_popcount(GCD[j]);
        int ResMask = Mask | GCD[j];
        if(__builtin_popcount(ResMask) == (n1 + n2) && abs(a[i] - j) + Rec(i + 1, Mask | GCD[j]) == optimal)  cout << j << " " , path(i + 1 ,Mask | GCD[j]);
    }
}
 
int main()
{
    memset(dp, -1, sizeof(dp));
    for(int i=1; i<=60; i++)
    {
        int Mask = 0;
        for(int j=0; j<16; j++)
        {
            if(i % b[j] == 0)  Mask+=(1 << j);
        }
        GCD[i] = Mask;
    }
    cin >> n;
    for(int i=0; i<n; i++)  cin >> a[i];
    path(0, 0);
    return 0;
}