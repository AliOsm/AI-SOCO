#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <list>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iterator>
#include <set>
#include <functional>
#include <iomanip>

using namespace std;

#define DT int
#define forn(i,n)for(i=0;i<n;i++)
#define forc(i,c,n)for(i=c;i<=n;i++)


int main() {
	ifstream fin("Text.txt");
	int i=0, j, q;
	DT h,n,w,a, b, c, d, m,x,y,z, k, s = 0, t = 1,ans=0;
	string st;
	cin >> n;
	vector<pair<DT, DT> > vc(n);
	vector<DT>comps(n+1),elems(n+1),visited(n+1);
	vector<list<DT> > nb(n + 1, list<DT>()),compsel(n+1,list<DT>());
	forn(i, n) {
		//cin >> a;
		scanf("%d", &a);
		elems[i + 1] = a;
		vc[i] = make_pair(a, i+1);
	}
	sort(vc.begin(), vc.end());
	forn(i, n) {
		nb[i + 1].push_back(vc[i].second);
		nb[vc[i].second].push_back(i+1);
	}
	forn(i, n) {
		if (!visited[i + 1]) {
			s++;
			queue<DT>tr;
			tr.push(i + 1);
			while (!tr.empty()) {
				w = tr.front();
				comps[w] = s;
				visited[w] = 1;
				tr.pop();
				list<DT>::iterator it = nb[w].begin();
				while (it != nb[w].end()) {
					if (!visited[*it]) {
						visited[*it] = 1;
						tr.push(*it);
					}
					it++;
				}
			}
		}
	}
	cout << s << endl;
	forn(i, n) {
		compsel[comps[i + 1]].push_back(i + 1);
	}
	forn(i, n) {
		if (!compsel[i+1].empty()) {
			cout << compsel[i + 1].size() << " ";
			list<DT>::iterator it = compsel[i + 1].begin();
			while (it != compsel[i + 1].end()) {
				cout << *it << " ";
				it++;
			}
			cout << endl;
		}
	}
	return 0;
}