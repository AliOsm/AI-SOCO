#include <iostream>
#include <stdio.h>
#include <bits/stdc++.h>
#include <math.h>
#include <string>
#include <sstream>
#define ll long long
#define F first
#define S second
#define pb push_back
#define ld long double
#define pll pair<long long,long long>
#define pld pair<long double,long double>
using namespace std;
ll mod=10e9+7;
ll gcd (ll a,ll b)
{
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}
ll modularExp(ll x,ll n,ll mod)
{
    ll result=1;
    while(n>0)
    {
        if(n%2==1)
            result=(result*x)%mod;
        x=((x%mod)*(x%mod))%mod;
        n=n/2;
    }
    return (result)%mod;
}
bool isPrime(ll n)
{
    for(ll i=2;i*i<=n;i++)
        if(n%i==0)
            return false;
    return true;
}
vector<ll> par(100005,0),sz(100005,1),val(100005,-1),visited(100005,0);
vector<pll> v[100005];
void dfs(ll node,ll pnode,ll value)
{
    visited[node]=1;
    val[node]=value;
    ll i;
    for(i=0;i<v[node].size();i++)
    {
        if(v[node][i].F!=pnode)
            dfs(v[node][i].F,node,(value^v[node][i].S));
    }
}
ll findr(ll x)
{
    ll y=x;
    while(x!=par[x])
        x=par[x];
    par[y]=x;
    return x;
}

ll un(ll a,ll b)
{
    ll p=findr(a);
    ll q=findr(b);
    if(p==q)
        return 0;
    ll sz1=sz[p];
    ll sz2=sz[q];
    if(sz1> sz2)
    {
        sz[p]+=sz2;
        par[q]=p;
    }
    else 
    {
        sz[q]+=sz1;
        par[p]=q;
    }
    return 1;
}

int main()
{
    ll n,m,q;
    cin>>n>>m>>q;
    ll i,j;
    map<string,ll> mp;
    vector<ll> valid(m+1);
    vector< pair<pll,pll> > sus;
    for(i=1;i<=n;i++)
    {
        string s;
        cin>>s;
        mp[s]=i;
    }
    for(i=1;i<=n;i++)
        par[i]=i;
    for(i=1;i<=m;i++)
    {
        ll t;
        string p,q;
        cin>>t>>p>>q;
        ll x=mp[p];
        ll y=mp[q];
        if(un(x,y))
        {
            v[x].pb(make_pair(y,t-1));
            v[y].pb(make_pair(x,t-1));
            valid[i]=1;
        }
        else 
        {
            valid[i]=0;
            sus.pb(make_pair(make_pair(x,y),make_pair(i,t-1)));
        }
    }
    
    for(i=1;i<=n;i++)
        if(!visited[i])
            dfs(i,i,0);
    for(i=0;i<sus.size();i++)
    {
        ll x=sus[i].F.F;
        ll y=sus[i].F.S;
        ll idx=sus[i].S.F;
        ll tval=sus[i].S.S;
        if(val[x]^val[y]==tval)
            valid[idx]=1;
        else 
            valid[idx]=0;
    }
    for(i=1;i<=m;i++)
        if(valid[i])
            cout<<"YES\n";
        else
            cout<<"NO\n";
    while(q--)
    {
        string p,q;
        cin>>p>>q;
        ll x=mp[p],y=mp[q];
        if(findr(x)!=findr(y))
            cout<<"3\n";
        else if(val[x]^val[y])
            cout<<"2\n";
        else 
            cout<<"1\n";
            
        
        
    }
}
