#include <bits/stdc++.h>
using namespace std;

#define TRACE(x) x
#define WATCH(x) TRACE(cout << #x" = " << x << endl)
#define WATCHR(a, b) TRACE(for (auto it=a; it!=b;) cout << *(it++) << " "; cout << endl)
#define WATCHC(V) TRACE({cout << #V" = "; WATCHR(V.begin(), V.end());})

#define all(x) (x).begin(), (x).end()

using ll = long long;
using vi = vector<int>;
using vvi = vector<vi>;
using vll = vector<ll>;
using vvll = vector<vll>;
using vb = vector<bool>;
using vs = vector<string>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);

    int N;
    cin >> N;

    vll len(N);
    for (int i = 0; i < N; i++) {
        cin >> len[i];
        len[i] *= 2;
    }

    string ter;
    cin >> ter;

    ll flyG = 0, flyW = 0, time = 0;
    bool seenG = false, seenW = false;

    for (int i = 0; i < N; i++) {
        if (ter[i] == 'W') {
            flyW += len[i] / 2;
            time += (1 + 3) / 2 * len[i];
            seenW = true;
        } else if (ter[i] == 'G') {
            if (seenW) {
                // convert any flyW
                ll convW = min(flyW, len[i] / 2);
                flyW -= convW;
                time += (3 - 1) * convW + 2 * convW;
                len[i] -= 2 * convW;
                flyG += 2 * convW;
            }

            flyG += len[i] / 2;
            time += (1 + 5) / 2 * len[i];
            seenG = true;
        } else {
            // first convert flyW
            ll convW = min(flyW, len[i] / 2);
            flyW -= convW;
            time += (3 - 1) * convW + 2 * convW;
            len[i] -= 2 * convW;

            // now convert flyG
            ll convG = min(flyG, len[i] / 2);
            flyG -= convG;
            time += (5 - 1) * convG + 2 * convG;
            len[i] -= 2 * convG;

            // generate additional stamina
            ll cost = seenW ? 3 : 5;
            time += (cost + 1) * len[i];
        }
    }

    cout << time / 2 << endl;
    return 0;
}

