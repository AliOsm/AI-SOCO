#include <bits/stdc++.h>

using namespace std;

#define int long long

int n;
int x[100010], y[100010];
int ax, ay, bx, by, tx, ty;

double getdist(int x1, int y1, int x2, int y2){
    return sqrt ((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}

struct Cmp1{
    inline bool operator()(const int &lhs, const int &rhs){
        double d1 = getdist(ax, ay, x[lhs], y[lhs]) - getdist(x[lhs], y[lhs], tx, ty);
        double d2 = getdist(ax, ay, x[rhs], y[rhs]) - getdist(x[rhs], y[rhs], tx, ty);
        if(d1 != d2) return d1 < d2;
        return lhs < rhs;
    }
};
set<int, Cmp1> q1;
struct Cmp2{
    inline bool operator()(const int &lhs, const int &rhs){
        double d1 = getdist(bx, by, x[lhs], y[lhs]) - getdist(x[lhs], y[lhs], tx, ty);
        double d2 = getdist(bx, by, x[rhs], y[rhs]) - getdist(x[rhs], y[rhs], tx, ty);
        if(d1 != d2) return d1 < d2;
        return lhs < rhs;
    }
};
set<int, Cmp2> q2;

main()
{
    ios_base::sync_with_stdio(0);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    double sum = 0;
    cin >> ax >> ay >> bx >> by >> tx >> ty;
    cin >> n;
    for(int i = 0; i < n; i++){
        cin >> x[i] >> y[i];
        sum += getdist(tx, ty, x[i], y[i]) * 2;
        q1.insert(i);
        q2.insert(i);
    }
    double sum1 = 0;
    int v = *q1.begin();
    sum1 += getdist(ax, ay, x[v], y[v]) - getdist(x[v], y[v], tx, ty) + sum;
    double sum2 = 0;
    v = *q2.begin();
    sum2 += getdist(bx, by, x[v], y[v]) - getdist(x[v], y[v], tx, ty) + sum;
    double ans = min(sum1, sum2);
    if(n > 1){
        for(int i = 0; i < n; i++){
            q2.erase(i);
            double cur = getdist(ax, ay, x[i], y[i]) + getdist(x[i], y[i], tx, ty);
            int v = *q2.begin();
            cur += getdist(bx, by, x[v], y[v]) + getdist(x[v], y[v], tx, ty);
            cur += sum - getdist(x[i], y[i], tx, ty) * 2 - getdist(x[v], y[v], tx, ty) * 2;
            ans = min(ans, cur);
            q2.insert(i);
        }
        for(int i = 0; i < n; i++){
            q1.erase(i);
            double cur = getdist(bx, by, x[i], y[i]) + getdist(x[i], y[i], tx, ty);
            int v = *q1.begin();
            cur += getdist(ax, ay, x[v], y[v]) + getdist(x[v], y[v], tx, ty);
            cur += sum - getdist(x[i], y[i], tx, ty) * 2 - getdist(x[v], y[v], tx, ty) * 2;
            ans = min(ans, cur);
            q1.insert(i);
        }
    }
    cout << fixed << setprecision(12) << ans << endl;
}
