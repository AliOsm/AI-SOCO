#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define ins insert
#define mp make_pair
#define fo(i, n1, n, x) for(int i = n1; i <= n; i += x)
#define foo(i, n, n1, x) for(int i = n; i >= n1; i -= x)
#define bit __builtin_popcount
#define md (l + ((r - l) / 2))
#define all(x) x.begin(),x.end()
#define ll long long
#define ld long double
#define eb emplace_back
#define ub upper_bound
#define lb lower_bound
#define ios ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define file(s) if (fopen(s".in", "r")) freopen(s".in", "r", stdin), freopen(s".out", "w", stdout)

using namespace std;

const int N = 1e5 + 11, mod = 1e9 + 7;
const int INF1 = 2e9 + 11;
const ll INF2 = 2e18 + 11;
const int base = 500;
const int P = 31;
const int dx[] = {1, -1, 0, 0, 1, 1, -1, -1};
const int dy[] = {0, 0, 1, -1, 1, -1, 1, -1};
const double EPS = 1e-12;
const double PI = acos(-1.0);

int n, ans, sum, sum2;
pair < int, int > l[N];
multiset < int > st;
main() {
    file("queue");
    ios;
    cin >> n;
    fo(i, 1, n, 1) cin >> l[i].F;
    fo(i, 1, n, 1) cin >> l[i].S, sum += l[i].S;
    sort(l + 1, l + n + 1);
    int ans = 1e9, i = 1;
    while (i <= n) {
        int lft = i, cur = 0;
        while (i < n && l[i].F == l[i + 1].F) cur += l[i++].S;
        cur += l[i].S;
        int right = i;
        int val = 0, ct = right - lft + 1;
        int need = ct - 1;
        for (auto it = st.rbegin(); it != st.rend() && need; ++it) val += *it, --need;
        ans = min(ans, sum - cur - val);
        fo(j, lft, right, 1) st.ins(l[j].S);
        i = right + 1;
    }
    cout << ans;
    return 0;
}
