//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
#define mem(a,v) memset((a), (v), sizeof (a))
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int _i = 0; _i < (n); _i++) ni(a[_i])
#define nal(a, n) for (int _i = 0; _i < (n); _i++) nl(a[_i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pil pair<int, long long>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vil vector<pil>
#define vll vector<pll>
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> oset;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e6 + 5;
const double eps = 1e-9;
int a[MAXN], b[MAXN], deg[MAXN];

int main() {
	int n, m; scanf("%d %d", &n, &m);
	int ka, kb; scanf("%d %d", &ka, &kb);
	if (m <= ka || n <= kb)
		return !printf("No\n");
	printf("Yes\n");
	for (int i = 0; i < ka; i++)
		scanf("%d", a+i), deg[a[i]]++;
	for (int i = ka; i+1 < m; i++)
		a[i] = 1, deg[a[i]]++;
	for (int i = 0; i < kb; i++)
		scanf("%d", b+i), deg[b[i]]++;
	for (int i = kb; i+1 < n; i++)
		b[i] = n+1, deg[b[i]]++;
	priority_queue<int,vector<int>,greater<int>> pq;
	for (int i = 1; i <= n+m; i++)
		if (!deg[i])
			pq.push(i);
	vii ans;
	int l = 0, r = 0;
	for (int i = 0; i < n+m-2; i++) {
		int u = pq.top(); pq.pop();
		if (u <= n) {
			ans.pb(mp(u, b[r]));
			deg[b[r]]--;
			if (deg[b[r]] == 0)
				pq.push(b[r]);
			r++;
		} else {
			ans.pb(mp(u, a[l]));
			deg[a[l]]--;
			if (deg[a[l]] == 0)
				pq.push(a[l]);
			l++;
		}
	}
	l = r = -1;
	for (int i = 1; i <= n; i++)
		if (deg[i] > 0)
			l = i;
	for (int i = n+1; i <= n+m; i++)
		if (deg[i] > 0)
			r = i;
	while (!pq.empty()) {
		int u = pq.top(); pq.pop();
		if (u <= n)
			l = u;
		else
			r = u;
	}
	ans.pb(mp(l, r));
	for (auto it: ans)
		printf("%d %d\n", it.fi, it.se);
	return 0;
}
