#include <bits/stdc++.h>

using namespace std;

#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sqr(a) ((a) * (a))
#define sz(a) int(a.size())
#define all(a) a.begin(), a.end()
#define forn(i, n) for(int i = 0; i < int(n); i++) 
#define fore(i, l, r) for(int i = int(l); i < int(r); i++)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template <class A, class B> ostream& operator << (ostream& out, const pair<A, B> &a) {
	return out << "(" << a.x << ", " << a.y << ")";
}

template <class A> ostream& operator << (ostream& out, const vector<A> &v) {
	out << "[";
	forn(i, sz(v)) {
		if(i) out << ", ";
		out << v[i];
	}
	return out << "]";
}

mt19937 rnd(time(NULL));

const int INF = int(1e9);
const li INF64 = li(1e18);
const int MOD = int(1e9) + 7;
const ld EPS = 1e-9;
const ld PI = acos(-1.0);

const int N = 5000 + 7;

int n, m;
string s;
pt q[1000013];

bool read () {
	static char buf[N];
	if (scanf("%s", buf) != 1)
		return false;
	s = buf;
	n = sz(s);
	scanf("%d", &m);
	forn(i, m){
		scanf("%d%d", &q[i].x, &q[i].y);
		--q[i].x, --q[i].y;
	}
	return true;
}

bool pal[N][N];
int cnt[N][N];

void solve() {
	memset(pal, 0, sizeof(pal));
	memset(cnt, 0, sizeof(cnt));
	forn(i, n) pal[i][i] = true;
	forn(i, n - 1) if (s[i] == s[i + 1]) pal[i][i + 1] = true;
	fore(len, 1, n + 1) forn(l, n){
		if (len > 2)
			pal[l][l + len - 1] = pal[l + 1][l + len - 2] && (s[l] == s[l + len - 1]);
		if (len > 1)
			cnt[l][l + len - 1] = cnt[l][l + len - 2] + cnt[l + 1][l + len - 1] - cnt[l + 1][l + len - 2] + pal[l][l + len - 1];
		else
			cnt[l][l] = 1;
	}
	forn(i, m){
		printf("%d\n", cnt[q[i].x][q[i].y]);
	}
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	
	int tt = clock();
#endif
	
	cerr.precision(15);
	cout.precision(15);
	cerr << fixed;
	cout << fixed;

#ifdef _DEBUG
	while(read()) {	
#else
	if(read()) {
#endif
		solve();
		
#ifdef _DEBUG
	cerr << "TIME = " << clock() - tt << endl;
	tt = clock();
#endif

	}
}