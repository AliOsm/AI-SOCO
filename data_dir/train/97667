#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <stack>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <ctime>
#include <cassert>
#include <complex>
#include <string>
#include <cstring>
#include <chrono>
#include <random>
#include <queue>
#include <bitset>

//#include "rubo.h"
#define MP make_pair
#define PB push_back
#define in int
#define ll long long
#define ull unsigned long long
#define vc vector
#define SQ(j) (j)*(j)
#define ch first
#define range second
//
//#define ld long double
#define dbl  double
#define pll pair<long long,long long>
#define pii pair<int,int>
#define sz(xxx) ((int)(xxx.size()))
#define all(j) j.begin(), j.end()
#define loop(xxx, yyy) for(int xxx = 0; xxx < yyy; xxx++)
//#define printf(fmt, ...) (0)
//#define HOME
//#define y0 ngacaleiebinvoaeu
//#define y1 gnarpipipaigare
#define j1 adsfndnasfafoasp

//#define printf(...) (0)
#define db(x) if(DEBUG) {cout << #x << " = " << x << endl;}
#define dbCont(x) if(DEBUG) {cout << #x << ": "; for(auto shun: x) cout << shun << ' '; cout<<endl;}


using namespace std;

template<class K, class V>
ostream &operator<<(ostream &out, pair<K, V> &elem) {
    out << "{" << elem.first << "," << elem.second << "}";
    return out;
}


int DEBUG = 0;

using namespace std;

const int N = 100 * 1000 + 5;

vc<int> g[N];
int n;

int par[N];
set<int> st;
void dfs(int v, int p, int d=0){
    par[v] = p;

    int c = 0;
    for(int to : g[v]){
        if(to != p){
            c++;
            dfs(to, v, d^1);
        }
    }

    if(c == 0){
        st.insert(d);
    }
}
int leafCnt[N];

int main() {
    cin >> n;
    loop(i,n-1) {
        int u,v;
        cin >> u >> v;
        u--,v--;
        g[u].PB(v);
        g[v].PB(u);
    }

    int root = -1;
    loop(i,n) if(g[i].size() != 1) root = i;

    assert(root != -1);


    dfs(root, -1);
    db(root+1);

    int mx = n-1;
    loop(v,n){
        db(v+1);
        int ls = 0;
        for(int to : g[v]){
            if(to != par[v] && g[to].size() == 1){
                ls++;
            }
        }
        db(max(0, ls-1));
        mx -= max(0, ls-1);
    }


    /////
    int mn;
    if(st.size() == 1){
        mn = 1;
    } else {
        mn = 3;
    }


    cout << mn << ' ' << mx << endl;



    return 0;
}


/*

40
2




 */



