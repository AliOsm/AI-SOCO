#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define MOD 1000000007
ll power(ll a,ll b, ll m=MOD)
{
    ll res=1;
    while(b>0)
    {
        if(b&1)
            res=(res*a)%m;
        a=(a*a)%m;
        b>>=1;
    }
    return res;
}
ll inverse(ll a,ll m=MOD)
{
    return power(a,m-2,m);
}
#define INFl 1e18
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<long long>
#define vvl vector<vl>
#define ii pair<int,int>
#define pll pair<ll,ll>
#define vii vector<ii>
#define F first
#define S second
#define forl(i,n) for(int i=0;i<n;i++)
#define fore(i,n) for(int i=1;i<=n;i++)
#define rforl(i,n)  for(int i=n-1;i>=0;i--)
#define rfore(i,n)  for(int i=n;i>=1;i--)
#define INF 1100000009
#define gcd(a,b) __gcd(a,b)
#define all(x)  x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define print(x)    for(auto it=x.begin();it!=x.end();it++) printf("%d ",*it); printf("\n");
#define printii(x)  for(auto it=x.begin();it!=x.end();it++) cout<<it->F<<' '<<it->S<<'\n'; 
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
string s1,s2,virus;
int LPS[105][26];
string dp[2][105][105];
int findLPS(string x)
{
    int t=virus.length();
    int l=x.length();
    for(int i=min(t,l);i>=1;i--)
    {
        bool pos=true;
        for(int j=0;pos&&j<=i-1;j++)
        {
            if(virus[j]!=x[l-i+j])  pos=false;
        }
        if(pos) return i;
    }
    return 0;
}
void precalc()
{
    int t=virus.length();
    forl(i,t+1)
    forl(j,26)  LPS[i][j]=0;
    LPS[0][virus[0]-'A']=1;
    string s;
    for(int i=1;i<t;i++)
    {
        s+=virus[i-1];
        for(int j=0;j<26;j++)
        {
            s+=(char)(j+'A');
            LPS[i][j]=findLPS(s);
            s.pop_back();
        }
    }
}
string MAX(string a,string b)
{
    if(a.size()>b.size())
        return a;
    else
        return b;
}
int main()
{
    fastio;
    cin>>s1>>s2>>virus;
    int n=s1.length();
    int m=s2.length();
    int t=virus.length();
    precalc();
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            for(int k=0;k<t;k++)
            {
                dp[1][j][k]=MAX(dp[1][j-1][k],dp[0][j][k]);
            }
            if(s1[i-1]!=s2[j-1])    continue;
            int ch=s1[i-1]-'A';
            for(int k=0;k<t;k++)
            {
                int len=LPS[k][ch];
                if(len==t)  continue;
                string temp=dp[0][j-1][k];
                temp+=(char)('A'+ch);
                dp[1][j][len]=MAX(dp[1][j][len],temp);
            }
        }
        for(int j=0;j<=m;j++)
        for(int k=0;k<=t;k++)
        {
            dp[0][j][k]=dp[1][j][k];
            dp[1][j][k]="";
        }
    }
    string res;
    for(int i=0;i<t;i++)
        res=MAX(res,dp[0][m][i]);
    // cout<<res.size()<<endl;
    if(res.size()==0){
        cout<<0<<endl;
        return 0;
    }
    cout<<res<<endl;
}