#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 

#define ll long long

#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) memset(ar, val, sizeof(ar))
#define fill0(ar) fill((ar), 0)
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

ll nxt[100001][26];

string s,t;

void kmp()
{
	ll n = t.length();
	ll pre[n+1];
	pre[0] = 0;
	// cout << "D" << endl;
	fr(i,1,n-1)
	{
		ll curr = pre[i-1];
		while(curr>0 && t[curr]!=t[i])
			curr = pre[curr-1];

		if(t[curr]==t[i])
			curr++;

		pre[i] = curr;
	}

	// cout << "G" << endl;
	fr(i,0,n)
	{
		fr(j,0,25)
		{
			char c = (char)('a'+j);

			ll curr = i;
			if(t[curr]==c)
				nxt[i][j] = curr+1;
			else if(curr!=0)
				nxt[i][j] = nxt[pre[curr-1]][j];
			else
				nxt[i][j] = 0;
		}
	}
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    cin >> s >> t;
    kmp();

    ll n = s.length();
    ll m = t.length();

    ll dp[n+1][m+1];

    fr(i,0,n)
    {
    	fr(j,0,m)
    	{
    		dp[i][j] = -INF;
    	}
    }

    dp[0][0] = 0;

    fr(i,0,n-1)
    {
    	fr(j,0,m)
    	{
    		if(s[i]=='?')
    		{
    			fr(k,0,25)
	    		{
    				ll hee = nxt[j][k];
    				dp[i+1][hee] = max(dp[i+1][hee], dp[i][j]+(hee==m));
	    		}
    		}
    		else
    		{
    			ll hee = nxt[j][s[i]-'a'];
				dp[i+1][hee] = max(dp[i+1][hee], dp[i][j]+(hee==m));
    		}
    	}
    }

    ll ans = -INF;
    rep(i,m+1)
    {
    	ans = max(ans, dp[n][i]);
    }

    cout << ans << endl;
}
