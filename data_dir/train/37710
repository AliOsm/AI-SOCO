#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define ins insert
#define mp make_pair
#define fo(i, n1, n, x) for(int i = n1; i <= n; i += x)
#define foo(i, n, n1, x) for(int i = n; i >= n1; i -= x)
#define bit __builtin_popcount
#define md (l + ((r - l) / 2))
#define all(x) x.begin(),x.end()
#define ll long long
#define ld long double
#define eb emplace_back
#define ub upper_bound
#define lb lower_bound
#define ios ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define file(s) if (fopen(s".in", "r")) freopen(s".in", "r", stdin), freopen(s".out", "w", stdout)

using namespace std;

const int N = 3e5 + 11, mod = 1e9 + 7;
const int MAX = 2e7;
const int INF1 = 2e9 + 11;
const ll INF2 = 2e18 + 11;
const int base = 500;
const int P = 31;
const int dx[] = {1, -1, 0, 0, 1, 1, -1, -1};
const int dy[] = {0, 0, 1, -1, 1, -1, 1, -1};
const double EPS = 1e-12;
const double PI = acos(-1.0);

int n, a[111], ans, dp[111][7];
inline bool can(int x, int y) {
    if (y == 3 || y == 2 && (!x || x == 2) || y == 1 && (!x || x == 1) || !y && !x) return 1;
    return 0;
}
inline bool can2(int x, int y, int i, int j) {
    if (x == y && (x == 1 || x == 2) && j - i == 1) return 0;
    return 1;
}
main() {
    file("longpath");
    ios;
    cin >> n;
    fo(i, 1, n, 1) cin >> a[i];
    fo(i, 1, n, 1) {
        if (i == 1) {
            if (a[i] == 1 || a[i] == 3) dp[i][1] = 1;
            if (a[i] == 2 || a[i] == 3) dp[i][2] = 1;
            continue;
        }
        foo(j, i - 1, 1, 1) {
            dp[i][0] = max({dp[j][0], dp[j][1], dp[j][2], dp[i][0]});
            if (a[i] == 1 || a[i] == 3) {
                int fir = max(dp[j][0], dp[j][2]);
                dp[i][1] = max(dp[i][1], fir + 1);
            }
            if (a[i] == 2 || a[i] == 3) {
                int sec = max(dp[j][0], dp[j][1]);
                dp[i][2] = max(dp[i][2], sec + 1);
            }
        }
    }
    /*
    fo(i, 1, n, 1) {
        fo(j, 0, 2, 1) {
            if (can(j, a[i])) {
                foo(k, i - 1, 1, 1) {
                    fo(j2, 0, 2, 1) {
                        if (can(j2, a[k]) && can2(j2, j, k, i)) dp[i][j] = max(dp[i][j], dp[k][j2] + (j != 0));
                    }
                }
            }
        }
    }
    */
    if (a[n] == 0) ans = dp[n][0];
    if (a[n] == 1 || a[n] == 3) ans = max(dp[n][0], dp[n][1]);
    if (a[n] == 2 || a[n] == 3) ans = max({ans, dp[n][2], dp[n][0]});
    cout << n - ans;
    return 0;
}
/**

*/
