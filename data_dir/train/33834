#include "bits/stdc++.h"
using namespace std;
const int N = 305;
const int mod = 1e9 + 7;
int n;
int arr[N];
int m;
int cnt[N];
int tot[N];
int dp[N][N];
int pascal[N][N];
void fix(){
	for(int i = 1 ; i <= n ; ++i){
		int res = 1;
		int x = arr[i];
		for(int j = 2 ; j * j <= x ; ++j){
			if(x % j == 0){
				int cur = 0;
				while(!(x % j)){
					x /= j;
					cur ^= 1;
				}
				if(cur){
					res *= j;
				}
			}
		}
		res *= x;
		arr[i] = res;
	}
	map < int , int > mp;
	mp.clear();
	for(int i = 1 ; i <= n ; ++i){
		mp[arr[i]];
	}
	int cur = 0;
	for(auto &it : mp){
		it.second = ++cur;
	}
	for(int i = 1 ; i <= n ; ++i){
		arr[i] = mp[arr[i]];
	}
}
int main(){
	for(int i = 0 ; i < N ; ++i){
		pascal[i][0] = 1;
		for(int j = 1 ; j <= i ; ++j){
			pascal[i][j] = (pascal[i - 1][j - 1] + pascal[i - 1][j]) % mod;
		}
	}
	scanf("%d" , &n);
	for(int i = 1 ; i <= n ; ++i){
		scanf("%d" , arr + i);
	}
	fix();
	for(int i = 1 ; i <= n ; ++i){
		++cnt[arr[i]];
	}
	sort(cnt + 1 , cnt + 1 + n);
	reverse(cnt + 1 , cnt + 1 + n);
	for(m = 1 ; cnt[m] ; ++m){
		tot[m] = tot[m - 1] + cnt[m];
	}
	--m;
	dp[1][cnt[1] - 1] = 1;
	for(int i = 1 ; i < m ; ++i){
		for(int j = 0 ; j <= n ; ++j){
			if(!dp[i][j]){
				continue;
			}
			int slots = tot[i] + 1;
			for(int k = 1 ; k <= cnt[i + 1] ; ++k){
				for(int l = 0 ; l <= min(k , j) ; ++l){
					dp[i + 1][j - l + cnt[i + 1] - k] = (dp[i + 1][j - l + cnt[i + 1] - k] + 1LL * ((1LL * dp[i][j] * pascal[j][l]) % mod) * ((1LL * pascal[slots - j][k - l] * pascal[cnt[i + 1] - 1][k - 1]) % mod)) % mod;
				}
			}
		}
	}
	int ans = dp[m][0];
	for(int i = 1 ; i <= m ; ++i){
		for(int j = 1 ; j <= cnt[i] ; ++j){
			ans = (1LL * ans * j) % mod;
		}
	}
	printf("%d\n" , ans);
}