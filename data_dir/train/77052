#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
const int MAX_N=200010;
int color[MAX_N],par[MAX_N],_rank[MAX_N];
vector<int> g[MAX_N];
void init(int n){
	for(int i=1;i<=n;i++){
		par[i]=i;
		_rank[i]=0;
	}
}
int find(int x){
	if(par[x]==x) return x;
	return par[x]=find(par[x]);
}
void unite(int x,int y){
	x=find(x),y=find(y);
	if(x==y) return;
	if(_rank[x]<_rank[y])
		par[x]=y;
	else{
		par[y]=x;
		if(_rank[x]==_rank[y]) _rank[x]++;
	}
}
bool same(int x,int y){
	return find(x)==find(y);
}
int dp[MAX_N],ans=-1;
void dfs(int u,int fa){
	dp[u]=1;
	int mx=0,mx2=0;
	for(int& v:g[u]){
		if(v==fa) continue;
		dfs(v,u);
		dp[u]=max(dp[u],dp[v]+1);
		if(dp[v]>=mx){
			swap(mx,mx2);
			mx=dp[v];
		}else if(dp[v]>=mx2){
			mx2=dp[v];
		}
	}
	ans=max(ans,mx+mx2);
}
int u[MAX_N],v[MAX_N];
int main(){
	int n;
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
		scanf("%d",color+i);
	init(n);
	for(int i=1;i<n;i++){
		scanf("%d%d",u+i,v+i);
		if(color[u[i]]==color[v[i]]) unite(u[i],v[i]);
	}
	for(int i=1;i<n;i++){
		if(!same(u[i],v[i])){
			g[find(u[i])].push_back(find(v[i]));
			g[find(v[i])].push_back(find(u[i]));
		}
	}
	dfs(find(1),-1);
	printf("%d\n",(ans+1)/2);
	return 0;
}