// O O O O O O O O O O O O O O O OO O OO O OO O O O TTCH O TTTCH O TTTCH O O O O
#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx")
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stdio.h>
#include <cstdio>
#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <queue>
#include <deque>
// #include <random>
#include <iomanip>
#include <bitset>
#include <cassert>
 
using namespace std;

#define int long long
#define y1 y11
#define less less228
#define left left228
#define right right228
#define list list228
#define all(v) v.begin(), v.end()
#define tm tm228
 
 
 
template<typename T> void uin(T &a, T b) {
    if (b < a) a = b;
}
template<typename T> void uax(T &a, T b) {
    if (b > a) a = b;
}

struct edge
{
    int a, c, id, t;
    edge() {}
    edge(int _a, int _c, int _id, int _t) {
        a = _a, c = _c, t = _t;
        id = _id;
    }
};
bool operator<(edge a, edge b) {
    return a.c < b.c || (a.c == b.c && a.t > b.t);
}

const int N = 200 * 1000 + 228;
int deg[N];
pair<int, int> E[N];

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    vector< edge > e;
    for (int i = 0; i < m; ++i) {
        int a, b;
        cin >> a >> b;
        e.emplace_back(0, a, i, b);
    }
    sort(e.begin(), e.end());
    int all = 1;
    int x = 1, y = 3;
    for (int i = 0; i < m; ++i) {
        int tp = e[i].t;
        int id = e[i].id;
        if (tp == 1) {
            E[id] = {all, all + 1};
            ++deg[all + 1];
            ++all;
        } else {
            if (y > all) {
                cout << -1 << '\n';
                return 0;
            }
            E[id] = {x, y};
            if (x + 1 < y - 1) ++x;
            else ++y, x = 1;
        }
    }
    for (int i = 0; i < m; ++i) {
        cout << E[i].first << ' ' << E[i].second << '\n';
    }
    return 0;
}
// RU_023
 
/*
6 3
2 1
3 5
6 2
3 4
2 3
1
3
1
2
3
2
-----
1
 
 
 
8 4
4 1
1 3
3 6
6 7
7 2
2 5
5 8
2
4
3
1
1
2
3
4
 
 
12 4
7 9
1 3
4 6
2 4
10 12
1 2
2 10
11 1
2 8
5 3
6 7
3
1
1
2
4
3
3
2
2
3
4
4
 
 
8 3
1 2
2 3
3 4
4 5
5 6
6 7
7 8
1
3
1
1
3
2
3
2
 
 
 
 
 
*/