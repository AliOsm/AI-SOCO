#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
template <class T> ll size(const T &x) { return x.size(); }
#define rep(i,a,b) for(ll i = (a); i < (b); i++)
#define iter(it,c) for(auto it = (c).begin(); it != (c).end();++it)
#define pb push_back
#define fs first
#define sc second
typedef pair<ll,ll> ii;
typedef vector<ll> vi;
typedef vector<ii> vii;
const ll INF = 10000000000000000LL;
const double pi = acos(-1);

struct node {
	node* left = NULL;
	node* right = NULL;
	ll sum, mx, mn, atr, atl;
	node(node* l, node* r, ll v, ll al, ll ar) {
		left = l; right = r;
		sum = v; mx = v; mn = v;
		atl = al; atr = ar;
	}
	void change(ll at, ll to) { // changes index of at llo value of to
		if(at > atr || at < atl) return;
		if(at == atr && at == atl) {
			sum = to; mx = to; mn = to;
			return;
		}
		left->change(at,to);
		right->change(at,to);
		update();
	}
	void add(ll at, ll by) { // adds by to the index of at
		if(at > atr || at < atl) return;
		if(at == atr && at == atl) {
			sum+=by;mx+=by;mn+=by;
			return;
		}
		left->add(at,by);
		right->add(at,by);
		update();
	}
	void update() { // Changes everything when done
		sum = left->sum+right->sum;
		mn = min(left->mn, right->mn);
		mx = max(left->mx, right->mx);
	}
	ll qsum(ll l, ll r) { // gets the some from range l to r
		if(l > atr || r < atl) return 0;
		if(l <= atl && atr <= r) return sum;
		return left->qsum(l,r)+right->qsum(l,r);
	}
	ll qmn(ll l, ll r) { // gets the min value from l to r
		if(l > atr || r < atl) return INF;
		if(l <= atl && atr <= r) return mn;
		return min(left->qmn(l,r),right->qmn(l,r));
	}
	ll qmx(ll l, ll r) { // gets the max value from l to r
		if(l > atr || r < atl) return -INF;
		if(l <= atl && atr <= r) return mx;
		return max(left->qmx(l,r), right->qmx(l,r));
	}
};
node* build(ll l, ll r) {
	if(l > r) return NULL;
	if(l == r) return new node(NULL,NULL,0,l,r);
	ll m = (l+r)/2;
	node* left = build(l,m);
	node* right = build(m+1,r);
	node* cur = new node(left,right,0,l,r);
	return cur;
}

int main() {
    cin.sync_with_stdio(false);
	ll n,d;
	cin >> n >> d;
	vi arr(n);
	vi sum(n);
	ll dasum = 0;
	rep(i,0,n){
	   	cin >> arr[i];
		dasum += arr[i];
		sum[i] = dasum;
	}
	node* root = build(0,n-1);
	rep(i,0,n) root->change(i,sum[i]);
	bool found = false;
	rep(i,0,n) {
		if(sum[i] > d)  {
			cout << -1 << endl;
			return 0;
		}
	}
	ll days = 0;
	ll got = 0;
	ll added = 0;
	rep(i,0,n) {
		got = sum[i]+added;
		if(arr[i] == 0) {
			if(got < 0) {
				ll canadd = d-(root->qmx(i,n-1)+added);
				if(canadd >= abs(got)) {
					added += canadd;
					days++;
				} else {
					cout << -1 << endl;
					return 0;
				}
			}
		}
	}


	cout << days << endl;


    return 0;
}

		
