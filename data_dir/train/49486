#include <bits/stdc++.h>

using namespace std;

const int M = 1 << 14;

typedef long long ll;

int n, m;
int P[2 * M];

int Last[M];
int Current[M];

int F(int x)
{
    return x == P[x] ? x : P[x] = F(P[x]);
}

bool Un(int x, int y)
{
    if((x = F(x)) == (y = F(y)))    return false;

    return P[y] = x, true;
}

void Read()
{
    for(int i = 0; i < m; i++)  Current[i] = 0;

    getchar();

    for(int i = m - 1; i >= 0; i -= 4)
    {
        char c = getchar();

        int x = ('0' <= c && c <= '9' ? c - '0' : c - 'A' + 10);

        for(int j = 0; j < 4; j++)
            if(x & (1 << j))
               Current[i - 3 + j] = 1;
    }
}

int Compute()
{
    for(int x = m; x < 2 * m; x++)  P[x] = x;

    int Res = 0;

    for(int x = 1; x < m; x++)
        if(Current[x - 1] && Current[x])
            Res += Un(m + x - 1, m + x);

    for(int x = 0; x < m; x++)
        if(Current[x] && Last[x])
            Res += Un(x, x + m);

    return Res;
}

int Idx[2 * M];

void ReEnumerate()
{
    for(int x = 0; x < m; x++)  F(x + m);
    for(int x = 0; x < m; x++)  P[x] = P[x + m];

    memset(Idx, -1, sizeof(Idx));
    for(int x = 0; x < m; x++)
    {
        if(Idx[P[x]] == -1) Idx[P[x]] = x;
        P[x] = Idx[P[x]];
    }
}

int main()
{
    cin >> n >> m;

    int Ans = 0;

    for(int x = 0; x < 2 * m; x++)  P[x] = x;

    for(int i = 0; i < n; i++)
    {
        Read();
        for(int x = 0; x < m; x++)  Ans += Current[x];
        Ans -= Compute();
        for(int x = 0; x < m; x++)  Last[x] = Current[x];
        ReEnumerate();
    }

    cout << Ans << endl;
}
