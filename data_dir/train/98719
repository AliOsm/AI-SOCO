#include <bits/stdc++.h>
#define F first
#define S second
using namespace std;
pair < int , int > trie [20000002];
int tries,n,a[300006],b[300006],ans[300006],D[20000002];
void Build(int bit,int ne,int x)
{
	D[ne]++;
	
	if (bit==-1) return ;
	
	if ((1<<bit)&x)
	{
		if (!trie[ne].S) trie[ne].S=++tries;
		Build(bit-1,trie[ne].S,x);
	}
		else
	{
		if (!trie[ne].F) trie[ne].F=++tries;
		Build(bit-1,trie[ne].F,x);
	}
}
int Find_Trie(int bit,int ne,int x,int su)
{
	D[ne]--;

	if (bit==-1) return su;
	
	if (((1<<bit)&x) && D[trie[ne].S]>0 && trie[ne].S) return Find_Trie(bit-1,trie[ne].S,x,su+(1<<bit));
	                               else  
	if (((1<<bit)&x) && D[trie[ne].F]>0 && trie[ne].F) return Find_Trie(bit-1,trie[ne].F,x,su);
	                               
	if (!((1<<bit)&x) && D[trie[ne].F]>0 && trie[ne].F) return Find_Trie(bit-1,trie[ne].F,x,su);
	                               else 
	if (!((1<<bit)&x) &&  D[trie[ne].S]>0 && trie[ne].S) return Find_Trie(bit-1,trie[ne].S,x,su+(1<<bit));
}
int main() 
{
	cin>>n;

	for (int i=1; i<=n; i++)
		scanf("%d",&a[i]);
	
	for (int i=1; i<=n; i++)
	{
		scanf("%d",&b[i]);
	
	    Build(31,0,b[i]);
	}

	for (int i=1; i<=n; i++)
		ans[i]=Find_Trie(31,0,a[i],0)^a[i];
	
	for (int i=1; i<=n; i++)
		printf("%d ",ans[i]);
}