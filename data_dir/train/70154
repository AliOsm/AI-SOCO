#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <map>
#include <set>
#include <cmath>
#include <string>
#include <cstdlib>
#include <time.h>
#include <assert.h>
#include <fstream>
#include <queue>
using namespace std;
#define FOR(i,a,b) for (int i = a; i < b; ++i)
#define RFOR(i,a,b) for(int i = a; i >= b;--i)
#define REP(i, n) FOR(i, 0, n)
#define rep(i,n) REP(i,n)
#define forn(i,a,b) FOR(i,a,b)
#define rfor(i,a,b) RFOR(i,a,b)
#define f first
#define s second
#define ll long long
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define vi vector < int >
#define sz(a) (int)a.size()
#define db(x) cerr << #x << " = " << x << endl
#define db2(x, y) cerr << "(" << #x << ", " << #y << ") = (" << x << ", " << y << ")\n"; 
#define y1 jaksflkajsf
#define pii pair<int,int>
#define pli pair<ll,int>
const int INF = 1e9/2;
const int inf = 1e9;
const int N = 5e5;
const double PI = acos(-1.0);
const int MOD = 1000000000+7;
#define ld long double
multiset < pair < int, int > > s;
multiset < pair < int, int > > :: iterator it;
ll res = 0;
pii a[N];
int n, m, d;
void erase(int need) {
	while (need > 0) {
		it = s.begin();
		if (it->second <= need) {
			need -= it->second;
			res += 1LL * it->first * it->second;
			s.erase(it);
			continue;
		}
		res += 1LL * it->first * need;
		pii tmp = mp(it->first, it->second);
		s.erase(it);
		s.insert(mp(tmp.first, tmp.second - need));
		need = 0;
		
	}
}
void add(int fir, int sec) {
	s.insert(mp(fir, sec));
	while (true) {
		it = s.end(); --it;
		if (it->first > fir) {
			int val = it->second;
			s.erase(it);
			s.insert(mp(fir, val));
		} else
			break;
	}
}
int main() {
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	ios :: sync_with_stdio(false);
	cin >> d >> n >> m;
	REP(i, m) {
		cin >> a[i].f >> a[i].s;
	}
	a[m++].f = d;
	sort(a, a + m);
	int cur = 0;
	res = 0;
	s.insert(mp(0, n));
	REP(i, m) {
		int need = a[i].f - cur;
		if (need > n) {
			cout << "-1" << endl;
			return 0;
		}
		erase(need);
		add(a[i].s, need);
		cur = a[i].first;
	}
	cout << res << endl;
	return 0;	
}