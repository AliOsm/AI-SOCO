#pragma comment (linker, "/STACK:64000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>
 
#define pb push_back
#define pii pair<int, int>
#define piiii pair<pii, pii>
#define mp make_pair
#define sq(x) ((x)*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define INF ((int)(1e9) + 1)
#define LINF ((long long)(1e18))
#define EPS (1e-9)
#define PI (3.1415926535897932384626433832795)
#define y1 asdf_1
#define y0 asdf_2
#define j0 jj0
#define MOD 1000000007
//#define HMOD 536870911
//#define HMOD ((long long)(1e18) + 3LL)
//#ifdef _MY_DEBUG
//#define HMOD 1000000007
//#endif
#define MAX 2000000000
#define HBASE 1009
 
typedef long long int64;
typedef unsigned long long uint64;
typedef long double ldd;
 
using namespace std;

const int MAXN = 100500;

inline int64 get_gcd(int64 a, int64 b)
{
	while (b)
	{
		a %= b;
		swap(a, b);
	}
	return a;
}

struct point
{
	int64 x, y;

	point(int64 x, int64 y):x(x), y(y){}

	point(){}
};

int n;
point p[MAXN];
int p1, p2, p3;

inline int64 area (point p1, point p2, point p3)
{
	return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);
}

inline int64 sign(int64 a)
{
	if (!a)
	{
		return 0LL;
	}
	else
	{
		return a / abs(a);
	}
}

inline bool between(point p1, point p2, point p3)
{
	return area(p1, p2, p3) == 0LL && min(p1.x, p3.x) <= p2.x && p2.x <= max(p1.x, p3.x) && min(p1.y, p3.y) <= p2.y && p2.y <= max(p1.y, p3.y);
}

void solve()
{
	scanf ("%d", &n);
	for (int i = 1; i <= n; i++)
	{
		scanf ("%I64d%I64d", &p[i].x, &p[i].y);
	}
	p1 = 1;
	p2 = 2;
	p3 = 3;
	while (area(p[p1], p[p2], p[p3]) == 0LL)
	{
		p3++;
	}
	for (int i = 1; i <= n; i++)
	{
		if (i == p1 || i == p2 || i == p3)
		{
			continue;
		}
		if (between(p[p1], p[i], p[p2]))
		{
			p2 = i;
			continue;
		}
		if (between(p[p1], p[i], p[p3]))
		{
			p3 = i;
			continue;
		}
		if (between(p[p2], p[i], p[p3]))
		{
			p3 = i;
			continue;
		}
		if (sign(area(p[p1], p[p2], p[p3])) == sign(area(p[p1], p[p2], p[i])) &&
			sign(area(p[p1], p[p3], p[p2])) == sign(area(p[p1], p[p3], p[i])) &&
			sign(area(p[p2], p[p3], p[p1])) == sign(area(p[p2], p[p3], p[i])))
		{
			p3 = i;
		}
	}
	printf ("%d %d %d\n", p1, p2, p3);
}

#define TASK king
 
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
    srand(1363);
	solve();
    return 0;
}