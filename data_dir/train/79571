#include <bits/stdc++.h>
using namespace std;

#define mp make_pair
#define pb push_back

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 1000100;

int n, k;
int v[MAXN], c[MAXN];
int st1[20][MAXN];
int st2[20][MAXN];
int Log[MAXN];
int vals[MAXN];
long double logFact[MAXN];

inline int g(int l, int r) {
  int L = Log[r - l + 1];
  return max(st1[L][l], st1[L][r - (1 << L) + 1]);
}

inline int f(int l, int r) {
  int L = Log[r - l + 1];
  return min(st2[L][l], st2[L][r - (1 << L) + 1]);
}

int main() {
#ifdef LOCAL
  freopen("input.txt", "r", stdin);
#endif
  scanf("%d%d", &n, &k);
  logFact[0] = logl(1.0);
  for (int i = 1; i < MAXN; ++i) {
    logFact[i] = logFact[i - 1] + log(i);
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d", v + i);
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d", c + i);
  }
  for (int i = 0; i < n; ++i) {
    st1[0][i] = v[i];
    st2[0][i] = c[i];
  }
  Log[1] = 0;  
  for (int i = 2; i < MAXN; ++i)
    Log[i] = Log[i >> 1] + 1;
  for (int i = 1; i < 20; ++i) {
    for (int j = 0; j + (1 << i) <= n; ++j) {
      st1[i][j] = max(st1[i - 1][j], st1[i - 1][j + (1 << (i - 1))]);
      st2[i][j] = min(st2[i - 1][j], st2[i - 1][j + (1 << (i - 1))]);
    }
  }
  for (int i = 0; i < n; ++i) {
    int l = i - 1;
    int r = n;
    while (r - l > 1) {
      int mid = (l + r) >> 1;
      if (g(i, mid) * 100 <= f(i, mid))
        l = mid;
      else r = mid;
    }
    if (l >= i)
      vals[i] = max(vals[i], min(100 * g(i, l), f(i, l)));
    if (l + 1 < n)
      vals[i] = max(vals[i], min(100 * g(i, l + 1), f(i, l + 1)));
  }    
  sort(vals, vals + n);
  long double res = 0;
  long double logK = logl(k);
  for (int i = 1; i <= n && n - i - k + 1 >= 0; ++i) {
    long double prob = logFact[n - i] + logK + logFact[n - k] - logFact[n - i - k + 1] - logFact[n];
    prob = expl(prob);
    res += vals[i - 1] * prob;
  }
  printf("%.20f\n", (double)res);
  return 0;
}