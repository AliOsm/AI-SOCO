#include <bits/stdc++.h>
using namespace std;
#define ll long long int
const int mod = 1000000007;
const int maxn = 305;

int fact[maxn];
int inv[maxn];
int bigMod(int n, int r){
    if(r == 0) return 1;
    int ret = bigMod(n, r/2);
    ret = (ret * 1LL * ret) % mod;
    if(r & 1) ret = (ret * 1LL * n) % mod;
    return ret;
}

int nCr(int n, int r){
    if(n < r) return 0;
    int ret = (fact[n] * 1LL * inv[r]) % mod;
    ret = (ret * 1LL * inv[n - r]) % mod;
    return ret;
}

int n, k;
int dp[maxn][maxn];
bool vis[maxn][maxn];
int powK[maxn];
int powK1[maxn];

int solve(int row, int uncovered){
    if(row > n) return (uncovered == 0);
    if(vis[row][uncovered]) return dp[row][uncovered];
    vis[row][uncovered] = true;

    ll ans = 0;
    for(int i=1; i<=uncovered; i++){
        int val1 = (nCr(uncovered, i) * 1LL * powK1[uncovered - i]) % mod;
        int val2 = powK[n - uncovered];
        int val = (val1 * 1LL * val2) % mod;
        ans += (val * 1LL * solve(row + 1, uncovered - i)) % mod;
        if(ans >= mod) ans -= mod;
    }

    int covered = n - uncovered;
    int val1 = powK[covered] - powK1[covered];
    if(val1 < 0) val1 += mod;
    int val2 = powK1[uncovered];
    int val = (val1 * 1LL * val2) % mod;
    ans += (val * 1LL * solve(row + 1, uncovered)) % mod;
    if(ans >= mod) ans -= mod;

    return dp[row][uncovered] = ans;
}

int main(){
    fact[0] = inv[0] = 1;
    for(int i=1; i<maxn; i++) fact[i] = (fact[i-1] * 1LL * i) % mod;
    inv[maxn - 1] = bigMod(fact[maxn - 1], mod - 2);
    for(int i = maxn - 2; i >= 1; i--) inv[i] = (inv[i+1] * 1LL * (i+1)) % mod;

    scanf("%d %d",&n, &k);
    powK[0] = powK1[0] = 1;
    for(int i=1; i<maxn; i++) powK[i]  = (powK[i-1] * 1LL * k) % mod;
    for(int i=1; i<maxn; i++) powK1[i] = (powK1[i-1] * 1LL * (k-1)) % mod;
    printf("%d",solve(1, n));
}
