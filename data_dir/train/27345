#include <bits/stdc++.h>

using namespace std;

#define sz(a) int(a.size())


int M [16][16], n, m, k;
int cur[16][16];
long long ans;
int vis[1<<11];
void dp (int r, int c) {
//	cout << r << " " << c << endl;
	if (c == m) {
		c = 0, r++;
	}
	if (r == n) {
		ans++;
		return;
	}

	int av = (1<<k)-1;
	if (r) av &= cur[r-1][c];
	if (c) av &= cur[r][c-1];

	if (__builtin_popcount(av) <= (n-1 + m-1) - (r + c))
		return;

	if (M[r][c] >= 0) {
		if (av&(1<<M[r][c])) {
			cur[r][c] = av^(1<<M[r][c]);
			dp(r, c+1);
		}
	}
	else {
		int x = av;
		long long mem = -1;
		while (x) {
			int i = x & -x;
			if (!vis[i] && mem != -1) {
				ans += mem;
				x -= i;
			} else if (!vis[i]) {
				mem = ans;
				cur[r][c] = av ^ i;
				vis[i]++;
				dp(r, c + 1);
				vis[i]--;
				x -= i;
				mem = ans - mem;
			} else {
				cur[r][c] = av ^ i;
				dp(r, c + 1);
				x -= i;
			}
		}
	}
}

int main() {
	scanf("%d%d%d", &n, &m, &k);
	if (n+m-1 > k) {
		puts("0");
		return 0;
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%d",&M[i][j]);
//			M[i][j] = 0;
			M[i][j]--;
			if (M[i][j] >= 0) vis[1 << M[i][j]]++;
		}
	}
	dp(0,0);
	printf("%d\n", ans % 1000000007);
}
