         /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
using namespace std;
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
const int mod=1e9+7;         
const int N=2e5+4;

ll calc(int hx,int hy,int hz)
{
	ll x=hx,y=hy,z=hz;

	ll sum=(x-y)*(x-y)+(x-z)*(x-z)+(y-z)*(y-z);

	return sum;
}

ll solve(vector<int> &r,vector<int> &g,vector<int> &b,int nr)
{
	ll ans=LLONG_MAX;

	sort(g.begin(),g.end());

	sort(b.begin(),b.end());

	rep(i,0,nr)
	{
		auto it1=lower_bound(g.begin(),g.end(),r[i]);

		auto it2=upper_bound(b.begin(),b.end(),r[i]);

		if(it1!=g.end() and it2!=b.begin())
		{
			it2--;

			ans=min(ans,calc(r[i],*it1,*it2));
		}

		auto it3=lower_bound(b.begin(),b.end(),r[i]);

		auto it4=upper_bound(g.begin(),g.end(),r[i]);

		if(it3!=b.end() and it4!=g.begin())
		{
			it4--;

			ans=min(ans,calc(r[i],*it3,*it4));
		}
	}

	//cout<<ans<<endl;

	return ans;
}

int main()
{
	int t;

	scn(t);

	while(t--)
	{
		int nr,ng,nb;

		scn(nr); scn(ng); scn(nb);

		vector<int> r(nr),g(ng),b(nb);

		rep(i,0,nr)
		scn(r[i]);

		rep(i,0,ng)
		scn(g[i]);

		rep(i,0,nb)
		scn(b[i]);

		ll ans=LLONG_MAX;

		ans=min(ans,solve(r,g,b,nr));

		ans=min(ans,solve(g,r,b,ng));

		ans=min(ans,solve(b,g,r,nb));
		
		lpriln(ans);
	}

    return 0;
}