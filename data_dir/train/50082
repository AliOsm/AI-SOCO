//Be Name Khoda
//no comment...
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using mordered_multiset =  tree<T, null_type, greater_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const ll MOD = (int)1e9 + 7;
const ll MAXN = (ll)60;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
using namespace std;
int Fir[MAXN][MAXN];
struct matrix{
	ll a[MAXN][MAXN], n, m;
	matrix(int tn, int tm, int tA[MAXN][MAXN] = Fir)
	{
		n = tn;
		m = tm;
		for (int i = 0; i < tn; i++)
			for (int j = 0; j < tm; j++)
				a[i][j] = tA[i][j];
	}
	ll *operator [](ll i)
	{
		return a[i];
	}
	matrix Identity(ll n)
	{
		matrix c(n, n);
		for (ll i = 0; i < n; i++)
			c[i][i] = 1;
		return c;
	}
	matrix operator *(matrix b)
	{
		matrix c(n, m);
		for (ll i = 0; i < c.n; i++)
			for (ll j = 0; j < c.m; j++)
				c[i][j] = 0LL;	
		for (int i = 0; i < n; i++)
			for (int j = 0; j < b.m; j++)
				for (int k = 0; k < m; k++)
				{
					c[i][j] = (c[i][j] + ((1LL * (a[i][k] % MOD) * (b[k][j] % MOD)) % MOD)) % MOD;
				}
		return c;
	}
	matrix operator ^(ll c)
	{
		if(c == 0)
			return Identity(n);
		if(c == 1)
			return *this;
		matrix tmp = *this ^ (c / 2);
		tmp = tmp * tmp;
		if(c % 2)
			tmp = tmp * *this;
		return tmp;
	}
	void print()
	{
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
				cout << a[i][j] << " ";
			cout << "\n";
		}
	}
};
ll f(char c)
{
	if(islower(c))
		return c - 'a';
	else
		return c - 'A' + 26;
}
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	ll n, m, k;
	cin >> n >> m >> k;
	if(n == 1)
		return cout << m, 0;
	matrix mat(m, m);
	for (int i = 0; i < k; i++)
	{
		char c1, c2;
		cin >> c1 >> c2;
		ll id1 = f(c1), id2 = f(c2);
		mat[id1][id2] = 1;
	}
	for (int i = 0; i < m; i++)
		for (int j = 0; j < m; j++)
			mat[i][j] = 1 - mat[i][j];
	
	matrix base(1, m);
	for (int i = 0; i < m; i++)
		base[0][i] = 1;
	mat = mat ^ (n - 1);
	
	base = base * mat;
	ll sm = 0;
	for (int i = 0; i < m; i++)
		sm = (sm + base[0][i]) % MOD;
	cout << sm;
}
