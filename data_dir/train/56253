/* ****GT_18**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define	endl		'\n'
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define rep(i,a,b)	for(ll int i=a;i<b;i++)
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
using namespace std;

#define N  100005

ll n,m;

ll expo(ll base, ll exponent, ll mod) {								//return base^exponent modulo modulus
    ll ans = 1;
    while(exponent !=0 ) {
        if((exponent&1) == 1) {
            ans = ans*base ;
            ans = ans%mod;
        }
        base = base*base;
        base %= mod;
        exponent>>= 1;
    }
    return ans%mod;
}

ll inv(ll x)
{
	return expo(x%hell,hell-2,hell);
}

ll add(ll a,ll b,ll mod=hell)
{
	return ((a%mod)+(b%mod))%mod;
}
ll sub(ll a,ll b,ll mod=hell)
{
	return ((a%mod)+(b%mod)+mod)%mod;
}
ll mul(ll a,ll b,ll mod=hell)
{
	return ((a%mod)*(b%mod))%mod;
}

vi s1(N),s2(N);

ll p(ll i)
{
	if(i==n)
		return 0;
	ll pnext=mul(inv(m),p(i+1));
	if(!s1[i]&&!s2[i])
		return add(mul(mul(inv(m),inv(2)),m-1),pnext);
	else if(!s1[i])
		return add(mul(m-s2[i],inv(m)),pnext);
	else if(!s2[i])
		return add(mul(s1[i]-1,inv(m)),pnext);
	else if(s1[i]<s2[i])
		return 0;
	else if(s1[i]>s2[i])
		return 1;
	else
		return p(i+1)%hell;


}


int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		cin>>n>>m;
		rep(i,0,n)
		cin>>s1[i];
		rep(i,0,n)
		cin>>s2[i];
		cout<<p(0);	
	}
	return 0;
}