/*
 * hopeless can you hear me calling ?
 */
#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>

using namespace std;

using ii = pair<int,int>;
using ll = long long;

const int N = 100005;
const int mod = 1000000007;
int n, m;
char grid[5005][5005];
int acc[5005][5005];
int get(int x1, int y1, int x2, int y2) {
	int ret = acc[x2][y2];
	if (x1)
		ret -= acc[x1 - 1][y2];
	if (y1)
		ret -= acc[x2][y1 - 1];
	if (x1 && y1)
		ret += acc[x1 - 1][y1 - 1];
	return ret;
}
int main() {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#endif

	for (int i = 0; i < 5000; i++)
		for (int j = 0; j < 5000; j++)
			grid[i][j] = '0';

	cin >> n >> m;

	for (int i = 0; i < n; i++) {

		for (int j = 0; j < m; j++) {
			cin >> grid[i][j];
		}

	}

	for (int i = 0; i < 5000; i++)
		for (int j = 0; j < 5000; j++) {
			acc[i][j] = (grid[i][j] - '0');
			if (i)
				acc[i][j] += acc[i - 1][j];
			if (j)
				acc[i][j] += acc[i][j - 1];
			if (i && j)
				acc[i][j] -= acc[i - 1][j - 1];

		}

	int ans = n * m;

	for (int k = 2; k <= 5000; k++) {

		int nn = (n + k - 1) / k * k;
		int mm = (m + k - 1) / k * k;
		int cnt = 0;
		for (int i = k - 1; i < nn; i += k)
			for (int j = k - 1; j < mm; j += k) {
				cnt += min(get(i - k + 1, j - k + 1, i, j),
						k * k - get(i - k + 1, j - k + 1, i, j));
			}
		ans = min(ans, cnt);

	}

	cout << ans << '\n';

	return 0;
}
