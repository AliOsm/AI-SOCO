#include<bits/stdc++.h>

#define x first
#define y second
#define pb push_back
#define mp make_pair
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define all(v) v.begin(),v.end()

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef pair<ll,ll> pll;

const ll INF = 1e18;
const int inf = INT_MAX;
const ll mod = 1e9 + 7;
const int dx[4] = {0, 0, 1, -1};
const int dy[4] = {1, -1, 0, 0};
const int N = 1e5 + 5;
const int A = 26;

int a[N], gcd[4 * N];
pii t[4 * N];

pii combine(pii a, pii b){
	if(a.x < b.x) return a;
	if(a.x > b.x) return b;
	return mp(a.x, a.y + b.y);
}

void build(int v, int tl, int tr){
	if(tl == tr){
		t[v] = mp(a[tl], 1);
		gcd[v] = a[tl];
		return ;
	}
	int tm = (tl + tr) / 2;
	build(v * 2, tl, tm);
	build(v * 2 + 1, tm + 1, tr);
	t[v] = combine(t[v * 2], t[v * 2 + 1]);
	gcd[v] = __gcd(gcd[v * 2], gcd[v * 2 + 1]);
}

pii get(int v, int tl, int tr, int l, int r){
	if(l > r || tr < l || tl > r)return mp(inf, 0);
	if(l <= tl && tr <= r){
		return t[v];
	}
	int tm = (tl + tr) / 2;
	return combine(get(v * 2, tl, tm, l, r), get(v * 2 + 1, tm + 1, tr, l, r));
}

int ggcd(int v, int tl, int tr, int l, int r){
	if(l > r || tr < l || tl > r)return 0;
	if(l <= tl && tr <= r){
		return gcd[v];
	}
	int tm = (tl + tr) / 2;
	return __gcd(ggcd(v * 2, tl, tm, l, r), ggcd(v * 2 + 1, tm + 1, tr, l, r));
}

int main(){
	ios_base :: sync_with_stdio(0);
	cin.tie(0), cout.tie(0);
	int n;
	cin >> n;
	for(int i = 1; i <= n; i++){
		cin >> a[i];
	}
	build(1, 1, n);
	int m;
	cin >> m;
	for(int i = 1; i <= m; i++){
		int l, r;
		cin >> l >> r;
		pii p = get(1, 1, n, l, r);
		int val = ggcd(1, 1, n, l, r);
		if(p.x == val){
			cout << r - l + 1 - p.y << endl;
		}
		else cout << r - l + 1 << endl;
	}
}
