#include<iostream>
#include<fstream>
#include<iomanip>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cstdlib>
#include<cmath>
#include<set>
#include<map>
#include<queue>
#include<stack>
#include<string>
#include<vector>
#include<sstream>
#include<ctime>
#include<cassert>
#define LL long long
const int N = 1010;
const int inf = ~0u >> 2;
int cnt, vis[444];
int g[444][444];
int n, m;
int gcd(int a, int b)
{
        return !b ? a : gcd(b, a % b);
}
int fa[N];
int find(int x)
{
        return fa[x] == x ? x : fa[x] = find(fa[x]);
}
void Unio(int a,int b)
{
	int x = find(a);
	int y = find(b);
	if(x != y) {
                fa[y] = x;
        }
}
int suffix_gcd[N];
bool read (int &x) 
{
        int c = getchar (); int sign = 1;
        while (~c && c < '0' || c > '9') { if (c == '-') sign = -1; c = getchar (); }
        for (x = 0; ~c && '0' <= c && c <= '9'; c = getchar ()) x = x * 10 + c - '0';
        x *= sign;
        return ~c;
}
#define rep(i, n) for(int i = 0; i < n; i++)
int a[N][N], b[N][N];
int lux, luy;
int ok(int x, int y)
{
        if(x < 1 || x > n || y < 1 || y > m) {
                return 0;
        }
        memset(b, 0, sizeof(b));
        rep(i, x) rep(j, y) b[i + lux][j + luy] = 1;
        int row = lux, col = luy;
        for(;;) {
                if(row + x < n && a[row + x][col]) {
                        rep(i, y) b[row + x][col + i] = 1;
                        row++;
                } else if(col + y < m && a[row][col + y]) {
                        rep(i, x) b[row + i][col + y] = 1;
                        col++;
                } else {
                        break;
                }
        }
        rep(i, n) rep(j, m) if(a[i][j] != b[i][j]) return 0;
        return 1;
}
int solve()
{
        lux=inf, luy=inf;
        rep(i, n) rep(j, m)
                if(a[i][j] && (i < lux || (i == lux && j < luy))) 
                        lux = i, luy = j;
        int x = 1, y = 1;
        for(; lux + x < n && a[lux + x][luy]; x++);
        for(; luy + y < m && a[lux][luy + y]; y++);
        if(lux + x >= n) {
                if(ok(x, 1))return x; else return inf;
        }
        int tmp = 0;
        for(;tmp < m && !a[lux + x][tmp]; tmp++);
        if(tmp >= m){
                if(ok(x, 1)) return x; else return inf;
        }
        if(ok(x, luy - tmp + y) ) {
                return x * (luy - tmp + y);
        }
        return inf;
}
int main()
{
        read(n), read(m); char s[N];
        rep(i, n) {
                scanf("%s", s);
                rep(j, m) {
                        a[i][j] = (s[j] == 'X');
                }
        }
        int ret = inf;
        ret = std::min(ret, solve());
        memset(b, 0, sizeof(b));
        rep(i, n) rep(j, m) b[j][i]=a[i][j];
        std::swap(n, m);
        rep(i, n) rep(j, m) a[i][j] = b[i][j];
        ret = std::min(ret, solve());
        printf("%d\n", ret==inf ? -1 : ret);
        return 0;
}
