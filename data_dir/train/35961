#include<bits/stdc++.h>
typedef long long int ll;
typedef long double ld;
#define MOD 1000000007
#define MOD2 1000000006
#define TEMPMOD1 998244353
#define TEMPMOD2 998244352
#define INF 1000000000000000001
#define NEGINF -1000000000000000007
#define vll vector<ll> 
#define vvll vector<vector<ll>>
#define pll pair<ll,ll>
#define pii pair<int,int>
#define plll pair<pll,ll>
#define vplll vector<plll>
#define vpll vector<pll>
using namespace std;
using namespace std::chrono; 
#define fileIO(name) \
    freopen(name".in", "r", stdin); \
    freopen(name".out", "w", stdout);

ll minval,maxval;
bool visited[200010];
vll graph[200010];

void DFS(ll start)
{
    ll size,store;
    size=graph[start].size();
    visited[start]=true;
    minval=min(minval,start);
    maxval=max(maxval,start);
    for(ll i=0;i<size;i++)
    {
        store=graph[start][i];
        if(!visited[store])
        {
            DFS(store);
        }
    }
    return;
}


int main()
{ 
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    memset(visited,false,sizeof(visited));
    ll vertice,edge,vert1,vert2;
    cin>>vertice>>edge;
    while(edge--)
    {
        cin>>vert1>>vert2;
        graph[vert1].push_back(vert2);
        graph[vert2].push_back(vert1);
    }
    vpll intervals;
    ll connected=0;
    for(ll i=1;i<=vertice;i++)
    {
        if(visited[i])
        {
            continue;
        }
        connected++;
        minval=INF;
        maxval=NEGINF;
        DFS(i);
        intervals.push_back({minval,maxval});
    }
    sort(intervals.begin(),intervals.end());
    ll max_till_now=intervals[0].second;
    ll res=1;
    ll size1=connected;
    for(ll i=1;i<size1;i++)
    {
        if(intervals[i].first>max_till_now)
        {
            res++;
            max_till_now=intervals[i].second;
        }
        else
        {
            max_till_now=max(max_till_now,intervals[i].second);
        }
    }
    ll ans=connected-res;
    cout<<ans;
    return 0;
}