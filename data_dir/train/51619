#include<bits/stdc++.h>
using namespace std;



const int N = 1e6 + 5;


int n, k;
vector < int > g[N];
multiset < int > q[N];


void dfs(int v, int pr = -1, int d = 0){
    if((int)g[v].size() == 1){
        q[v].insert(-d);
        return;
    }
    int mx = -1;
    for(int to : g[v]){
        if(to == pr){
            continue;
        }
        dfs(to, v, d + 1);
        if(mx == -1 || (int)q[to].size() > (int)q[mx].size()){
            mx = to;
        }
    }
    q[v].swap(q[mx]);
    for(int to : g[v]){
        if(to == pr || to == mx){
            continue;
        }
        for(auto y : q[to]){
            int x = k + 2 * d + y;
            auto it = q[v].lower_bound(-x);
            if(it == q[v].end()){
                q[v].insert(y);
            }
            else{
                q[v].erase(it);
                q[v].insert(-max(-y, -*it));
            }
        }
    }
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin >> n >> k;
    for(int i = 1; i < n; i++){
        int x, y;
        cin >> x >> y;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    for(int i = 1; i <= n; i++){
        if((int)g[i].size() > 1){
            dfs(i);
            return cout << (int)q[i].size(), 0;
        }
    }
}
