#include<bits/stdc++.h>
using namespace std;

#define ll       long long
#define ull      unsigned ll
#define pii      pair<int, int>
#define pll      pair<ll, ll>
#define mp       make_pair
#define ff       first
#define ss       second
#define sz(x)    (int) x.size()
#define all(v)   v.begin(), v.end()

template <typename T> inline void smin(T &a, T b) {a = a < b ? a : b;}
template <typename T> inline void smax(T &a, T b) {a = a > b ? a : b;}

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {cout << endl;}
template<typename T, typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << ", ";
	err(++it, args...);
}

template <typename T> inline void Int(T &n) {
	n = 0; int f = 1; register int ch = getchar();
	for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
	for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
	n = n * f;
}

template <typename T, typename TT> inline void Int(T &n, TT &m) { Int(n); Int(m); }
template <typename T, typename TT, typename TTT> inline void Int(T &n, TT &m, TTT &l) { Int(n, m); Int(l); }

const int mod = (int) 1e9 + 7;

inline int add(int a, int b) {a += b; return a >= mod ? a - mod : a;}
inline int sub(int a, int b) {a -= b; return a < 0 ? a + mod : a;}
inline int mul(int a, int b) {return (ll) a * b % mod;}

const int inf = (int) 2e9 + 5;
const ll  Inf = (ll) 2e18 + 5;
const int N   = (int) 2e5 + 5;

int node[N][26], len[N], link[N], state, tt;

void init(int n) {
	for (int i = 0; i <= n + 5; i++) {
		for (int j = 0; j < 26; j++) {
			node[i][j] = -1;
		}
	}
	len[1] = -1, link[1] = 1;
	len[2] = 0, link[2] = 1;
	state = tt = 2;
}

void Insert(string& s, int p) {
	while (p - len[tt] - 1 < 0 or s[p - len[tt] - 1] != s[p]) tt = link[tt];
	int x = link[tt], c = s[p] - 'a' ;
	while (p - len[x] - 1 < 0 or s[p - len[x] - 1] != s[p]) x = link[x];
	if (node[tt][c] == -1) {
		node[tt][c] = ++state;
		len[state] = len[tt] + 2;
		link[state] = len[state] == 1 ? 2 : node[x][c];
	}
	tt = node[tt][c];
}

string call(string& s) {
	init(sz(s));
	int ans = -1;
	for (int i = 0; i < sz(s); i++) {
		Insert(s, i);
		if (len[tt] == i + 1) ans = i;
	}
	string t = "";
	for (int i = 0; i <= ans; i++) {
		t.push_back(s[i]);
	}
	return t;
}

int solve() {
	string s; cin >> s;
	int n = sz(s);
	string p = "";
	for (int i = 0, j = n - 1; i < j; i++, j--) {
		if (s[i] != s[j]) break;
		p.push_back(s[i]);
	}
	int m = sz(p);
	string t = "";
	for (int i = m; i < n - m; i++) {
		t.push_back(s[i]);
	}
	string pre = call(t);
	string suf = t;
	reverse(all(suf));
	suf = call(suf);
	cout << p;
	cout << (sz(pre) > sz(suf) ? pre : suf);
	reverse(all(p));
	cout << p << endl;
	return 0;
}

int main() {
	//ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	int test = 1, tc = 0;
	Int(test);
	//cin >> test;
	while (test--) {
		//printf("Case %d: ", ++tc);
		solve();
	}
	return 0;
}
