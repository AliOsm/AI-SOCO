// Kono Giorno Giovanna wa yume ga aru

#pragma GCC optimize ("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("avx,avx2,fma,sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")

#include <bits/stdc++.h>
using namespace std;

/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;
//const long long mod = 998244353;
mt19937 rng((int) chrono::steady_clock::now().time_since_epoch().count());

// watch this
//using ll = long long;
//typedef long long LL;
//using uint = unsigned int;
#define ll long long
#undef ll

const int mxN = 200010;
const long double EPS = 1e-9;

long double A, B, Sy;

long double L[mxN], R[mxN];
long double Psum[mxN];

int main() {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
#endif

	cout << fixed << setprecision(15);

	int N, Q;
	long long x, y;
	cin >> Sy >> A >> B;
	cin >> N;
	for (int i = 0; i < N; i++) {
		cin >> x >> y;
		L[i] = x, R[i] = y;
		Psum[i] = y - x;
		if (i)
			Psum[i] += Psum[i - 1];
	}
	Psum[N] = Psum[N - 1];
	cin >> Q;
	while (Q--) {
		cin >> x >> y;

		// project on x-axis
		long double Ax = x + (A - x) * y / (y - Sy);
		long double Bx = x + (B - x) * y / (y - Sy);

		// lower bound on x-axis
		int itA = lower_bound(L, L + N, Ax) - L - 1;
		itA = max(itA, 0);
		while (itA < N && Ax > L[itA] + EPS)
			itA++;

		int itB = lower_bound(L, L + N, Bx) - L - 1;
		itB = max(itB, 0);
		while (itB < N && Bx > L[itB] + EPS)
			itB++;
		itB--;

		long double res = 0;
		// partial sum
		if (itB > 0)
			res += Psum[itB - 1];
		if (itA > 0)
			res -= Psum[itA - 1];

		// first and last blocks
		if (itB >= 0)
			res += max((long double) 0, min(R[itB], Bx) - L[itB]);
		if (itA > 0)
			res += max((long double) 0, R[itA - 1] - max(L[itA - 1], Ax));

		res *= (y - Sy) / y;

		cout << res << '\n';
	}
	return 0;
}
