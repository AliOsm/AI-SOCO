         /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
using namespace std;
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
const int mod=1e9+7;         
const int N=2e5+4;

int a[N],pos[N];

int tree[4*N];

void build(int node,int st,int end)
{
	if(st==end)
	{
		tree[node]=a[st];

		return;
	}

	int mid=(st+end)/2;

	build(2*node,st,mid); build(2*node+1,mid+1,end);

	tree[node]=max(tree[2*node],tree[2*node+1]);
}

int query(int node,int st,int end,int l,int r)
{
	if(st>=l and end<=r)
	return tree[node];
	
	if(st>r or end<l)
	return 0;

	int mid=(st+end)/2;

	return max(query(2*node,st,mid,l,r),query(2*node+1,mid+1,end,l,r));
}

ll solve(int l,int r,int n)
{
	if(r-l+1<3)
	return 0;

	int mx=query(1,1,n,l,r);

	//assert(mx>=0);

	int ind=pos[mx];

	int left=ind-l,right=r-ind;

	ll ans=0;

	if(left<right)
	{
		rep(i,l,ind)
		if(pos[mx-a[i]]>ind and pos[mx-a[i]]<=r)
		ans++;
	}
	else
	{
		rep(i,ind+1,r+1)
		if(pos[mx-a[i]]<ind and pos[mx-a[i]]>=l)
		ans++;
	}

	ans+=(solve(l,ind-1,n)+solve(ind+1,r,n));

	return ans;
}

int main()
{
	int n;

	scn(n);

	rep(i,1,n+1)
	scn(a[i]),pos[a[i]]=i;

	build(1,1,n);

	ll ans=solve(1,n,n);

	lpri(ans);

    return 0;
}