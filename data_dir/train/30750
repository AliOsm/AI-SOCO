#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef unsigned char ubyte;

const ld EPS = 1e-9;
const ld PI = acos(-1.0);
const int INF = (int)1e9 + 5;
const ll LINF = (ll)1e18 + 5;

bool eq(ld a, ld b) {
	return fabs(a - b) < EPS;
}

template<class T>
T sqr(const T & x) { return x * x; }

template<class T> 
ll abs(const T & x) { return x < 0 ? -x : x; }

template<class T>
ll myround(const T & x) { return x < 0 ? x - 0.5 : x + 0.5; }

template<class T> 
bool chmin(T & x, const T & y) {
	if (y < x) {
		x = y;
		return true;
	}
	return false;
}

template<class T>
ostream & operator <<(ostream & os, const vector<T> & v) {
	os << "{";
	for (typename vector<T>::const_iterator it = v.begin(); it != v.end(); ++it) {
		os << *it;
		if ((it + 1) != v.end()) os << ", ";
	}
	os << "}";
	return os;
}

template<class P, class Q>
ostream & operator <<(ostream & os, const pair<P, Q> & p) {
	return os << "(" << p.first << ", " << p.second << ")";
}

template<class T> 
bool chmax(T & x, const T & y) {
	if (x < y) {
		x = y;
		return true;
	}
	return false;
}

int nextInt() {
	int x = 0;
	bool p = false;
	char c;
	do {
		c = getchar();
	} while (c <= 32);
	if (c == '-') {
		p = true;
		c = getchar();
	}
	while (c >= '0' && c <= '9') {
		x = x * 10 + c - '0';
		c = getchar();
	}
	return (p ? -x : x);
}

string nextToken() {
  static constexpr size_t MAX_LEN = 500500;
  static char str[MAX_LEN];
  scanf("%s", str);
  return str;
}

#define all(a) (a).begin(), (a).end()

long long solve(vector<int> heights) {
  sort(all(heights));
  int i = (int)heights.size() - 1;
  long long ret = 0;
  while (i >= 0) {
    ret += heights[i];
    i -= 2;
  }
  return ret;
}

int main() {
#ifdef LOCAL
  freopen("input.txt", "r", stdin);
#endif

  int n = nextInt();
  int h = nextInt();
  vector<int> heights(n);
  for (int& x : heights) {
    x = nextInt();
  }

  int l = 1, r = n + 1;

  while (r - l > 1) {
    int mid = (l + r) >> 1;
    vector<int> prefix(heights.begin(), heights.begin() + mid);
    if (solve(prefix) <= h) {
      l = mid;
    } else {
      r = mid;
    }
  }

  printf("%d\n", l);
}
