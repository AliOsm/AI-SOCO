#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,no-stack-protector,fast-math")
#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define IO ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
using namespace std;
const int N = 2e5 + 5, M = 2 * N + 5;

int n, a[N];

const int maxn = 2e5;
bitset<maxn> vis;

void Sieve(){
    vis.set();
    vis[0] = vis[1] = false;
    for(ll i = 4 ; i < maxn ; i += 2)
        vis[i] = false;
    for(ll i = 3 ; i * i < maxn ; i += 2){
        if(!vis[i])continue;
        for(ll j = i * i ; j < maxn ; j += i + i)
            vis[j] = false;
    }
}

vector<int> primes;
void Gen(){
    for(int i = 2 ; i < maxn ; ++i)
        if(vis[i])
            primes.emplace_back(i);
}

int here[N];
priority_queue<int> d[N];

void fact(int x){
    int idx = 0, sz = primes.size();
    while(x > 1 && idx < sz && x / primes[idx] >= primes[idx]){
        int cnt = 0;
        while(x % primes[idx] == 0)x /= primes[idx], ++cnt;
        d[primes[idx]].emplace(cnt);
        ++here[primes[idx]];
        if(d[primes[idx]].size() > 2)
            d[primes[idx]].pop();
        ++idx;
    }
    if(x > 1)d[x].emplace(1), ++here[x];
    if(d[x].size() > 2)
        d[x].pop();
}

int main(){
#ifndef ONLINE_JUDGE
    freopen("input.in", "r", stdin);
#endif
    Sieve();
    Gen();

    scanf("%d", &n);
    for(int i = 0 ; i < n ; ++i)
        scanf("%d", a + i);

    int mx = *max_element(a, a + n);

    ll ans = 1;

    for(int i = 0 ; i < n ; ++i)
        fact(a[i]);

    for(auto dd : primes){
        if(d[dd].empty())continue;
        if(n - here[dd] >= 2)continue;
        if(n - here[dd] >= 1){
            d[dd].emplace(0);
            if(d[dd].size() > 2)d[dd].pop();
        }
        ll tmp = 1;
        int sz = d[dd].top();
        while(sz--)tmp *= 1ll * dd;
        ans *= tmp;
    }
    printf("%lld\n", ans);
}