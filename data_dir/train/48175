#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define int __int64

const int MAXN = 5e5 + 777;

int a[MAXN];
int pref[MAXN];
int ans[MAXN];
int cnt[MAXN];
int sum[MAXN];
int Left_tin_lefti[MAXN];
int Right_tin_righti[MAXN];
map <int, int> mp;

int timer = 0;

int Get(int v)
{
    if (!mp.count(v)) mp[v] = ++timer;
    return mp[v];
}

const int BLOCK = 315;

struct smth
{
    int Left, Right;
    int id;
} query[MAXN];

int res = 0;

void add(int x, int t){
  if(t){
    res += cnt[Right_tin_righti[x]];
    cnt[sum[x]]++;
  }else{
    res += cnt[Left_tin_lefti[x]];
    cnt[sum[x]]++;
  }
}
void del(int x, int t){
  if(t){
    cnt[sum[x]]--;
    res -= cnt[Right_tin_righti[x]];
  }
  else{
    cnt[sum[x]]--;
    res -= cnt[Left_tin_lefti[x]];
  }
}

bool cmp(smth& a, smth& b)
{
    if (a.Left / BLOCK == b.Left / BLOCK)
    {
        return a.Right < b.Right;
    }
    else
    {
        return a.Left < b.Left;
    }
}

 main()
{
    int n, k;
    cin >> n >> k;

    for (int i = 1; i <= n; i++)
    {
        
        int x;
        cin >> x;
        if (x == 2)
        {
            a[i] = -1;
        } else {
            a[i] = 1;
        }
    }
    for (int i = 1; i <= n; i++)
    {
        int x;
        cin >> x;
        a[i] *= x;
    }
    sum[0] = Get(0);
    Left_tin_lefti[0] = Get(k);
    for (int i = 1; i <= n; i++)
    {
        pref[i] = pref[i - 1] + a[i];
        sum[i] = Get(pref[i]);
        Left_tin_lefti[i] = Get(pref[i] + k);
        Right_tin_righti[i] = Get(pref[i] - k);
    }
    int q;
    cin >> q;
    for (int i = 1; i <= q; i++)
    {
        cin >> query[i].Left >> query[i].Right;
        query[i].id = i;
    }
    sort(query + 1, query + 1 + q, cmp);
    int L = 1, R = 1;
    cnt[sum[1]]++;
    for (int i = 1; i <= n; i++)
    {
        int l = query[i].Left - 1;
        int r = query[i].Right;
        while(L < l)
        {
            del(L++, 0);
        }
        while(L > l)
        {
            add(--L, 0);
        }
        while(R < r)
        {
            add(++R, 1);
        }
        while(R > r)
        {
            del(R--, 1);
        }
        ans[query[i].id] = res;
        
    }
    for (int i = 1; i <= q; i++)
    {
        cout << ans[i] << endl;
    }
}

