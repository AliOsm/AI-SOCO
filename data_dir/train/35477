#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

int solve(LL d11, LL d12, LL d21, LL d22) {
}

int solve() {
	next(string, s1);
	next(string, s2);
	
	vector<int> d1(s1.length());
	FOR (i, 0, s1.length()) d1[i] = s1[s1.length() - 1 - i] - '0';
	
	vector<int> d2(s2.length());
	FOR (i, 0, s2.length()) d2[i] = s2[s2.length() - 1 - i] - '0';
	
	while (d1.size() < d2.size()) d1.push_back(0);
	while (d1.size() > d2.size()) d2.push_back(0);
	
	FORD (i, ((int)d1.size()) - 1, 0) {
		if (d1[i] && d2[i]) {
			d1[i]--;
			d2[i]--;
		}
	}
	
	// cout << d1 << d2;

	FORD (i, ((int)d1.size()) - 1, 2) {
		if (d1[i]) {
			if (!d2[i - 1]) return 1;
			if (d2[i - 2]) {
				d1[i]--;
				d2[i - 1]--;
				d2[i - 2]--;
			} else if (d1[i - 2]) return 1;
			else {
				d1[i]--;
				d2[i - 1]--;
				d1[i - 2] = 1;
			}
		} else if (d2[i]) {
			if (!d1[i - 1]) return -1;
			if (d1[i - 2]) {
				d2[i]--;
				d1[i - 1]--;
				d1[i - 2]--;
			} else if (d2[i - 2]) return -1;
			else {
				d2[i]--;
				d1[i - 1]--;
				d2[i - 2] = 1;
			}
		}
	}
	
	// cout << d1 << d2;
	while (d1.size() < 2) d1.push_back(0);
	while (d2.size() < 2) d2.push_back(0);
	
	if (d1[0] == d2[0] && d1[1] == d2[1]) return 0;
	double q = (sqrt(5) + 1) / 2;
	
	double x1 = d1[0] + d1[1] * q;
	double x2 = d2[0] + d2[1] * q;
	if (x1 < x2) return -1;
	if (x1 > x2) return 1;
}

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	int res = solve();
	if (res< 0) cout << "<";
	else if (res > 0) cout << ">";
	else cout << "=";
	cout << endl;
}