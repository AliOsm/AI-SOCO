#include <bits/stdc++.h>

using namespace std;

#define MAX 200005
#define ll long long
ll n, arr[MAX];
vector<ll> tree[4*MAX];

vector<ll> mergeit(vector<ll> V1, vector<ll> V2)
{
    vector<ll> V (V1.size() + V2.size());
    merge(V1.begin(), V1.end(), V2.begin(), V2.end(), V.begin());
    return V;
}

void init(ll node, ll b, ll e)
{
    if(b == e){
        tree[node].push_back(arr[b]);
        return;
    }
    ll left = 2*node;
    ll right = 2*node+1;
    ll mid = (b+e)/2;
    init(left, b, mid);
    init(right, mid+1, e);
    tree[node] = mergeit(tree[left], tree[right]);
}

ll query(ll node, ll b, ll e, ll l, ll r, ll val)
{
    if(l > r) return 0;
    if(l > e || r < b) return 0;
    if(b >= l && e <= r){
        ll q = tree[node].end() - lower_bound(tree[node].begin(), tree[node].end(), val);
        return q;
    }
    ll left = 2*node;
    ll right = 2*node+1;
    ll mid = (b+e)/2;
    ll p1 = query(left, b, mid, l, r, val);
    ll p2 = query(right, mid+1, e, l, r, val);
    return p1+p2;
}

int main()
{
    scanf("%lld", &n);
    for(ll i=1; i<=n; i++){
        scanf("%lld", &arr[i]);
        arr[i] = min(arr[i], n);
    }
    init(1, 1, n);
    ll ans = 0;
    for(ll i=1; i<=n; i++){
        if(arr[i] <= i) continue;
        ll st = i+1;
        ll ed = arr[i];
        ans += query(1, 1, n, st, ed, i);
    }
    cout << ans;
}
