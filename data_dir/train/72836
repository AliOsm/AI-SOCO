#include<bits/stdc++.h>
//#include<ctime>
//#include <stdlib.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define dpp(arr,val) memset(arr,val,sizeof (arr))
#define ll long long
#define ull unsigned long long
#define dd double
#define ld long double
#define PQ priority_queue
#define pii pair<int,int>
#define pll pair<ll,ll>
#define S second
#define F first
#define MP make_pair
#define endl "\n"
using namespace std;
using namespace __gnu_pbds;

ll add(ll a,ll b,ll mod)
{
    return (a%mod+b%mod)%mod;
}
ll sub(ll a,ll b,ll mod)
{
    return (a%mod-b%mod+mod)%mod;

}
ll mul(ll a,ll b,ll mod)
{
    return ((a%mod)*(b%mod))%mod;
}
ll sumodd(ll num,ll mod)
{
    return mul(num,num,mod);
}
ll sumeven(ll num,ll mod)
{
    return mul(num,num+1,mod);
}
ll sum_any_range(ll st,ll en,ll num)
{
    return (num*(st+en)/2);
}
ll gcd(ll a,ll b)
{
    while(b!=0)
    {
        ll a2=a;
        a=b;
        b=a2%b;
    }
    return a;
}
ll lcm(ll a,ll b)
{
    return a/gcd(a,b)*b;
}
string makeitbinary(ll n)
{
    string s;
    while(n)
    {
        s=s+(char)((n%2)+'0');
        n/=2;
    }
    reverse(s.begin(),s.end());
    return s;
}

bool bit(ll num,ll i)
{
    return((num>>i)&1);
}
ll fastpowermod(ll b,ll p,ll mod)
{
    ll ans=1;
    while(p)
    {
        if (p%2)
        {
            ans=mul(ans,b,mod);
        }
        b=mul(b,b,mod);
        p/=2;
    }
    return ans;
}
ll fastpower(ll b,ll p)
{
    ll ans=1;
    while(p)
    {
        if (p%2)
        {
            ans=ans*b;
        }
        b=b*b;
        p/=2;
    }
    return ans;
}
double fastpower_double(double b,ll p)
{
    double ans=1;
    while(p)
    {
        if (p%2)
        {
            ans=ans*b;
        }
        b=b*b;
        p/=2;
    }
    return ans;
}

ll summation_formula(ll n)
{
    return (n*(n+1)/2);
}
bool lower_vowel(char c)
{
    return (c=='i'||c=='o'||c=='u'||c=='a'||c=='e');
}
string bigint_mini(string s1,string s2)
{
    if (s1.size()>s2.size())
    {
        return s2;
    }
    else if (s2.size()>s1.size())
    {
        return s1;
    }
    for (int i=0; i<s1.size(); i++)
    {
        if ((s1[i]-'0')>(s2[i]-'0'))
        {
            return s2;
        }
        else if ((s2[i]-'0')>(s1[i]-'0'))
        {
            return s1;
        }
    }
    return s1;
}
double polygon_area(int n,vector<double>X,vector<double>Y)
{
    double area=0.0;
    int j=n-1;
    for (int i=0; i<n; i++)
    {
        area+=(X[j] + X[i]) * (Y[j] - Y[i]);
        j=i;
    }
    return abs(area / 2.0);
}
ll sum_of_digits(string s)
{
    ll sum=0;
    for (int i=0; i<s.size(); i++)
    {
        sum+=s[i]-'0';
    }
    return sum;
}
string makeitbase(ll num,ll base)
{
    string s;
    while(num)
    {
        ll mod=num%base;
        s+=(mod+'0');
        num/=base;
    }
    reverse(s.begin(),s.end());
    return s;
}
bool intersect(ll l1,ll r1,ll l2,ll r2)
{
    return(max(l1,l2)<=min(r1,r2));

}
pll find_intersection(ll l1,ll r1,ll l2,ll r2)
{
    return {max(l1,l2),min(r1,r2)};
}
ll sum_ranges(ll l,ll r)
{
    return summation_formula(r)-summation_formula(l);
}
double power_2(double num)
{
    return num*num;
}
bool isPowerOfTwo(int x)
{
    return (x && !(x & (x - 1)));
}
ll modInverse(ll A,ll M)
{
    return fastpowermod(A,M-2,M);
}

ll num_inrange(ll l,ll r)
{
    l=min(l,r);
    r=max(l,r);
    return r-l+1;
}
ll how_many_factor(ll num,ll t)
{
    ll cnt=0;
    while(num!=0&&num%t==0)
    {
        num/=t;
        cnt++;
    }
    return cnt;
}
pair<pll,pll>formula_rotate_left_(ll x,ll y,ll row_len,ll col_len)
{
    ll nx=col_len-y-1;
    ll ny=x;
    return {{nx,ny},{col_len,row_len}};
}
pair<pll,pll> formula_rotate_right_(ll x,ll y,ll row_len,ll col_len)
{
    ll nx=y;
    ll ny=row_len-x-1;
    return {{nx,ny},{col_len,row_len}};
}
pair<pll,pll> horizontal_rotate(ll x,ll y,ll row_len,ll col_len)
{
    ll nx=x;
    ll ny=col_len-y-1;
    return {{nx,ny},{row_len,col_len}};
}

ll mod_big_integer(string s,ll M)
{
    ll num=0;
    for (ll i=0; i<s.size(); i++)
    {
        num=add(mul(num,10,M),(s[i]-'0'),M);
    }
    return num;
}
struct Point
{
    ll x,y;
};
ll overlappingArea(Point l1, Point r1,Point l2, Point r2)
{

    ll area1=abs(l1.x - r1.x)*abs(l1.y - r1.y);


    ll area2=abs(l2.x - r2.x)*abs(l2.y - r2.y);

    ll areaI=(min(r1.x, r2.x)-max(l1.x, l2.x))*(min(r1.y, r2.y)-max(l1.y, l2.y));

    return areaI;
}
bool doOverlap(Point l1, Point r1, Point l2, Point r2)
{
    if (l1.x>r2.x||l2.x>r1.x)
    {
        return false;
    }

    if (l1.y>r2.y||l2.y>r1.y)
    {
        return false;
    }

    return true;
}

Point intersection_botl(Point l1,Point r1,Point l2, Point r2)
{
    Point topr,botl;
    topr.y=min(r1.y,r2.y);
    topr.x=min(r1.x,r2.x);
    botl.y=max(l1.y,l2.y);
    botl.x=max(l1.x,l2.x);
    return botl;
}

Point intersection_topr(Point l1,Point r1,Point l2, Point r2)
{
    Point topr,botl;
    topr.y=min(r1.y,r2.y);
    topr.x=min(r1.x,r2.x);
    botl.y=max(l1.y,l2.y);
    botl.x=max(l1.x,l2.x);
    return topr;
}
ll comp_two(Point l1,Point l2,Point r1,Point r2)
{
    if (doOverlap(l1,r1,l2,r2))
    {
        return overlappingArea(l1,r1,l2,r2);
    }
    else
    {
        return 0;
    }
}
ll geometric_progression_sum(ll st,ll en,ll k)
{
    return (en*k-st)/(k-1);
}
ll geometric_progression_sum_mod(ll en,ll st,ll k,ll M)
{
    return mul(sub(mul(en,k,M),st,M),modInverse(k-1,M),M);
}
ll makeitnumber(string s)
{
    ll num=0;
    for (int i=0; i<s.size(); i++)
    {
        num+=(s[i]-'0');
        if(i!=s.size()-1)
        {
            num*=10;
        }
    }
    return num;
}
ll M=1e9+7;
const int sz=5e5+10;
const int OO=0x3f3f3f3f;
map<int,int>id;
int root(int x)
{
    if (id[x]==0){return x;}
    return id[x]=root(id[x]);
}
void disjoint_union(int x,int y)
{
    int p=root(x);
    int q=root(y);
    id[p]=q;
}
bool disjoint_find(int x,int y) // if both has the same root they are connected and there's cycle here
{
    return (root(x)==root(y));
}
bool cmp(pll a,pll b)
{
    return (a.S==b.S)?a.F<b.F:a.S>b.S;
}
int main()
{

    IOS;
    int n;
    cin>>n;
    vector<pll>v;
    for (int i=0;i<n;i++)
    {
        int x;
        cin>>x;
        v.push_back({x,0});
    }
    for (int i=0;i<n;i++)
    {
        cin>>v[i].S;
    }

    sort(v.begin(),v.end(),cmp);
    ll ans=0;
    for (int i=0;i<n;i++)
    {
        int rt=root(v[i].F);
        if(!disjoint_find(rt,rt+1)){disjoint_union(rt,rt+1);}
        if (rt!=v[i].F)
        {
            ans+=1LL*(rt-v[i].F)*v[i].S;
        }

    }
    cout<<ans<<endl;




    return 0;

}


