#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>
#include <cassert>
#include <regex>
#include <random>

#define ll long long
#define ld long double
#define ull unsigned ll
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vector<int>>
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const int  Inf = 2 * 1000 * 1000 * 1000;
ll LINF = (ll)4e18;
using namespace std;

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("sum.in", "r", stdin);
	//freopen("sum.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	string a, b;
	cin >> a >> b;
	int n = a.size();
	int m = b.size();

	vector<int>pref(m, 1e9);
	vector<int>suf(m, 1e9);

	int p1 = 0;
	int p2 = 0;

	while (p1 < n) {
		if (a[p1] == b[p2]) {
			pref[p2] = p1 + 1;
			p2++;
		}
		p1++;
	}

	if (pref[m - 1] <= n) {
		cout << b;
		return 0;
	}
	p1 = 0;
	p2 = 0;
	reverse(all(a));
	reverse(all(b));

	while (p1 < n) {
		if (a[p1] == b[p2]) {
			suf[m - p2 - 1] = p1 + 1;
			p2++;
		}
		p1++;
	}

	reverse(all(a));
	reverse(all(b));

	int low = 1, high = m - 1;

	while (low < high) {
		int mid = (low + high) / 2;

		int ok = 0;

		for (int i = mid - 1; i < m; i++) {
			if (i - mid < 0) {
				ok |= suf[i + 1] <= n;
			}
			else if (i == m - 1) {
				ok |= pref[i - mid] <= n;
			}
			else {
				ok |= (suf[i + 1] + pref[i - mid]) <= n;
			}
		}
		
		if (ok) high = mid;
		else low = mid + 1;
	}

	for (int i = low - 1; i < m; i++) {
		if (i - low < 0) {
			if (suf[i + 1] <= n) {
				for (int j = i + 1; j < m; j++) {
					cout << b[j];
				}
				return 0;
			}
		}
		else if (i == m - 1) {
			if (pref[i - low] <= n) {
				for (int j = 0; j < i - low + 1; j++) {
					cout << b[j];
				}
				return 0;
			}
		}
		else {
			if ((suf[i + 1] + pref[i - low]) <= n) {
				int lg = i - low + 1;
				int rg = i;

				for (int j = 0; j < m; j++) {
					if (lg <= j && j <= rg) continue;
					cout << b[j];
				}
				return 0;
			}
		}
	}
	cout << '-';
	return 0;
}