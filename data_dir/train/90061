#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	int n;
	cin >> n;
	
	if(n < 3){
		cout << -1 << endl;
		return 0;
	}

	vector<vector<int>> ans(n, vector<int>(n));
	ans[0][0] = n * n - 7;
	ans[0][1] = n * n - 4;
	ans[0][2] = n * n;
	ans[1][0] = n * n - 5;
	ans[1][1] = n * n - 6;
	ans[1][2] = n * n - 3;
	ans[2][0] = n * n - 8;
	ans[2][1] = n * n - 1;
	ans[2][2] = n * n - 2;
	
	int num = 1, layer = n;
	while(layer > 3){
		if(layer % 2){
			for(int i = 0; i < layer; i++)
				ans[layer - 1][i] = num++;
			for(int i = layer - 2; i >= 0; i--)
				ans[i][layer - 1] = num++;
		}
		else{
			for(int i = 0; i < layer; i++)
				ans[i][layer - 1] = num++;
			for(int i = layer - 2; i >= 0; i--)
				ans[layer - 1][i] = num++;
		}
		layer--;
	}

	for(int i = 0; i < n; i++)
		for(int j = 0; j < n; j++)
			cout << ans[i][j] << " \n"[j + 1 == n];

	return 0;
}

