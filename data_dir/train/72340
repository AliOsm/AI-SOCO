#include <bits/stdc++.h>
using namespace std;
 

vector<int> g[5000];
int vis[5000] = {0}, ord[5000], cur;

void dfs(int u) {
  vis[u] = true;
  for (int v : g[u]) if (not vis[v]) dfs(v);
  ord[u] = cur--;
}

int u[5000], v[5000];
 
int main(int argc, char **argv) {
  ios_base::sync_with_stdio(false); 
  int n, m; cin >> n >> m;
  for (int i = 0; i < m; ++i) {
    cin >> u[i] >> v[i];
    --u[i], --v[i];
    g[u[i]].push_back(v[i]);
  }
  cur = n - 1;
  for (int i = 0; i < n; ++i) if (not vis[i]) dfs(i);
  vector<int> ans(m);
  for (int i = 0; i < m; ++i) {
    if (ord[u[i]] < ord[v[i]]) ans[i] = 1;
    else ans[i] = 2;
  }
  cout << *max_element(ans.begin(), ans.end()) << '\n';
  for (int i = 0; i < m; ++i) cout << ans[i] << " \n"[i == m - 1];
}
