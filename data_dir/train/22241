#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const ll INF = 1e18 + 7;
const int MAXN = 1e5 + 5;
const double eps = 1e-9;
using namespace std;
vii adj[MAXN];
int vis[MAXN];
ll dist[MAXN];

int main()
{
    int n, m, k;
    ni(n), ni(m), ni(k);
    priority_queue<pair<ll,int> > pq;
    for (int i = 0; i < n; i++)
        dist[i] = INF;
    for (int i = 0; i < m; i++)
    {
        int u, v, w;
        ni(u), ni(v), ni(w);
        u--, v--;
        adj[u].pb({v, w});
        adj[v].pb({u, w});
    }
    for (int i = 0; i < k; i++)
    {
        int v, w;
        ni(v), ni(w);
        v--;
        dist[v] = min(dist[v], (ll) w);
        pq.push({-w, -v});
    }
    dist[0] = 0;
    pq.push({0, 0});
    int ans = 0;
    while (!pq.empty())
    {
        int u = pq.top().se;
        pq.pop();
        if (u < 0)
        {
            u = abs(u);
            if (vis[u])
                ans++;
        }
        if (vis[u])
            continue;
        vis[u] = 1;
        for (pii nx: adj[u])
        {
            if (dist[nx.fi] >= dist[u] + (ll) nx.se)
            {
                dist[nx.fi] = dist[u] + (ll) nx.se;
                pq.push({-dist[nx.fi], nx.fi});
            }
        }
    }
    pri(ans);
    return 0;
}
