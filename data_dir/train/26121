#include <stdio.h>
#include <vector>
#include <algorithm>
#define pb push_back
using namespace std;

const int MAXN = (int)1e5 + 5;
const int WHITE = 0;
const int GRAY = 1;
const int BLACK = 2;

vector<int> g[MAXN];
vector<int> g_weak[MAXN];

bool is_cycle[MAXN];
bool used[MAXN];
int comp[MAXN];
int color[MAXN];

void DFS(int node, int comp_idx) {
    used[node] = true;
    comp[node] = comp_idx;

    for (int i = 0; i < (int)g_weak[node].size(); i++) {
        int viz = g_weak[node][i];
        if (!used[viz]) {
            DFS(viz, comp_idx);
        }
    }
    return;
}

void solve(int node, int comp_idx) {
    color[node] = GRAY;

    for (int i = 0; i < (int)g[node].size(); i++) {
        int viz = g[node][i];
        if (color[viz] == WHITE) {
            solve(viz, comp_idx);
        } else if (color[viz] == GRAY) {
            is_cycle[comp_idx] = true;
        }
    }
    color[node] = BLACK;
    return;
}

int main(void) {
    int n, m;
    int a, b;

    scanf(" %d %d", &n, &m);
    for (int i = 0; i < m; i++) {
        scanf(" %d %d", &a, &b);
        g[a].pb(b);
        g_weak[a].pb(b);
        g_weak[b].pb(a);
    }

    int n_comp = 0;
    for (int i = 1; i <= n; i++) {
        if (!used[i]) {
            DFS(i, n_comp++);
        }
    }
    for (int i = 1; i <= n; i++) {
        if (color[i] == WHITE) {
            solve(i, comp[i]);
        }
    }

    int ans = n;
    for (int i = 0; i < n_comp; i++) {
        if (!is_cycle[i]) {
            ans--;
        }
    }
    printf("%d\n", ans);

    return 0;
}
