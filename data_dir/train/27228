#include<bits/stdc++.h>
using namespace std;
const int MAXN=1005;
int cnt[MAXN][MAXN][2]={0};//0->2 1->5
int pre[MAXN][MAXN][2][2]={0};
int dp[MAXN][MAXN][2]={0};
vector<bool> ans;//true->D false->R
int n;
struct INT
{
	int x,y,v;
	bool f;
	INT(){}
	INT(int _x,int _y,int _v,bool _f):x(_x),y(_y),v(_v),f(_f){}
	bool operator < (const INT &b)const
	{
		return v>b.v;
	}
};
bool judge(int x,int y,int flag)
{
	if(x>n||y>n||dp[x][y][flag]!=0x3f3f3f3f)
	{
		return false;
	}
	return true;
}
void dfs(int x,int y,int flag)
{
	priority_queue<INT> Q;
	dp[x][y][flag]=cnt[x][y][flag]==-1?1:cnt[x][y][flag];
	Q.push(INT(x,y,cnt[x][y][flag]==-1?1:cnt[x][y][flag],cnt[x][y][flag]==-1));
	while(!Q.empty()&&dp[n][n][flag]==0x3f3f3f3f)
	{
		INT t;
		int tx,ty;
		bool f;
		t=Q.top();
		Q.pop();
		tx=t.x;
		ty=t.y;
		f=t.f;
		if(judge(tx+1,ty,flag))
		{
			if(f||cnt[tx+1][ty][flag]==-1)
			{
				dp[tx+1][ty][flag]=1;
				pre[tx+1][ty][flag][0]=tx;
				pre[tx+1][ty][flag][1]=ty;
				Q.push(INT(tx+1,ty,1,true));
			}
			else
			{
				dp[tx+1][ty][flag]=dp[tx][ty][flag]+cnt[tx+1][ty][flag];
				pre[tx+1][ty][flag][0]=tx;
				pre[tx+1][ty][flag][1]=ty;
				Q.push(INT(tx+1,ty,dp[tx+1][ty][flag],false));
			}
		}
		if(judge(tx,ty+1,flag))
		{
			if(f||cnt[tx][ty+1][flag]==-1)
			{
				dp[tx][ty+1][flag]=1;
				pre[tx][ty+1][flag][0]=tx;
				pre[tx][ty+1][flag][1]=ty;
				Q.push(INT(tx,ty+1,1,true));
			}
			else
			{
				dp[tx][ty+1][flag]=dp[tx][ty][flag]+cnt[tx][ty+1][flag];
				pre[tx][ty+1][flag][0]=tx;
				pre[tx][ty+1][flag][1]=ty;
				Q.push(INT(tx,ty+1,dp[tx][ty+1][flag],false));
			}
		}
	}
}

void back(int x,int y,int flag)
{
	if(x==0&&y==0)
	{
		return ;
	}
	if(pre[x][y][flag][0]==x)
	{
		ans.push_back(true);
	}
	else if(pre[x][y][flag][1]==y)
	{
		ans.push_back(false);
	}
	back(pre[x][y][flag][0],pre[x][y][flag][1],flag);
}

void cal2(int T,int i,int j)
{
	if(!T)
	{
		cnt[i][j][0]=-1;
		return ;
	}
	while(T%2==0)
	{
		T/=2;
		cnt[i][j][0]++;
	}
}

void cal5(int T,int i,int j)
{
	if(!T)
	{
		cnt[i][j][1]=-1;
		return ;
	}
	while(T%5==0)
	{
		T/=5;
		cnt[i][j][1]++;
	}
}

int main()
{
	int f,T;
	scanf("%d",&n);
	memset(dp,0x3f,sizeof(dp));
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=n;j++)
		{
			scanf("%d",&T);
			cal2(T,i,j);
			cal5(T,i,j);
		}
	}
	dp[0][0][0]=dp[0][0][1]=0;
	dfs(1,1,0);
	dfs(1,1,1);
	f=dp[n][n][0]>dp[n][n][1]?1:0;
	back(n,n,f);
	printf("%d\n",min(dp[n][n][0],dp[n][n][1]));
	for(int i=ans.size()-1;i>=0;i--)
	{
		printf("%c",ans[i]?'R':'D');
	}
}