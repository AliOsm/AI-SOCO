#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define M 200005
#define MOD 998244353
typedef pair<int, int> pii;
typedef long long ll;

// Order Statistic Tree

/* Special functions:
        find_by_order(k) --> returns iterator to the kth largest element counting from 0
        order_of_key(val) --> returns the number of items in a set that are strictly smaller than our item
*/

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>
ordered_set;

ll powi(ll a, ll b)
{
    ll p;
    if(!b) return 1;
    p = powi(a, b/2);
    p = (p*p)%MOD;
    if(b%2) p = (p*a)%MOD;
    return p;
}

ll mmi(ll x)
{
    return powi(x, MOD-2);
}

int ara[M], pos[M];

int main()
{
    int n;
    scanf("%d", &n);

    for(int i = 1; i <= n; i++) scanf("%d", ara+i);
    for(int i = 1; i <= n; i++) { if(ara[i] != -1) pos[ara[i]] = i; }

    ll ans = 0;

    ordered_set ost1, ost2, ost3;

    for(int i = 1; i <= n; i++)
    {
        if(pos[i] == 0) ost2.insert(i);
    }

    int j = 0;

    ll ay1 = 0;
    ll ay2 = 0;
    for(int x: ost2) ay2 += ost2.order_of_key(x);
    ay2 %= MOD;

    for(int i = n; i > 0; i--)
    {
        int x = ara[i];

        if(x != -1)
        {
            ll y1 = ost1.order_of_key(x);
            ll y2 = ost2.order_of_key(x);

            y2 = (y2*j)%MOD;
            y2 = (y2*mmi(ost2.size()))%MOD;

            ans += y1+y2, ans %= MOD;
            ost1.insert(x);
            ay1 += ost2.size()-ost2.order_of_key(x);
            ay1 %= MOD;
        }
        else
        {
            ll y1 = ay1;
            ll y2 = ay2;
            //y2 = (y2*mmi(j))%MOD;
            y2 = (y2*j)%MOD;
            y2 = (y2*mmi(ost2.size()-1))%MOD;

            ll y = y1+y2;
            y = (y*mmi(ost2.size()))%MOD;

            ans += y, ans %= MOD;
            j++;
        }

        //printf("--> %lld\n", ans);
    }

    printf("%lld\n", ans);

    return 0;
}
