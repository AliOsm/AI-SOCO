		//	   - -- --- ---- -----be name khoda----- ---- --- -- -		\\

#include <bits/stdc++.h>
using namespace std;

inline int in() { int x; scanf("%d", &x); return x; }
const int N = 200002, B = 20;

int value[N], lastL[N], lastR[N], dad[N], mn[N], mx[N], n, k, root;
vector <int> g[N], ls;
map <int, int> vtv;
bool isLeft[N];
double ans[N];

bool cmp(int x, int y) { return value[x] < value[y]; }

void go(int v)
{
	mn[v] = mx[v] = value[v];
	for(int u : g[v])
	{
		go(u);
		mn[v] = min(mn[v], mn[u]);
		mx[v] = max(mx[v], mx[u]);
	}
}

void dfs(int v, int lL = -1, int lR = -1, long long sum = 0, int cnt = 0)
{
	lastL[v] = lL;
	lastR[v] = lR;
	if(!g[v].size())
	{
		ls.push_back(value[v]);
		ans[v] = (double)sum / (double)cnt;
		return;
	}
	sort(g[v].begin(), g[v].end(), cmp);
	isLeft[g[v][0]] = 1;
	dfs(g[v][0], v, lR, sum + mn[g[v][1]], cnt + 1);
	dfs(g[v][1], lL, v, sum + mx[g[v][0]], cnt + 1);
}


int main()
{
	n = in();
	for(int i = 0; i < n; i++)
	{
		dad[i] = in() - 1;
		if(dad[i] >= 0)
			g[dad[i]].push_back(i);
		else
			root = i;
		vtv[value[i] = in()] = i;
	}
	go(root);
	dfs(root);
	sort(ls.begin(), ls.end());
	k = in();
	while(k--)
	{
		int x = in();
		int i = upper_bound(ls.begin(), ls.end(), x) - ls.begin() - 1;
		int v;
		if(i == ls.size() - 1)
			v = vtv[ls[i]];
		else if(i < 0)
			v = vtv[ls[0]];
		else
		{
			int lca;
			v = vtv[ls[i]];
			if(isLeft[v])
				lca = dad[v];
			else
				lca = lastL[v];
			if(x > value[lca])
				v = vtv[ls[i + 1]];
		}
		cout << fixed << setprecision(12) << ans[v] << "\n";
	}
}
