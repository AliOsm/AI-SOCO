#include <bits/stdc++.h>

using namespace std;

struct node {
	int l, r, sum, to;
} t[10000001];
int rt[501];
int sz = 0, n, m;

void build (int v, int tl = 1, int tr = n) {
	t[v].to = -1;
	if (tl == tr) {
		return;
	}
	t[v].l = ++sz;
	t[v].r = ++sz;
	int tm = (tl + tr) / 2;
	build (t[v].l, tl, tm);
	build (t[v].r, tm + 1, tr);
}

void push (int v, int tl, int tr) {
	if (tl > tr || t[v].to == -1) return;
	t[v].sum = (tr - tl + 1) * t[v].to;
	if (tl != tr) {
		t[t[v].l].to = t[v].to;
		t[t[v].r].to = t[v].to;
	}
	t[v].to = -1;
}

void upd (int v, int l, int r, int val, int tl = 1, int tr = n) {
	push (v, tl, tr);
	if (tr < l || tl > r) return;
	if (tl >= l && tr <= r) {
		t[v].to = val;
		push (v, tl, tr);
		return;
	}
	int tm = (tl + tr) / 2;
	upd (t[v].l, l, r, val, tl, tm);
	upd (t[v].r, l, r, val, tm + 1, tr);
	t[v].sum = t[t[v].l].sum + t[t[v].r].sum;
}

int get (int v, int l, int r, int tl = 1, int tr = n) {
	push (v, tl, tr);
	if (tr < l || tl > r) return 0;
	if (tl >= l && tr <= r) {
		return t[v].sum;
	}
	int tm = (tl + tr) / 2;
	return get (t[v].l, l, r, tl, tm) + get(t[v].r, l, r, tm + 1, tr);
}

int main () {
	ios_base::sync_with_stdio (0);
	cin.tie (0), cout.tie (0);
	cin >> n >> m;
	string s;
	cin >> s;
	for (int i = 0;i < 26;i ++) {
		rt[i] = ++sz;
		build (rt[i]);
	}
	for (int i = 0;i < s.size ();i ++) {
		upd (rt[s[i] - 'a'], i + 1, i + 1, 1);
	}
	while (m --) {
		int l, r, k;
		cin >> l >> r >> k;
		if (k == 1) {
			int cur = l;
			for (int i = 0;i < 26;i ++) {
				int L = cur;
				int R = cur + get (rt[i], l, r) - 1;
				if (L <= R) {
					upd (rt[i], l, r, 0);
					upd (rt[i], L, R, 1);
					cur = R + 1;
				}
			}
		}
		else {
			int cur = l;
			for (int i = 25;i >= 0;i --) {
				int L = cur;
				int R = cur + get (rt[i], l, r) - 1;
				if (L <= R) {
					upd (rt[i], l, r, 0);
					upd (rt[i], L, R, 1);
					cur = R + 1;
				}
			}
		}
	}
	for (int i = 1;i <= n;i ++) {
		for (char j = 'a';j <= 'z';j ++) {
			if (get (rt[j - 'a'], i, i) ) {
				cout << j; 
				break;
			}
		}
	}
	return 0;
}