#include <iostream>
#include <algorithm>
#include <time.h>
#include <stack>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <set>

using namespace std;

const int N = 200005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

int n , timer = 1;
int l[N] , r[N];
int t[N * 80] , son1[N * 80] , son2[N * 80] , d[N * 80];

void push(int v,int s,int e){
    if(d[v] == 0)return ;
    t[v] += d[v];
    if(s != e){
        if(son1[v] == 0){
            son1[v] = ++timer;
            son2[v] = ++timer;
        }
        d[son1[v]] += d[v];
        d[son2[v]] += d[v];
    }
    d[v] = 0;
}

void update(int v,int s,int e,int l,int r){
    push(v , s , e);
    if(l > r)return ;
    if(s == l && e == r){
        d[v]++;
        push(v , s , e);
        return ;
    }
    int m = (s + e) / 2;
    if(son1[v] == 0){
        son1[v] = ++timer;
        son2[v] = ++timer;
    }
    update(son1[v] , s , m , l , min(r , m));
    update(son2[v] , m+1 , e , max(m+1,l) , r);
    t[v] = min(t[son1[v]] , t[son2[v]]);
}

int get(int v,int s,int e,int l,int r){
    push(v , s , e);
    if(l > r)return inf;
    if(s == l && e == r)return t[v];
    if(son1[v] == 0)return inf;
    int m = (s + e) / 2;
    int a = get(son1[v] , s , m , l , min(r , m));
    int b = get(son2[v] , m+1 , e , max(m+1,l) , r);
    if(a == 0) a = inf;
    if(b == 0) b = inf;
    return min(a , b);
}

int main(){
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
        scanf("%d%d",&l[i],&r[i]);
        update(1 , 0 , inf , l[i] , r[i]);
    }
    int answ = -1;
    for(int i=1;i<=n;i++){
        int x = get(1 , 0 , inf , l[i] , r[i]);
        if(x > 1){
            answ = i;
            break;
        }
    }
    cout<<answ<<endl;
    return 0;
}
