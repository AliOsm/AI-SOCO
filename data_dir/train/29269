#include<iostream>
#include<vector>
#include<algorithm>
#include<map>
#include<iterator>
#include<stack>
#include<string>
#include<climits>
#include<bitset>
#include<queue>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<sstream>
#include<iomanip>
#include<cstring>

#define MOD 1000000007
#define ll long long int
#define vi vector<int>
#define vll vector<long long int>
#define vvi vector<vector<int> >
#define vvl vector<vector<long long int> >
#define vp vector<pair<int, int> >
#define sc(n) scanf("%d", &n)
#define ssync ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define PI 3.14159265

using namespace std;

string toBin(long long int a)
{
	return bitset<64>(a).to_string();
}

string intToString (ll a)
{
	ostringstream temp;
	temp<<a;
	return temp.str();
}

ll powerWithMod(ll base, ll exponent, ll modulus)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if(exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent >>= 1;
		base = (base * base) % modulus;
	}
	return result;
}

ll gcdExtended(ll a, ll b, ll *x, ll *y)
{
	if (a == 0)
	{
		*x = 0, *y = 1;
		return b;
	}
	ll x1, y1;
	ll gcd = gcdExtended(b%a, a, &x1, &y1);
	*x = y1 - (b/a) * x1;
	*y = x1;
	return gcd;
}

ll modInverse(ll a, ll m)
{
	ll x, y;
	ll g = gcdExtended(a, m, &x, &y);
	ll res = (x%m + m) % m;
	return res;
}

const int N = 200010;
int n,i,ans,nn,a[N],f[N],vis[N],j,now,cnt;

int main()
{
	ssync;
	cin>>n;
	nn=n;
	ans=1;
	f[0]=1;
	for(i=1; i<=n; i++)
	{
		cin>>a[i];
		f[i]=(2*f[i-1]) % MOD;
	}
	for(i=1; i<n; i++)
	{
		if(vis[i] == 0)
		{
			now=cnt;
			for(j=i; !vis[j]; j=a[j])
				vis[j]=++cnt;
			if(vis[j] > now)
			{
				nn-=cnt-vis[j]+1;
				ans = 1ll*ans*(f[cnt-vis[j]+1]-2) % MOD;
				if(ans<0)
					ans+=MOD;
			}
		}
	}
	ans=1ll*ans*f[nn]%MOD;
	cout << ans << "\n";
	return 0;
}
