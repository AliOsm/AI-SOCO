#include <iostream>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>
#include <map>
#include <cmath>
#include <set>
#include <deque>
#include <cstdio>
#include <cstring>
#include <iomanip>

#define pb push_back
#define mp make_pair

using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
typedef pair<long long, long long> pll;

const int MOD = 1e9 + 7;

struct point{
	int x, y;
	
};

double const EPS = 1e-9;


double dist(point a, point b){
	return sqrt( (a.x-b.x) * (a.x-b.x) + (a.y-b.y) * (a.y-b.y));
}

point rotate90( point a){

	return (point){ -a.y, a.x};
}

bool straight( point p, point q, point r ){
	
	if(p.x == q.x || p.x == r.x || q.x == r.x ) return true;
	
	if(p.y == q.y || p.y == r.y || q.y == r.y) return true;
	
	return false;
}

int main(){

	int a, b; cin >> a >> b;
	
	point p = (point){ 0, 0 };
	
	for(int i = 1; i < a; i++){
		
		
		int missing = a*a - i*i;
		
		int sq = (int) floor(sqrt(missing));
		
		
		if( sq*sq != missing) continue;
		
		point q = (point) { i, sq };
		
		for(int j = 1; j < b; j++){
			
			missing = b*b - j*j;
			
			sq = (int) floor( sqrt(missing));
			
			if( sq*sq != missing) continue;

			point r = (point) { j, sq };
			
			if( fabs( dist(q, r)*dist(q, r) - a*a - b*b) < EPS && !straight(p, q, r)){
				
				cout << "YES" << endl;
				cout << p.x << " " << p.y << endl;
				cout << q.x << " " << q.y << endl;
				cout << r.x << " " << r.y << endl;
				return 0;
			}

			for(int k = 1; k < 4; k++){
				
				q = rotate90(q);
				for(int m = 1; m < 4; m++){

					r = rotate90(r);
					
					if( fabs( dist(q, r)*dist(q, r) - a*a - b*b) < EPS && !straight(p, q, r)){
						
						cout << "YES" << endl;
						cout << p.x << " " << p.y << endl;
						cout << q.x << " " << q.y << endl;
						cout << r.x << " " << r.y << endl;
						return 0;
					}
					
				}
			}

		}
	}
	
	cout << "NO" << endl;
	return 0;
}
