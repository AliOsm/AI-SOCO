#include<bits/stdc++.h>
//#include <boost/multiprecision/cpp_int.hpp>

//using namespace boost::multiprecision;

using namespace std;
#define PI                      3.1415926535897932384626
#define int                     long long int
#define fi                      first
#define se                      second
#define pq                      priority_queue
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define fill(x,y)               memset(x,y,sizeof(x));
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define hash                    _H
#define lg                      long double         
#define vi                      std::vector<int>
#define sz(x)                   ((int)x.size())


template<typename T> T pow(T a,T b, int m){T ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
template<typename T>T InverseMod(T a,int m){return pow(a,m-2,m);}
template<typename T>int SquareDist(T a,T b){int x = abs(a.fi - b.fi),y = abs(a.se - b.se); return x*x + y*y;}

lg a,b,m;
lg vx,vy,vz;


lg px,py,pz;
long double t;

void movex(long double val) {
    px += val;
    while(px < 0 or px > a) {
        if(px < 0) {
            px = abs(px);
        }
        else if(px > a) {
            px = (a - (px - a));
        }
    }
}

void movez(long double val) {
    pz += val;
    while(pz < 0 or pz > b) {
        if(pz < 0) {
            pz = abs(pz);
        }
        else if(pz >b) {
            pz = (b - (pz - b));
        }
    }
}

void solve() {
    
    cin >> a  >> b >> m; 
    cin >>  vx >> vy >> vz;
    px = a/2;
    py = m;
    pz = 0;
    t = abs(m/vy);
    movex(t*vx);
    movez(t*vz);
    cout << setprecision(20) << px << " " << pz << endl;
}




signed main()
{
    fast;
    int t = 1;
    //cin >> t;
    while(t--)
        solve();
} 