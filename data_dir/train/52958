//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <string>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
#define sz(x) (int)(x).size()
#define mem(a,v) memset((a), (v), sizeof (a))
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int _i = 0; _i < (n); _i++) ni(a[_i])
#define nal(a, n) for (int _i = 0; _i < (n); _i++) nl(a[_i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pil pair<int, long long>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vil vector<pil>
#define vll vector<pll>
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> oset;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e6 + 5;
const double eps = 1e-9;
vi adj[MAXN];
int lo[MAXN], disc[MAXN], tt = 0, U[MAXN], V[MAXN];
int ap[MAXN], vis[MAXN];

void dfs(int u, int p) {
	lo[u] = disc[u] = ++tt;
	int c = 0;
	for (int i: adj[u]) {
		int v = U[i]^V[i]^u;
		if (!disc[v]) {
			c++;
			dfs(v, u);
			lo[u] = min(lo[u], lo[v]);
			if (disc[u] <= lo[v] && p != -1)
				ap[u] = 1;
		} else if (v != p)
			lo[u] = min(lo[u], disc[v]);
	}
	if (p == -1 && c > 1)
		ap[u] = 1;
}

ll calc(int u, int x) {
	deque<int> pq;
	pq.pb(u);
	vis[u] = 1;
	ll ret = 1;
	while (!pq.empty()) {
		int v = pq.front(); pq.pop_front();
		for (int i: adj[v]) {
			int vv = U[i] ^ V[i] ^ v;
			if (vv == x)
				ret = -INF;
			if (vis[vv])
				continue;
			vis[vv] = 1;
			pq.pb(vv);
			ret++;
		}
	}
	if (ret < 0)
		ret = 0;
	return ret;
}

void solve(int _ii) {
	int n, m, a, b; 
	scanf("%d %d %d %d", &n, &m, &a, &b);
	tt = 0;
	for (int i = 1; i <= m; i++) {
		int u, v; scanf("%d %d", &u, &v);
		U[i] = u, V[i] = v;
		adj[u].pb(i);
		adj[v].pb(i);
	}
	dfs(1, -1);
	if (ap[a] == 0 || ap[b] == 0) {
		printf("0\n");
	} else {
		ll l = 0, r = 0;
		vis[a] = vis[b] = 1;
		for (int i: adj[a]) {
			int v = U[i]^V[i]^a;
			if (!vis[v])
				l += calc(v, b);
		}
		for (int i: adj[b]) {
			int v = U[i]^V[i]^b;
			if (!vis[v])
				r += calc(v, a);
		}
		printf("%I64d\n", l * r);
	}
	for (int i = 1; i <= n; i++) {
		lo[i] = disc[i] = ap[i] = vis[i] = 0;
		adj[i].clear();
	}
}

int main() {
	int t; ni(t); for (int i = 1; i <= t; i++) solve(i);
	return 0;
}