#include <bits/stdc++.h>

using namespace std;

const int maxn = (int) 5e5 + 100;

int n, m, x;
int a[maxn], t[maxn * 4];
void build(int v, int tl, int tr){
  if(tl == tr){
    t[v] = a[tl];
  }
  else {
    int mid = (tl + tr) / 2;
    build(v * 2, tl, mid);
    build(v * 2 + 1, mid + 1, tr);
    t[v] = __gcd(t[v * 2], t[v * 2 + 1]);
  }
}


void upd(int v, int tl, int tr, int p, int val){
  if(tl == tr){
    t[v] = val;
  }
  else {
    int mid = (tl + tr) / 2;
    if(p <= mid){
      upd(v * 2, tl, mid, p, val);
    }
    else {
      upd(v * 2 + 1, mid + 1, tr, p, val);
    }
    t[v] = __gcd(t[v * 2], t[v * 2 + 1]);
  }
}

int myrza = 0;
vector < pair < int , pair < int, int > > > w;
int get(int v, int tl, int tr, int l, int r){
  if(myrza){
    return -1;
  }
  if(l <= tl && tr <= r){
    if(tl != tr){

      w.push_back({v * 2, {tl, (tl + tr) / 2}});
      w.push_back({v * 2 + 1, {(tl + tr) / 2 + 1, tr}});
    }
    else {
      w.push_back({v, {tl, tr}});
    }
    return t[v];
  }
  int mid = (tl + tr) / 2;
  if(r <= mid){
    return get(v * 2, tl, mid, l, r);
  }
  else if(l > mid){
    return get(v * 2 + 1, mid + 1, tr, l, r);
  }
  else {
    return __gcd(get(v * 2, tl, mid, l, mid), get(v * 2 + 1, mid + 1, tr, mid + 1, r));
  }
}

int pos, pre;
int check(){
  int ok = 0;
  for(int i = 0; i < w.size() - 1; i++){
    int c = w[i].first, l = w[i].second.first, h = w[i].second.second;
    if(t[c] % x == 0){
      continue;
    }
    if(ok){
      return -1;
    }
    while(l != h){
      if(t[c * 2] % x != 0 && t[c * 2 + 1] % x != 0){
        return -1;
      }
      c *= 2;
        int f = (l + h) / 2;
      if(t[c] % x != 0){
          h = f;
      }
      else {
        c++;
        l = f + 1;
      }
    }
    ok = 1;
    pos = l, pre = t[c];
    upd(1, 1, n, pos, x);
  }
  int ans = 0, c = w[w.size() - 1].first, l = w[w.size() - 1].second.first, h = w[w.size() - 1].second.second;
    if(t[c] % x == 0 && ok){
      ans = 0;
  for(int i = 0; i < w.size(); i++){
    ans = __gcd(ans, t[w[i].first]);
  }
  return ans;
    }
    if(ok){
      return -1;
    }
    while(l != h){
      if(t[c * 2] % x != 0 && t[c * 2 + 1] % x != 0){
        return -1;
      }
      c *= 2;
        int f = (l + h) / 2;
      if(t[c] % x != 0){
          h = f;
      }
      else {
        c++;
        l = f + 1;
      }
    }
    ok = 1;
    pos = l, pre = t[c];
    upd(1, 1, n, pos, x);
  for(int i = 0; i < w.size(); i++){
    ans = __gcd(ans, t[w[i].first]);
  }
  return ans;
}

int l, r, q;
int main(){
  ios_base :: sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cin >> n ;
  for(int i = 1; i <= n; i++){
    cin >> a[i];
  }
  build(1, 1, n);
  cin >> m;
  for(int i = 1; i <= m; i++){
    cin >> q;

    if(q == 1){
      cin >> l >> r >> x;
      if(l == r){
        cout << "YES\n";
        continue;
      }
      if(get(1, 1, n, l, r) == x){
        cout << "YES\n";
        w.clear();
        continue;
      }
      if(check() == x){
        cout << "YES\n";
      }
      else {
        cout << "NO\n";
      }
      w.clear();
      if(pos){
        upd(1, 1, n, pos, pre);
        pos = 0, pre = 0;
      }
    }
    else {
      cin >> l >> r;
      upd(1, 1, n, l, r);
    }
  }

}
