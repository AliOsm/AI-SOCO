#include <iostream>
#include <vector>



struct Point {
    int x;
    int y;
    int z;

    Point(const int x, const int y, const int z)
    : x(x)
    , y(y)
    , z(z)
    {}

    Point()
    : x()
    , y()
    , z()
    {}

    bool operator==(const Point& other) {
        return (x == other.x && y == other.y && z == other.z);
    }


    void operator=(const Point& other) {
        x = other.x;
        y = other.y;
        z = other.z;
    }

    Point& operator+=(const Point& other) {
        x += other.x;
        y += other.y;
        z += other.z;
        return *this;
    }

    Point  operator+(const Point& other) const {
        Point tmp = *this;
        tmp += other;
        return tmp;
    }

    friend std::ostream& operator<<(std::ostream& out, const Point& point) {
        out << "x == " << point.x << "\n" <<  "y == " << point.y << "\n" << "z == " << point.z << "\n";
        return out;
    }
};

int DFS(std::vector<std::vector<std::vector<char> > >& used, Point from, const std::vector<Point>& steps) {
    used[from.x][from.y][from.z] = '#';

	int res = 1;
    for (size_t st = 0; st < steps.size(); ++st) {
        Point to = from + steps[st];
        if (used[to.x][to.y][to.z] != '#') {
	        res += DFS(used, to, steps);
        }
    }

    return res;
}

int main() {
    std::vector<Point> steps(6);
    steps[0] = Point(1, 0, 0);
    steps[1] = Point(-1, 0 ,0);
    steps[2] = Point(0, 0, 1);
    steps[3] = Point(0, 0, -1);
    steps[4] = Point(0, 1 ,0);
    steps[5] = Point(0, -1, 0);



    int x;
    int y;
    int z;
    std::cin >> x >> y >> z;

	std::vector<std::vector<std::vector<char> > > cube(x + 2, std::vector<std::vector<char> >(y + 2, std::vector<char>(z + 2, '#')));

	for (size_t i = 1; i < x + 1; ++i) {
		for (size_t j = 1; j < y + 1; ++j) {
			std::string row;
			std::cin >> row;
			
			for (size_t k = 1; k < z + 1; ++k) {
				cube[i][j][k] = row[k-1];
            }
        }
    }

    int x_start;
    int y_start;
    std::cin >> x_start >> y_start;

    int count = DFS(cube, Point(1, x_start, y_start), steps);
    std::cout << count << "\n";

    return 0;

}