#define __USE_MINGW_ANSI_STDIO 0
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define ff first
#define ss second
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define int long long
#define all(a) a.begin(), a.end()
#define inf (1LL<<61)
#define ull unsigned long long
#define debug1(x) cerr << #x << ": " << x <<'\n'
#define debug2(x, y) cerr << #x << ": " << x << '\t' << #y << ": " << y <<'\n'
#define debug3(x, y, z) cerr << #x << ": " << x << '\t' << #y << ": " << y << '\t' << #z << ": " << z <<'\n'
using namespace std;
int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
int gcd(int x,int y)
{
    if(y==0)
        return x;
    else
        return gcd(y,x%y);
}
int expo(int n,int m,int p)   //modULAR EXPONENTIATION
{
    int r=1;
    n=n%p;
    while(m>0)
    {
        if(m%2)
            r=(r*n)%p;
        n=(n*n)%p;
        m=m/2;
    }
    return r%p;
}
bool isPrime(int n)
{
    // Corner cases
    if (n <= 1)  return false;
    if (n <= 3)  return true;
 
    // This is checked so that we can skip 
    // middle five numbers in below loop
    if (n%2 == 0 || n%3 == 0) return false;
 
    for (int i=5; i*i<=n; i=i+6)
        if (n%i == 0 || n%(i+2) == 0)
           return false;
 
    return true;
}
vector<int>adj[2000005];
int n;
const int N=200005;
bool vis[N];
int par[N];
bool ok;
int p;
void dfs(int s,int pr)
{
	vis[s]=true;
	if(par[s]==s)
		p=s;
	for(int i=0;i<adj[s].size();i++)
	{
		int x=adj[s][i];
		if(!vis[x])
			dfs(x,s);
		else if(x!=pr)
			ok=true,p=pr;
	}
}
int32_t main()
{
   IOS;
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin); 
   freopen("output.txt","w",stdout);
   #endif
   /********************* Code starts here ***********************/	
   cin>>n;
   int ans=0;
   for(int i=0;i<n;i++)
   {
   	cin>>par[i];
   	par[i]--;
   	if(par[i]!=i)
   	{
   		adj[par[i]].pb(i);
   		adj[i].pb(par[i]);
   	}
   }
   memset(vis,false,sizeof(vis));
   vector<int>cy,no;
   for(int i=0;i<n;i++)
   {
   	if(!vis[i])
   	{
   		ok=false;
   		dfs(i,i);
   		if(ok)
   			cy.pb(par[p]);
   		else
   			no.pb(p);
   	}
   }
   p=-1;
   if(cy.size())
   	p=cy[0];
   for(int i=0;i+1<cy.size();i++)
   {
   	par[cy[i]]=cy[i+1];
   	p=cy[i+1];
   	ans++;
   }
   if(p==-1)
   {
   	if(no.size())
   	{
   		p=no[0];
   	}
   	for(int i=1;i<no.size();i++)
   	{
   		par[no[i]]=p;
   		ans++;
   	}
   }
   else
   {
   	int P=-1;
   	if(no.size())
   	{
   		P=no[0];
   	}
   	for(int i=1;i<no.size();i++)
   	{
   		par[no[i]]=P;
   		ans++;
   	}
   	if(P==-1)
   	{
   		par[p]=p;
   		ans++;
   	}
   	else
   	{
   		par[p]=P;
   		ans++;
   	}
   }
   cout<<ans<<endl;
   for(int i=0;i<n;i++)
   {
   	cout<<par[i]+1<<' ';
   }
}
