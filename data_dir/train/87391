#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_pop_bcount

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

#define time stupid_something

const int N = 1e5 + 5;

const int LOG = 17;

int n, m, x, y, time, start[N], finish[N], child[N], dep[N], lca[LOG][N];

vector < int > v[N], nv[N];

vector < pii > ct[N];

void dfs(int root, int x, int t) {

	dep[x] = t;

	lca[0][x] = root;

	start[x] = ++time;

	child[x] = 1;

	foreach(it, v[x])
		if(*it != root)
		{
			dfs(x, *it, t + 1);

			child[x] += child[*it];

			ct[x].pb(mp(start[*it], finish[*it]));

			nv[x].pb(*it);
		}

	finish[x] = time;

}

int get(int x, int y) {

	if(dep[x] < dep[y])
		swap(x, y);

	ROF(i, LOG - 1, 0)
		if(dep[lca[i][x]] >= dep[y])
			x = lca[i][x];

	if(x == y)
		return x;

	ROF(i, LOG - 1, 0)
		if(lca[i][x] != lca[i][y])
		{
			x = lca[i][x];
			y = lca[i][y];
		}

	return lca[0][x];

}

int node(int x, int to, int k) {

	ROF(i, LOG - 1, 0)
		if(k & 1 << i)
			x = lca[i][x];

	return x;

}

int which(int root, int x) {

	return nv[root][lower_bound(ct[root].begin(), ct[root].end(), mp(start[x], inf)) - ct[root].begin() - 1];

}

int main() {
	
	ios :: sync_with_stdio(0);

	cin >> n;

	FOR(i, 1, n - 1)
	{
		cin >> x >> y;

		v[x].pb(y);
		v[y].pb(x);
	}

	dfs(0, 1, 1);

	FOR(i, 1, LOG - 1)
		FOR(j, 1, n)
			lca[i][j] = lca[i - 1][lca[i - 1][j]];

	cin >> m;

	FOR(i, 1, m)
	{
		cin >> x >> y;

		if(x == y)
		{
			cout << n << endl;

			continue;
		}

		int turn = get(x, y);

		int dist = dep[x] + dep[y] - 2 * dep[turn];

		if(dist & 1)
		{
			cout << 0 << endl;

			continue;
		}

		dist /= 2;

		int to_x = dep[x] - dep[turn];
		int to_y = dep[y] - dep[turn];

		int ans;

		if(to_x == dist)
			cout << n - child[which(turn, x)] - child[which(turn, y)] << endl;

		else if(to_x > dist)
		{
			ans = node(x, turn, dist);

			cout << child[ans] - child[which(ans, x)] << endl;
		}
		else
		{
			ans = node(y, turn, dist);

			cout << child[ans] - child[which(ans, y)] << endl;
		}
	}

	return 0;

}
