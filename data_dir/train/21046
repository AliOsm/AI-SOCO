#include<bits/stdc++.h>
using namespace std;
int A[5][5],B[5][5];
int main ()
{
    long long k, a, b, a_score=0,b_score = 0;
    cin >> k >> a >> b;
    for(int i =1 ; i <=3 ; i++)
        for(int j = 1 ; j <= 3; j++)
            cin >> A[i][j];
    for(int i =1 ; i <=3 ; i++)
        for(int j = 1 ; j <= 3; j++)
            cin >> B[i][j];

    set < pair < int, int > > st;
    stack < pair < int, int > > stk;
    map < pair < int , int >,int > mp;
    int cnt = 0 ;
    int x = a, y = b;
    while (1){
        if (mp.find({a,b})!=mp.end()){
            k -= mp[{a,b}] - 1 ;
            x = a,  y = b;
            break;
        }
        mp[{a,b}] = ++cnt;
        if (a == 1 && b == 3)
        {
            a_score++;
        }
        else if (b == 1 && a ==3)
        {
            b_score++;
        }
        else
        {
            if (a > b)
                a_score++;
            else if (b > a)
            {
                b_score++;
            }
        }
        if (cnt == k  ){
            return cout << a_score<<' ' <<b_score,0;
        }
        int olda = a;
        a= A[a][b];
        b= B[olda][b];


    }
    long long acyc = 0, bcyc = 0;
    vector < int > va,vb;
    va.push_back(0);
    vb.push_back(0);
    int c = 0 ;
    do{
        stk.push({a,b});
        if (a == 1 && b == 3)
        {
            acyc++;
        }
        else if (b == 1 && a ==3)
        {
            bcyc++;
        }
        else
        {
            if (a > b)
                acyc++;
            else if (b > a)
            {
                bcyc++;
            }
        }
        int oa=a;
        a= A[a][b];
        b =B[oa][b];
        va.push_back(acyc);
        vb.push_back(bcyc);
        c++;
    }
    while (!(x == a && y == b));
    a_score-=acyc;
    b_score-=bcyc;
    if (k == 0)
        return cout << a_score <<' ' <<b_score,0;
    a_score += acyc * (k/c) + va[k%c];
    b_score += bcyc * (k/c) + vb[k%c];
    cout <<a_score <<' ' <<b_score;






    return 0;
}
