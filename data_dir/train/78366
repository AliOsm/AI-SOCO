#include <bits/stdc++.h>

using namespace std;

using ll = long long;

int lg = 17;
const int MAX = 1<<lg;
const int N = (1 << 17) + 10;
int BIT[N];
void add(int idx, int v = 1){
    while (idx < N){
        BIT[idx] += v;
        idx += idx & -idx;
    }
}
int walk(int idx, int num){
    if (idx & 1) return idx + (BIT[idx] < num);
    if (BIT[idx] >= num) return walk(idx - (idx & -idx) + ((idx & -idx) >> 1), num);
    return walk(idx + ((idx & -idx)>>1), num - BIT[idx]);
}
int n;
int c[2200];
vector < int > V[2200];
int a[2200];
bool good = 1;
int dfs(int u, int mn = INT_MAX){
    a[u] = walk(1<<lg, c[u]);
    add(a[u], -1);
    int subtree = 1;
    for (auto v : V[u])
        subtree += dfs(v);
    good &= subtree >= c[u];
    return subtree;
}
int main(){
    for (int i = 1; i < 2200; ++i)
        add(i);
    scanf("%d", &n);
    int p;
    for (int i = 1 ; i <= n; ++i){
        scanf("%d%d", &p, &c[i]);
        ++c[i];
        V[p].push_back(i);
    }
    if (!(dfs(V[0].back()), good))
        return puts("NO");
    puts("YES");
    for (int i = 1; i <= n; ++i)
        printf("%d ", a[i]);

    return 0;
}
