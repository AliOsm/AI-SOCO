/****************************************************************************
 *                                                                          *
 *                    ==>> BG_PeaceMind(BISHAL)                             *
 *                   try=0; while(!success) try++;                          *
 ****************************************************************************/
#include<bits/stdc++.h>
#define PI acos(-1.0)
#define nl puts("")
#define SZ(x) x.size()
#define pb(x) push_back(x)
#define X first
#define Y second
#define pii pair<int,int>
#define S(a) scanf("%d",&a)
#define P(a) printf("%d",a)
#define SL(a) scanf("%lld",&a)
#define S2(a,b) scanf("%d%d",&a,&b)
#define S3(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define SL2(a,b) scanf("%lld%lld",&a,&b)
#define SL3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define all(v) v.begin(),v.end()
#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define CPY(a,b) memcpy(a,b,sizeof(a))
#define fr(i,a,n) for(i=a;i<=n;i++)
#define rf(i,n,a) for(i=n;i>=a;i--)
#define LB(v,k) lower_bound(v.begin(),v.end(),k)
#define _cin ios_base::sync_with_stdio(0),cin.tie(0)
#define ct(x) cerr<<__LINE__<< ":: "<<#x<<"= "<<x<<endl
#define fi(it,n) for(__typeof(n.begin()) it=n.begin();it!=n.end();it++)
using namespace std;
typedef long long ll;
/// atoi( str.c_str() ); // char string to int
/// sprintf(str,"%d",num);// num to char string
///int month[]={-1,31,28,31,30,31,30,31,31,30,31,30,31}; //Not Leap Yr
///int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Dir
///int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 Dir
///int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight
/************************************************************************
 * /////////////////////////////////////////////////////////////////////*
 ************************************************************************/
/// [ Look at my code below, My code is so amazing !! :P ]
///  Digit    0123456789
#define MX    100005

///==================MAX-FLOW==O( v*v*edges )============///
const int L = 301, N = 2 * L, M = L * L, inf = 1111111;
int s, t;
int ne, head[N], vex[M], cap[M], nxt[M], lvl[N], cur[N];

void add_edge(int u, int v, int c) {
    ++ne;
    vex[ne] = v;
    cap[ne] = c;
    nxt[ne] = head[u];
    head[u] = ne;
}

void add_biedge(int u, int v, int c) {
    add_edge(u, v, c);
    add_edge(v, u, 0);
  //  cout<<u<< " "<<v<< " => "
}

bool bfs_lvl() {
    CLR(lvl);
    lvl[s] = 1;
    queue<int>q;
    for(q.push(s); !q.empty(); q.pop()) {
        int u = q.front();
        if(u == t) return true;
        for(int i = head[u]; i; i = nxt[i]) if( cap[i] && !lvl[vex[i]] )
                lvl[vex[i]] = lvl[u] + 1, q.push(vex[i]);
    }
    return false;
}

int dfs(int u, int mn) {
    if(u == t) return mn;
    int sum = 0;
    for(int& i = cur[u]; i; i = nxt[i]) if(cap[i] && lvl[vex[i]] == lvl[u] + 1)
            if( int f = dfs(vex[i], min(mn - sum, cap[i])) ) {
                cap[i  ] -= f;
                cap[i ^ 1] += f;
                if((sum += f) == mn) return mn;
            }
    if(!sum) lvl[u] = -1;
    return sum;
}

int max_flow() {
    int flow = 0;
    while(bfs_lvl()) CPY(cur, head), flow += dfs(s, inf);
    return flow;
}

void init( ) {
    ne = 1;
    CLR(head);
}

int mat[205][205];
int main() {
    int n, m, x, y, i, j, k;
    S2(n, m);

    init( );
    s = 0;
    t = (n + n + 1);
    int sma=0;
    fr(i, 1, n) {
        S(x);
        sma+=x;
        add_biedge(s, i, x);
        add_biedge(i, i+n, inf);
    }
    int sm = 0;
    fr(i, 1, n) {
        S(x);
        sm += x;
        add_biedge(i + n, t, x);
    }
    fr(i, 1, m) {
        S2(x, y);
        add_biedge(x, n + y, inf);
        add_biedge(y, n + x, inf);
    }
   // cout<<s<< " => "<<t<<endl;
    int flo = max_flow();
    //cout<<flo<< " "<<sm<< " "<<sm<<endl;;
    if(sma!=sm || flo != sm) {
        printf("NO\n");
    } else {
        CLR(mat);
         printf("YES\n");
//        for(int u = 1; u <= n; u++) {
//            for(int i = head[u]; i; i = nxt[i]) {
//                mat[u][i] = (inf - cap[i]);
//            }
//        }

        fr(i,1,ne) {
            x=vex[i^1];
            y=vex[i];
            if(x>=1 && x<=n && y>=n+1 && y<=n+n) {
                if(cap[i]>=0)
                    mat[x][y-n]=inf-cap[i];
            }
        }
        fr(i, 1, n) {
            fr(j, 1, n) {
                printf("%d ", mat[i][j]);
            }
            nl;
        }
    }
    return 0;
}
