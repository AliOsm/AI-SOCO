/* practice with Dukkha */
#include <stdio.h>
#include <stdlib.h>

#define N	1000000
#define M	1000000

int aa[N], tt[N], ll[M], rr[M];

int compare_a(const void *a, const void *b) {
	int i = *(int *) a;
	int j = *(int *) b;

	return aa[i] != aa[j] ? aa[i] - aa[j] : i - j;
}

int compare_r(const void *a, const void *b) {
	int i = *(int *) a;
	int j = *(int *) b;
	
	return rr[i] - rr[j];
}

void update(int i, int n, int a) {
	while (i < n) {
		tt[i] ^= a;
		i |= i + 1;
	}
}

int query(int i) {
	int a = 0;

	while (i >= 0) {
		a ^= tt[i];
		i &= i + 1;
		i--;
	}
	return a;
}

int main() {
	static int ii[N], pp[N], ans[M];
	int n, m, h, h_, i, j, p, a;

	scanf("%d", &n);
	for (i = 0; i < n; i++) {
		scanf("%d", &aa[i]);
		ii[i] = i;
	}
	qsort(ii, n, sizeof *ii, compare_a);
	scanf("%d", &m);
	for (h = 0; h < m; h++)
		scanf("%d%d", &ll[h], &rr[h]), ll[h]--, rr[h]--;
	for (i = 0; i < n; i = j) {
		j = i + 1;
		while (j < n && aa[ii[j]] == aa[ii[i]])
			j++;
		p = -1;
		for (h = i; h < j; h++) {
			pp[ii[h]] = p;
			p = ii[h];
		}
	}
	for (i = 0; i < n; i++)
		update(i, n, aa[i]);
	for (h = 0; h < m; h++)
		ii[h] = h;
	qsort(ii, m, sizeof *ii, compare_r);
	for (i = 0, h = 0; i < n; i++) {
		a = aa[i];
		if (pp[i] != -1)
			update(pp[i], n, a);
		update(i, n, a);
		while (h < m && rr[h_ = ii[h]] == i) {
			ans[h_] = query(rr[h_]) ^ query(ll[h_] - 1);
			h++;
		}
	}
	for (h = 0; h < m; h++)
		printf("%d\n", ans[h]);
	return 0;
}
