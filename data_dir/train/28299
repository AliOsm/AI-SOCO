#include<bits\stdc++.h>
using namespace std;

#define Files

#define rdi(i)          scanf("%d", &i)
#define rdii(i, j)      scanf("%d%d", &i, &j)
#define rep(i, v)       for(int i=0;i<v.size();++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define all(v)          ((v).begin()), ((v).end())
#define clr(v, d)       memset(v, d, sizeof(v))
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
typedef unsigned long long   ull;
const ll OO = 1e8;
const ll OOL = 1e16;
const ll MOD = 1e9 + 7;
const double EPS = 1e-9;

#define pb                  push_back
#define MP                  make_pair
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef pair<int, int>    pii;
typedef pair<ll, ll>      pll;
typedef vector<pair<int, int> > vii;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
typedef vector<ll>        vl;
typedef vector<vector<ll> >     vvl;
typedef vector<pair<ll, ll> >   vll;

ull gcd(ull a, ull b) { return (b == 0 ? a : gcd(b, a % b)); }
ull lcm(ull a, ull b) { return (a * (b / gcd(a, b))); }
ull power(ull a, ull b){ if (b == 0) return 1; ull ans = power(a, b / 2); ans = (ans * ans) % MOD; if (b & 1) ans = (ans * a) % MOD; return ans; }

int m;
int vis[1001000];
vi ans;

int main() {
#ifdef Filesx
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif
	ios::sync_with_stdio(0);

	cin >> m;
	lp(i, m){
		int a; cin >> a;
		vis[a] = 1;
	}
	int cnt = 0;
	lpi(i, 1, 1000001){
		if (!vis[i]) continue;
		if (!vis[1000000 - i + 1]) ans.push_back(1000000 - i + 1);
		else cnt++;
	}
	lpi(i, 1, 1000001){
		if (cnt == 0) break;
		if (vis[i] || vis[1000000 - i + 1]) continue;
		vis[i] = vis[1000000 - i + 1] = 1;
		ans.push_back(i);
		ans.push_back(1000000 - i + 1);
		cnt -= 2;
	}
	cout << ans.size() << endl;
	rep(i, ans) cout << ans[i] << " ";
	cout << endl;

	return 0;

}