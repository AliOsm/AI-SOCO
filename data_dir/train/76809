#include<bits/stdc++.h>
#define int long long
using namespace std;



const int N = 1e5 + 5;



int n, m, q;
int p[N], sz[N], cnt;
vector < int > g[N];
map < pair < int, int >, double > used;
int de[N];
vector < int > f[N];
vector < long long > pref[N];


int mx, curv;
void dfs(int v, int pr = -1, int d = 0){
    if(d > mx){
        mx = d;
        curv = v;
    }
    de[v] = max(de[v], d);
    p[v] = cnt;
    for(int to : g[v]){
        if(to != pr){
            dfs(to, v, d + 1);
        }
    }
}

void dfss(int v, int pr = -1){
    f[cnt].push_back(de[v]);
    for(int to : g[v]){
        if(to != pr){
            dfss(to, v);
        }
    }
}

inline void solve(int x, int y){
    if(p[x] == p[y]){
        cout << "-1\n";
        return;
    }
    x = p[x];
    y = p[y];
    if(sz[x] > sz[y]){
        swap(x, y);
    }
    if(used.find(make_pair(x, y)) == used.end()){
        int d = max(f[x].back(), f[y].back()), ans = 0;
        for(int val : f[x]){
            int j = lower_bound(f[y].begin(), f[y].end(), d - val - 1) - f[y].begin();
            ans += j * d + (sz[y] - j) * (val + 1) + pref[y].back() - pref[y][j];
        }
        used[make_pair(x, y)] = ans / (double)(sz[x] * sz[y]);
    }
    cout << used[make_pair(x, y)] << "\n";
}

main(){
    cout << fixed << setprecision(10);
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin >> n >> m >> q;
    for(int i = 1; i <= m; i++){
        int x, y;
        cin >> x >> y;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    for(int i = 1; i <= n; i++){
        if(!p[i]){
            cnt++;
            mx = -1;
            dfs(i);
            mx = -1;
            dfs(curv);
            mx = -1;
            dfs(curv);
            dfss(curv);
            sz[cnt] = (int)f[cnt].size();
            sort(f[cnt].begin(), f[cnt].end());
            pref[cnt].push_back(0);
            for(auto val : f[cnt]){
                pref[cnt].push_back(pref[cnt].back() + val);
            }
        }
    }
    while(q--){
        int x, y;
        cin >> x >> y;
        solve(x, y);
    }
}
