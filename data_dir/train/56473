#include<bits/stdc++.h>
#define ll long long int
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev_rep(i,n,init) for(int i=n;i>=init;i--)
using namespace std;
typedef vector<vector<ll>> matrix;
const ll MOD=998244353;
ll prod=1;
bool wrong_loop_is_there=false;
void dfs(vector<int> v[],int checked[],int vertex,int x)
{
   if(checked[vertex]==0)
   {
       checked[vertex]=x;
      rep(i,0,v[vertex].size())
       {
          if(checked[v[vertex][i]]==0)
          {
             prod=(prod*x)%MOD;
             dfs(v,checked,v[vertex][i],3-x);    
          }  
          
          if(checked[v[vertex][i]]==x)
          {
            wrong_loop_is_there=true;
            return;
          }
       }
   } 
}
int main(){
    int test;
    cin>>test;
    ll ans=0;
    rep(ii,0,test)
    {
        int n,m;
        cin>>n>>m;
        int checked[n+1];
        int checked1[n+1];
        int parent[n+1];
        rep(i,1,n+1)
        {
         parent[i]=-1;
         checked[i]=0;
         checked1[i]=0;    
        }
        vector<int> v[n+1];
        wrong_loop_is_there=false;
        ll ans=1;
        rep(i,0,m)
        {
            int a,b;
            cin>>a>>b;
            v[a].push_back(b);
            v[b].push_back(a);
        }
        rep(i,1,n+1)
        {
            ll temp=0;
            if(checked[i]==0)
            {
                prod=1;
                dfs(v,checked,i,2);
                if(wrong_loop_is_there)
                break;    
                temp=prod;
                prod=2;
                dfs(v,checked1,i,1);
                temp=(temp+prod)%MOD;
                ans=(ans*temp)%MOD;
            }    
        }
        if(!wrong_loop_is_there)
        cout<<ans<<endl;
        else
        cout<<0<<endl;      
    }
    return 0;    
}