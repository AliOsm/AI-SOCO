#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<LL, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define LL                  long long
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%I64d ",n)
#define pfs(s)              printf("%s\n",s)

#define	deb(x)		        cout<<#x<<" "<<x<<endl

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9+5
#define EPS                 1e-8
#define Pi                  acos(-1.0)

LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}

#define N 1000006
int arr[N];
int sum[N];

int tree[4*N];

void build(int node, int b, int e)
{
    if(b==e)
    {
        tree[node]=arr[b];
        return ;
    }
    int mid=(b+e)/2;
    build(2*node,b,mid);
    build(2*node+1,mid+1,e);
    tree[node]=tree[2*node]&tree[2*node+1];
}

int query(int node,int b, int e, int i, int j)
{
    if(b>j || e<i )
    {
        return (1LL<<32)-1;
    }
    if(b>=i && e<=j)
    {
        return tree[node];
    }
    int mid=(b+e)/2;
    int p1=query(2*node,b,mid,i,j);
    int p2=query(2*node+1,mid+1,e,i,j);
    return p1&p2;

}


int main()
{
    FASTREAD;
    int n,m;
    cin>>n>>m;

    int l[m],r[m],q[m];
    for(int i=0;i<m;i++)
    {
        cin>>l[i]>>r[i]>>q[i];
    }

    for(int pos=0;pos<32;pos++)
    {
        for(int i=1;i<=n;i++) sum[i]=0;

        for(int i=0;i<m;i++)
        {
            int a=l[i];
            int b=r[i];
            int c=q[i];

            if(c>>pos & 1)
            {
                sum[a]++;
                sum[b+1]--;
            }
        }

        for(int i=1;i<=n;i++)
        {
            sum[i]+=sum[i-1];
            if(sum[i]>0)
            {
                arr[i]|=(1<<pos);
            }
        }

    }

    build(1,1,n);

    for(int i=0;i<m;i++)
    {
        if(query(1,1,n,l[i],r[i])!=q[i])
        {
            cout<<"NO"<<endl;
            return 0;
        }
    }

    cout<<"YES"<<endl;
    for(int i=1;i<=n;i++)
        cout<<arr[i]<<" ";


    return 0;
}


/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
