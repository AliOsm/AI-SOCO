#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <cstdio>
#include <map>
#include <unordered_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <unordered_set>
#include <stack> 
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
#define sz(a) (int)a.size()
#define pb push_back
const int MAXN = 35 * 1000;
const double EPS = 1e-9;
typedef long long LL;

string incr(string s) {
	int brain = 0;
	bool allnine = true;
	for (int i = 0; i < s.size(); ++i) {
		if (s[i] != '9') {
			allnine = false;
			break;
		}
	}

	if (allnine) {
		string ans = "1";
		for (int i = 0; i < s.size(); ++i) {
			ans.push_back('0');
		}

		return ans;
	}
	else {
		for (int i = sz(s) - 1; i >= 0; --i) {
			if (s[i] != '9') {
				s[i]++;
				return s;
			}
			else {
				s[i] = '0';
			}
		}
	}
}

int main(int argc, char* argv[]) {

#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("numbers.in", "r", stdin); freopen("numbers.out", "w", stdout);
#endif
	ios::sync_with_stdio(0);
	int n, t;
	cin >> n >> t;
	string s;
	cin >> s;
	string l, r;
	bool found = false;
	for (int i = 0; i < s.size(); ++i) {
		if (s[i] == '.') {
			found = true;
			continue;
		}

		if (found) {
			r.push_back(s[i]);
		}
		else {
			l.push_back(s[i]);
		}
	}

	if (r[0] >= '5') {
		cout << incr(l);
		return 0;
	}

	string newr = "";

	for (int i = 0; i < r.size(); ++i) {
		newr.push_back(r[i]);
		if (r[i] >= '5') {
			break;
		}
	}

	while (newr.size() > 0 && t > 0) {
		if (newr.back() >= '5') {
			newr.pop_back();
			t--;
			if (newr.size() > 0) {
				newr[sz(newr)-1]++;
			}
		}
		else {
			break;
		}
	}

	if (sz(newr) == 0) {
		cout << incr(l);
		return 0;
	}
	else {
		cout << l << "." << newr;
	}


	return 0;
}
