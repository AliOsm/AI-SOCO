#include <bits/stdc++.h>

using namespace std;

#define long long long
#define INF (long) 1e18
#define MOD ((long) 1e9 + 7)
#define READ(v) for (auto &x : v) cin >> x;
#define mll map<long, long>
#define umll umap<long, long>
#define pll pair<long, long>
#define umap unordered_map
#define uset unordered_set
#define pb push_back
#define pf push_front
#define FOR(i, a, b) \
  for (long i = a; i < (long) b; i++)
#define REP(i, n) FOR(i, 0, n-1)
#define SORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr < b.atr; });
#define UNSORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr > b.atr; });
#define PRINTV(v) \
  FOR (_i, 0, v.size()) { \
    printf("%lld ", v[_i]); \
  } \
  printf("\n");

auto gera_primos(long n)
{
  vector<long> primos;
  vector<bool> crivo(n);
  primos.pb(2);
  for (long i = 3; i <= n; i += 2) {
    if (crivo[i]) continue;
    primos.pb(i);
    for (long j = i; j <= n; j += i) {
      crivo[j] = true;
    }
  }
  return primos;
}

struct Link
{
  long from, to, c, f = 0;
  long id;
};

struct Node
{
  long id, ord, altura = -1, total;
  bool visitado = false;
  long ciclo = 0;
  long pai, dist = INF;
  set<long> out, in;

  Node() {
    static long i = 0;
    id = i++;
  }
};

int main()
{
  long n, s;
  cin >> n >> s;

  long x = 2 * INF;
  long d = INF;
  long dif = 2 * INF - 2;
  while (d > 1) {
    if (dif >= s) x -= d;
    else x += d;
    d = (d+1)/2;
    long soma = 0;
    long y = x;
    while (y > 0) {
      soma += y % 10;
      y /= 10;
    }
    dif = x - soma;
  }
  if (x % 10 == 9) x++;
  if (x % 10 == 1) x--;
  long resp = n - x + 1;
  if (resp < 0) resp = 0;
  printf("%lld\n", resp);
}
