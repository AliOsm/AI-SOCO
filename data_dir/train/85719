#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/*------------------------------------BITMASK------------------------------------------*/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/*-----------------------------------------------------------------------------------------------*/

/*-----------------------------DIRECTION_ARRAY-------------------------*/
//------FOUR_DIRECTION---------//
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


//------EIGHT_DIRECTION---------//
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/*--------------------------------------------------------------------------------------*/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}

///-----------------------------START FROM HERE--------------------------------------///

int main(){

    int h,m;
    cin>>h>>m;
    ll H, D, C,N;
    cin>>H>>D>>C>>N;
    double ans=-1;

    while(1){

        if(h>=20){
            ll p=H/N;
            if(H%N)p++;
            double P=p;
            double CC=C;
            CC=(CC-(CC*20)/100);
            double z=p*CC;
            if(ans==-1){
                ans=z;

            }else ans=min(ans, z);
            printf("%0.6f", ans);
            break;
        }else{
             ll p=H/N;
            if(H%N)p++;
            double P=p;
            double CC=C;

            double z=p*CC;
            if(ans==-1){
                ans=z;

            }else ans=min(ans, z);
            //printf("%0.6f", ans);
            H+=D;
            m++;
            if(m==60){
                m=0;
                h++;
            }

        }

    }

}
