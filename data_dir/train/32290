//#pragma GCC optimize ("Ofast")
#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, greater<>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1000;//998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 200'000;
const int LOGN = 20;

int n, m, k;
int a[N + 1], ra[N + 1];
int last[N + 1], prv[N + 1][LOGN], ans[N + 1];

void solve(int test)
{
  cin >> n >> m >> k;
  for (int i = 1; i <= n; ++i) {
    cin >> a[i];
    ra[a[i]] = i;
  }
  a[0] = a[n];
  for (int i = 1; i <= m; ++i) {
    int x;
    cin >> x;
    last[x] = i;
    int v = last[a[ra[x] - 1]];
    prv[i][0] = v;
    for (int j = 1; j < LOGN; ++j)
      prv[i][j] = prv[prv[i][j - 1]][j - 1];
    v = i;
    int c = 0;
    for (int j = LOGN - 1; j >= 0; --j) {
      if (c + (1 << j) < n) {
        c += 1 << j;
        v = prv[v][j];
      }
    }
    ans[i] = v;
    ans[i] = max(ans[i], ans[i - 1]);
  }
  for (int i = 0; i < k; ++i) {
    int l, r; cin >> l >> r;
    cout << static_cast<int>(l <= ans[r]);
  }
  cout << '\n';
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i)
    solve(i);
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
