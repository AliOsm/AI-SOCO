#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define rep(i,a,b) for(int i = (a); i < (b); i++)
#define iter(it,c) for(auto it = (c).begin(); it != (c).end();++it)
#define pb push_back
#define fs first
#define sc second
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;

const int INF = ~(1<<31);
const double pi = acos(-1);
const double EPS = 1e-9;
typedef unsigned long long ull;

template <class T> T smod(T a, T b) {
  return (a % b + b) % b; }

int H[(1<<21)];
int done[1<<21];

void draw(int a) {
    rep(i,0,20) {
        if(a & (1<<i)) cout << 1;
        else cout << 0;
    }
    cout << endl;
}
int memo[1<<21];
int dp(int mask) {
    if(memo[mask] != -1) return memo[mask];
    if(H[mask]) return __builtin_popcount(mask);
    if(mask == 0) return 0;
    int mx = 0;
    rep(i,0,20) {
        if(mask & (1<<i)) mx = max(mx, dp(mask ^ (1<<i)));
    }
    return memo[mask] = mx;
}

int main() {
    cin.sync_with_stdio(false);
    memset(memo,-1,sizeof(memo));
    string s;
    cin >> s;
    rep(i,0,size(s)) {
        int val = 0;
        rep(j,i,size(s)) {
            int t = s[j]-'a';
            if(val & (1<<t)) break;
            val |= (1<<t);
            H[val] = 1;
        }
    }

    int mx = 0;
    memset(done,0,sizeof(done));
    for(int i = 0; i < (1<<20); i++) {
        if(H[i] == 0) continue;
        int total = __builtin_popcount(i);
        int mask = ((1<<20)-1 & (~i));
        mx = max(mx, total+dp(mask));
    }
    cout << mx << endl;

    return 0;
}



