#include <bits/stdc++.h>
using namespace std;

struct Node{
	long long v;
	int id;
	Node(){}
	Node(long long v, int id) : v(v), id(id){}
};

const int N = 1e5 + 10;
const long long INF = 1e18 + 10;

long long a[N];
Node pre[N];
long long ans;
int n;

bool cmp(const Node& x, const Node& y){
	if (x.v == y.v) return x.id < y.id;
	return x.v < y.v;
}

void calc(long long x){
	int d1, d2;
	for (int i = 1; i <= n + 1; i++){
		if (x > 0){
			d1 = lower_bound(pre + i, pre + n + 2, Node(pre[i].v + x + 1, 0), cmp) - pre;
			d2 = upper_bound(pre + i, pre + n + 2, Node(pre[i].v + x, pre[i].id), cmp) - pre;
		}
		else{
			d1 = upper_bound(pre + i, pre + n + 2, Node(pre[i].v - x, pre[i].id), cmp) - pre;
			d2 = lower_bound(pre + i, pre + n + 2, Node(pre[i].v - x, 0), cmp) - pre;
		}
		ans += d1 - d2;
	}
}

int main(){
	int k, p1, p2;
	long long sum = 0;
	scanf("%d %d",&n,&k);
	for (int i = 1; i <= n; i++) scanf("%I64d",&a[i]);
	pre[1] = Node(0, 0);
	for (int i = 1; i <= n; i++){
		sum += a[i];
		pre[i + 1] = Node(sum, i);
	}
	sort(pre + 1, pre + n + 2, cmp);
	ans = 0;
	calc(1);
	if (k == -1) calc(-1);
	else if (k != 1){
		for (long long i = k; abs(i) <= INF / abs(k); i *= k) calc(i);
	}
	printf("%I64d\n", ans);
	return 0;
}