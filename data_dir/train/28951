#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, c[100100];
string a[2][100100];
ll dp[2][100100];
int big[2][2][100100];

int good(int x, int y, int ind) {
    int &res = big[x][y][ind];
    if (res != -1) return res;
    res = 0;
    return res = a[x][ind - 1] <= a[y][ind];
}

ll calc(int has, int ind) {
    if (ind == n) return 0;
    ll &res = dp[has][ind];
    if (res != -1) return res;
    res = inf * 1ll * inf;
    if (good(has, 0, ind)) res = min(res, calc(0, ind + 1));
    if (good(has, 1, ind)) res = min(res, c[ind] + calc(1, ind + 1));
    return res;
}

int main(){

    scanf("%d\n", &n);
    for (int i = 0; i < n; i++) {
        if (i < n - 1) scanf("%d ", c + i);
        else scanf("%d\n", c + i);
    }
    for (int i = 0; i < n; i++) {
        getline(cin, a[0][i]);
        a[1][i] = a[0][i];
        reverse(all(a[1][i]));
    }

    memset(big, -1, sizeof big);
    memset(dp, -1, sizeof dp);

    ll ans = min(calc(0, 1), c[0] + calc(1, 1));

    if (ans == inf * 1ll * inf) ans = -1;
    cout << ans << endl;

    return 0;
}
