/***** TheAnshul *****/
/*
Sample Test case
18
0 1 1 0 2 3 4 1 3 5 1 5 3 5 4 0 2 2
7
0 8
2 5
2 11
16 17
13 14
1 17
17 17
Sample Output
27
6
47
8
9
122
2
*/
#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define ppb         pop_back
#define	endl		'\n'
#define mii         map<ll int,ll int>
#define msi         map<string,ll int>
#define mis         map<ll int, string>
#define rep(i,a,b)    for(ll int i=a;i<b;i++)
#define mpi         map<pair<ll int,ll int>,ll int>
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define vii         vector<pair<ll int, ll int>>
#define vs          vector<string>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define what_is(x)  cerr << #x << " is " << x << endl;
using namespace std;
#define N  2000005
ll n,q;
ll v[N],freq[N],srt[N];
pii qry[N];
ll sblk;
void merge(ll l,ll m,ll r)
{
	ll n1=m-l+1;
	ll n2=r-m;
	vi temp;
	m++;
	ll i=0,j=0;
	while(i<n1 && j<n2)
	{
		if((qry[srt[i+l]].F/sblk)>(qry[srt[j+m]].F/sblk))
		{
			temp.pb(srt[j+m]);
			j++;
		}
		else if((qry[srt[i+l]].F/sblk)<(qry[srt[j+m]].F/sblk))
		{
			temp.pb(srt[i+l]);
			i++;
		}
		else
		{
			if((qry[srt[i+l]].S)<(qry[srt[j+m]].S))
			{
				temp.pb(srt[i+l]);
				i++;
			}
			else
			{
				temp.pb(srt[j+m]);
				j++;
			}
		}
	}
	while(i<n1)
	{
		temp.pb(srt[i+l]);
		i++;
	}
	while(j<n2)
	{
		temp.pb(srt[j+m]);
		j++;
	}
	rep(i,0,n1+n2)
	{
		srt[i+l]=temp[i];
	}
}
void mergeSort(ll l,ll r)
{
	if(l>=r)
		return;
	ll mid=(l+r)/2;
	mergeSort(l,mid);
	mergeSort(mid+1,r);
	merge(l,mid,r);
	return;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		cin>>n;
		cin>>q;
		rep(i,0,n)
		{
			cin>>v[i];
		}
		sblk=sqrt(n);
		rep(i,0,q)
		{
			cin>>qry[i].F>>qry[i].S;
			qry[i].F--;
			qry[i].S--;
			srt[i]=i;
		}
		mergeSort(0,q-1);
		ll mol=0,mor=-1,ans=0;
		vi ansi(q,0);
		rep(i,0,q)
		{
			if(mor>qry[srt[i]].S)
			{
				while(mor>qry[srt[i]].S)
				{
					ans-=(2*freq[v[mor]]-1)*v[mor];
					freq[v[mor]]--;
					mor--;
				}
			}
			else if(mor<qry[srt[i]].S)
			{
				while(mor<qry[srt[i]].S)
				{
					mor++;
					freq[v[mor]]++;
					ans+=(2*freq[v[mor]]-1)*v[mor];
				}
			}
			if(mol>qry[srt[i]].F)
			{
				while(mol>qry[srt[i]].F)
				{
					mol--;
					freq[v[mol]]++;
					ans+=(2*freq[v[mol]]-1)*v[mol];
				}
			}
			else if(mol<qry[srt[i]].F)
			{
				while(mol<qry[srt[i]].F)
				{
					ans-=(2*freq[v[mol]]-1)*v[mol];
					freq[v[mol]]--;
					mol++;
				}
			}
			ansi[srt[i]]=ans;
		}
		rep(i,0,q)
		cout<<ansi[i]<<endl;
	}
	return 0;
}
