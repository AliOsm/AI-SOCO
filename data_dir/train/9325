#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

typedef long long ll;
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

int B[505], N, K, A[505];

int work(int start)
{
    f(i,1,N) B[i] = A[i];
    B[1] = start;
    int ret = start - A[1];
    f(i,2,N)
    {
        int curr = B[i] + B[i-1];
        int add = max(K-curr, 0);
        B[i] += add;
        ret += add;
    }
    return ret;
}

int main()
{
    cin >> N >> K;
    f(i,1,N) cin >> A[i];
    int ans = INF, best = -1;
    f(i,A[1],max(A[1],K))
    {
        int val = work(i);
        if(val < ans)
        {
            ans = val;
            best = i;
        }
    }
    work(best);
    cout << ans << "\n";
    f(i,1,N) cout << B[i] << " ";
}
