#include <bits/stdc++.h>
#define SZ(v) int((v).size())
#define ALL(vec) begin(vec), end(vec)
using namespace std;
typedef long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
template<typename A> string to_string(vector<vector<A>> v) {string r; 
  for (auto x: v) r += "\n" + to_string(x); return r;}
void err(istream_iterator<string>) { cerr << endl; }
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
int const MOD = 1e9 + 7;
long long const INF = 1e18 + 42;
/*************************************/
struct UF {
  vector<int> par, sizes;
  int cnt;
  UF(int n) {
    par.resize(n);
    iota(par.begin(), par.end(), 0);
    sizes.assign(n, 1);
    cnt = n;
  }
  int find(int u) {
    return (u == par[u] ? u : par[u] = find(par[u]));
  }
  bool join(int u, int v) {
    u = find(u);
    v = find(v);
    if (u == v) return false;
    if (rand() % 2) swap(u, v);
    par[v] = u;
    sizes[u] += sizes[v];
    cnt--;
    return true;
  }
  int size(int u) {
    return sizes[find(u)];
  }
  int is_leader(int u) {
    return u == find(u);
  }
};


int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int tt;
  cin >> tt;
  while (tt--) {
    int n, m, a, b;
    cin >> n >> m >> a >> b;
    --a, --b;
    vector<vector<int>> g(n);
    UF uf(n);
    vector<int> A, B;
    for (int i = 0; i < m; ++i) {
      int u, v;
      cin >> u >> v;
      --u, --v;
      if (u == a or u == b or v == a or v == b) {
        if (u == a) {
          A.push_back(v);
        }
        if (v == a) {
          A.push_back(u);
        }
        if (u == b) {
          B.push_back(v);
        }
        if (v == b) {
          B.push_back(u);
        }
      } else {
        //~ g[u].push_back(v);
        //~ g[v].push_back(u);
        uf.join(u, v);
      }
    }
    i64 ans = (i64) (n - 2) * (n - 3) / 2;
    for (int i = 0; i < n; ++i) {
      if (i == a or i == b) continue;
      if (uf.is_leader(i)) {
        i64 s = uf.size(i);
        ans -= s * (s - 1) / 2;
      }
    }
    vector<int> com(n);     
    {
      set<int> s;
      for (int x : A) {
        if (x != b) s.insert(uf.find(x));
      }
      i64 sum = 0;
      for (const int &x : s) {
        com[x]++;
        i64 cur = uf.size(x);
        ans -= sum * cur;
        sum += cur;
      }
    }
    {
      set<int> s;
      for (int x : B) {
        if (x != a) s.insert(uf.find(x));
      }
      i64 sum = 0;
      for (const int &x : s) {
        com[x]++;
        i64 cur = uf.size(x);
        ans -= sum * cur;
        sum += cur;
      }
    }
    {
      i64 sum = 0;
      for (int x = 0; x < n; ++x) if (com[x] == 2) {
        i64 cur = uf.size(x);
        ans += sum * cur;
        sum += cur;
      }
      
    }
    cout << ans << '\n';
  }
  
  
  return 0;
}
