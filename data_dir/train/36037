#include <bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define oo 2000000000
const int N = 1010;
int n , k , grid[6][N];
vector< pair<int ,pair<int,int > > > v , tmp;
pair<int,int> nxt[6][N] ; 

bool move(){
    tmp.clear();
    int r , c , nr , nc;
    for(int i=2;i<=3;i++){
        for(int j=1;j<=n;j++){
            if(grid[i][j] != 0 && grid[nxt[i][j].first][nxt[i][j].second] == 0){
                r = nxt[i][j].first;
                c = nxt[i][j].second;
                while(true){
                    nr = nxt[r][c].first;
                    nc = nxt[r][c].second;
                    if(grid[r][c] != 0){
                        tmp.push_back(make_pair(grid[r][c],make_pair(nr,nc)));
                        grid[r][c] = 0;
                    }
                    if(r == i && c == j)
                        break;
                    r = nr , c = nc;
                }
                for(int i=tmp.size() - 1;i>=0;i--){
                    grid[tmp[i].second.first][tmp[i].second.second] = tmp[i].first;
                    v.push_back(tmp[i]);
                }
                return true;
            }
        }
    }
    return false;
}


void get(){
    for(int j=1;j<=n;j++){
        if(grid[2][j] != 0 && grid[1][j] == grid[2][j]){
            k--;
            grid[2][j] = 0;
            v.push_back(make_pair(grid[1][j],make_pair(1,j)));
        }
        if(grid[3][j] != 0 && grid[3][j] == grid[4][j]){
            k--;
            grid[3][j] = 0;
            v.push_back(make_pair(grid[4][j],make_pair(4,j)));
        }
    }
}

int main(){
    scanf("%d%d",&n,&k);
    for(int i=1;i<=4;i++){
        for(int j=1;j<=n;j++){
            if(i == 2) nxt[i][j] = make_pair(i,j - 1);
            else if(i == 3) nxt[i][j] = make_pair(i , j + 1);
            scanf("%d",&grid[i][j]);
        }
    }
    nxt[2][1] = make_pair(3,1);
    nxt[3][n] = make_pair(2,n);
    while(k > 0){
        get();
        if(k == 0) break;
        if(!move()){
            puts("-1");
            return 0;
        }
    }
    printf("%d\n",(int)v.size());
    for(int i=0;i<(int)v.size();i++){
        printf("%d %d %d\n",v[i].first,v[i].second.first,v[i].second.second);
    }
    return 0;
}
                                                      