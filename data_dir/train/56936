#include <bits/stdc++.h>

using namespace std;

#define loop(i, n) for(int i = 0;i < int(n);i++)
#define rloop(i, n) for(int i = int(n);i >= 0;i--)
#define range(i, a, b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1, v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1, v2, v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1, v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1, v2, v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)
#define endl '\n'

typedef vector<int> vi;
typedef vector<pair<int, int> > vii;
typedef long long ll;
typedef pair<int, int> pii;


const int M = 2e5 + 5;
const int N = 4 * M;
long long s[2][N], lazy[2][N];
ll arr[2][M];
ll ans[M];
int n, c;


void upd(int idx, int id, int l, int r, long long x) {
    lazy[idx][id] += x;
    s[idx][id] += x;
}


void shift(int idx, int id, int l, int r) {//pass update information to the children
    int mid = (l + r) / 2;
    upd(idx, id * 2, l, mid, lazy[idx][id]);
    upd(idx, id * 2 + 1, mid, r, lazy[idx][id]);
    lazy[idx][id] = 0;// passing is done
}


void increase(int x, int y, ll v, int idx, int id = 1, int l = 0, int r = n) {
    if (x >= r or l >= y) return;
    if (x <= l && r <= y) {
        upd(idx, id, l, r, v);
        return;
    }
    shift(idx, id, l, r);
    int mid = (l + r) / 2;
    increase(x, y, v, idx, id * 2, l, mid);
    increase(x, y, v, idx, id * 2 + 1, mid, r);
    s[idx][id] = min(s[idx][id * 2], s[idx][id * 2 + 1]);
}


long long query(int x, int y, int idx, int id = 1, int l = 0, int r = n) {
    if (x >= r or l >= y) return 1e18;
    if (x <= l && r <= y) return s[idx][id];
    shift(idx, id, l, r);
    int mid = (l + r) / 2;
    return min(query(x, y, idx, id * 2, l, mid),
               query(x, y, idx, id * 2 + 1, mid, r));
}


int main() {

#ifndef ONLINE_JUDGE
    //freopen("in.in", "r", stdin);
    //freopen("out.in", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> c;
    loop(j, 2)loop(i, n - 1)cin >> arr[j][i];
    ans[0] = 0;
    increase(0, 1, c, 1);
    range(i, 1, n - 1) {
        increase(0, i, arr[0][i - 1], 0);
        increase(0, i, arr[1][i - 1], 1);
        ans[i] = min(query(0, i, 0), query(0, i, 1));
        increase(i, i + 1, ans[i], 0);
        increase(i, i + 1, ans[i] + c, 1);
    }

    loop(i, n)cout << ans[i] << " ";

    return 0;
}
