#include<iostream>
#include<cstdio>

#include<string>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<stack>

#include<iomanip>
#include<algorithm>
#include<cstring>
#include<ctime>
#include<cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define correct(x, y, n, m) (0 <= x && x < n && 0 <= y && y < m)
#define X first
#define Y second
#define all(a) a.begin(), a.end()
#define pb push_back
#define mp make_pair
#define sz(v) (int)(v.size())

template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }

typedef long long li;
typedef unsigned long long uli;
typedef long double ld;
typedef pair<int, int> pt;

const int N = 100009;
const int MOD = 1e9 + 7;
const int INF = 1e9;
const li INF64 = 2e18;
const ld PI = 3.1415926535897932384626433832795;
const ld eps = 1e-9;

int n, k;
vector <int> v[N];

bool ok(){
    if(sz(v[0]) != 1)
        return false;
    forn(i, N - 1)
        if(1LL * sz(v[i]) * (k + (i == 0)) < sz(v[i + 1]))
            return false;
    return true;
}

int main(){
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
     
    srand(time(NULL));
    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed; 
    
    int n, m, k;
    cin >> n >> m >> k;
    vector <vector <char>  > a(n, vector <char> (m));
    forn(i, n)
        forn(j, m)
            cin >> a[i][j];

    
    int mn = INF;
    if(n > k){
        forn(i, n){
            int cur = 0;
            forn(j, n){
                int cnt1 = 0, cnt2 = 0;
                forn(k, m){
                    cnt1 += (a[i][k] == a[j][k]);
                    cnt2 += (a[i][k] != a[j][k]);
                }
                cur += min(cnt1, cnt2);
            }
            mn = min(mn, cur);
        }
    }
    else{
        forn(mask, 1 << n){
            vector <char> z(n);
            forn(i, n)
                z[i] = '0' + (((1 << i) & mask) > 0);
            int cur = 0;
            forn(j, m){
                int cnt1 = 0, cnt2 = 0;
                forn(i, n){
                    cnt1 += (a[i][j] == z[i]);
                    cnt2 += (a[i][j] != z[i]);
                }
                cur += min(cnt1, cnt2);
            }

            mn = min(mn, cur);
        }
    }

    

    if(mn <= k)
        cout << mn;
    else cout << -1;


    return 0;   
}