/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

const int N = 1e5+5;
bool visited[N];

class DSU{
public:
    vector<int> p;
    int n;
    DSU(int n){
        this->n = n;
        p.resize(n+1);
        iota(p.begin(), p.end(), 0);
    }
    int find(int x){
        return p[x] == x? x: (p[x] = find(p[x]));
    }
    void merge(int x, int y){
        x = find(x);
        y = find(y);
        p[x] = y;
    }
};


class DDimaAndBacteria {
public:
    int n, m, k;
    vector<vector<pair<int, int>>> adj;
    vector<int> arr, group;
    int cnt;
    int dist[501][501];


    void floyd_warshall(){
        f(through, k) f(i, k) f(j, k) if(dist[i][through] + dist[through][j] < dist[i][j]) dist[i][j] = dist[i][through] + dist[through][j];
    }

    int find(int x){
        return group[x];
    }

    void solve(std::istream& in, std::ostream& out) {
		in >> n >> m >> k;
        arr.resize(k);
        group.resize(n);
        int cur = 0, ind = 0;
        DSU d(n);

        f(i, k){
            in >> arr[i];
            f(j, arr[i]) group[ind++] = cur;
            ++cur;
        }
        f(i, 501) f(j, 501) dist[i][j] = INT_MAX;
        adj = vector<vector<pair<int, int>>>(n+1);

        f(i, m){
            int u, v, w; in >> u >> v >> w; --u, --v;
            adj[u].emplace_back(v, w);
            adj[v].emplace_back(u, w);
            if(!w) d.merge(u, v);
            u = find(u), v = find(v);
            dist[u][v] = dist[v][u] = min(dist[u][v], w);
        }

        ind = 0;
        f(i, k){
            int p = d.find(ind);
            f(j, arr[i]){
                int x = d.find(ind++);
                if(x!=p){
                    out << "No";
                    return;
                }
            }
        }

        f(i, k) dist[i][i] = 0;
        floyd_warshall();
        out << "Yes\n";
        f(i, k){
            f(j, k){
                if(dist[i][j] == INT_MAX) dist[i][j] = -1;
                out << dist[i][j] << ' ';
            }
            out << '\n';
        }
	}
};


int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	DDimaAndBacteria solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
