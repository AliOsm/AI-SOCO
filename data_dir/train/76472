#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef double ld;
typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e3 + 5;
const double eps = 1e-9;
using namespace std;
int n, m;
int a[MAXN];
ll _pow[MAXN], dp[MAXN][MAXN];

void read()
{
    ni(n), ni(m);
    nai(a, m);
    sort(a, a + m);
}

void solve()
{
    for (int i = 0; i <= n; i++)
        for (int j = 0; j <= i; j++)
            if (j == 0 || j == i)
                dp[i][j] = 1;
            else
                dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % MOD;
    _pow[0] = _pow[1] = 1;
    for (int i = 2; i <= n; i++)
        _pow[i] = (2 * _pow[i - 1]) % MOD;
    ll ans = 1, tmp = 0, cnt = 0;
    for (int i = 0; i < m; i++)
    {
        if (i == 0)
            tmp = a[i] - 1;
        else
        {
            tmp = a[i] - a[i - 1] - 1;
            ans = (ans * _pow[tmp]) % MOD;
        }
        cnt += tmp;
        ans = (ans * dp[cnt][tmp]) % MOD;
    }
    cnt += n - a[m - 1];
    ans = (ans * dp[cnt][n - a[m - 1]]) % MOD;
    prl(ans);
}

int main()
{
    read();
    solve();
    return 0;
}
