#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int MAXN = 4003;
const int MAXS = 807;
const int MOD = 1e9 + 7;
const ll infint = 1e18 + 3;
int cost[MAXN][MAXN], c[MAXN][MAXN], dp[MAXS][MAXN];
void solve(ll i, ll lj, ll rj, ll lk, ll rk)
{
	ll bestk = -1, cur = 0, midj = (lj + rj) >> 1, f = infint;
	for (int j = min(rk - 1, midj); j >= lk; j--)
	{	
		ll ans = c[j][midj];
		if(j)
			ans += dp[i - 1][j - 1];
		if(bestk == -1 || f > ans)
			f = ans, bestk = j;
	}
	dp[i][midj] = f;
	if(lj != midj)
		solve(i, lj, midj, lk, bestk + 1);
	if(rj != midj + 1)
		solve(i, midj + 1, rj, bestk, rk);
}
int main()
{
    int n, k;
	cin >> n >> k;
	getchar();
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
		    cost[i][j] = getchar() - '0';
			getchar();
		}
	for (int i = 0; i < n; i++)
		for (int j = 1; j < n; j++)
			cost[i][j] += cost[i][j - 1];
	
	for (int i = 0; i < n; i++)
		for (int j = i + 1; j < n; j++)
		{
			c[i][j] = c[i][j - 1] + cost[j][j - 1];
			if(i)
				c[i][j] -= cost[j][i - 1];
		}
	memset(dp, 63, sizeof dp);
	for (int i = 0; i < n; i++)
		dp[1][i] = c[0][i];
	for (int i = 2; i <= k; i++)
		solve(i, 0, n, 0, n);
	cout << dp[k][n - 1];
}