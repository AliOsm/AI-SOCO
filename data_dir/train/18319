#include <bits/stdc++.h>
using namespace std;
#define forn(i, n) for(int i = 0; i < (n); i++)
#define db(x) cerr << #x << " = " << x << '\n'
#define ok(x) ((x) >= 0 && (x) < n)
#define okf(x) ((x) >= 0 && (x) < f)
#define okc(x) ((x) >= 0 && (x) < c)
typedef pair<int, int> ii;
const int N = 4005;

int dr[] = {-1, 0, 1, 0};
int dc[] = {0, 1, 0, -1};

int n, val, arr[N];
vector<ii> ady[N];

void dfs(int v, int cost){
    if( !ady[v].size() ) arr[v - (1<<n)] = cost;
    forn(i, ady[v].size()){
        int to = ady[v][i].first;
        int c = ady[v][i].second;
        dfs(to, cost+c);
    }
}

int main(){
    scanf("%d", &n);
    for(int i = 2; i < (1<<(n+1)); i++){
        scanf("%d", &val);
        ady[ i/2 ].push_back({i, val});
    }
    dfs(1, 0);
    int mx = 0;
    forn(i, (1<<n)){
        //printf("%d ", arr[i]);
        mx = max(arr[i], mx);
    }
    int ans = 0;
    for(int k = (1<<n)/2; k != 0; k/=2){
        //db(k);
        for(int start = 0; start < (1<<n); start += k){
            bool cnd = true; int diff = 1e9;
            for(int i = start; i < start+k && cnd; i++){
                if(arr[i] == mx) cnd = false;
                diff = min(diff, mx-arr[i]);
            }
            if(!cnd) continue;
            ans += diff;
            //db(diff);
            for(int i = start; i < start+k; i++){
                arr[i] += diff;
            }
        }
    }
    printf("%d\n", ans);

	return 0;
}
