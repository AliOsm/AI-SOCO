#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>
using namespace std;

#define snuke(it,x) for (__typeof((x).begin()) it = (x).begin(); it != (x).end(); it ++)
#define mp make_pair
#define pb push_back
typedef pair<int,int> PII;

const int N = 101000;
int n,m,ans[N],dep[N],sz[N],cnt[N];
vector<int> ch[N];
vector<PII> qv[N],qu[N];

void getSize(int u,int deep) {
        sz[u] = 1;
        dep[deep] = u;
        snuke(it,ch[u]) {
                int v = *it;
                getSize(v,deep+1);
                sz[u] += sz[v];
        }
        snuke(it,qv[u]) {
                if (deep-(it->first)<=0) {
                        ans[it->second] = 0;
                } else {
                        qu[dep[deep-(it->first)]].pb(*it);
                }
        }
}
void rem(int u,int deep) {
        cnt[deep] --;
        snuke(it,ch[u]) {
                int v = *it;
                rem(v,deep+1);
        }
}
void ins(int u,int deep) {
        cnt[deep] ++;
        snuke(it,ch[u]) {
                int v = *it;
                ins(v,deep+1);
        }
}

void dfs(int u,int deep) {
        int mx = 0,p = -1;
        snuke(it,ch[u]) {
                int v = *it;
                if (sz[v]>mx) {
                        mx = sz[v];
                        p = v;
                }
        }
        snuke(it,ch[u]) {
                int v = *it;
                if (v!=p) {
                        dfs(v,deep+1);
                        rem(v,deep+1);
                }
        }
        if (p!=-1) {
                dfs(p,deep+1);
        }
        snuke(it,ch[u]) {
                int v = *it;
                if (v!=p) {
                        ins(v,deep+1);
                }
        }
        cnt[deep] ++;
        snuke(it,qu[u]) {
                ans[it->second] = cnt[deep+(it->first)]-1;
        }
}

int main() {
        scanf("%d",&n);
        for (int i = 1; i <= n; i ++) {
                int x;
                scanf("%d",&x);
                ch[x].pb(i);
        }
        scanf("%d",&m);
        for (int i = 0; i < m; i ++) {
                int v,p;
                scanf("%d%d",&v,&p);
                qv[v].pb(mp(p,i));
        }
        getSize(0,0);
        dfs(0,0);
        for (int i = 0; i < m; i ++) {
                printf("%d%c",ans[i]," \n"[i==m-1]);
        }
        return 0;
}