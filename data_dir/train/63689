#include <iostream>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>
#include <map>
#include <cmath>
#include <set>
#include <deque>
#include <cstdio>
#include <cstring>
#include <iomanip>


#define pb push_back
#define mp make_pair

using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
typedef pair<long long, long long> pll;

const int MOD = 1e9 + 7;

const int MAXT = 1000000;

struct Query{
	int servers_amount;
	int time_in_use;
	int id;
	
};

vector< Query > Q[MAXT + 200];
vector<int> to_free[MAXT + 200];
	
	
int ans[MAXT];


int main(){
	
	int servers, q; cin >> servers >> q;
	
	set<int> free_servers;
	
	for(int i = 1; i <= servers; i++)
		free_servers.insert(i);
		
	for(int i = 0; i < q; i++){
		int t, k, d; cin >> t >> k >> d;
		
		Q[t].push_back( (Query) { k, d, i } );
		
	}
	
	
	for(int i = 1; i <= MAXT; i++){
		
		
		for(int j = 0; j < to_free[i].size(); j++){
			
			int act = to_free[i][j];
			
			free_servers.insert(act);
			
		}
		
		int a = Q[i].size();
		
		if( a ){
			
			int will_use = Q[i][0].servers_amount;
			int time = Q[i][0].time_in_use;
			int id = Q[i][0].id;
			
			
			if ( free_servers.size() >= will_use ) {
				
				while( will_use ){
					
					int act = *free_servers.begin();
					
					to_free[ i + time].push_back(act);
					
					ans[id] += act;
					will_use--;
					
					free_servers.erase(act);
				}

				
			}else{
				ans[id] = -1;
			}
		}
	}
	
	for(int i = 0; i < q; i++)
		cout << ans[i] << endl;
		
	return 0;
}
