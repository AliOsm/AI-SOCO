#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

int main() {    
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n;
    long long p, q, r;
    long long koeff[3], koeffSum[3];
    cin >> n >> koeff[0] >> koeff[1] >> koeff[2];
    koeffSum[0] = koeff[0];
    koeffSum[1] = koeff[0] + koeff[1];
    koeffSum[2] = koeff[0] + koeff[1] + koeff[2];
    vector<long long> m(n);
    for (int i = 0; i < n; ++i)
        cin >> m[i];
    vector<long long> dp[3];
    for (int i = 0; i < 3; ++i)
        dp[i].resize(n);
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < 3; ++j)
        {
            dp[j][i] = m[i] * koeffSum[j];
            if (i > 0)
                dp[j][i] = max(dp[j][i], dp[j][i - 1]);
            if (j > 0)
                dp[j][i] = max(dp[j][i], dp[j - 1][i] + koeff[j] * m[i]);
        }
    cout << dp[2][n - 1] << '\n';
    return 0;
}