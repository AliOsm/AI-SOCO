#pragma GCC optimize(2)
#pragma GCC optimize(3)
#pragma GCC optimize(4)
#include<bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define y1 y11
#define pi acos(-1.0)
#define LL long long
//#define mp make_pair
#define DEBUG
#define pb push_back
#define ls rt<<1, l, m
#define rs rt<<1|1, m+1, r
#define ULL unsigned LL
#define pll pair<LL, LL>
#define pli pair<LL, int>
#define pii pair<int, int>
#define piii pair<int, pii>
#define pdd pair<long double, long double>
#define mem(a, b) memset(a, b, sizeof(a))
#define fio ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define fopen freopen("in.txt", "r", stdin);freopen("out.txt", "w", stout);
//head

const int N = 5e3 + 5;
int a[N], pre[N][4], n;
LL dp[N][4], sum[N];
int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i) scanf("%d", &a[i]), sum[i] = sum[i-1]+a[i];
    LL ans = 0;
    for (int i = 1; i <= n; ++i) {
        dp[i][0] = sum[i];
        pre[i][0] = 0;
    }
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= i+1; ++j) {
            if(dp[j-1][0]-(sum[i]-sum[j-1]) > dp[i][1]) {
                dp[i][1] = dp[j-1][0]-(sum[i]-sum[j-1]);
                pre[i][1] = j;
            }
        }
    }

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= i+1; ++j) {
            if(dp[j-1][1]+(sum[i]-sum[j-1]) > dp[i][2]) {
                dp[i][2] = dp[j-1][1]+(sum[i]-sum[j-1]);
                pre[i][2] = j;
            }
        }
    }

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= i+1; ++j) {
            if(dp[j-1][2]-(sum[i]-sum[j-1]) > dp[i][3]) {
                dp[i][3] = dp[j-1][2]-(sum[i]-sum[j-1]);
                pre[i][3] = j;
            }
        }
    }
    int now = pre[n][3];
    vector<int> vc;
    for (int i = 2; i >= 0; --i) {
        if(now) vc.pb(now);
        else vc.pb(1);
        now = pre[now-1][i];
    }
    reverse(vc.begin(), vc.end());
    for (int x : vc) printf("%d ", x-1);
    return 0;
}
