/*
author: madhav_1999 aka orthodoxparadox
16 March 2020 at 4:32 AM
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define len(x) (int) x.size()
#define rev(a) reverse(all(a))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#define inf 2e18
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef MADHAV
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...) 42
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
template <typename T, typename S> ostream& operator << (ostream& os, const map<T, S>& v) { for (auto it : v) os << it.first << "=>" << it.second << endl; return os; }
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int MOD = 1e9 + 7;

int takemod(int a, int mod = MOD){a%=mod;if(a<0)a+=mod;return a;}

int fast_exp(int base, int expo, int mod = MOD) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a, int mod = MOD){return takemod(fast_exp(takemod(a), mod-2, mod), mod);}


const int N = 1e5 + 10, K = 18;
int par[N][K], h[N] = {0}; vector<int> graph[N];
int dist[N];
int dist1[N];
int color[N];

void init(int n) {
	for(int i = 0; i < n + 5; i++) 
		for(int j = 0; j < K; j++) par[i][j] = -1;
}

void dfs(int v, int p = -1) {
	par[v][0] = p;
	if(p != -1) h[v] = h[p] + 1;
		
	for(int i = 1; i < K; i++) 
		if(par[v][i-1] != -1) 
			par[v][i] = par[par[v][i-1]][i-1];

	for(int i: graph[v]) if(i != p) dfs(i, v); 
}

int lca(int v, int u) {
	if(h[v] < h[u]) swap(v, u);
	
	for(int i = K-1; i >= 0; i--) 
		if(par[v][i] + 1 and h[par[v][i]] >= h[u]) 
			v = par[v][i];
	if(v == u) return u;
	
	for(int i = K-1; i >= 0; i--) {
		if(par[v][i] != par[u][i]) {
			v = par[v][i]; u = par[u][i];
	} } return par[v][0]; 
}

void bfs(int n) {
	queue<int> q;
	for(int i = 1; i <= n; i++) {
		if(color[i] == 1) {
			q.push(i);
			dist[i] = 0;
		}
		else {
			dist[i] = inf;
		}

	}
	while(!q.empty()) {
		int u = q.front();
		q.pop();
		for(int &v : graph[u]) {
			if(dist[v] > dist[u] + 1) {
				dist[v] = dist[u] + 1;
				q.push(v);
			}
		}
	}
}

void dist_dfs(int u, int p = -1) {
	if(p + 1) {
		dist1[u] = dist1[p] + 1;
	}
	else {
		dist1[u] = 0;
	}
	for(int &v : graph[u]) {
		if(v == p) continue;
		dist_dfs(v, u);
	}
}

int find_dist(int v, int j) {
	if(v == j) return 0;
	int p = lca(v, j);
	return dist1[v] + dist1[j] - 2*dist1[p];
}

const int SQ = 325;

void solve()
{
	int n, m;
	cin >> n >> m;
	for(int i = 0; i < n - 1; i++) {
		int u, v;
		cin >> u >> v;
		graph[u].pb(v); 
		graph[v].pb(u);
	}
	color[1] = 1;
	init(n);
	dfs(1);
	bfs(n);
	dist_dfs(1);
	vector<int> cur_red;
	for(int i = 1; i <= m; i++) {
		if(i % SQ == 0) {
			cur_red.clear();
			bfs(n);
		}
		int ty, v;
		cin >> ty >> v;
		if(ty == 1) {
			cur_red.push_back(v);
			color[v] = 1;
		}
		else {
			int ans = dist[v];
			for(int &j : cur_red) {
				ans = min(ans, find_dist(v, j));
			} 
			cout << ans << endl;
		}
	}
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef MADHAV
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	clock_t t1, t2;
	t1 = clock();

	int t = 1;
	// cin >> t;
	while(t--)
	{
		solve();
	}
	#ifdef MADHAV
	t2 = clock(); cerr << "time taken: " << (t2-t1)/(dbl)CLOCKS_PER_SEC;
	#endif
	return 0;
}