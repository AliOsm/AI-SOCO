#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
struct Node{
	Node *lch,*rch;
	int sum;
} *root[200010];
void init_tree(int l,int r,Node*& node){
	node=new Node();
	if(l==r) return;
	int mid=(l+r)>>1;
	init_tree(l,mid,node->lch);
	init_tree(mid+1,r,node->rch);
}
Node* modify(int l,int r,int pos,Node* pre){
	Node* cur=new Node();
	*cur=*pre;
	cur->sum++;
	if(l==r) return cur;
	int mid=(l+r)>>1;
	if(pos<=mid) cur->lch=modify(l,mid,pos,pre->lch);
	else cur->rch=modify(mid+1,r,pos,pre->rch);
	return cur;
}
int query(int l,int r,int v,Node* nodeL,Node* nodeR){
	if(l==r) return nodeR->sum-nodeL->sum;
	int mid=(l+r)>>1;
	if(v<=mid) return query(l,mid,v,nodeL->lch,nodeR->lch)+nodeR->rch->sum-nodeL->rch->sum;
	return query(mid+1,r,v,nodeL->rch,nodeR->rch);
}
int a[200010];
vector<int> as;
int main(){
	int n;
	scanf("%d",&n);
	as.reserve(n+10);
	for(int i=1;i<=n;i++){
		scanf("%d",a+i);
		as.push_back(a[i]);
		as.push_back(i);
	}
	sort(as.begin(),as.end());
	init_tree(1,(int)as.size(),root[0]);
	for(int i=1;i<=n;i++){
		int v=lower_bound(as.begin(),as.end(),a[i])-as.begin()+1;
		root[i]=modify(1,(int)as.size(),v,root[i-1]);
	}
	ll ans=0;
	for(int i=1;i<=n;i++){
		if(a[i]<=i) continue;
		int v=lower_bound(as.begin(),as.end(),i)-as.begin()+1;
		ans+=query(1,(int)as.size(),v,root[i],root[min(n,a[i])]);
	}
	printf("%lld\n",ans);
	return 0;
}