#include <bits/stdc++.h>
using namespace std;

typedef tuple<int,int,int> iii;

vector<string> vs;
int n, m, k, mark[55][55], flag;
int dx[] = {1,0,0,-1};
int dy[] = {0,1,-1,0};

bool valid(int x, int y){return x >= 0 and x < n and y >= 0 and y < m;}

void cover(int x, int y){
	vs[x][y] = '*';
	for(int i = 0; i < 4; i++){
		int xx = x+dx[i], yy = y+dy[i];
		if(valid(xx,yy) and vs[xx][yy] == '.')
			cover(xx,yy);
	}
}

int solve(int x, int y){
	mark[x][y] = 1;
	int res = 1;
	if(x == 0 || x == n-1 || y == 0 || y == m-1)
		flag = 1;
	for(int i = 0; i < 4; i++){
		int xx = x+dx[i], yy = y+dy[i];
		if(valid(xx,yy) and vs[xx][yy] == '.' and !mark[xx][yy])
			res += solve(xx, yy);
	}
	return res;
}

int main(){
	
	cin >> n >> m >> k;
	for(int i = 0; i < n; i++){
		string s; cin >> s;
		vs.push_back(s);
	}
	vector<iii> vec;
	for(int i = 0; i < n; i++)
		for(int j = 0; j < m; j++)
			if(vs[i][j] == '.' and !mark[i][j]){
				flag = 0;
				int res = solve(i,j);
				if(!flag)
					vec.push_back(iii(res, i, j));
			}
	sort(vec.begin(), vec.end());

	int sum = 0, cnt = vec.size() - k;
	for(auto par : vec){
		if(cnt == 0) break;
		int w, i, j; tie(w, i, j) = par;
		sum += w;
		cover(i, j);
		cnt--;
	}
	cout << sum << endl;
	for(int i = 0; i < n; i++)
		cout << vs[i] << endl;

    return 0;
}