#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define eb emplace_back
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)); (v).erase(unique(all(v)), (v).end())
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define pqueue priority_queue
#define bitcount(x) __builtin_popcount(x)
#define cps CLOCKS_PER_SEC
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update> ordered_set;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar Or
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, 
             tree_order_statistics_node_update> ordered_multiset;

template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
//ordered_map<int, int> my_map;

template<typename T>
void printv(const vector<T>& v) { for(auto i : v) cerr << i << ' '; cerr << '\n'; }

template<typename T>
void printv(const vector<pair<T, T>>& v) { for(auto p : v) cerr << "(" << p.fi << ", " << p.se << "), "; cerr << '\n'; }

//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

#define N 3005
#define int ll
 #define trace(...) 42

int ft[N];

int query(int i) { //prefix sum upto a[i]
    i++;
    int ans = 0;
    while(i > 0) {
        ans += ft[i];
        i -= i & -i;
    }
    return ans;
}

int query(int i, int j) { //range sum from a[i] .. a[j]
    return query(j) - query(i - 1);
}

void increment(int i, int val) {
    i++;
    while(i < N) {
        ft[i] += val;
        i += i & -i;
    }
}

int n, m;
char grid[N][N];
int idx[N][N];
pii ar[N];
vpii val[N];

int zl[N][N], zld[N][N], zr[N][N];

void prep() {
    rep(i, 0, n) {
        rep(j, 0, m) {
            if(grid[i][j] == 'z') {
                zl[i][j] = 1;
                if(j) zl[i][j] += zl[i][j-1];
            }
        }
    }

    rep(i, 0, n) {
        repi(j, m-1, -1) {
            if(grid[i][j] == 'z') {
                zr[i][j] = 1;
                if(j != m-1) zr[i][j] += zr[i][j+1];
            }
        }
    }

    rep(x, 0, n) {
        int i = x, j = 0;
        while(i >= 0 && j < m) {
            if(grid[i][j] == 'z') {
                zld[i][j] = 1;
                if(j) zld[i][j] += zld[i+1][j-1];
            }
            i--, j++;
        }
    }

    rep(y, 1, m) {
        int i = n-1, j = y;
        while(i >= 0 && j < m) {
            if(grid[i][j] == 'z') {
                zld[i][j] = 1;
                if(j != y) zld[i][j] += zld[i+1][j-1];
            }
            --i, ++j;
        }
    }

//    rep(i, 0, n) {
//        rep(j, 0, m) {
//            trace(i, j, zl[i][j], zr[i][j], zld[i][j]);
//        }
//    }
}

main()
{   
    #ifndef ONLINE_JUDGE
        freopen("C:\\Users\\t-takhul\\Desktop\\input.txt", "r", stdin);
        // freopen("C:\\Users\\t-takhul\\Desktop\\output.txt", "w", stdout);
    #endif
    sync;
    clock_t clk = clock();
    cerr << "I will return...\n";

    cin >> n >> m;
    rep(i, 0, n) cin >> grid[i];

    int ans = 0;
	prep();

    rep(d, 0, n+m-1) {
        fill(val, val + max(m, n), vpii());
        int i, j; 
        if(d < m) i = 0, j = d;
        else      j = m-1, i = d-j;
        int ii = i, jj = j;
        int k = 0;
        while(j >= 0 && i < n) {
            ar[k] = {i, j};
            idx[i][j] = k;
            if(zr[i][j]) {
                val[min(jj, j+zr[i][j]-1)].eb(i, j);
                trace(j+zr[i][j]-1, i, j);
            }
            k++;
            i++, j--;
        }
        fill_n(ft, k+1, 0);

        rep(l, 0, k) {
            int i, j;
            tie(i, j) = ar[l];
            for(auto p : val[j]) {
                int x, y; tie(x, y) = p;
                increment(idx[x][y], 1);
                trace(i, j, x, y);
            }
            int c = min(zld[i][j], zl[i][j]);
            int x = l;
            int kk;
            ans += kk = query(x, x + c - 1);
            trace(i, j, kk);
        }
    }

    cout << ans << '\n';

    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << (double)(clock() - clk) * 1000.0 / cps << '\n';
}

//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment


