#include <bits/stdc++.h>
 
using namespace std;
 
#define endl '\n'
 
 
typedef long long ll;
typedef pair<int, int> pii;


struct segment_tree{

	vector<vector<bool>> st;

	segment_tree(int n) : st(4 * n, vector<bool>(26, false)){}

	void update(int node, int b, int e, int p, int val){
		if(b == e){
			for(int i = 0; i < 26; i++)
				st[node][i] = false;
			st[node][val] = true;
		}
		else{
			int m = (b + e) >> 1;
			int l = node << 1;
			int r = l | 1;

			if(p <= m)
				update(l, b, m, p, val);
			else
				update(r, m + 1, e, p, val);

			for(int i = 0; i < 26; i++)
				st[node][i] = st[l][i] | st[r][i];
		}
	}

	vector<bool> query(int node, int b, int e, int i, int j){
		if(b >= i && e <= j)
			return st[node];
		if(b > j || e < i)
			return vector<bool>(26, false);

		int m = (b + e) >> 1;
		int l = node << 1;
		int r = l | 1;

		auto L = query(l, b, m, i, j);
		auto R = query(r, m + 1, e, i, j);

		vector<bool> ans(26, false);
		for(int i = 0; i < 26; i++)
			ans[i] = L[i] | R[i];

		return ans;

	}

};

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
 
	// freopen("input.txt", "r", stdin);
	// freopen("output.txt", "w", stdout);


	string s;
	cin >> s;

	int n = (int)s.size();

	segment_tree st(n);

	for(int i = 0; i < n; i++)
		st.update(1, 1, n, i + 1, s[i] - 'a');

	int q;
	cin >> q;
	while(q--){
		int t;
		cin >> t;
		if(t == 1){
			int pos;
			char c;
			cin >> pos >> c;
			st.update(1, 1, n, pos, c - 'a');
		}
		else{
			int l, r;
			cin >> l >> r;

			auto ans = st.query(1, 1, n, l, r);

			int dif = 0;
			for(int i = 0; i < 26; i++)
				dif += ans[i];

			cout << dif << endl;

		}
	}


	return 0;
}

