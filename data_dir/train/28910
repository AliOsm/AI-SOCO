#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <memory.h>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 1e18+7;
const long long mod = 1e9+7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (ll (i)=0;(i)<(ll)(n);(i)++)
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, k;
int a[105], b[105];

int f[40005];

int main(void) {
  #ifndef ONLINE_JUDGE
      freopen("input.txt","rt",stdin);
      freopen("output.txt","wt",stdout);
  #endif
  scanf("%d%d", &n, &k);
  forn(i, n){
    scanf("%d", a + i);
  }
  forn(i, n){
    scanf("%d", b + i);
    b[i] *= k;
  }
  memset(f, -1, sizeof f);
  f[10000] = 0;
  forn(i, n){
    int add = a[i] - b[i];
    if(add > 0){
      for(int j = 20004; j >= 0; --j){
        if(f[j] != -1)
          f[j + add] = max(f[j + add], f[j] + a[i]);
      }
    } else {
      for(int j = -add; j <= 20004; ++j){
        if(f[j] != -1)
          f[j + add] = max(f[j + add], f[j] + a[i]);
      }
    }
  }
  cout << (!f[10000] ? -1 : f[10000]) << endl;
  return 0;
}
