#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long ll;

int N, M;
vector<pair<int, int> > ans;
bool comp[100100];

int gcd(int m, int n)
{
    if (m % n == 0)
        return n;
    return gcd(n, m % n);
}

int main()
{
    ios::sync_with_stdio(0);

    cin >> N >> M;
    if (M < N - 1 || M > (ll)N*(N - 1)/2)
    {
        cout << "Impossible\n";
        return 0;
    }

    for (int i = 1; i < N; i++)
        ans.push_back(make_pair(i, i + 1));
    M -= N - 1;

    if (N <= 4000)
    {
        for (int i = 1; i <= N && M > 0; i++)
            for (int j = i + 2; j <= N && M > 0; j++)
                if (gcd(i, j) == 1)
                {
                    ans.push_back(make_pair(i, j));
                    M--;
                }
    }
    else
    {
        vector<int> v;
        v.push_back(1);
        for (int i = 2; i <= N; i++)
            if (!comp[i])
            {
                v.push_back(i);
                for (int j = 2*i; j <= N; j += i)
                    comp[j] = true;
            }
        for (int i = 0; i < v.size() && M > 0; i++)
            for (int j = i + 1; j < v.size() && M > 0; j++)
                if (v[j] - v[i] > 1)
                {
                    ans.push_back(make_pair(v[i], v[j]));
                    M--;
                }
    }

    if (M == 0)
    {
        cout << "Possible\n";
        for (int i = 0; i < ans.size(); i++)
            cout << ans[i].first << " " << ans[i].second << "\n";
    }
    else
        cout << "Impossible\n";

    return 0;
}
