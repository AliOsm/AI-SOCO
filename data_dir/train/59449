#include<bits/stdc++.h>
#define intt long long
#define fr first
#define sc second
#define ii pair<int,int>
#define mk make_pair
#define pb push_back
using namespace std;
string s;

struct trie {
	trie* child[2];
	int cnt=0;
	trie() {
		memset(child, 0, sizeof(child));
	}

	void insertt(int i)
	 {
		if(i==s.length())
			{
			    return;
			}
		else {

			int cur = s[i]-'0';
			if(child[cur] == 0 )
             {
				child[cur] = new trie();

             }
             child[cur]->cnt++;
			child[cur]->insertt(i+1);
		}
	}
	intt get_max(int i)
	{
	    if(i==s.length())
         return 0;
	    if(s[i]=='0')
        {
            if(child[1]&&child[1]->cnt>0)
            {

                int ho=29-i;
                return (1ll<<ho)+(child[1]->get_max(i+1));
            }
            else if(child[0]&&child[0]->cnt>0)
            {

                return 0ll+(child[0]->get_max(i+1));
            }
        }
        else
        {
            if(child[0]&&child[0]->cnt>0)
            {
                int ho=29-i;
                return (1ll<<ho)+(child[0]->get_max(i+1));
            }
            else if(child[1]&&child[1]->cnt>0)
            {
                return 0+(child[1]->get_max(i+1));
            }
        }
	}
	void delet(int i)
	{
	    if(i==s.length())
            return;
        if(s[i]=='1')
        {
            child[1]->cnt--;
            child[1]->delet(i+1);
        }
        else
        {
            child[0]->cnt--;
            child[0]->delet(i+1);
        }
	}


};
string get(intt numm)
{
    string ans;
    intt num=numm;
    while(num!=0)
    {
        ans+=((num%2)+'0');
        num/=2;
    }
    while(ans.size()!=30)
        ans+='0';
    return ans;
}
int main() {

trie root;
int q;
cin>>q;
s=get(0);
root.insertt(0);
while(q--)
{
    char f;
    int x;
    cin>>f>>x;
    s=get(x);
    reverse(s.begin(),s.end());
    if(f=='+')
    root.insertt(0);
    else if(f=='-')
     root.delet(0);
    else
    cout<<root.get_max(0)<<endl;
}

 return 0;
}
