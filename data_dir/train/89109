#include <cstdlib> 
#include <cctype> 
#include <cstring> 
#include <cstdio> 
#include <cmath> 
#include <algorithm> 
#include <vector> 
#include <string> 
#include <iostream> 
#include <sstream> 
#include <map> 
#include <set> 
#include <queue> 
#include <stack> 
#include <fstream> 
#include <numeric> 
#include <iomanip> 
#include <bitset> 
#include <list> 
#include <stdexcept> 
#include <functional> 
#include <utility> 
#include <ctime> 
using namespace std; 

#define PB push_back 
#define MP make_pair 

#define rep(i,n) for(int i=0;i<(n);++i) 
#define FOR(i,l,h) for(int i=(l);i<=(h);++i) 
#define FORD(i,h,l) for(int i=(h);i>=(l);--i) 
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl

typedef vector<int> VI; 
typedef vector<string> VS; 
typedef vector<double> VD; 
typedef long long int64; 
typedef pair<int,int> pii; 

struct Point{ double x,y;};
const double pi=3.1415926535897932384626433832795, eps=1e-4;

double dist(Point a,Point b)
{
	double x=a.x-b.x, y=a.y-b.y;
	return sqrt(x*x+y*y);
}

double Square(Point a,Point b,Point c)
{
	return fabs(a.x*b.y+a.y*c.x+b.x*c.y-b.y*c.x-a.x*c.y-b.x*a.y)/2;
}

bool isInt(double t)
{
	int k=(int) t;
	double p=(double)k, q=(double)(k+1);
	if(fabs(p-t) < eps || fabs(q-t) < eps) return true;
	return false;
}

int main(void)
{
	Point A,B,C;
	cin>>A.x>>A.y>>B.x>>B.y>>C.x>>C.y;
	double a,b,c,S,R;
	double degA,degB,degC;
	double cosA,cosB,cosC;
	a=dist(B,C); b=dist(A,C); c=dist(A,B);
	S=Square(A,B,C);
	R=(a*b*c)/(4*S);
	cosA=(b*b+c*c-a*a)/(2*b*c);
	degA=acos(cosA);
	cosB=(c*c+a*a-b*b)/(2*a*c);
	degB=acos(cosB);
	cosC=(a*a+b*b-c*c)/(2*a*b);
	degC=acos(cosC);
	for(int n=3;n<=200;n++)
	{
		double base=pi/n;
		if(isInt(degA/base) && isInt(degB/base) && isInt(degC/base))
		{
			double area=(n*R*R*sin(2*pi/n))/2;
			printf("%.12lf\n",area);
			return 0;
		}
	}
	return 0;
}