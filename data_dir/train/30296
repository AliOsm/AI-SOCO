//{{{By oToToT
#include <iostream>
#include <iomanip>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <random>
#include <utility>
#include <stack>
#include <sstream>
#include <functional>
#include <deque>
#include <cassert>
using namespace std;
/* include everything for Kotori~ <3 */

using lld = int64_t;
using llu = uint64_t;
using llf = long double;
using PII = pair<int,int>;
using PIL = pair<int,lld>;
using PLI = pair<lld,int>;
using PLL = pair<lld,lld>;
template<typename T>
using maxHeap = priority_queue<T,vector<T>,less<T>>;
template<typename T>
using minHeap = priority_queue<T,vector<T>,greater<T>>;
/* define some types for Ruby! */

#define FF first
#define SS second
#define SZ(x) (int)((x).size())
#define ALL(x) begin(x), end(x)
#define PB push_back
#define WC(x) while(x--)
/* make code shorter for Di~a~ */

template<typename Iter>
ostream& _out(ostream &s, Iter b, Iter e) {
	s<<"[";
	for ( auto it=b; it!=e; it++ ) s<<(it==b?"":" ")<<*it;
	s<<"]";
	return s;
}
template<typename A, typename B>
ostream& operator <<( ostream &s, const pair<A,B> &p ) { return s<<"("<<p.FF<<","<<p.SS<<")"; }
template<typename T>
ostream& operator <<( ostream &s, const vector<T> &c ) { return _out(s,ALL(c)); }
/* make output easier for Ainyan~n~ */

bool debug = 0;
#define DUMP(x) if(debug) cerr<<__PRETTY_FUNCTION__<<":"<<__LINE__<<" - "<<(#x)<<"="<<(x)<<'\n'
template<typename T>
void DEBUG(const T& x){if(debug) cerr<<x;}
template<typename T, typename... Args>
void DEBUG(const T& head,const Args& ...tail){
	if(debug){cerr<<head; DEBUG(tail...);}
}
/* Let's debug with Nico~Nico~Ni */
//}}}
const int N = 300000 + 5;
const int MOD = 1208220623;

inline lld mul(lld a, lld b){return a*b%MOD;}
inline lld add(lld a, lld b){return a+b>=MOD?a+b-MOD:a+b;}
inline lld sub(lld a, lld b){return a-b<0?a-b+MOD:a-b;}

int arr[N], cnt[N];
lld jie[N], inv_jie[N];
lld dp[50][N];
bool dped[50][N];

lld C(int a, int b){return a>=b?mul(jie[a], mul(inv_jie[b], inv_jie[a-b])):0;}
lld qPow(lld,lld);

lld go(int,int);

int main(int argc, char* argv[]){
	if(argc>1 and string(argv[1])=="-D") debug=1;
	if(!debug){ios_base::sync_with_stdio(0);cin.tie(0);}
	int n; cin >> n;
	for(int i=1;i<=n;i++){
		cin >> arr[i];
		cnt[arr[i]]++;
	}
	int g = 0;
	for(int i=1;i<=n;i++) g = gcd(g, arr[i]);
	if(g != 1) {
		cout << -1 << '\n';
		return 0;
	}
	jie[0] = 1, inv_jie[0] = 1;
	for(int i=1;i<N;i++) {
		jie[i] = mul(jie[i-1], i);
		inv_jie[i] = qPow(jie[i], MOD-2);
	}
	for(int i=1;i<N;i++) 
		for(int j=i+i;j<N;j+=i)
			cnt[i] += cnt[j];
	for(int i=1;i<=40;i++) if(go(i, 1)) {
		cout << i << '\n';
		return 0;
	}
	return 0;
}

lld go(int i, int j) {
	if(dped[i][j]) return dp[i][j];
	dped[i][j] = true;
	dp[i][j] = C(cnt[j], i);
	for(int k=2;k*j<N;k++)
		dp[i][j] = sub(dp[i][j], go(i, k*j));
	return dp[i][j];
}

lld qPow(lld a, lld k) {
	// a^k
	lld ret = 1;
	while(k) {
		if(k & 1) ret = mul(ret, a);
		k >>= 1;
		a = mul(a, a);
	}
	return ret;
}