#include <bits/stdc++.h>
using namespace std;

int par[3000], size[3000];

int find(int x) {
	if (par[x] == x) return x;
	return par[x] = find(par[x]);
}

void unite(int x, int y) {
	x = find(x);
	y = find(y);
	if (x == y) return;
	par[y] = x;
	size[x] += size[y];
}

int get_size(int x) {
	return size[find(x)];
}

int h, w, K;
char g[60][60];
bool fil[60][60];

int main() {
	cin >> h >> w >> K;

	for (int i = 0; i < 3000; i++) {
		par[i] = i;
		size[i] = 1;
	}

	for (int i = 0; i < h; i++) {
		scanf("%s", &g[i + 1][1]);
	}
	h += 2;
	w += 2;

	for (int i = 0; i < h; i++) {
		for (int j = 0; j < w; j++) {
			if (g[i][j] == '*') continue;
			if (i + 1 < h && g[i + 1][j] != '*') unite(i * w + j, (i + 1) * w + j);
			if (j + 1 < w && g[i][j + 1] != '*') unite(i * w + j, i * w + (j + 1));
		}
	}

	vector<tuple<int, int, int>> p;
	for (int i = 0; i < h; i++) {
		for (int j = 0; j < w; j++) {
			if (g[i][j] != '*' && find(i * w + j) == i * w + j && find(i * w + j) != find(0)) {
				p.emplace_back(get_size(i * w + j), i, j);
			}
		}
	}
	sort(p.begin(), p.end());

	int num = 0;
	for (int i = 0; i < (int)p.size() - K; i++) {
		int c, y, x;
		tie(c, y, x) = p[i];
		num += c;
		fil[y][x] = true;
	}

	cout << num << endl;
	for (int i = 1; i < h - 1; i++) {
		for (int j = 1; j < w - 1; j++) {
			int r = find(i * w + j);
			int y = r / w;
			int x = r % w;
			if (g[i][j] != '*' && fil[y][x]) g[i][j] = '*';
			cout << g[i][j];
		}
		cout << endl;
	}
}