#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())

#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);

#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;

template <typename T> using orderset = tree <T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>; // find_by_order, order_of_key

const int N = 400005;
int n,ara[N],bara[N];
int A[N],B[N],C[N];
int bit[N];

void update(int idx,int v)
{
    while(idx < N){
        bit[idx] += v;
        idx += (idx&-idx);
    }
}
int query(int idx)
{
    int ret = 0;
    while(idx > 0){
        ret += bit[idx];
        idx -= (idx&-idx);
    }
    return ret;
}

int main()
{
    FastRead
    cin >> n;
    REP(i,n)cin >> ara[i];
    REP(i,n)cin >> bara[i];

    REP(i,n)
    {
        A[i]= ara[i] - query(ara[i] + 1);
        update(ara[i] + 1,1);
    }
    MEM(bit,0);
    REP(i,n)
    {
        B[i]= bara[i] - query(bara[i] + 1);
        update(bara[i] + 1,1);
    }

//    REP(i,n)cout << A[i] << " ";
//    cout << endl;
//    REP(i,n)cout << B[i] << " ";
//    cout << endl;

    int fx = 0,carry = 0;
    orderset<int>st;
    for(int i = 0;i < n;i++)st.insert(i);

    for(int i = n - 1;i >= 0;i--,fx++){
        int d = A[i] + B[i] + carry;
        if(d > fx){
            d = d % (fx + 1);
            carry = 1;
        }else{
            carry = 0;
        }
        C[i] = d;
    }
    for(int i = 0;i < n;i++){
        int ans = *st.find_by_order(C[i]);
         cout <<ans << " ";
        st.erase(ans);
    }
}
