#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
#include <cassert>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
typedef complex<double> point;
#define X real()
#define Y imag()
#define EPS 1E-9
point read(){
  double x , y;
  scanf("%lf%lf" , &x , &y);
  return point(x , y);
}
point C1 , C2;
vector<point> R1 , R2;
double DST2(const point& p1 , const point& p2){
  return SQR(p1.X - p2.X) + SQR(p1.Y - p2.Y);
}
double vp(const point& f , const point& s){
  return f.X*s.Y - f.Y*s.X;
}
int sgn(double w){
  return fabs(w) < EPS ? 0 : (w > 0 ? 1 : -1);
}
bool intersect(const point& C , double R,
               const point& p1 ,
               const point& p2){
  if(sgn(DST2(C , p1) - SQR(R)) == 0) return true;
  if(sgn(DST2(C , p2) - SQR(R)) == 0) return true;
  bool in1 = false , in2 = false;
  if(DST2(C , p1) < SQR(R)) in1 = true;
  if(DST2(C , p2) < SQR(R)) in2 = true;
  if(in1 && in2) return false;
  if((in1 || in2) && (!in1 || !in2)) return true;
  double H = fabs(vp(p1 - C , p2 - C) / abs(p1 - p2));
  if(H > R + EPS) return false;
  point d1 = p1 - C , d2 = p2 - C;
  point mid = point(-(p2-p1).Y , (p2-p1).X);
  if(sgn(vp(d1 , mid)) * sgn(vp(mid , d2)) >= 0)
   return true;
  mid = point(-mid.X , -mid.Y);
  if(sgn(vp(d1 , mid)) * sgn(vp(mid , d2)) >= 0)
   return true;
  return false;
}
bool check(){
  for(int i=0;i<sz(R1);++i){
   point p1 = R1[i];
   point p2 = R1[(i+1)%sz(R1)];
   for(int j=0;j<sz(R2);++j)
    if(intersect(C1 + R2[j] - C2 , abs(C1 - C2),
                 p1 , p2)) return true;
                           }
  return false;
}
void say_yes(){
  puts("YES");
  exit(0);
}
int main(){
  int N;
  C1 = read();
  scanf("%d" , &N);
  for(int i=0;i<N;++i) R1.pb(read());
  C2 = read();
  scanf("%d" , &N);
  for(int i=0;i<N;++i) R2.pb(read());
  if(check()) say_yes();
  R1.swap(R2) , swap(C1 , C2);
  if(check()) say_yes();
  puts("NO");
  return 0;
}
