#include <bits/stdc++.h>
using namespace std;

int n, m;
vector<int> v[48];
vector<int> t[16];
int ans;
bool s[48];

void solve(int st) {
	bool visit[n];
	memset(visit, false, sizeof(visit));
	visit[st] = true;
	vector<int> team;
	team.push_back(st);
	queue<int> que;
	que.push(st);
	while(!que.empty()) {
		int q = que.front();
		que.pop();
		for(int i = 0; i < v[q].size(); ++i) {
			int p = v[q][i]; bool find = false;
			if(visit[p]) {
				continue;
			}
			visit[p] = true;
			for(int j = 0; j < team.size(); ++j) {
				if(team[j] == p) {
					find = true;
					break;
				}
			}
			if(!find) {
				team.push_back(p);
			}
			que.push(p);
		}
	}
	int q = int(team.size());
	for(int i = 0; i < ans; ++i) {
		if(t[i].size() + q <= 3) {
			for(int j = 0; j < q; ++j) {
				t[i].push_back(team[j]);
				s[team[j]] = true;
			}
			return;
		}
	}
}

int main (int argc, char *argv[])
{
	memset(s, false, sizeof(s));

	scanf("%d%d", &n, &m);
	while(m--) {
		int from, to;
		scanf("%d%d", &from, &to);
		from--; to--;
		v[from].push_back(to);
		v[to].push_back(from);
	}
	ans = n/3;
	for(int i = 0; i < n; ++i) {
		int max_i = -1;
		for(int j = 0; j < n; ++j) {
			if(!s[j]) {
				if(max_i == -1) {
					max_i = j;
				} else {
					if(v[j].size() > v[max_i].size()) {
						max_i = j;
					}
				}
			}
		}
		if(max_i == -1) {
			break;
		}
		solve(max_i);
		if(!s[max_i]) {
			printf("-1");
			return 0;
		}
	}
	for(int i = 0; i < ans; ++i) {
		for(int j = 0; j < t[i].size(); ++j) {
			printf("%d ", t[i][j] + 1);
		}
		printf("\n");
	}
	return 0;
}

