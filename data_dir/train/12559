#include <vector>
#include <iostream>
#include <cstring>
#include <set>
#include <functional>
#include <ctime>
#include <cassert>
#include <algorithm>
#include <complex>
#include <queue>
using namespace std;

typedef pair<int,int> PII;
typedef pair<PII,int> PPI;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<PII> VP;
typedef long long Long;
#define MOD 1000000007
Long mem[402][402];
Long dp(int k, int c){
	if(c == 0)return 1;
	if(k == 1)return c <= 1;
	if(mem[k][c] != -1)return mem[k][c];
	Long w = 0;
	
	// one path at parent and (c-1) paths at the children
	for (int i = 0; i < c; ++i) {
		Long t = dp(k-1, i) * dp(k-1, c-1 - i);
		w += t % MOD;
	}

	// paths not containing the parent
	for (int i = 0; i <= c; ++i) {
		Long t = dp(k-1, i) * dp(k-1, c - i);
		w += t % MOD;
	}
	
	// one path extended to the parents
	for (int i = 0; i <= c; ++i) {
		Long t = dp(k-1, i) * dp(k-1, c - i);
		t %= MOD;
		t = t * (2 * c);
		w += t % MOD;
	}
	
	for (int i = 0; i <= c+1; ++i) {
		Long t = dp(k-1, i) * dp(k-1, c+1 - i);
		t %= MOD;
		t = t * (c+1) * (c);
		w += t % MOD;
	}
	
	
	return mem[k][c] = w % MOD;	
}



int main() {
	memset(mem,-1,sizeof(mem));
	int N;
	cin >> N;
	cout << dp(N, 1) << endl;
	
}

/*




 */
