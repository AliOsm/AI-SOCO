#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cstdint>
#include <cstdio>
#include <algorithm>
#include <bitset>
#include <queue>
using namespace std;

struct pos
{
    int x, y, offset;
};

void solve(int num_test = 0)
{
    int n, m;
    scanf("%d%d", &n, &m);
    vector<vector<bitset<4>> > g(n, vector<bitset<4>> (m) );
    for (int i = 0; i < n; ++i)
    {
        getchar();
        for (int j = 0; j < m; ++j)
        {
            char ch;
            scanf("%c", &ch);
            switch (ch)
            {
            case '+':
            case '|':
            case '^':
            case 'L':
            case 'R':
            case 'D':
                g[i][j].set(0);
            }

            switch (ch)
            {
            case '+':
            case '-':
            case '>':
            case 'L':
            case 'U':
            case 'D':
                g[i][j].set(1);
            }

            switch (ch)
            {
            case '+':
            case '|':
            case 'v':
            case 'L':
            case 'U':
            case 'R':
                g[i][j].set(2);
            }

            switch (ch)
            {
            case '+':
            case '-':
            case '<':
            case 'D':
            case 'U':
            case 'R':
                g[i][j].set(3);
            }
        }
    }

    int xa, ya, xb, yb;
    scanf("%d%d", &xa, &ya);
    scanf("%d%d", &xb, &yb);
    --xa, --ya, --xb, --yb;

    queue<pos> q;
    q.push({ xa, ya, 0 });

    int dx[] = { -1, 0, 1,  0 };
    int dy[] = { 0, 1, 0, -1};
    int w[] =  { 2, 3, 0, 1};

    int inf = 1000 * 1000 * 1000;
    vector<vector<vector<int> > > d(n, vector<vector<int> >(m, vector<int>(4, inf)));
    d[xa][ya][0] = 0;
    while (!q.empty())
    {
        pos v = q.front();
        q.pop();
        for (int i = 0; i < 4; ++i)
        {
            int nx = v.x + dx[i];
            int ny = v.y + dy[i];
            if (nx < 0 || nx >= n || ny < 0 || ny >= m)
                continue;
            if (g[v.x][v.y][(i - v.offset + 4) % 4] && g[nx][ny][(w[i] - v.offset + 4) % 4])
            {
                pos next{ nx, ny, v.offset };
                if (d[nx][ny][v.offset] > d[v.x][v.y][v.offset] + 1)
                {
                    d[nx][ny][v.offset] = d[v.x][v.y][v.offset] + 1;
                    q.push(next);
                }
            }
        }

        pos next{ v.x, v.y, (v.offset + 1) % 4 };
        if (d[next.x][next.y][next.offset] > d[v.x][v.y][v.offset] + 1)
        {
            d[next.x][next.y][next.offset] = d[v.x][v.y][v.offset] + 1;
            q.push(next);
        }
    }
    int ans = inf;
    for (int i = 0; i < 4; ++i)
    {
        ans = min(ans, d[xb][yb][i]);
    }
    if (ans == inf)
        ans = -1;
    printf("%d\n", ans);
}

int main(void)
{
    //ios::sync_with_stdio(false);
    solve();
    return 0;
}