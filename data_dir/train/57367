#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define oo 1e9
#define ll long long
#define ld long double
#define IO ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
using namespace std;
const int N = 5e3 + 5, M = 10 * N + 5;

int n, m, k;
int dp[N][N];
int a[N], b[N], c[N];

vector<int> cost[N];

int solve(int i, int sz){
    if(sz < a[i])return -oo;
    if(i == n)return 0;
    int &ret = dp[i][sz];
    if(~ret)return ret;
    ret = -oo;
    
    ret = max(ret, solve(i + 1, sz + b[i]));
    
    sz += b[i];
    int sum = 0, cnt = 0;
    
    for(auto j : cost[i]){
        ++cnt;
        sum += j;
        
        if(sz - cnt < a[i + 1] || cnt > sz)break;
        
        ret = max(ret, solve(i + 1, sz - cnt) + sum);
    }
    return ret;
}
int mx[N];

int main(){
    scanf("%d%d%d", &n, &m, &k);
    for(int i = 0 ; i < n ; ++i)
        scanf("%d%d%d", a + i, b + i, c + i);
    iota(mx, mx + n, 0);
    while(m--){
        int u, v;
        scanf("%d%d", &u, &v);
        --u, --v;
        mx[v] = max(mx[v], u);
    }
    for(int i = 0 ; i < n ; ++i)
        cost[mx[i]].emplace_back(c[i]);
    for(int i = 0 ; i < n ; ++i)
        sort(cost[i].rbegin(), cost[i].rend());
    memset(dp, -1, sizeof dp);
    int ans = solve(0, k);
    if(ans == -oo)ans = -1;
    printf("%d\n", ans);
}