#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define F first
#define S second

const int N = 3030;
const int INF = 2 * 1000 * 1000 * 1000;

int n, m;
int foo, bar;
int s1, t1, l1, s2, t2, l2;
int f[N][N];
vector < int > g[N];

void bfs(int ver) {
    f[ver][ver] = 0;
    queue < int > q;
    q.push(ver);
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        for (size_t i = 0; i < g[node].size(); i++) {
            int to = g[node][i];
            if (f[ver][to] != INF) continue;
            f[ver][to] = f[ver][node] + 1;
            q.push(to);
        }
    }
}

int main() {
    for (int i = 0; i < N; i++) for (int j = 0; j < N; j++) f[i][j] = INF;
    scanf("%d%d", &n, &m);
    int pm = m;
    while (m--) {
        scanf("%d%d", &foo, &bar);
        g[foo].pb(bar);
        g[bar].pb(foo);
    }
    scanf("%d%d%d%d%d%d", &s1, &t1, &l1, &s2, &t2, &l2);
    for (int i = 1; i <= n; i++) bfs(i);
    if (f[s1][t1] > l1 || f[s2][t2] > l2) {
        puts("-1");
        return 0;
    }
    int ans = f[s1][t1] + f[s2][t2];
    int add, d1, d2;
    for (int v1 = 1; v1 <= n; v1++)
        for (int v2 = 1; v2 <= n; v2++) {
            add = f[v1][v2];
            if (add == INF) continue;
            d1 = add + f[s1][v1] + f[v2][t1];
            d2 = add + f[s2][v1] + f[v2][t2];
            if (d1 <= l1 && d2 <= l2 && f[s1][v1] != INF && f[v2][t1] != INF && f[s2][v1] != INF && f[v2][t2] != INF) ans = min(ans, d1 + d2 - add);
            d2 = add + f[s2][v2] + f[v1][t2];
            if (d1 <= l1 && d2 <= l2 && f[s1][v1] != INF && f[v2][t1] != INF && f[s2][v2] != INF && f[v1][t1] != INF) ans = min(ans, d1 + d2 - add);
        }
    printf("%d\n", pm - ans);
    return 0;
}
