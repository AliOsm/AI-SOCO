#include <bits/stdc++.h>

using namespace std;

typedef unsigned uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ldbl;
typedef pair<int, int> pii;
typedef pair<uint, uint> puu;
typedef pair<ll, ll> pll;
typedef pair<ull, ull> pull;
typedef vector<int> vi;
typedef vector<uint> vu;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<puu> vpuu;
typedef vector<pll> vpll;
typedef vector<pull> vpull;
typedef vector<string> vstr;
typedef vector<double> vdbl;
typedef vector<ldbl> vldbl;
#define pb push_back
#define ppb pop_back
#define pfr push_front
#define ppfr pop_front
#define emp emplace
#define empb emplace_back
#define be begin
#define rbe rbegin
#define all(x) (x).be(), (x).end()
#define rall(x) (x).rbe(), (x).rend()
#define fir first
#define sec second
#define mkp make_pair
#define brif(cond) if (cond) break
#define ctif(cond) if (cond) continue
#define retif(cond) if (cond) return
static inline void canhazfast() {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}
template<typename T> T gcd(T a, T b) {return b ? gcd(b, a%b) : a;}
template<typename T> T extgcd(T a, T b, T &x, T &y)
{
    T x0 = 1, y0 = 0, x1 = 0, y1 = 1;
    while (b) {
        T q = a/b; a %= b; swap(a, b);
        x0 -= q*x1; swap(x0, x1);
        y0 -= q*y1; swap(y0, y1);
    }
    x = x0; y = y0; return a;
}
static inline int ctz(unsigned x) {return __builtin_ctz(x);}
static inline int ctzll(ull x) {return __builtin_ctzll(x);}
static inline int clz(unsigned x) {return __builtin_clz(x);}
static inline int clzll(ull x) {return __builtin_clzll(x);}
static inline int popcnt(unsigned x) {return __builtin_popcount(x);}
static inline int popcntll(ull x) {return __builtin_popcountll(x);}
static inline int bsr(unsigned x) {return 31^clz(x);}
static inline int bsrll(ull x) {return 63^clzll(x);}

#define MOD 1000000007
#define add(a, b) ((a)+(b) < MOD ? (a)+(b) : (a)+(b)-MOD)
#define sub(a, b) ((a) < (b) ? (a)+MOD-(b) : (a)-(b))
#define mul(a, b) (ull(a)*(b)%MOD)
#define sqr(a) mul(a, a)

uint modpow(uint b, uint e)
{
    uint r = 1;
    for (; e; e >>= 1) {
        if (e&1) r = mul(r, b);
        b = mul(b, b);
    }
    return r;
}

uint modinv(uint n) { return modpow(n, MOD-2); }

uint reduce(uint n)
{
    uint res = 1;
    int e2 = ctz(n);
    if (e2%2) res = 2;
    n >>= e2;
    for (uint p = 3; ; p += 2) {
        uint q = n/p, r = n%p, e = 0;
        brif(q < p);
        while (!r) {
            n = q;
            q = n/p;
            r = n%p;
            ++e;
        }
        if (e%2) res *= p;
    }
    if (n > 1) res *= n;
    return res;
}

#define MX 512

uint dp[MX][MX];
uint bi[MX][MX];
uint fac[MX];

int main()
{
    canhazfast();

    map<uint, int> mp;
    static int c[MX];
    int n, k = 0, tot = 0, up = 0;
    uint ans;

    cin >> n;
    for (int i = 1; i <= n; ++i) {
        uint a;
        cin >> a;
        ++mp[reduce(a)];
    }
    for (const auto &p : mp) c[k++] = p.sec;
    sort(c, c+k);
    /*cerr << "freqs =";
    for (int i = 0; i < k; ++i) cerr << ' ' << c[i];
    cerr << '\n';*/
    retif(c[k-1] > (n+1)/2) cout << "0", 0;

    /// init binomials & factorials
    fac[0] = 1;
    bi[0][0] = 1;
    for (int i = 1; i <= n; ++i) {
        fac[i] = mul(i, fac[i-1]);
        bi[i][0] = bi[i-1][0];
        for (int j = 1; j <= i; ++j) bi[i][j] = add(bi[i-1][j-1], bi[i-1][j]);
    }

    dp[0][0] = 1;
    for (int i = 0; i < k; ++i) {
        for (int j = 0; j <= up; ++j) {
            for (int s = 1; s <= min(c[i], tot+1); ++s) {
                for (int d = 0; d <= min(j, s); ++d) {
                    uint w = dp[i][j];
                    w = mul(w, bi[c[i]-1][s-1]);
                    w = mul(w, bi[j][d]);
                    w = mul(w, bi[tot+1-j][s-d]);
                    dp[i+1][j-d+c[i]-s] = add(dp[i+1][j-d+c[i]-s], w);
                }
            }
        }
        tot += c[i];
        up += c[i]-1;
    }
    ans = dp[k][0];
    for (int i = 0; i < k; ++i) ans = mul(ans, fac[c[i]]);
    cout << ans;

    return 0;
}
