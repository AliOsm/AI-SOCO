// in the name of god
#include <bits/stdc++.h> 
using namespace std ; 
#define X first  
#define Y second 
#define y1 asdfg
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0) 
#define int long long 
//#define cout cout << setprecision ( 12 )  
typedef long double ld; 
typedef pair < int , int > pii ;
typedef pair < ld , ld > point ; 
typedef pair < pii , int > piii ;
const int maxn = 1e6 + 10 ; 
const int inf = 1e9 ;
const ld pi = 3.1415926535897932384626433832795 ;
int left(int x){return 2*x;} 
int right(int x){return 2*x+1;}
bool cmp ( piii p1 , piii p2 ){return p1 . X . Y < p2 . X . Y ;} 
int gcd(int a,int b){
while (a&&b)a>b?a%=b:b%=a;
return a+b;}
int n , ar [ maxn ] , data [ maxn * 4 ] , ans , dp [ maxn ] ;

void add ( int p , int st = 0 , int en = n , int id = 1 ) 
{ 
  data [ id ] ++ ; 
  if ( en - st < 2 ) 
    return ; 
  int mid = ( st + en ) / 2 ;
  if ( p < mid ) 
    return add ( p , st , mid , left ( id ) ) ;
  return add ( p , mid , en , right ( id ) ) ;
} 

int get ( int l , int r , int st = 0 , int en = n , int id = 1 ) 
{ 
  if ( r <= st || en <= l ) 
    return 0 ;
  if ( l <= st && en <= r ) 
    return data [ id ] ;
  int mid = ( st + en ) / 2 ;
  return get ( l , r , st , mid , left ( id ) ) +
            get ( l , r , mid , en , right ( id ) ) ;
} 
pii p [ maxn ] ;

main ( ) 
{ 
  cin >> n ;
  for ( int i = 0 ;  i < n ; i ++ )
    cin >> p [ i ] . X , p [ i ] . Y = i  ;
  sort ( p , p + n ) ; 
  for ( int i = 0 ; i < n ; i ++ )
    ar [ i ] = p [ i ] . Y ;
  for ( int i = 0 ; i < n ; i ++ )
    { 
      dp [ i ] += get ( ar [ i ] , n ) ;
      add ( ar [ i ] ) ; 
    } 
  for ( int i = 0 ; i < 4 * maxn ; i ++ )
    data [ i ] = 0 ;
  for ( int i = n - 1 ; i >= 0 ; i -- )
    { 
      ans += dp [ i ] * get ( 0 , ar [ i ] ) ;
      add ( ar [ i ] ) ; 
    } 
  cout << ans ;
} 
