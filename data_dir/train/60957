#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

int n;
ll k;
string s;
vector<int> vec;
vector< vector<int> > ul;
vector< vector<int> > ans;
vector<int> vec2;

int main()
{
	optimize();
	cin >> n >> k;
	cin >> s;
	while(1) {
		bool ok = 0;
		vec.clear();
		for( int i = 0; i < n-1; ++i ) {
			if( s[i] == 'R' && s[i+1] == 'L' ) {
				ok = 1;
				s[i] = 'L';
				s[i+1] = 'R';
				vec.PB( i+1 );
				++i;
			}
		}
		if( !ok ) break;
		ul.PB(vec);
	}
	if( (int)ul.size() > k ) {
		cout << -1 << endl;
		return 0;
	}
	int sz = (int)ul.size();
	int turns = 0;
	for( int i = 0; i < sz; ++i ) {
		if( sz-i+turns < k ) {
			ll temp = k-turns-(sz-i-1);
			if( temp > (int)ul[i].size() ) {
				for( int j = 0; j < (int)ul[i].size(); ++j ) {
					vec.clear();
					vec.PB(1);
					vec.PB( ul[i][j] );
					ans.PB( vec );
					++turns;
				}
			}
			else {
				--temp;
				vec.clear();
				for( int j = 0; j < temp; ++j ) {
					vec.clear();
					vec.PB(1);
					vec.PB(ul[i][j]);
					ans.PB(vec);
					++turns;
				}
				vec.clear();
				vec.PB( (int)ul[i].size() - temp );
				for( int j = temp; j < (int)ul[i].size(); ++j ) {
					vec.PB( ul[i][j] );
				}
				ans.PB(vec);
				++turns;
			}
		}
		else {
			vec.clear();
			vec.PB( (int)ul[i].size() );
			for( int j = 0; j < (int)ul[i].size(); ++j ) {
				vec.PB( ul[i][j] );
			}
			ans.PB(vec);
			++turns;
		}
	}
	if( turns < k ) {
		cout << -1 << endl;
		return 0;
	}
	for( int i = 0; i < k; ++i ) {
		for( int j = 0; j < ans[i].size(); ++j ) {
			cout << ans[i][j] << " ";
		}
		cout << endl;
	}
}






















