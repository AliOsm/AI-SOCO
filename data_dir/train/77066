#include <bits/stdc++.h>

using namespace std;

const int N = 1234567;

int size[N], parent[N];
int from[N], to[N], cost[N];
vector<int> g[N];

void dfs(int v = 0, int pv = -1) {
  size[v] = 1;
  for (int to : g[v]) {
    if (to == pv) {
      continue;
    }
    dfs(to, v);
    size[v] += size[to];
    parent[to] = v;
  }
}

int main() {
  int n;
  scanf("%d", &n);
  for (int i = 0; i + 1 < n; i++) {
    scanf("%d %d %d", from + i, to + i, cost + i);
    from[i]--, to[i]--;
    g[from[i]].push_back(to[i]);
    g[to[i]].push_back(from[i]);
  }
  dfs();
  long long ans = 0;
  for (int i = 0; i + 1 < n; i++) {
    if (parent[from[i]] == to[i]) {
      ans += (long long) cost[i] * size[from[i]] * 1ll * (n - size[from[i]]);
    } else if (parent[to[i]] == from[i]) {
      ans += (long long) cost[i] * size[to[i]] * 1ll * (n - size[to[i]]);
    } else {
      assert(0);
    }
  }
  int q;
  scanf("%d", &q);
  while (q--) {
    int w, c;
    scanf("%d %d", &w, &c);
    w--;
    if (parent[from[w]] == to[w]) {
      ans -= (long long) (cost[w] - c) * size[from[w]] * 1ll * (n - size[from[w]]);
      cost[w] = c;
    } else if (parent[to[w]] == from[w]) {
      ans -= (long long) (cost[w] - c) * size[to[w]] * 1ll * (n - size[to[w]]);
      cost[w] = c;
    }
    printf("%.10lf\n", 6. * ans / ((long long) n * (n - 1)));
  }
  return 0;
}