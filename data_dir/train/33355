#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAX = 105;
const ll LIMIT = (ll) 1e18;
ll b;
string ks;
ll pot[MAX];
int n;
ll memo[MAX][MAX];
int OVERFLOWED;

inline bool overflow(ll a, ll bb) {
	if(bb == 0) {
		return false;
	}
	return (a * bb) / bb != a;
}

ll roll(int d, int number) {
	if(d == -1) {
		return 0;
	}
	if(number >= OVERFLOWED) {
		return LIMIT;
	}
	ll &ans = memo[d][number];
	if(~ans) {
		return ans;
	}
	ans = (ll) 1e18;
	ll mult = 1;
	ll cur = 0;
	ford(i, d, 0) {
		cur += mult * (ks[i] - '0');
		if(mult >= b || cur >= b) {
			break;
		}
		if(!overflow(cur, pot[number]) && cur * pot[number] <= LIMIT) {
			if(i == d || ks[i] != '0') {
				ll r = roll(i - 1, number + 1);
				if(r + cur * pot[number] <= LIMIT && ans > r + cur * pot[number]) {
					ans = r + cur * pot[number];
				}
			}
		}
		else {
			break;
		}
		mult *= 10;
	}
	return ans;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin >> b >> ks;
	n = ks.size();
	memset(pot, -1, sizeof pot);
	pot[0] = 1;
	for(int i = 1; ; i++) {
		if((pot[i - 1] * b) / b == pot[i - 1]) {
			pot[i] = pot[i - 1] * b;
		}
		else {
			OVERFLOWED = i;
			break;
		}
	}

	memset(memo, -1, sizeof memo);
	printf("%lld\n", roll(n - 1, 0));

	return 0;
}

