#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
#include <cassert>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
#define EPS 1E-9
int N , L , V1 , V2;
vector<ll> pts;
double ans[100010];
bool eq(double a , double b){
  return fabs(a - b) < EPS;
}
int main(){
  scanf("%d%d%d%d" , &N , &L , &V1 , &V2);
  double D = (L * 1.0 * V2) / (V1 + V2);
  pts.resize(2*N);
  for(int i=0;i<2*N;i += 2){
   int a; scanf("%d" , &a);
   pts[i] = a;
   pts[i+1] = 2LL*L + a;
                           }
  sort(all(pts));
  double last = 0;
  int lo = 0 , hi = -1;
  while(hi+1 < sz(pts) && pts[hi+1] < D - EPS)
   ++hi;
  for(;;){
   if(last >= 2*L) break;
   double mv = 2*L - last , npos = 2*L;
   if(lo <= hi)
    relaxMin(mv , pts[lo] - last),
    relaxMin(npos , double(pts[lo]));
   if(hi+1 < sz(pts))
    relaxMin(mv , pts[hi+1] - last - D),
    relaxMin(npos , pts[hi+1] - D);
   ans[hi - lo + 1] += mv;
   if(lo <= hi && eq(mv , pts[lo] - last))
    ++lo;
   if(hi+1 < sz(pts) && eq(mv , pts[hi+1] - last - D))
    ++hi;
   last = npos;
         }
  for(int i=0;i<=N;++i)
   printf("%.12lf\n" , ans[i] / (2*L));
  return 0;
}
