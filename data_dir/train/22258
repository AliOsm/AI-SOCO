#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
int par[100010];
void init(int n){
	for(int i=1;i<=n;i++)
		par[i]=i;
}
int find(int x){
	if(par[x]==x) return x;
	return par[x]=find(par[x]);
}
void unite(int x,int y){
	x=find(x),y=find(y);
	if(x!=y)
		par[x]=y;
}
int a[100010],b[100010],c[100010],col[100010];
vector<int> g[100010];
bool dfs(int u,int color){
	col[u]=color;
	bool status=false;
	for(int& v:g[u]){
		if(col[v]==-1){
			status|=dfs(v,color^1);
		}else if(col[u]==col[v]){
			return true;
		}
	}
	return status;
}
int main(){
	int n,m;
	scanf("%d%d",&n,&m);
	init(n);
	for(int i=1;i<=m;i++){
		scanf("%d%d%d",a+i,b+i,c+i);
		if(c[i]==1) unite(a[i],b[i]);
	}
	for(int i=1;i<=m;i++)
		if(c[i]==0) g[find(a[i])].push_back(find(b[i])),g[find(b[i])].push_back(find(a[i]));
	memset(col,-1,sizeof col);
	bool odd_cycle=false;
	int cnt=0;
	for(int i=1;i<=n;i++)
		if(col[find(i)]==-1)
			odd_cycle|=dfs(find(i),1),cnt++;
	if(odd_cycle){
		puts("0");
	}else{
		ll ans=1;
		for(int i=1;i<cnt;i++)
			ans=(ans<<1)%1000000007;
		printf("%lld\n",ans);
	}
	return 0;
}