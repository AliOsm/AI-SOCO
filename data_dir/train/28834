//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (1000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;


#define matrix vector< vector<ll> >

matrix matmul(matrix &a, matrix &b){
    int i, j, k, n = a.size();
    matrix ans (n, vector<ll>(n));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            ll temp = 0;
            for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
            ans[i][j] = temp;
        }

    return ans;
}

matrix matpwr(matrix &a, ll p){
    int n = a.size();
    matrix ans(n, vector<ll> (n));
    for(int i=0;i<n;i++)    ans[i][i] = 1;

    while(p){
        if(p&1) ans = matmul(ans, a);

        a = matmul(a, a);
        p >>= 1;
    }
    return ans;
}


ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}


ll invMod(ll n, ll mod = MOD){
    return pwr(n, mod-2);
}


int n, cnt[200002], tree[4*200002], arr[200002];
char str[200005];
map<int, int> compress;
set<int> values;

bool isVowel(char ch){
    if(ch == 'a' || ch == 'A')  return true;
    if(ch == 'e' || ch == 'E')  return true;
    if(ch == 'i' || ch == 'I')  return true;
    if(ch == 'o' || ch == 'O')  return true;
    if(ch == 'u' || ch == 'U')  return true;
    return false;
}


void build(int node, int s, int e){

    if(s > e)   return;
    if(s == e){
        tree[node] = arr[s];
        return;
    }

    int mid = (s+e)/2;
    build(LEFT(node), s, mid);
    build(RIGHT(node), mid+1, e);
    tree[node] = max(tree[LEFT(node)], tree[RIGHT(node)]);
}


int query(int node, int s, int e, int lo, int hi){

    if(s > e || lo > e || s > hi)   return 0;
    if(s >= lo && e <= hi)  return tree[node];

    int mid = (s+e)/2;
    return max(query(LEFT(node), s, mid, lo, hi), query(RIGHT(node), mid+1, e, lo, hi));
}


int main()
{
    ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    cin>>(str+1);
    str[0] = '0';
    n = strlen(str)-1;

    cnt[0] = 0;
    for(int i=1;i<=n;i++){
        cnt[i] = cnt[i-1] + isVowel(str[i]);
        compress[2*i-3*cnt[i]];
        values.insert(2*i-3*cnt[i]);
    }

    int c = 0;
    for(map<int,int>::iterator it=compress.begin();it!=compress.end();it++)
        it->second = ++c;

    for(int i=1;i<=n;i++)
        arr[compress[2*i-3*cnt[i]]] = max(arr[compress[2*i-3*cnt[i]]], i);

    build(1, 1, c);

    int len = 0, ans = 0;
    for(int i=1;i<=n;i++){

        //assume this is start position of substring
        set<int>::iterator it = values.lower_bound(2*i - 2 - 3*cnt[i-1]);
        if(it == values.end())  continue;

        int temp = compress[*it];
        int rightPos = query(1, 1, c, temp, c);
        if(rightPos < i)    continue;

        temp = rightPos - i + 1;
        if(temp > len){
            len = temp;
            ans = 1;
        }
        else if(temp == len)    ans++;
    }

    if(len == 0){
        cout<<"No solution";
        return 0;
    }

    cout<<len<<" "<<ans;
    return 0;
}














