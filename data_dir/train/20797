#include<bits/stdc++.h>
using namespace std;

typedef pair<int, int> PII;
const int N = 2e5+7;
vector<PII> edges;

struct DSU {
    vector<int> par;

    DSU(int n): par(n+1) {
        for (int i=1; i<=n; i++)    par[i] = i;
    }

    int find(int u) {
        if (par[u] == u)    return par[u];
        return par[u] = find(par[u]);
    }

    bool merge(int u, int v) {
        u = find(u);
        v = find(v);

        if (u == v)     return false;
        par[u] = v;
        return true;
    }
};

bool done[N];

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    vector<int> a;

    int n, m, d;
    cin>>n>>m>>d;

    while (m--) {
        int u, v;
        cin>>u>>v;
        if (u==1 || v==1)   a.push_back(u^v^1);
        else                edges.push_back({u, v});
    }

    DSU d1(n), d2(n);
    for (PII pr: edges) d1.merge(pr.first, pr.second);

    int cnt = 0;
    for (int i=2; i<=n; i++)
        if (d1.find(i) == i)
            cnt++;

    if (cnt > d || d > a.size()) {
        cout<<"NO"<<endl;
        return 0;
    }

    vector<PII> ans;
    vector<int> left;
    for (int x: a) {
        int rep = d1.find(x);
        if (!done[rep]) {
            done[rep] = 1;
            d2.merge(1, x);
            ans.push_back({1, x});
        }
        else left.push_back(x);
    }

    while (ans.size() < d) {
        d2.merge(1, left.back());
        ans.push_back({1, left.back()});
        left.pop_back();
    }

    for (PII pr: edges) {
        if (d2.merge(pr.first, pr.second))  ans.push_back(pr);
    }

    //assert(ans.size() == n-1);
    cout<<"YES"<<endl;
    for (auto pr: ans)  cout<<pr.first<<" "<<pr.second<<"\n";
}
