#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl
#define tr(it,c) for(VP::iterator it=(c).begin(); it!=(c).end(); ++it)

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long int64;
typedef pair<int,int> pii;
typedef vector<pii> VP;

const int maxn = 100050;
VP buf[maxn];
double t[maxn];
double dp[maxn];
int sz[maxn];

bool cmp(pair<double,int> a,pair<double,int> b)
{
	return a.first*b.second<a.second*b.first;
}

void Dp(int cur,int p)
{
	dp[cur]=0;
	t[cur]=0;
	sz[cur]=1;
	if(buf[cur].empty() || (buf[cur].size()==1 && buf[cur][0].first==p)) return;
	vector< pair<double,int> > vec;
	tr(it,buf[cur]) if(it->first!=p)
	{
		Dp(it->first,cur);
		sz[cur]+=sz[it->first];
		dp[cur]+=dp[it->first]+it->second*sz[it->first];
		t[cur]+=t[it->first]+2*it->second;
		vec.PB(MP(t[it->first]+2*it->second,sz[it->first]));
	}
	sort(vec.begin(),vec.end(),cmp);
	double tmp=0;
	REP(i,vec.size()-1) tmp+=vec[i-1].first, dp[cur]+=tmp*vec[i].second;
}

int main(void)
{
	ios::sync_with_stdio(false);
	int n; cin>>n;
	rep(i,n-1)
	{
		int a,b,c; cin>>a>>b>>c; --a; --b;
		buf[a].PB(MP(b,c)); buf[b].PB(MP(a,c));
	}
	Dp(0,-1);
	printf("%.20lf\n",dp[0]/(n-1));
}