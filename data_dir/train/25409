#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;

#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()

template<typename _T> inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template<typename _T, typename... args> void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define _upgrade ios_base::sync_with_stdio(0);
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 2e5 + 7;

int n, q, f[N], d[N], pre[N], post[N];
vector<int> G[N];

int cnt = 0;

void dfs(int v)
{
    pre[v] = ++cnt;
    for(auto u: G[v])
    {
        if(u != f[v])
        {
            f[u] = v;
            d[u] = d[v] + 1;
            dfs(u);
        }
    }
    post[v] = ++cnt;
}

bool is_predecessor(int p, int v)
{
    return pre[p] <= pre[v] && post[v] <= post[p];
}

int main()
{
    _upgrade
    
    cin >> n >> q;
    for(int i = 1; i < n; i++)
    {
        int a, b; cin >> a >> b;
        G[a].push_back(b);
        G[b].push_back(a);
    }

    f[1] = 1;
    dfs(1);

    for(int i = 0; i < q; i++)
    {
        int k; cin >> k;
        
        int r = 1;
        vector<int> vec;
        for(int j = 0; j < k; j++)
        {
            int x; cin >> x;
            if(d[r] < d[x])
                r = x;
            vec.push_back(x);
        }
        bool ok = true;
        for(auto v: vec)
            ok &= is_predecessor(f[v], r);
        cout << (ok ? "YES\n" : "NO\n");
    }

	return 0;
}