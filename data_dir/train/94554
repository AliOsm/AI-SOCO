#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef long double real;

#ifdef WIN32
#define INT64 "%I64d"
#define UINT64 "%I64u"
#else
#define INT64 "%lld"
#define UINT64 "%llu"
#endif

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

const int MAX_N = 100005, MAX_C = 0x3F3F3F3F, NA = -1;

real p [MAX_N];
real q [MAX_N];
real f0 [MAX_N];
real f1 [MAX_N];
real f2 [MAX_N];
real b [MAX_N];
real c [MAX_N];
int n;

int main (void)
{
 while (scanf (" %d", &n) != EOF)
 {
  p[0] = 0.0;
  q[0] = 1.0;
  for (int i = 1; i <= n; i++)
  {
   double d;
   scanf (" %lf", &d);
   p[i] = d;
   q[i] = 1.0 - d;
  }

  memset (f0, 0, sizeof (f0));
  memset (f1, 0, sizeof (f1));
  memset (f2, 0, sizeof (f2));
  memset (b,  0, sizeof (b));
  memset (c,  0, sizeof (c));
  for (int i = 1; i <= n; i++)
  {
   f0[i] = p[i] * (f0[i - 1] + q[i - 1]);
   f1[i] = p[i] * (f1[i - 1] + f0[i - 1] + q[i - 1]);
   f2[i] = p[i] * (f2[i - 1] + 2 * f1[i - 1] + f0[i - 1] + q[i - 1]);
   b[i]  = p[i] * (b[i - 1] + c[i - 1]);
   c[i]  = q[i] * (f2[i - 1] + b[i - 1] + c[i - 1]);
   eprintf ("%4d: %13.10lf %13.10lf %13.10lf %13.10lf %13.10lf\n",
            i, (double) f0[i], (double) f1[i], (double) f2[i],
            (double) b[i], (double) c[i]);
  }
  printf ("%.10lf\n", (double) (f2[n] + b[n] + c[n]));
 }

 return 0;
}
