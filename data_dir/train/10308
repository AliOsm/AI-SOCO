#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>
#include <time.h>
#define sz(x) int((x).size())
#define FOR(i,a,b) for(ll(i) = (a); (i) <= (b); ++(i))
#define ROF(i,a,b) for(ll(i) = (a); (i) >= (b); --(i))
#define rep(i,n) for (int(i) = 0; (i) < (n); ++(i))
#define fe(i,a) for (ll(i) = 0; (i) < int((a).size()); ++(i))
#define C(a) memset((a),0,sizeof(a))
#define pb push_back
#define ppb pop_back
#define all(c) (c).begin(), (c).end()
#define sqr(a) (a)*(a)
#define mp(a,b) make_pair((a), (b))
#define X first
#define Y second
#define file freopen("input.txt","r",stdin)
#define file2 freopen("output.txt", "w",stdout)
using namespace std;
typedef vector<int> vint;
typedef long long ll;
typedef pair<int, int> pii;
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <string>
#include <vector>
using namespace std;
#define mod 1000000007
#define inf 1e9
const int N = 100005;
vector<int> z_function (string s) {
    int n = (int) s.length();
    vector<int> z (n);
    for (int i = 1, l = 0, r = 0; i < n; ++i) {
        if (i <= r)
            z[i] = min (r - i + 1, z[i - l]);
        while (i + z[i] < n && s[z[i]] == s[i + z[i]])
            ++z[i];
        if (i + z[i] - 1 > r)
            l = i,  r = i + z[i] - 1;
    }
    z[0] = n;
    return z;
}
string s;
int dop[N];
int main(){
    cin >> s;
    vector<int> a = z_function(s);
    int n = s.size();
    for(int i = 0; i < n; ++i){
        ++dop[a[i]];
    }
    for(int i = n; i >= 1; --i){
        dop[i - 1] += dop[i];
    }
    int ans = 0;
    for(int i = 1; i <= n; ++i){
        if(a[n - i] == i){
            ++ans;
        }
    }
    cout << ans << endl;
    for(int i = 1; i <= n; ++i){
        if(a[n - i] == i){
            printf("%d %d\n", i, dop[i]);
        }
    }
    return 0;
}
