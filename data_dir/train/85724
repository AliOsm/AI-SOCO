#include <iostream>
#include <stdio.h>
#include <bits/stdc++.h>
#include <math.h>
#include <string>
#include <sstream>
#define ll long long
#define F first
#define S second
#define pb push_back
#define ld long double
#define pll pair<long long,long long>
#define pld pair<long double,long double>
#define ios     ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
using namespace std;
ll mod=10000000000;
ll gcd (ll a,ll b)
{
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}
ll fastexp(ll x ,ll n)
{
    ll result =1;
    while(n>0)
    {
        if(n%2==1)
            result*=x;
        x*=x;
        n=n/2;
    }
    return result;
}

ll modularExp(ll x,ll n,ll mod)
{
    ll result=1;
    while(n>0)
    {
        if(n%2==1)
            result=(result*x)%mod;
        x=((x%mod)*(x%mod))%mod;
        n=n/2;
    }
    return (result)%mod;
}
bool isPrime(ll n)
{
    for(ll i=2;i*i<=n;i++)
        if(n%i==0)
            return false;
    return true;
}
bool mycomp(pll &a,pll &b)
{
    if(a.F!=b.F)
        return a.F < b.F;
    else
        return a.S < b.S;
}
vector<pll> v[100005];
//vector<ll> visited(100005);
vector<ll> ans;
ll dfs(ll node,ll par,ll mode)
{
    // cout<<node<<"**\n";
     if(v[node].size()==1 && v[node][0].S==par  && mode==2)
     {
          ans.pb(node);
          return 1;
     }
     else if(v[node].size()==1 && v[node][0].S==par && mode==1)
          return 0;
     ll i;
     //sort(v[node].rbegin(),v[node].rend());
     int flag=0;
     for(i=0;i<v[node].size();i++)
     {
          ll y=v[node][i].S;
          ll z=v[node][i].F;
         // cout<<y<<" "<<z<<"!!!\n";
          if(y==par)
               continue;
          if(z==2)
          {
               ll ret= dfs(y,node,2);
               flag=1;
          }
          else 
          {
               ll ret=dfs(y,node,1);
               if(ret==1)
                    flag=1;
          }
     }
     if(flag==0 && mode==1)
          return 0;
     else if(flag==0 && mode==2)
     {
          ans.pb(node);
          return 1;
     }
     else if(flag==1)
          return 1;
}



int main()
{
     ll n;
     cin>>n;
     ll i;
     for(i=1;i<=n-1;i++)
     {
          ll x,y,z;
          cin>>x>>y>>z;
          v[x].pb({z,y});
          v[y].pb({z,x});
     }
     ll ret= dfs(1,0,1);
     cout<<ans.size()<<"\n";
     for(auto it:ans)
          cout<<it<<" ";

        
 
}
