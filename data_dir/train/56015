#include <bits/stdc++.h>
using namespace std;

const int MAXN=1e5+5, INF=1e9+5;
const long long MOD=1e9+7;

int N, M, X, Y;
long long A[MAXN], HX, HY;
bool B[MAXN];
vector <int> V[MAXN], W[MAXN], S;

void dfs(int now,vector <int> V[],vector <int> *S) {
	B[now]=1;
	
	for (int next : V[now]) {
		if (!B[next]) {
			dfs(next,V,S);
		}
	}
	
	S->push_back(now);
	return;
}

int main () {
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	
	cin>>N;
	
	for (int i=1;i<=N;i++) {
		cin>>A[i];
	}
	
	cin>>M;
	
	for (int i=1;i<=M;i++) {
		cin>>X>>Y;
		V[X].push_back(Y);
		W[Y].push_back(X);
	}
	
	for (int i=1;i<=N;i++) {
		if (!B[i]) {
			dfs(i,V,&S);
		}
	}
	
	reverse(S.begin(),S.end());
	memset(B,false,sizeof(B));
	HY=1;
	
	for (int i : S) {
		if (!B[i]) {
			vector <int> F;
			dfs(i,W,&F);
			X=INF;
			for (int j : F) {
				if (A[j]<X) {
					X=A[j];
					Y=0;
				}
				
				if (A[j]==X) {
					Y++;
				}
 			}
 			HX+=X;
 			HY=(HY*Y)%MOD;
		}
	}
	
	cout<<HX<<' '<<HY<<'\n';
	return 0;
}
