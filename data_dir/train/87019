#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <memory.h>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 1e18+7;
const long long mod = 1e9+7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0;(i)<(ll)(n);(i)++)
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

ll n;
ll a[100005], b[100005];
ll res = 0;

ll t[400005];

void modify(int v, int tl, int tr, int pos, int val){
    if(tl == tr) t[v] += val; else{
     int tm = (tl + tr) >> 1;
     if(pos <= tm) modify(v+v,tl,tm,pos,val); else
     modify(v+v+1,tm+1,tr,pos,val);
     t[v] = max(t[v+v],t[v+v+1]);
    }
}

ll get(int v, int tl, int tr, int l, int r){
    if(l <= tl && r >= tr) return t[v];
    int tm = (tl + tr) >> 1;
    ll res = 0;
    if(l <= tm) res = max(res,get(v+v,tl,tm,l,r));
    if(r > tm) res = max(res,get(v+v+1,tm+1,tr,l,r));
    return res;
}

int main(void) {
    #ifndef ONLINE_JUDGE
        freopen("input.txt","rt",stdin);
        freopen("output.txt","wt",stdout);
    #endif
    cin >> n;
    forn(i,n) cin >> a[i], a[i]--;
    ll res = 1;
    forn(i,n){
     ll val = 1;
     if(a[i]) val = max(val,get(1,0,n-1,0,a[i]-1)+1);
     modify(1,0,n-1,a[i],val);
     res = max(res,val);
    }
    cout << res << endl;
    return 0;
}
