#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm = " ") -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
template<typename T> vector<T> & operator--(vector<T> & a)
{ for(auto & i: a) --i; return a; }
/* @@@ ----------------------------------- */

inline size_t ilog(const int64_t x)
{
  size_t i = 0;
  for(int64_t b = 1; ; b <<= 1, i += 2)
    if(x == b)
      return i;
    else if(x < b)
      return i - 1;

  return -1;
}

inline bool
fail(vector<size_t> xs)
{
  auto n = xs.size();

  for(size_t i = 2; i < n; i += 2)
    if(xs[i - 2] < xs[i])
    {
      if(i + 1 == n) xs.push_back(0), ++n;
      xs[i + 1] += xs[i] - xs[i - 2];
      xs[i] = xs[i - 2];
    }

  {
    size_t odds = 0;
    for(size_t i = n - 1; i < n; --i)
      if(i & 1)
        odds += xs[i];
      else
      {
        if(xs[i] < odds) return true;
        xs[i] -= odds;
      }
  }

  return false;
}

void c806()
{
  size_t n;
  cin >> n;

  vector<int64_t> a(n);
  cin >> a;

  vector<size_t> xs(128, 0);
  for(const auto i: a)
    ++xs[ilog(i)];

  while(!xs.back())
    xs.pop_back();

  xs.push_back(0);
  xs.push_back(0);

  DEBUG(xs);

  vector<size_t> out;
  for(; xs[0]; --xs[0], ++xs[1])
    if(!fail(xs)) out.push_back(xs[0]);

  reverse(begin(out), end(out));

  if(out.empty())
    cout << -1;
  else
    dump(begin(out), end(out), " ");
}

int main(const int argc, char * argv [])
{
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  c806();

  return EXIT_SUCCESS;
}

