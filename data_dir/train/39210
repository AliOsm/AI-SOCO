#include <bits/stdc++.h>

//#define tree_set

#ifdef tree_set
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using ordered_set = tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>;
#endif // tree_set

using namespace std;

using ll = long long int;
using ull = unsigned long long int;
using dd = double;
using ldd = long double;
using si = short int;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second

//debug defines
#ifdef HOME
    #define debug(x) cout << #x << " " << x << endl;
    #define debug_v(x) cout << #x << " : ";for (auto j : (x)){ cout << j << " ";} cout << endl;
    #define debug_vp(x) for (auto J : (x)) {cout << '[' << J.ff << " " << J.ss  << "] ";} cout << endl;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;
    int jjj;
    #define wait() cin >> jjj;
#else
    #define debug(x) 0
    #define debug_v(x) 0
    #define debug_vp(x) 0
    #define PO 0
    #define OL 0
    #define wait() 0
#endif // HOME
//end of debug defines

int main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(0);
    cin.tie(0);

    int n, k;
    cin >> n >> k;
    vector<ll> a(n), b(n);
    for (int i = 0; i < n; ++i){
        cin >> a[i];
        a[i] *= -1;
    }
    for (int i = 0; i < n; ++i)
        cin >> b[i];
    ll l = -1, r = 1e13, m;
    bool can;
    pll j;
    vector<ll> sa = a;
    while (r - l > 1)
    {
        priority_queue<pair<ll, int>> me;
        m = (r + l) / 2;
        a = sa;
        for (int i = 0; i < n; ++i){
            me.push({a[i] / b[i], i});
        }
        can = 1;
        for (int i = 0; i < k; ++i)
        {
            j = me.top();
            if (-j.ff < i)
            {
                can = 0;
                break;
            }
            if (-j.ff >= k)
            {
                break;
            }
            me.pop();
            a[j.ss] -= m;
            me.push({a[j.ss] / b[j.ss], j.ss});
        }
        if (can)
            r = m;
        else
            l = m;
    }
    if (r >= (ll)(1e13))
        cout << -1;
    else
        cout << r;

    return 0;
}
