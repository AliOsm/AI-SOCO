#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define repr(i,x,y) for (__typeof(x) i=x;i>=y;i--)
#define rep(i,x,y) for (__typeof(x) i=x;i<=y;i++)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

/* Print pair */
template <typename T,typename S>
ostream & operator << (ostream &os , const pair<T,S> &v) {
    os << "(" ;
    os << v.first << "," << v.second << ")" ;
    return os ;
}
/* Print vector */
template <typename T>
ostream & operator << (ostream &os , const vector<T> &v) {
    os << "[" ;
    int sz = v.size() ;
    for(int i = 0 ; i < sz ; ++i) {
        os << v[i] ;
        if(i!=sz-1)os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print set */
template <typename T>
ostream & operator << (ostream &os , const set<T> &v) {
    T last = *v.rbegin() ;
    os << "[" ;
    for(auto it : v) {
        os << it  ;
        if(it != last) os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print Map */
template <typename T,typename S>
ostream & operator << (ostream &os , const map<T,S> &v) {
    for(auto it : v) {
        os << it.first << " : " << it.second << "\n" ;
    }
    return os ;
}
int power(int a , int b)
{
    int res = 1 ;
    while(b)
    {
        if(b%2) {
            res = (res * a) % mod ;
        }
        b/=2 ;
        a = (a*a) % mod ;
    }
    return res ;
}

//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

const int N = 1e6 + 5 ;

int l[N] , r[N] ;
vector<pair<int,int> > events ;

pair<int,int> check(int mid , int n) {
    events.clear() ;
    rep(i,1,n) {
        int rr = r[i] - (mid - 1) ;
        if(l[i] <= rr) {
            events.push_back(make_pair(l[i] , -1)) ;
            events.push_back(make_pair(rr , 1)) ;
        }
    }
    sort(all(events)) ;
    int maxCurr = 0 , bestPos = 0 , curr = 0 ;
    for(auto elem : events) {
        if(elem.second == -1) {
            ++curr ;
        } else --curr ;
        if(curr > maxCurr) {
            maxCurr = curr ;
            bestPos = elem.first ;
        }
    }
    return make_pair(bestPos , maxCurr) ;
}
vector<int> get(int mid , int pos , int n) {
    vector<int> arr ;
    if(!mid) {
        rep(i,1,n) arr.pb(i) ;
        return arr ;
    }
    rep(i,1,n) {
        int rr = r[i] - (mid - 1) ;
        if(pos >= l[i] && pos <= rr) arr.pb(i) ;
    }
    return arr ;
}
int32_t main()
{
    fast;
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin) ;
    #endif // ONLINE_JUDGE

    int n , k ; cin >> n >> k ;
    rep(i,1,n) cin >> l[i] >> r[i] ;

    int low = 0 , high = 2e9 + 5 , mid , res = 0 ;
    while(low <= high) {
        int mid = (low + high) >> 1 ;
        if(check(mid , n).second >= k) {
            res = mid ; low = mid + 1 ;
        }
        else high = mid - 1 ;
    }
    auto ans = check(res , n) ;
    auto arr = get(res , ans.first , n) ;
    arr.resize(k) ;
    cout << res << "\n" ;
    for(auto it : arr) cout << it << " " ;
    cout << "\n" ;
    return 0;
}
