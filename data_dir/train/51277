/*
    If u can prepare to learn and adapt
                                       you can transform*/
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=1e9+7;   
lli INF=1e17;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctz(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clz(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffs(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,x,y,k,m;
const double pi1=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
//lli tot=0;
vector<lli> pf(string s) {
    int n = (int)s.length();
    vector<lli> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//map<ll,lli> dp;
lli a[200005];
lli b[200005];
lli d;
vector<lli> v[2005];
map<lli,lli> vis;
lli mx=-1;
map<lli,lli> dp;
lli mi=1e18;
lli root;
lli dfs(lli i)
{
    dp[i]=1;
    vis[i]=1;
    for(auto &j: v[i])
    {
        if(vis[j])
        continue;
        if(a[j]>a[root])
        continue;
        if(a[j]==a[root]&&j<root)
        continue;
        if(a[root]>a[j]+d)
        continue;
        dp[i]*=(dfs(j)+1);
        dp[i]%=M;
    }
    return dp[i];
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin>>n>>x;
    lli d=log2(x)+1;
    vector<lli> v;
    lli cnt=1;
    for(int i=1;i<=n;i++)
    {
        if(i==d)
        continue;
        v.push_back((1<<(i-1)));
        //cout<<v.back()<<" ";
        for(int j=0;j<((1<<(cnt-1))-1);j++)
        {
            v.push_back(v[j]);
            //cout<<v[j]<<" ";
        }
        cnt++;
    }
    vector<lli> v1;
    for(int i=0;i<v.size();i++)
    {
        if(i==0)
        v1.push_back(v[i]);
        else
        {
            if(v[i]==v[i-1])
            continue;
            v1.push_back(v[i]);
        }
    }
    cout<<v1.size()<<endl;
    for(auto &i: v1)
    cout<<i<<" ";
}