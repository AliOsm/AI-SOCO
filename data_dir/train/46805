#include <bits/stdc++.h>
#define f first
#define s second
using namespace std;
typedef pair<int,int> pii;
const int N = 200002;
int n,m, arr[N];
vector<int> v[2*N];
set<int> need, spare;
int main()
{
    scanf("%d%d",&n,&m);
    for(int i = 0;i<n;i++) {
        int x;
        scanf("%d",&arr[i]);
        v[arr[i]%m].push_back(i);
        v[arr[i]%m+m].push_back(i);
    }
    for(int i = 0;i<m;i++) {
        if(v[i].size() > n/m)
            spare.insert(i), spare.insert(i+m);
        else if(v[i].size() < n/m)
            need.insert(i+m);
    }
    long long ans = 0;
    while(need.size()) {
        int curr = *need.begin();
        int rem = n/m - v[curr].size();
//        for(int i : spare)
//            cout<<i<<" ";
//        cout<<endl;
        set<int> ::iterator it = spare.upper_bound(curr-1);
        it--;
        int id = *it % m;
        int has = min((int)v[id].size() - n/m, rem);
        ans += 1LL*has * (curr-*it);
        while(has--) {
            int x = v[id].back();
            arr[x] += (curr-*it);
            v[id].pop_back();
            v[id+m].pop_back();
            v[curr%m].push_back(x);
            v[curr].push_back(x);
        }
        if(v[*it].size() == n/m)
            spare.erase(spare.find(id)), spare.erase(spare.find(id+m));
        if(v[curr].size() == n/m)
            need.erase(need.find(curr));
    }
    printf("%lld\n",ans);
    for(int i =0;i<n;i++)
        printf("%d ",arr[i]);
    return 0;
}
