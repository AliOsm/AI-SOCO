#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES

#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;

const int INF = (int)(1e9+1e5);
const int64 LINF = (int64)(4e18);
const double EPS = 1e-10;
const int MOD = 1000000007;
#define sq(x) ((x)*(x))
#define FAIL() ((*(int*)0)++)
#define y0 y00
#define y1 y11

const int MAXN = 1000005;

int n;
int p[MAXN];
int64 ans, cur;
int num;
int up, down;
int meet[MAXN];

void init()
{
	scanf ("%d", &n);
	for (int i = 1; i <= n; i++)
	{
		scanf ("%d", &p[i]);
	}
}

void solve()
{
	init();
	for (int i = 1; i <= n; i++)
	{
		cur += abs(p[i] - i);
		if (p[i] <= i)
		{
			meet[p[i] - i + n]++;
			down++;
		}
		else
		{
			meet[p[i] - i]++;
			up++;
		}
	}
	ans = cur;
	//cerr << 0 << " " << cur << endl;
	for (int i = 1; i < n; i++)
	{
		cur -= up;
		cur += down;
		up -= meet[i];
		down += meet[i];
		int pos = n - i + 1;
		down--;
		up++;
		cur -= abs(n + 1 - p[pos]);
		cur += abs(1 - p[pos]);
		//cerr << i << " " << cur << endl;
		if (ans > cur)
		{
			ans = cur;
			num = i;
		}
	}
	printf("%I64d %d\n", ans, num);
}

int main()
{
	srand(333); 
    ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif
	double st = clock();
    int t = 1;
    //scanf ("%d", &t);
    for (int test = 1; test <= t; test++)
    {
    	solve();
    }

    //fprintf(stderr, "%.3lf\n", (clock() - st) / CLOCKS_PER_SEC);
    return 0;
}