/*
 Anton Gulikov
*/
#pragma comment(linker,"/STACK:300000000")
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <list>
#include <math.h>
#include <string>
#include <stdlib.h>

#define gcd(a,b) __gcd((a),(b))
#define sqr(a) ((a)*(a))
#define odd(a) ((a)&1)
#define foru(i,n) for (int i=0;i<(n);i++)
#define ford(i,n) for (int i=(n)-1;i>=0;i--)
#define forab(i,l,r) for (int i=(l);i<=(r);i++)
#define forabd(i,r,l) for (int i=(r);i>=(l);i--)
#define fillchar(a,b) memset((a),(b),sizeof((a)))
#define pb push_back
#define F first
#define S second
#define all(x) x.begin,x.end
#define pw2(x) (1ull<<(x))
#define mp make_pair

const long double eps=1e-20;
const long double pi=acos(-1.0);
const long long inf=1000*1000*1000*1000*1000*1000;
const long long base=1000*1000*1000+7;

using namespace std;

bool used[111111];
int x,y,n;
long long f1[111111],f2[111111];
long long a[111111],ans=0;
bool leaf[111111];
vector < vector <int> > g(111111),q(111111);

void dfs1(int v){
	used[v]=true;
	int kol=0;
	foru(i,g[v].size()) if (!used[g[v][i]]){
		 dfs1(g[v][i]);
		 kol++;
	}
	if (kol==0) ans+=a[v];
	if (kol==0) leaf[v]=true;
	return;
}

void dfs(int v){
	used[v]=true;
	if (leaf[v]){
		f1[v]=a[v];
		f2[v]=1;
		return;
	}
	foru(i,g[v].size()) if (!used[g[v][i]]){
		dfs(g[v][i]);
		q[v].pb(g[v][i]);
		if (f1[g[v][i]]==0){
			f1[v]=0;
			return;
		}
	}
	long long lcm=f2[q[v][0]];
	foru(i,q[v].size()){
		long long gd=gcd(lcm,f2[q[v][i]]);
		lcm=(lcm/gd)*f2[q[v][i]];
		if (lcm>10*1ll*1000000000) break;
	}
	long long mi=1000000000;
	foru(i,q[v].size()){
		mi=min(mi,f1[q[v][i]]/lcm);
	}
	mi=mi*lcm;
	f1[v]=mi*1ll*q[v].size();
	if (f1[v]==0) return;
	f2[v]=lcm*1ll*q[v].size();
}

int main(){

	ios_base :: sync_with_stdio(false);
	cin>>n;
	foru(i,n) cin>>a[i];
	foru(i,n-1){
		cin>>x>>y;
		x--; y--;
		g[x].pb(y);
		g[y].pb(x);
	}
	foru(i,n){
		leaf[i]=false;
		used[i]=false;
	}
	dfs1(0);
	foru(i,n) used[i]=false;
	dfs(0);
//	foru(i,n) cout<<f1[i]<<" "<<f2[i]<<" "<<leaf[i]<<" "<<endl;
	cout<<ans-f1[0];
	return 0;
}