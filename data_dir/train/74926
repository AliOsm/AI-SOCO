///****In the name of Allah, most Gracious, most Compassionate****//

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <ll, ll> pii;

#define NL cout<<"\n";
#define ALL(a) a.begin(), a.end()
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl;
#define FastIO ios::sync_with_stdio(false); cin.tie(0);cout.tie(0)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const ll N=3e5+5;
const ll oo=998244353 ;

ll extended_euclidean(ll a, ll b, ll & x, ll & y) {
    if (a == 0) {
        x = 0;
        y = 1;
        return b;
    }
    ll x1, y1;
    ll d = extended_euclidean(b % a, a, x1, y1);
    x = y1 - (b / a) * x1;
    y = x1;
    return d;
}
ll mod_inverse(ll a,ll m)
{
    ll x, y;
    ll g = extended_euclidean(a, m, x, y);
    if (g != 1)
    {
        cout << "No solution!";
        return -1;
    }
    else
    {
        x = (x % m + m) % m;
        return x;
    }
}
ll fact[N];

int32_t main()
{
    FastIO;
    fact[0]=1;
    for(ll i=1;i<N;i++)
    {
        fact[i]= i*fact[i-1] %oo;
    }

    ll n;

    cin>>n;
    map<ll ,ll > x;
    map<ll ,ll > y;
    map<pii ,ll > xy;
    vector<pii> xxy;
    for(ll i=0;i<n;i++)
    {
        ll a,b;
        cin>>a>>b;
        x[a]++;
        y[b]++;
        xy[{a,b}]++;
        xxy.push_back({a,b});

    }
    sort(ALL(xxy));

    ll p1=1;
    for(auto i: x)
    {
        p1= p1*(fact[i.second])%oo;
    }
//    DBG(p1);

    ll ans=fact[n];
    ans-=p1;

    ans%=oo;
    p1=1;
    for(auto i: y)
    {
        p1= p1*(fact[i.second])%oo;
    }
//    DBG(p1);
    ans-=p1;

    ans%=oo;

    p1=1;
    ll d=1;
    for(ll i=1;i<n;i++)
    {
//        DBG(xxy[i]);
//        DBG(xxy[i-1]);
        if(xxy[i].first<xxy[i-1].first or xxy[i].second < xxy[i-1].second)
            d=0;
    }
    for(auto i: xy)
    {
        p1= p1*(fact[i.second])%oo;
    }

//    DBG(p1);

//    DBG(d);
    if(d)
        ans+=p1;

    ans%=oo;
    ans+=oo;
    ans%=oo;
    cout<<ans<<"\n";
}
