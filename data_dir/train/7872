#include <bits/stdc++.h>
using namespace std;

typedef long long lint; typedef pair<int, int> ii;
const int MOD = 1'000'000'007, MOD2 = 1'000'000'009;
const int INF = 0x3f3f3f3f; const lint BINF = 0x3f3f3f3f3f3f3f3fLL;

#define fst first
#define sec second

int solve() {
	int n, m; cin >> n >> m;
	vector<ii> v1(n), v2(m);
	for (int i=0;i<n;i++) {
		cin >> v1[i].fst >> v1[i].sec;
		if (v1[i].fst > v1[i].sec) swap(v1[i].fst, v1[i].sec);
	}
	for (int j=0;j<m;j++) {
		cin >> v2[j].fst >> v2[j].sec;
		if (v2[j].fst > v2[j].sec) swap(v2[j].fst, v2[j].sec);
	}
	set<int> canbe;
	for (int i=0;i<n;i++) for (int j=0;j<m;j++) {
		if (v1[i] == v2[j]) continue;
		if (v1[i].fst == v2[j].fst) canbe.insert(v1[i].fst);
		if (v1[i].fst == v2[j].sec) canbe.insert(v1[i].fst);
		if (v1[i].sec == v2[j].fst) canbe.insert(v1[i].sec);
		if (v1[i].sec == v2[j].sec) canbe.insert(v1[i].sec);
	}
	// for (int x : canbe) cerr << x << endl;
	if (canbe.size() == 1) return cout << *canbe.begin() << endl, 0;
	int ok = 1;
	for (int i=0;i<n;i++) for (int j=0;j<m;j++) {
		// assume first guy hold i, second guy hold j
		if (v1[i] == v2[j]) continue; // not possible
		int poss = 0;
		if (v1[i].fst == v2[j].fst) poss = v1[i].fst;
		if (v1[i].fst == v2[j].sec) poss = v1[i].fst;
		if (v1[i].sec == v2[j].fst) poss = v1[i].sec;
		if (v1[i].sec == v2[j].sec) poss = v1[i].sec;
		if (!poss) continue;
		// check if there is some k where (i, k) valid and common =/= poss
		for (int k=0;k<m;k++) {
			if (j == k) continue;
			if (v1[i] == v2[k]) continue;
			int possk = 0;
			if (v1[i].fst == v2[k].fst) possk = v1[i].fst;
			if (v1[i].fst == v2[k].sec) possk = v1[i].fst;
			if (v1[i].sec == v2[k].fst) possk = v1[i].sec;
			if (v1[i].sec == v2[k].sec) possk = v1[i].sec;
			if (!possk) continue;
			if (poss != possk) ok = 0, cerr << i << j << k << 'y' << endl; // fst guy may guess wrong
		}
		// check if there is some k where (k, j) valid and common =/= poss
		for (int k=0;k<n;k++) {
			if (i == k) continue;
			if (v1[k] == v2[j]) continue;
			int possk = 0;
			if (v1[k].fst == v2[j].fst) possk = v1[k].fst;
			if (v1[k].fst == v2[j].sec) possk = v1[k].fst;
			if (v1[k].sec == v2[j].fst) possk = v1[k].sec;
			if (v1[k].sec == v2[j].sec) possk = v1[k].sec;
			if (!possk) continue;
			if (poss != possk) ok = 0, cerr << i << j << k << 'x' << endl; // fst guy may guess wrong
		}
	}
	cout << (ok ? 0 : -1) << endl;
	return 0;
}

int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << (solve() ? "YES" : "NO") << endl;
	return 0;
}
