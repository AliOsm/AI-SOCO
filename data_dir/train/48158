#include <iostream>

#include <vector>
#include <string>
#include <algorithm>

using namespace std;

typedef long long llong;

#define SZ(a) int((a).size())

#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

#define REPD(i,n) for(int i=(n)-1;i>=0;--i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)

#define MAXN 100004

int N, M;
int A[MAXN];
int PS[MAXN];
int SS[MAXN];

int main(int argc, char *argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   cin >> N >> M;
   A[0] = 0;
   FOR(i, 1, N)
      cin >> A[i];
   A[N+1] = M;

   for (int i = N; i >= 0; --i) {
      if (i & 1) {
         // turn-off at A[i]
         SS[i] = SS[i+1];
      }
      else {
         // turn on at A[i]
         SS[i] = SS[i+1] + (A[i+1] - A[i]);
      }
   }

   for (int i = 1; i <= N+1; ++i) {
      if (i & 1) {
         // turn-off at A[i]
         PS[i] = PS[i-1] + (A[i] - A[i-1]);
      }
      else {
         // turn on at A[i]
         PS[i] = PS[i-1];
      }
   }

   int best = SS[0];
   
// cerr << SS[0] << endl;
   
   for (int i = 0; i <= N+1; ++i) {
      if (i > 0 && A[i]-1 != A[i-1]) {
         // insert at A[i]-1
         int cur = PS[i] + (M - A[i]) - SS[i];
         if (i & 1)
            cur--;
         else
            cur++;
      // cerr << "before " << i << " " << cur << endl;
         best = max(best, cur);
      }
      if (i <= N && A[i]+1 != A[i+1]) {
         // insert at A[i]+1
         int cur = PS[i] + (M - A[i]) - SS[i];
         if (i & 1)
            cur--;
         else
            cur++;
      // cerr << "after " << i << " " << cur << endl;
         best = max(best, cur);
      }
   }

   cout << best << endl;
   
   return 0;
}
