/*
.....   .   .   .   .
  .    . .   . .   . .
  .   .....   .   .....
  .  .     .  .  .     .
*/
#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stdio.h>
#include <cstdio>
#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <queue>
#include <deque>
#include <random>
#include <iomanip>

using namespace std;

template<typename T> void uin(T &a, T b) {
    if (b < a) {
        a = b;
    }
}

template<typename T> void uax(T &a, T b) {
    if (b > a) {
        a = b;
    }
}

const int maxn = 100 * 1000 + 228, mod = 998244353;

void add(int &x, int y) {
    x += y;
    if (x >= mod) x -= mod;
}

int addi(int x, int y) {
    add(x, y);
    return x;
}

void men(int &x, int y) {
    x -= y;
    if (x < 0) x += mod;
}

int ment(int x, int y) {
    men(x, y);
    return x;
}

int dp[maxn][101], go[maxn][101], sum[maxn], a[maxn], color[maxn];

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n, k, len;
    cin >> n >> k >> len;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
    }
    sum[0] = 1;
    for (int l = 1; l <= 100; ++l) {
        int j = 0;
        for (int i = 1; i <= n; ++i) {
            if (a[i] != -1 && a[i] != l) {
                continue;
            }
            uax(j, i - 1);
            while (j + 1 <= n && (a[j + 1] == l || a[j + 1] == -1)) ++j;
            go[i][l] = j;
        }
    }
    for (int i = 1; i <= n; ++i) {
        for (int lst = 1; lst <= k; ++lst) {
            if (a[i] == -1 || a[i] == lst) {
                dp[i][lst] = sum[i - 1];
                if (i >= len && go[i - len + 1][lst] >= i
                    ) {
                    men(dp[i][lst], ment(sum[i - len], dp[i - len][lst]));
                }
            }
            add(sum[i], dp[i][lst]);
        }
    }
    cout << sum[n] << '\n';
    return 0;
}