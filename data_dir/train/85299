#include<bits/stdc++.h>
#define MOD 1000000007
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define pll pair<ll,ll>
#define vpll vector<pll>
using namespace std;
typedef long long int ll; 
double PI=4.00*(atan(1));

ll n,m;
ll arr1[100010];
ll arr2[100010];

ll exponent(ll base,ll power)
{
    ll result=1;
    while(power!=0)
    {
        if(power&1)
        {
            result=(result*base)%MOD;
        }
        base=(base*base)%MOD;
        power=power>>1;
    }
    return result;
}

ll dp[100010][2];

ll solve(ll index,ll bound)
{
    if(index==n)
    {
        if(bound==0)
        {
            return 1;
        }
        return 0;
    }
    if(dp[index][bound]!=-1)
    {
        return dp[index][bound];
    }
    if(arr1[index]!=0 && arr2[index]!=0)
    {
        if(bound==0)
        {
            dp[index][bound]=solve(index+1,bound);
        }
        else if(arr1[index]==arr2[index])
        {
            dp[index][bound]=solve(index+1,1LL);
        }
        else if(arr1[index]>arr2[index])
        {
            dp[index][bound]=solve(index+1,0LL);
        }
        else
        {
            dp[index][bound]=0;
        }
        return dp[index][bound];
    }
    else if(arr1[index]!=0 && arr2[index]==0)
    {
        if(bound==0)
        {
            dp[index][bound]=m*solve(index+1,bound);
            dp[index][bound]=(dp[index][bound])%MOD;
        }
        else
        {
            dp[index][bound]=(arr1[index]-1)*solve(index+1,0);
            dp[index][bound]=(dp[index][bound])%MOD;
            dp[index][bound]+=solve(index+1,bound);
            dp[index][bound]=(dp[index][bound])%MOD;
        }
    }
    else if(arr1[index]==0 && arr2[index]!=0)
    {
        if(bound==0)
        {
            dp[index][bound]=m*solve(index+1,bound);
            dp[index][bound]=(dp[index][bound])%MOD;
        }
        else
        {
            dp[index][bound]=(m-arr2[index])*solve(index+1,0);
            dp[index][bound]=(dp[index][bound])%MOD;
            dp[index][bound]+=solve(index+1,bound);
            dp[index][bound]=(dp[index][bound])%MOD;
        }
    }
    else
    {
        ll store=m;
        if(bound==0)
        {
            store=(store*store)%MOD;
            dp[index][bound]=store*solve(index+1,bound);
            dp[index][bound]=(dp[index][bound])%MOD;
        }
        else
        {
            store=(store*(store-1)/2)%MOD;
            dp[index][bound]=(store)*solve(index+1,0);
            dp[index][bound]=(dp[index][bound])%MOD;
            dp[index][bound]+=(m*solve(index+1,bound))%MOD;
            dp[index][bound]=(dp[index][bound])%MOD;
        }
    }
    return dp[index][bound];
}


int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    memset(dp,-1,sizeof(dp));    
    cin>>n>>m;
    ll count=0;
    for(ll i=0;i<n;i++)
    {
        cin>>arr1[i];
        if(arr1[i]==0)
        {
            count++;
        }
    }
    for(ll i=0;i<n;i++)
    {
        cin>>arr2[i];
        if(arr2[i]==0)
        {
            count++;
        }
    }
    ll temp=MOD-2;
    ll numerator=solve(0,1);
    ll denom=exponent(m,count);
    denom=exponent(denom,temp);
    ll ans=(numerator*denom)%MOD;
    cout<<ans;
    return 0;
}
    