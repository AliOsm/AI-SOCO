/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
class BZgukistringZ {
public:
    vi fa, fb, fc;
    int possible(){
        int res = INT_MAX;
        f(i, 26){
            if(fc[i]) res = min(res, (fa[i]/fc[i]));
        }
        return res;
    }
    string a, b, c;
    void solve(std::istream& in, std::ostream& out) {
        in>>a>>b>>c;
        fa = vi(26);
        fb = vi(26);
        fc = vi(26);
        for(char c: a) fa[c-'a']++;
        for(char c: b) fb[c-'a']++;
        for(char c: c) fc[c-'a']++;
        int n = a.length();
        int ma = possible();
        int ri = 0, rj = ma;

        rep(i, 1, n){
            bool ok = true;
            f(k, 26){
                fa[k] -= fb[k];
                if(fa[k]<0) ok = false;
            }
            if(!ok) break;
            int j = possible();
            if(i+j>ma) ri = i, rj = j, ma = i+j;
        }
        string res = "";
        f(i, ri) res += b;
        f(i, rj) res += c;
        fa = vi(26, 0);
        for(char c: a) fa[c-'a']++;
        f(i, 26) fa[i] -= (ri*fb[i]+rj*fc[i]);
        f(i, 26) while(fa[i]--) res += ('a'+i);
        out<<res;
    }
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	BZgukistringZ solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
