#include <bits/stdc++.h>

using namespace std;

struct Node
{
    struct Node *children[2];
    int Size;
};

struct Node *initilaize()
{

    struct Node *pNode = new struct Node;

    pNode->Size = 0;

    for(int i=0; i<2; i++)
        pNode->children[i] = NULL;

    return pNode;
};

int Insert(struct Node *root, int i , int x)
{

    if(i == -1){
        root->Size++;
        return root->Size;
    }

    if(!(x & (1 << i)) && root->children[0]==NULL)  root->children[0] = initilaize();
    if((x & (1 << i)) && root->children[1]==NULL)  root->children[1] = initilaize();

    if(!(x & (1 << i)))  return root->Size = (root->children[1] != NULL ? root->children[1]->Size : 0) + Insert(root->children[0] , i - 1 , x);
    if((x & (1 << i)))   return root->Size = (root->children[0] != NULL ? root->children[0]->Size : 0) + Insert(root->children[1] , i - 1 , x);
}

int Delete(struct Node *root, int i , int x)
{

    if(i == -1){
        root->Size--;
        return root->Size;
    }

    if(!(x & (1 << i)))  return root->Size = (root->children[1] != NULL ? root->children[1]->Size : 0) + Delete(root->children[0] , i - 1 , x);
    if((x & (1 << i)))   return root->Size = (root->children[0] != NULL ? root->children[0]->Size : 0) + Delete(root->children[1] , i - 1 , x);
}

int Solve(struct Node *Root, int x, int l)
{

    string s;

    struct Node *pNode = Root;

    for(int i=0; i<31; i++)  (x&(1<<i)) ? s+='1' : s+='0';

    int Ans = 0;

    for(int i = 30; i>=0; i--)
    {
        if(s[i] == '1' && ((1 << i)) <= l)
        {
            if(pNode->children[1] != NULL)  Ans+=pNode->children[1]->Size;
            l-=(1 << i);
            if(pNode->children[0] != NULL) pNode = pNode->children[0];
            else  break;
        }
        else if(s[i] == '1')
        {
            if(pNode->children[1] != NULL) pNode = pNode->children[1];
            else  break;
        }
        else if(s[i] == '0' && ((1 << i) <= l))
        {
            if(pNode->children[0] != NULL)  Ans+=pNode->children[0]->Size;
            l-=(1 << i);
            if(pNode->children[1] != NULL) pNode = pNode->children[1];
            else  break;
        }
        else
        {
            if(pNode->children[0] != NULL) pNode = pNode->children[0];
            else  break;
        }
    }

    return Ans;
}

int main()
{
    struct Node *Root = initilaize();
    int q;
    cin >> q;
    while(q--)
    {
        int type,p;
        scanf("%d",&type);
        if(type == 1)
        {
            scanf("%d", &p);
            Insert(Root, 30 , p);
        }
        if(type == 2)
        {
            scanf("%d", &p);
            Delete(Root, 30 , p);
        }
        if(type == 3)
        {
            int x,l;
            scanf("%d%d", &x, &l);
            printf("%d\n",Solve(Root, x, l));
        }
    }
    return 0;
}
