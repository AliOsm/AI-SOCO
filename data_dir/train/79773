#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/STACK:16777216")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef complex<double> num;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout.setf(ios::fixed);
    cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

struct node {
    int num[48];

    node() {
        memset(num, 0, sizeof(num));
    }
};

const ll mod = 95542721;
const int MAXN = 1e5 + 100;
ll arr[MAXN];
node T[MAXN * 4];
int add[MAXN * 8];

ll binpow(ll a, ll n) {
    ll res = 1;
    while (n) {
        if (n & 1) {
            res = (res * a) % mod;
        }
        a = (a * a) % mod;
        n >>= 1;
    }
    return res;
}

void build(int id, int v, int tl, int tr) {
    if (tl + 1 == tr) {
        T[v].num[id] = arr[tl];
        return;
    }
    int tm = (tl + tr) >> 1;
    build(id, v * 2 + 1, tl, tm);
    build(id, v * 2 + 2, tm, tr);
    T[v].num[id] = (T[v * 2 + 1].num[id] + T[v * 2 + 2].num[id]) % mod;
}

void push(int v) {
    add[v] %= 48;
    rotate(T[v].num, T[v].num + add[v], T[v].num + 48);
    add[v * 2 + 1] += add[v];
    add[v * 2 + 2] += add[v];
    add[v] = 0;
}

void update(int v, int tl, int tr, int l, int r) {
    push(v);
    if (tl >= r || tr <= l) {
        return;
    }
    if (tl >= l && tr <= r) {
        add[v]++;
        push(v);
        return;
    }
    int tm = (tl + tr) >> 1;
    update(v * 2 + 1, tl, tm, l, r);
    update(v * 2 + 2, tm, tr, l, r);
    for (int i = 0; i < 48; ++i) {
        T[v].num[i] = (T[v * 2 + 1].num[i] + T[v * 2 + 2].num[i]) % mod;
    }
}

ll getsum(int v, int tl, int tr, int l, int r) {
    push(v);
    if (tl >= r || tr <= l) {
        return 0;
    }
    if (tl >= l && tr <= r) {
        return T[v].num[0];
    }
    int tm = (tl + tr) >> 1;
    ll a = getsum(v * 2 + 1, tl, tm, l, r);
    ll b = getsum(v * 2 + 2, tm, tr, l, r);
    return (a + b) % mod;
}

signed main() {
    FAST_IO();
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
        arr[i] %= mod;
    }
    for (int i = 0; i < 48; ++i) {
        build(i, 0, 0, n);
        for (int j = 0; j < n; ++j) {
            arr[j] = binpow(arr[j], 3);
        }
    }
    int q;
    cin >> q;
    while (q--) {
        int type, l, r;
        cin >> type >> l >> r;
        if (type == 1) {
            cout << getsum(0, 0, n, l - 1, r) << '\n';
        }
        else {
            update(0, 0, n, l - 1, r);
        }
    }
}
