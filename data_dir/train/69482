#include<bits/stdc++.h>
 
#define ll long long
#define Add_Speed ios_base::sync_with_stdio(0);cin.tie(NULL);
#define pb push_back
#define mp make_pair
#define F first
#define sz size()
#define S second
#define pii pair<int, int>
#define all(s) s.begin(), s.end()
#define file(s) freopen(s".in","r",stdin); freopen(s".out","w",stdout);
#define inf INT_MAX
#define int ll

using namespace std;
 
const int maxn = (int)5e5 + 100;
const int mod = (int)1e9 + 7;
const int maxlog = (int)20;
const int P = mod;        
                  
inline int getint() {
  char _c = getchar();
  ll _x = 0, _s = 1;
  while (_c <= 32) _c = getchar();
  if (_c == '-') _s = -1, _c = getchar();
  while ('0' <= _c && _c <= '9') _x = _x * 10 + _c - '0', _c = getchar();
  return _x * _s;
}

int n, m, a[maxn], k, magic, t[maxn], cnt[maxn], Id, sum[maxn], pl[maxn], mn[maxn];
ll ans[maxn], res, pr[maxn];
map<ll, int> id;
int getId(ll x){
  if(!id.count(x)) id[x] = ++Id;
  return id[x];
}
vector<pair< int, pair< int, int > > > g;
bool cmp(pair<int, pair< int, int > > a, pair<int, pair< int, int > > b){
  if(a.F / magic == b.F / magic)
    return a.S.F < b.S.F;
  return a.F / magic < b.F / magic;
}
inline void add(int x, int t){
  if(t){
    res += cnt[mn[x]];
    cnt[sum[x]]++;
  }else{
    res += cnt[pl[x]];
    cnt[sum[x]]++;
  }
}
inline void rem(int x, int t){
  if(t){
    cnt[sum[x]]--;
    res -= cnt[mn[x]];
  }
  else{
    cnt[sum[x]]--;              
    res -= cnt[pl[x]];    
  }
}
main () {
  n = getint(), k = getint();
  magic = 333;
  for(int i = 1; i <= n; i++){
    t[i] = getint();
  }
  sum[0] = getId(0);
  pl[0] = getId(k);
  for(int i = 1; i <= n; i++){
    a[i] = getint();
    if(t[i] == 1)
      pr[i] = pr[i - 1] + a[i];
    else
      pr[i] = pr[i - 1] - a[i];
    sum[i] = getId(pr[i]);
    pl[i] = getId(pr[i] + k);
    mn[i] = getId(pr[i] - k);
  }   
  m = getint();
  for(int i = 1; i <= m; i++){
    int l, r;
    l = getint(), r = getint();l--;
    g.pb(mp(l, mp(r, i)));
  }
  sort(all(g), cmp);
  int L = 1, R = 0;
  for(int i = 0; i < g.sz; i++){
    int l = g[i].F, r = g[i].S.F, id = g[i].S.S;
    while(R < r) add(++R, 1);
    while(L < l) rem(L++, 0);
    while(R > r) rem(R--, 1);
    while(L > l) add(--L, 0);
    ans[id] = res;
  }
  for(int i = 1; i <= m; i++){
    cout << ans[i] << endl;
  }
}