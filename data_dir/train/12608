#include<iostream>
#include<algorithm>
#include<map>

using namespace std;

const int MAXN = 800005;
int l[MAXN], r[MAXN], p[MAXN];
int a[MAXN], t[MAXN], ps[MAXN], pst[MAXN];

inline int in(){ int x, y; y = scanf("%d", &x); return x; }

void solve()
{
	int n = in();
	map<int, int> mp;
	for(int i = 0; i < 4 * n + 4; i++)
		a[i] = t[i] = ps[i] = pst[i] = 0;
	for(int i = 0; i < n; i++)
	{
		l[i] = in(), r[i] = in();
		p[2 * i] = l[i], p[2 * i + 1] = r[i];
	}
	int m = 2 * n;
	sort(p, p + m);
	m = unique(p, p + m) - p;
	for(int i = 0; i < m; i++)
		mp[p[i]] = i;
	for(int i = 0; i < n; i++)
	{
		a[mp[l[i]] * 2]++;
		a[mp[r[i]] * 2 + 1]--;
	}
	int interval = 0;
	bool flag = false;
	for(int i = 0; i < 2 * m; i++)
	{
		ps[i] = a[i];
		if(i)
			ps[i] += ps[i - 1];
		if(ps[i] > 1)
			flag = true;

		if(i % 2 == 1)
		{
			if(ps[i - 1] > 1 && ps[i] == 1)
				t[i - 1]++;
			if(ps[i - 1] >= 1 && ps[i] == 0)
				interval++;
		}
	}
	if(!flag)
	{
		printf("%d\n", n - 1);
		return;
	}
	for(int i = 0; i < 2 * m; i++)
	{
		pst[i] = t[i];
		if(i)
			pst[i] += pst[i - 1];
	}
	int MAX = 0;
	for(int i = 0; i < n; i++)
	{
		int x = mp[l[i]] * 2 - 1, y = mp[r[i]] * 2 - 1;
		int tmp = ((y < 0)? 0: pst[y]) - ((x < 0)? 0: pst[x]) ;
//		cout << y + 1 << ' ' << lst[y + 1] << endl;
		if(ps[y + 1] == 1)
			tmp--;
		MAX = max(MAX, tmp);
//		cout << MAX << endl;
	}
//	cout << interval << endl;
	printf("%d\n", interval + MAX);
}

int main()
{
	int t = in();
	while(t--)
		solve();
	return 0;
}
