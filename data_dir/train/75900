#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define sz(v) (int)v.size()
#define up_b upper_bound
#define low_b lower_bound
#define nl '\n'

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;

const int N=2e5+11;
const int M=3e6+11;
const int W=1e3+11;
const int inf=1e9;
const ll INF=1e18;
const ll mod=1e9+7;
const ld EPS=1e-9;


int a[N],b[N];
vector<int>ans[N];
set<int>s[N];

int main(){
  ios_base::sync_with_stdio(0);
  cin.tie(0),cout.tie(0);
  int n,k;
  cin>>n>>k;
  for(int i=1;i<=n;i++){
    cin>>a[i];
  }
  for(int i=1;i<=k;i++){
    cin>>b[i];
  }
  sort(a+1,a+n+1);
  set<int>st;
  int cnt=0;
  for(int i=n;i>=1;i--){
    if(i==n){
      cnt++;
      st.insert(1);
      ans[cnt].pb(a[i]);
      s[1].insert(cnt);
    }
    else{
      int sz=b[a[i]];
      auto it=st.low_b(sz);
      if(it==st.begin()){
        cnt++;
        st.insert(1);
        ans[cnt].pb(a[i]);
        s[1].insert(cnt);
      }
      else{
        it--;
        sz=*it;
        int id=*s[sz].begin();
        s[sz].erase(id);
        if(s[sz].empty())st.erase(sz);
        ans[id].pb(a[i]);
        st.insert(sz+1);
        s[sz+1].insert(id);
      }
    }
  }
  cout<<cnt<<nl;
  for(int i=1;i<=cnt;i++){
    cout<<sz(ans[i])<<" ";
    for(int j=0;j<sz(ans[i]);j++){
      cout<<ans[i][j]<<" ";
    }
    cout<<nl;
  }
}
