#include <bits/stdc++.h>

using namespace std;

const int N = 3e6 + 5, M = 2e5 + 5;

int n, frq[N];
bool prime[N];
vector<int> primes;

void generatePrimes() {
	memset(prime, true, sizeof(prime));

	prime[0] = prime[1] = false;

	for (int i = 2; i * i < N; ++i) {
		if (prime[i]) {
			for (int j = i * i; j < N; j += i) {
				prime[j] = false;
			}
		}
	}

	for (int i = 2; i < N; ++i) {
		if (prime[i]) {
			primes.push_back(i);
		}
	}
}

int getGreatestDiv(int x) {
	for (int i = 2; i * i <= x; ++i) {
		if (x % i == 0) {
			return x / i;
		}
	}
}

int main() {
	cin >> n;

	for (int i = 0; i < 2 * n; ++i) {
		int x;
		scanf("%d", &x);
		frq[x]++;
	}

	generatePrimes();

	for (int i = M - 1; i > 1; --i) {
		if (frq[i] <= 0) {
			continue;
		}

		int d = prime[i] ? primes[i - 1] : getGreatestDiv(i);

		while (frq[i] && frq[d]) {
			printf("%d ", i);
			frq[i]--;
			frq[d]--;
		}
	}

	return 0;
}