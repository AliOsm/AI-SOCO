#define __USE_MINGW_ANSI_STDIO 0
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define ff first
#define ss second
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define int long long
#define all(a) a.begin(), a.end()
#define inf (1LL<<61)
#define ull unsigned long long
#define debug1(x) cerr << #x << ": " << x <<'\n'
#define debug2(x, y) cerr << #x << ": " << x << '\t' << #y << ": " << y <<'\n'
#define debug3(x, y, z) cerr << #x << ": " << x << '\t' << #y << ": " << y << '\t' << #z << ": " << z <<'\n'
using namespace std;
int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
int gcd(int x,int y)
{
    if(y==0)
        return x;
    else
        return gcd(y,x%y);
}
int expo(int n,int m,int p)   //modULAR EXPONENTIATION
{
    int r=1;
    n=n%p;
    while(m>0)
    {
        if(m%2)
            r=(r*n)%p;
        n=(n*n)%p;
        m=m/2;
    }
    return r%p;
}
bool isPrime(int n)
{
    // Corner cases
    if (n <= 1)  return false;
    if (n <= 3)  return true;
 
    // This is checked so that we can skip 
    // middle five numbers in below loop
    if (n%2 == 0 || n%3 == 0) return false;
 
    for (int i=5; i*i<=n; i=i+6)
        if (n%i == 0 || n%(i+2) == 0)
           return false;
 
    return true;
}
const int N=1000005;
vector<int>adj[N];
vector<int>v[N];
int n,m,w,c=0,f=0;
int a[N],b[N],d=0,totb[N],totw[N];
bool vis[N];
vector<int>t;
int dp[5005][5005];
void dfs(int s)
{
	vis[s]=true;
	c=c+b[s];
	f=f+a[s];
	t.pb(s);
	for(int i=0;i<adj[s].size();i++)
	{
		if(!vis[adj[s][i]])
		{
			dfs(adj[s][i]);
		}
	}
}
int solve(int i,int we)
{
	//debug2(i,we);
	if(i==d)
	{
		if(we>w)
			return -inf;
		return 0;
	}
	if(dp[i][we]!=-1)
		return dp[i][we];
	int ans=0;
	ans=solve(i+1,we);
	for(int j=0;j<v[i].size();j++)
	{
		if(we+a[v[i][j]]<=w)
			ans=max(ans,b[v[i][j]]+solve(i+1,we+a[v[i][j]]));
	}
	if(we+totw[i]<=w)
		ans=max(ans,totb[i]+solve(i+1,we+totw[i]));
	dp[i][we]=ans;
	return ans;
}
int32_t main()
{
   IOS;
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin); 
   freopen("output.txt","w",stdout);
   #endif
   /********************* Code starts here ***********************/
   cin>>n>>m>>w;
   for(int i=0;i<5005;i++)
   {
   	for(int j=0;j<5005;j++)
   	{
   		dp[i][j]=-1;
   	}
   }
   for(int i=0;i<n;i++)
   {
   	cin>>a[i];
   	vis[i]=false;
   }
   for(int i=0;i<n;i++)
   {
   	cin>>b[i];
   }
   for(int i=0;i<m;i++)
   {
   	int x,y;
   	cin>>x>>y;
   	adj[x-1].pb(y-1);
   	adj[y-1].pb(x-1);
   }
   for(int i=0;i<n;i++)
   {
   	if(vis[i])
   		continue;
   	t.clear();
   	c=0;
   	f=0;
   	dfs(i);
   	for(int j=0;j<t.size();j++)
   	{
   		v[d].pb(t[j]);
   	}
   	totb[d]=c;
   	totw[d]=f;
   	//debug2(c,f);
   	d++;
   }
   cout<<solve(0,0)<<endl;
} 
	