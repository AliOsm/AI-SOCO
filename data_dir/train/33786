#include <bits/stdc++.h>
using namespace std;
struct P
{
    int x,y;
    bool operator<(const P &a)const{
        if(y!=a.y) return y>a.y;
        return x>a.x;
    }

};
vector<int> v;
//bitset<4001000> b;
int i,n,d,m,k,a,b,c;
int o[111][111];
int l[1];
int j[1];
int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[111];
stack<int> s;
//set<int> se;
//priority_queue<int> q;
//queue<int> q;
string r;
//char r[5511];
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p[2];
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
bool as(P a,P b)
{
    return a.x<b.x;
}

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//rng();


int f(int n,int m)
{
    int k=max(n,m)+1;
    if(k>a) return max(u[n].x-u[m].x,u[m].x-u[n].x);
    if(o[n][m]>=0) return o[n][m];
    return o[n][m]=min(max(f(k,m),u[k].x-u[n].x),max(f(n,k),u[k].x-u[m].x));
}

void g(int n,int m)
{
    int k=max(n,m)+1;
    if(k>a)
    {
        for(;s.size();s.pop())
            printf("%d ",s.top());
        return;
    }
    if(f(k,m)<f(n,k))
    {
        printf("%d ",u[k].x);
        g(k,m);
        return;
    }
    s.push(u[k].x);
    g(n,k);
}

int main()
{
    memset(o,-1,sizeof(o));
    scanf("%d",&a);
    for(int t=1;t<=a;u[t].y=t,t++)
        scanf("%d",&u[t].x);
    if(a==1)
    {
        printf("%d",u[1].x);
        return 0;
    }
    sort(u+1,u+a+1,as);
    printf("%d ",u[1].x);
    g(1,2);
    printf("%d ",u[2].x);
}
//수열과 쿼리 13
