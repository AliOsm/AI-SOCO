#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int inf = (1 << 29);

vector<pair<int, int> > adj[30];

bool vis[30][30];
int  dis[30][30];
priority_queue<pair<int, int> > pq;

void dijkstra(int s) {
    for(int i = 0; i < 30; i++) dis[s][i] = inf;

    dis[s][s] = 0;
    pq.push({0, s});

    while(!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        if(vis[s][u]) continue;
        vis[s][u] = true;

        for(auto t : adj[u]) {
            int v = t.first, w = t.second;

            if(dis[s][u] + w < dis[s][v]) {
                dis[s][v] = dis[s][u] + w;
                pq.push({-dis[s][v], v});
            }

        }

    }

}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

    string s, t;
    cin >> s >> t;

    int n;
    cin >> n;

    for(int i = 0; i < n; i++) {
        char u, v;
        int w;

        cin >> u >> v >> w;

        u -= 'a', v -= 'a';

        //cout << int(u) << " " << int(v) << " " << w << endl;

        adj[(int) u].push_back({(int) v, w});
    }

    if(s.size() != t.size()) {
        cout << -1 << endl;
        return 0;
    }

    for(int u = 0; u < 26; u++) dijkstra(u);

    int ans = 0;
    string str = "";

    for(int i = 0; i < s.size(); i++) {
        int cur = inf, u = s[i] - 'a', v = t[i] - 'a';

        char min_c;

        for(int c = 0; c < 26; c++) {
            if(cur > dis[u][c] + dis[v][c]) {
                cur = dis[u][c] + dis[v][c];
                min_c = c + 'a';
            }
        }

        if(cur == inf) {
            cout << -1 << endl;
            return 0;
        }

        ans += cur;
        str += min_c;
    }

    cout << ans << endl;
    cout << str << endl;
}

/**
*/
