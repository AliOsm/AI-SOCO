#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define mod 1000000007
// #define int long long
#define ll long long
#define EPS 0.00000000000001
#define ld long double
#define inf 200000000
const int N = 200000;

int par[N],rnk[N];
vector<int> ht(N,0);
int root(int x)
{
	while(x != par[x])
	{
		par[x] = par[par[x]];
		x = par[x];
	}
	return x;
}

void merge(int u,int v)
{
	if(u == 0 or v == 0 or u == v)
		return;
	if(rnk[u] < rnk[v])
		swap(u,v);
	if(rnk[u] == rnk[v])
		rnk[u]++;
	par[v] = u;
}

void call_merge(int u,int v)
{
	merge(u,v);
	merge(root(ht[u]),root(ht[v]));
	ht[u] = root(ht[u]);
	ht[v] = root(ht[v]);
	ht[u] = max(ht[u],ht[v]);
	ht[v] = max(ht[v],ht[u]);
}

int32_t main()
{
	IOS;
	#ifndef ONLINE_JUDGE
	freopen("int.txt","r",stdin);
	freopen("out.txt","w",stdout);
	#endif
	int n,m,q;
	cin >> n >> m >> q;
	map<string,int> st;
	par[0] = 0;
	for(int i = 1;i <= n;i++)
	{
		par[i] = i;
		rnk[i] = 1;
		string s;
		cin >> s;
		st[s] = i;
	}

	for(int i = 0;i < m;i++)
	{
		int t;
		string x,y;
		cin >> t >> x >> y;
		int u = root(st[x]);
		int v = root(st[y]);
		int htu = root(ht[u]);
		int htv = root(ht[v]);
		if(t == 1)
		{
			if(htu == v or htv == u)
				cout << "NO";
			else
			{
				cout << "YES";
				call_merge(u,v);
			}
		}
		else
		{
			if(u == v)
				cout << "NO";
			else
			{
				cout << "YES";
				if(htu != 0)
				{
					call_merge(htu,v);
				}
				else
				{
					ht[u] = v;
				}
				v = root(v);
				u = root(u);
				htv = root(ht[v]);
				if(htv != 0)
				{
					call_merge(htv,u);
				}
				else
				{
					ht[v] = u;

				}
			}
		}
		cout << endl;
	}
	while(q--)
	{
		string x,y;
		cin >> x >> y;
		int u,v;
		u = root(st[x]);
		v = root(st[y]);
		if(u == v)
			cout << 1;
		else
		{
			if(root(ht[u]) == v or root(ht[v]) == u)
				cout << 2;
			else
				cout << 3;
		}
		
		cout << endl;
	}
    return 0;
}
 
