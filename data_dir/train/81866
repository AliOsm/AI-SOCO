#include<bits/stdc++.h>
using namespace std;

#define fi first
#define se second
#define long long long
typedef pair<int,int> ii;

int n;
int A[200003];
int idx[200003];
set<int> st;

long ft1[200003], ft2[200003];
void update	(int x, long val, long ft[])
{
	for(; x <= n; x += (x&-x))
		ft[x] += val;
}
long query(int x, long ft[])
{
	return (x == 0)? 0 : ft[x] + query(x-(x&-x), ft);
}
long query(int x, int y, long ft[])
{
	return query(y, ft) - query(x-1, ft);
}
long f(long x) { return x*(x+1)/2; }

int main()
{
	// freopen("input.in", "r", stdin);

	scanf("%d", &n);
	for(int i = 1; i <= n; i++)
	{
		scanf("%d", &A[i]);
		idx[A[i]] = i;
	}

	long inv = 0;
	long kir = 0, kan = 0;
	long mid = -1;
	for(int i = 1; i <= n; i++)
	{
		
		inv += query(idx[i], n, ft1);
		update(idx[i], 1, ft1);
		
		st.insert(idx[i]);
		if(i == 1) mid = idx[i];
		else
		{
			if(idx[i] < mid) kir++;
			if(idx[i] > mid) kan++;
		}
		if(kir > kan+1)
		{
			kir--;
			kan++;
			auto it = st.lower_bound(mid);
			mid = *(--it);
		}
		if(kan > kir+1)
		{
			kir++;
			kan--;
			auto it = st.lower_bound(mid);
			mid = *(++it);
		}
		update(idx[i], idx[i], ft2);
		
		long sumkir = query(1, mid-1, ft2);
		long sumkan = query(mid+1, n, ft2);
		long comkir = kir*mid - sumkir - f(kir);
		long comkan = sumkan - kan*mid - f(kan);


		// printf("inv : %lld 	mid : %lld 	kir kan : %lld %lld 	sum : %lld %lld\n", 
		// 	inv, mid, kir, kan, sumkir, sumkan);
		// printf("com : %lld %lld\n", comkir, comkan);
		printf("%lld%c", inv+comkir+comkan, (i == n)? '\n' : ' ');
	}
}