#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
//using NAMspace __gnu_pbds;
//typedef tree<LL, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define ll                  int
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scll(n,m)           scanf("%lld %lld",&n,&m)
#define sclll(n,m,p)        scanf("%lld %lld %lld",&n,&m,&p)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%lld\n",n)
#define pfs(s)              printf("%s\n",s)
#define dist2D(x1,y1,x2,y2)         ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
#define dist3D(x1,y1,z1,x2,y2,z2)   ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2))
#define bug1(x)                cerr<<#x<<": "<<x<<endl
#define bug2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define bug3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define bug4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define bug5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define bug6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 100000007
#define MODP                99999999999973LL
#define pb                  push_back
#define pi                  pair<ll,ll>
#define pii                 pair<pi,ll>
#define mp                  make_pair
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e18
#define EPS                 1e-13
#define Pi                  acos(-1)
//ll Set(ll mask,ll pos){return mask=mask | (1LL<<pos);}
//ll reset(ll mask,ll pos){return mask= mask & ~(1LL<<pos);}
//bool check(ll mask,ll pos){return (bool)(mask & (1LL<<pos));}
//ll bigmod(ll b, ll p, ll md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {ll y=bigmod(b,p/2,md);return (y*y)%md;}}
#define N 1000006

ll arr[N];
ll n;

ll min_table[N][21];
ll gcd_table[N][21];

void init_min(){

   for(ll i=0;i<n;i++){
         min_table[i][0]=arr[i];
   }

   for(ll j=1;(1<<j)<=n;j++){

         for(ll i=0;i+(1<<j)-1<n;i++){

            if(min_table[i][j-1] < min_table[i+(1LL<<(j-1))][j-1])
               min_table[i][j]=min_table[i][j-1];
            else
               min_table[i][j]=min_table[i+(1LL<<(j-1))][j-1];
         }
   }
}

void init_gcd(){

   for(ll i=0;i<n;i++){
         gcd_table[i][0]=arr[i];
   }

   for(ll j=1;(1<<j)<=n;j++){
         for(ll i=0;i+(1LL<<j)-1<n;i++){
               gcd_table[i][j]=__gcd(gcd_table[i][j-1],
                                     gcd_table[i+(1LL<<(j-1))][j-1]);
         }
   }
}

ll min_query(ll l, ll r){

   ll j=(ll)log2(r-l+1);

   ll ans=min( min_table[l][j],
              min_table[r-(1LL<<j)+1][j] );

   return ans;
}

ll gcd_query(ll l, ll r){

   ll j=(ll)log2(r-l+1);

   ll ans=__gcd(gcd_table[l][j],
                gcd_table[r-(1LL<<j)+1][j]);
   return ans;
}


ll query(ll len, ll pass){

   ll cnt=0;
   for(ll i=0;i+len-1<n;i++){
         if(min_query(i,i+len-1)==gcd_query(i,i+len-1)){
            cnt++;
            if(pass) cout<<i+1<<" ";
         }
   }

   return cnt;
}


int main(){

   cin>>n;
   for(ll i=0;i<n;i++){
         cin>>arr[i];
   }
   init_gcd();
   init_min();

   ll ans1=1;
   ll ans2=1;

   ll lo=1;
   ll hi=n;

   while(lo<=hi){
         long long mid=(lo+hi)/2;

         ll tem=query(mid,0);

         if(tem){
               ans1=mid;
               ans2=tem;
               lo=mid+1;
         }
         else{
            hi=mid-1;
         }
   }

   cout<<ans2<<" "<<ans1-1<<"\n";
   query(ans1,1);
   cout<<"\n";

  return 0;
}


 //ll dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1};  // 4 Direction
 //ll dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; // 8 Direction
 //ll dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; // Knight Direction
 //ll dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; // Hexagonal Direction
