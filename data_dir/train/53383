#include <bits/stdc++.h>

using namespace std;
//int dp[200011][3][2];
//int call(int id,int value,bool taken){
//    if(id==s.length()){
//        return 0;
//    }
//    if(dp[id][value][taken]!=-1){
//        //cout<<"sdf"<<endl;
//        return dp[id][value][taken];
//    }
//    int res=0;
//    int temp = (value + (s[id]-'0'))%3;
//    if(s[id]=='0'){
//        res = 1 + call(id+1,0,1) + ( s[id-1]=='0'?0:( taken==0?temp==0:0 ) ) ;
//    }
//    else{
//        res = max(  call(id+1,temp,0) , (temp==0)+call(id+1,0,1) );
//    }
//    return dp[id][value][taken]=res;
//}
//int main(){
//    cin>>s;
//    memset(dp,-1,sizeof(dp));
//    cout<<call(0,0,0)<<endl;
//    return 0;
//}


//int n,m;
//int arr[200111];
//int main(){
//    cin>>n>>m;
//    int pos=0;
//    map<int,int>mymap;
//    for(int i=1;i<=n;i++){
//        cin>>arr[i];
//        int temp = arr[i];
//        if(arr[i]==m)pos=i;
//        arr[i] = arr[i]>=m?1:-1;
//        if(temp==m)arr[i]=0;
//        arr[i] = arr[i] + arr[i-1];
//        if(pos)mymap[ arr[i] ]++;
//    }
//    long long ans = 0;
//    for(int i=1;i<=pos;i++){
//        ans += mymap[ arr[i-1] ];
//        ans += mymap[ arr[i-1]+1 ];
//    }
//    cout<<ans<<endl;
//    return 0;
//}


//int n,m;
//int arr[200111];
//int main(){
//    cin>>n;
//    int pos=0;
//    map<int,int>mymap,mymap1;
//    for(int i=1;i<=n;i++){
//        cin>>arr[i];
//
//    }
//    for(int i=n;i;i--){
//        for(int j=1;j<31;j++){
//            if( (1<<j)-arr[i]==arr[i] ){
//                if(mymap1[arr[i]]==0){
//                    continue;
//                }
//            }
//            mymap[ (1<<j)-arr[i] ]=1;
//        }
//        mymap1[ arr[i] ]=1;
//    }
//    int cnt=0;
//    for(int i=1;i<=n;i++){
//        cnt += mymap[ arr[i] ]==0;
//    }
//    cout<<cnt<<endl;
//    return 0;
//}


string s,t;
int main(){
    cin>>s>>t;
    int id1 = s.size()-1;
    int id2 = t.size()-1;
    for(int i=min(s.size(),t.size())-1;i>=0;i--){
        if(s[id1]!=t[id2]){
            cout<<id1+id2+2<<endl;
            return 0;
        }
        id1--;
        id2--;
    }
    cout<<id1+id2+2<<endl;
    return 0;
}

