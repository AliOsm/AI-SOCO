#pragma comment(linker, "/STACK:64000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DERPECATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>
#include <memory.h>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <functional>
#include <complex>
 
using namespace std;
 
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int64, int64> pii;
#define sq(x) ((x)*(x))
#define INF ((int)(2e9))
#define LINF ((int64)(2e18))
#define EPS ((double)(1e-3))
#define MOD ((int64)(1e9 + 9))
#define y0 xdsf
const double PI = 6.283185307179586476925286766559;
const int MAXN = 1011000;
 
int64 n, m;
int mod = 1e9 + 7;
int dva = 500000004;

inline int mul(int64 a, int64 b)
{
    return ((a % mod) * (b % mod)) % mod;
}

inline int sum(int64 a, int64 b)
{
    return (a % mod + b % mod) % mod;
}

void solve()
{
    cin >> n >> m;
    int64 pr = n;
    int64 cur;
    int ans = 0;
    int tans = 0;
    if (m > n)
    {
        ans = sum(ans, mul(m - n, n));
        tans = ans;
        m = n;
    }
    
   /* for(int i = 1; i <= m; ++i)
        tans = sum(tans, n % i);
    cout << tans << endl;*/
    
    for(int64 i = 1; i * i <= n; ++i)
    {
        if (i > m)
            break;
        cur = max(i, n / (i + 1));
        int os = n % i;
        int64 sz = pr - cur;
        
        ans = sum(ans, n % i);
        if (sz > 0)
        {
            if (cur > m)
            {
                pr = cur;
                continue;
            }
            if (pr > m)
            {
                ans = sum(ans, mul(dva, mul(sum(sum(os, mul(i, pr - m)), sum(os, mul((i), sz - 1))), m - cur)));
                pr = cur;
                continue;
            }
            pr = cur;
            ans = sum(ans, mul(dva, mul(sum(os, sum(os, mul((i), sz - 1))), sz)));
        }
        
    }
    
    cout << ans;
}
 
int main()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
#endif
     ios_base::sync_with_stdio(false); cin.tie(0);
    srand(time(0));
    
    solve();
    
    return 0;
}  