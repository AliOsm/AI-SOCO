#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define f(i, x, n) for(int i = x; i < (int)(n); ++i)

int const N = 200000;
int fn[N + 1], n;
map<int, vector<int> > p;
vector<int> mp;
bool vis[N + 1];

inline void ad(int i) { vis[i] = true; while (i <= n)++fn[i], i += i & -i; }
inline int gt(int i) { int an = 0; while (i)an += fn[i], i ^= i & -i; return an; }
inline int gt(int l, int r) { return gt(r) - gt(l - 1); }
inline int id(int x) { return lower_bound(mp.begin(), mp.end(), x) - mp.begin() + 1; }

int main(){
	scanf("%d", &n);
	f(i, 0, n){
		int x, y;
		scanf("%d%d", &x, &y);
		p[-y].push_back(x);
		mp.push_back(x);
	}
	sort(mp.begin(), mp.end());
	mp.resize(unique(mp.begin(), mp.end()) - mp.begin());
	ll an = 0;
	for (auto it = p.begin(); it != p.end(); ++it)if (!it->second.empty()){
		vector<int> &v = it->second;
		sort(v.begin(), v.end());
		v.resize(unique(v.begin(), v.end()) - v.begin());
		f(i, 0, v.size())v[i] = id(v[i]);
		f(i, 0, v.size()){
			int r = i + 1 == (int)v.size() ? n : v[i + 1] - 1;
			an += (ll)(gt(1, v[i] - 1) + 1) * (gt(v[i] + 1, r) + 1);
			if (!vis[v[i]])ad(v[i]);
		}
	}
	printf("%lld\n", an);
}