#include <bits/stdc++.h>
using namespace std;

int queries;

vector<int> X;
int A[1000006];

int getLargestNum(int left, int right)
{
	int ans = -1;
	
	while(left <= right)
	{
		int mid = (left + right) / 2;
		
		queries--;
		cout << "> " << mid << "\n";
		fflush(stdout);
		
		int res;
		cin >> res;
		
		if(res == 1)
			ans = mid, left = mid + 1;
		else
			right = mid - 1;
	}
	
	return ans + 1;
}

int isOk(int d, int n)
{
	int a1 = X[0];
	int an = X.back();
	
	if(an - (n-1) * d < 0)
		return 0;
	
	if(an - (n-1) * d > a1)
		return 0;
	
	return 1;
}

int main()
{
	// ios::sync_with_stdio(0);
	// cin.tie(NULL), cout.tie(NULL);
	
	int N;
	cin >> N;
	
	srand(time(NULL));
	
	for(int i=1; i<=N; i++)
		A[i] = i;
	
	queries = 60;
	
	int R = getLargestNum(0, (int) 1e9);
	
	X.push_back(R);
	
	while(queries--)
	{
		cout << "? " << A[1LL * rand() * (rand() + 5) % N + 1] << "\n";
		fflush(stdout);
		
		int x;
		cin >> x;
		
		X.push_back(x);
	}
	
	int d = 0;
	sort(X.begin(), X.end());
	
	for(int i=1; i<X.size(); i++)
		d = __gcd(d, X[i] - X[i-1]);
	
	for(int i=1; i*i <= d; i++)
	{
		if(d % i)
			continue;
		
		if(isOk(i, N))
		{
			cout << "! " << R - (N-1) * i << " " << i << "\n";
			return 0;
		}
		
		if(isOk(d/i, N))
		{
			cout << "! " << R - (N-1) * (d/i) << " " << d/i << "\n";
			return 0;
		}
	}
	
	return 0;
}
