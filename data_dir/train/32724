#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <functional>
#include <iomanip>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <hash_set>
#include <hash_map>
#include <algorithm>

//define NDEBUG
#include <cassert>

#define FILE_READER assert(freopen("input.txt", "r", stdin)); assert(freopen("output.txt", "w", stdout));
#define FAST_READER ios::sync_with_stdio(false); cin.tie(nullptr);
#define all_(v) (v).begin(), (v).end()
#define for_(i, a, b) for (int i = (a); i < (int)(b); i++)
#define ford_(i, a, b) for (int i = (a); i > (int)(b); i--)
#define foreach_(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)
#define sz_(v) ((int)(v).size())
#define mp_ make_pair
#define pb_ push_back
typedef long long LL_;
typedef long double LD_;
template<class T> T sqr_(T a) {return a * a;}
template<class T> T abs_(T a) {return a > 0 ? a : -a;}
template<class T> T sgn_(T a) {return a > 0 ? 1 : (a < 0 ? -1 : 0);}

using namespace std;

const int maxn = (int)1e5 + 111;

int n;
vector<int> g[maxn];
bool happy(int v) {
	while (v) {
		int c = v % 10;
		if (c != 4 && c != 7) return false;
		v /= 10;
	}
	return true;
}

bool used[maxn];
LL_ dfs(int v, int p) {
	used[v] = true;
	int sz = sz_(g[v]);
	LL_ ret = 0;
	for_(i, 0, sz) {
		int to = g[v][i];
		if (to == p) continue; //used ne nado proverka
		ret += dfs(to, v);
	}
	return ret + 1L;
}

int main() {

#ifndef ONLINE_JUDGE 
	FILE_READER 
#endif 	
	
	FAST_READER;

	cin >> n;
	for_(i, 0, n - 1) {
		int a,b;
		cin >> a >> b;
		--a, --b;
		int c;
		cin >> c;
		if (happy(c)) continue;
		g[a].pb_(b);
		g[b].pb_(a);
	}

	memset(used, 0, sizeof(used));
	LL_ ans = n * (n - 1LL) * (n - 2LL);
	for_(i,0 ,n){
		if (!used[i]) {
			LL_ cnt = dfs(i, -1);
			ans -= cnt * (cnt - 1LL) * (cnt - 2LL);
			ans -= 2LL * cnt * (cnt - 1LL) * (n - cnt);
		}
	}
	cout << ans;
	return 0;
}