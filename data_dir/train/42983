#include <bits/stdc++.h>
#pragma GCC optimize(ofast)
using namespace std;
 
    void solve () {
       
       
         /* --------- */
      
      int a,b;
      cin>>a>>b;
      vector <vector<int>> g(a);
      for (int i=0;i<a-1;i++) {int x,y; cin>>x>>y; x--; y--; g[x].push_back(y); g[y].push_back(x); }
      vector <bool> used(a);
      queue <int> q; 
      int parent[a];
      parent[0]=0; 
      used[0]=true; 
      q.push(0);
      vector <int> dists(a); 
      dists[0]=0; 
      while (!q.empty()) {
          int c=q.front(); q.pop();
          for (int i=0;i<g[c].size();i++) {
              if (!used[g[c][i]]) {used[g[c][i]]=true; q.push(g[c][i]); parent[g[c][i]]=c; dists[g[c][i]]=dists[c]+1; } 
          }
      }
      
      
      int binup[a][30];
      for (int i=0;i<30;i++) {
          for (int j=0;j<a;j++) {
              if (i==0) binup[j][i]=parent[j]; else binup[j][i]=binup[binup[j][i-1]][i-1]; 
          }
      }
      int pows[20];
      pows[0]=1;
      for (int i=1;i<20;i++) pows[i]=pows[i-1]*2; 
      for (int i=0;i<b;i++) {
          int k; cin>>k; 
          
          vector <int> cur; 
          for (int u=0;u<k;u++) {int x; cin>>x; x--;  x=parent[x]; cur.push_back(x); }
          int max_dist=0; 
          int ans1=0;
          for (int u=0;u<k;u++) {if (dists[cur[u]]>max_dist) {max_dist=dists[cur[u]]; ans1=cur[u]; } } 
          
          int check=1;  
         for (int u=0;u<k;u++) {
             int cur1=max_dist-dists[cur[u]];
             int cur_mem=ans1;
             for (int j=19;j>=0;j--) {if (cur1>=pows[j]) {cur_mem=binup[cur_mem][j]; cur1-=pows[j]; } }
             if (cur_mem!=cur[u]) check=0; 
             }
          if (check) cout<<"YES\n"; else cout<<"NO\n";  
      }
         /* --------- */  
            return;
    }
     
     
     
    signed main() {
       ios_base::sync_with_stdio(false);
       cin.tie(0);
       cout.tie(0); 
       
       //  cout<<fixed<<setprecision(10); 
       
          int tututu;
          tututu=1;
          
       
     // cin>>tututu; // если нет запросов, то закоментить
        
          for (int qwerty=0;qwerty<tututu;qwerty++) solve();
      
       
        return 0;
    }