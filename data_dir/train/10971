// amiD
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define endl '\n'
#define Endl '\n'
#define fi first
#define ii pair<ll,ll>
#define se second
#define ld long double
#define mod 1000000007
#define popcount __builtin_popcountll
#define PI acos(-1.0)
#define MX 400010
using namespace std;



long long read()
{
	char ch=getchar();long long x=0,ff=1;
	while(ch<'0'||ch>'9') {if(ch=='-') ff=-1;ch=getchar();}
	while(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();
	return x*ff;
}
void write(long long aa)
{
	if(aa<0) putchar('-'),aa=-aa;
	if(aa>9) write(aa/10);
	putchar(aa%10+'0');
	return;
}







struct qu{
    int l, r, x;
    qu(){}
    qu(int lll, int rr, int xx){
        l = lll;
        r = rr;
        x = xx;
    }
};

vector<qu>vv;
ll n, q;
ll bit[MX];
ll lazy[MX];
ll a[MX];
void update(ll idx, ll v){
    ll l = idx;
    while(idx<MX){
        bit[idx]+=v;
        lazy[idx]+=(l*v);
        idx+=idx&(-idx);
    }
}
ll query(ll idx){
    ll ret1 = 0;
    ll ret2 = 0;
    ll l = idx;
    while(idx){
        ret1+=bit[idx]*(l+1);
        ret2+=lazy[idx];
        idx-=idx&(-idx);
    }
    return ret1-ret2;
}
void update_range(ll l, ll r, ll v){
    update(l, v);
    update(r+1, -v);
}
ll query_range(ll l, ll r){
    return query(r) - query(l-1);
}

ll p(ll a, ll b){
    if(b==0)return 1;
    ll ret = p(a, b/2);
    ret*=ret;
    ret%=mod;
    if(b%2)ret*=a;
    ret%=mod;
    return ret;
}


vector<int>v;
ll b[66];
ll inv[66];
ll mask[MX];
ll amid[MX];
ll cnt[66][333];
int main(){
    for(int i=2;i<300;i++){
        bool pr = 1;
        for(int j=2;j<i;j++){
            if(i%j==0){
                pr = 0;
                break;
            }
        }
        if(pr)v.pb(i);
    }
    for(int i=0;i<62;i++){
        inv[i] = p(v[i], mod-2);
    }
    for(int i=0;i<62;i++){
        for(int j = 1;j<=300;j++){
            int c = 0;
            int x = j;
            while(x%v[i]==0){
                x/=v[i];
                c++;
            }
            cnt[i][j] = c;
        }
    }
    n = read();
    q = read();
    // cin>>n>>q;
    for(int i=1;i<=n;i++){
        ll x;
        a[i] = read();
        // scanf("%lld", &a[i]);
    }
    char str[9];
    while(q--){
        amid[q] = 1;
        int l, r, x;
        scanf("%s", str);
        if(str[0]=='M'){
            l = read();
            r = read();
            x = read();
            // scanf("%d%d%d", &l, &r, &x);
            vv.pb(qu(l, r, x));
            continue;
        }
        l = read();
        r = read();
        // scanf("%d%d", &l, &r);
        vv.pb(qu(l, r, -1));
    }
    for(int i=0;i<62;i++){
        memset(bit,0,sizeof bit);
        memset(lazy,0,sizeof lazy);
        int x = v[i];
        for(int j=1;j<=n;j++){
            int c = cnt[i][a[j]];
            if(c)update_range(j, j, c);
        }
        for(int j=0;j<vv.size();j++){
            qu q = vv[j];
            int l = q.l;
            int r = q.r;
            int x = q.x;
            if(x==-1){  // TOTIENT
                ll tmp = query_range(l, r);
                if(tmp==0)continue;
                amid[j] = amid[j] * (v[i]-1); amid[j]%=mod;
                amid[j]*=p(v[i], tmp-1);
                amid[j]%=mod;
                continue;
            }
            int c = cnt[i][x];
            if(c)update_range(l, r, c);
        }
    }
    for(int i=0;i<vv.size();i++){
        qu q = vv[i];
        int x = q.x;
        if(x==-1){  // TOTIENT
            write(amid[i]); printf("\n");
            // printf("%lld\n", result);
        }
    }
}
