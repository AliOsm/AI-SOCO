/*
 _     _                             
| |__ | |__   __ _  __ _ _   _  __ _ 
| '_ \| '_ \ / _` |/ _` | | | |/ _` |
| |_) | | | | (_| | (_| | |_| | (_| |
|_.__/|_| |_|\__,_|\__, |\__, |\__,_|
                   |___/ |___/       
*/
#include<bits/stdc++.h>

#define ll          long long
#define pb          push_back
#define ppb         pop_back
#define BigInt      __int128
#define endl        '\n'
#define mii         map<ll int,ll int>
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define sim         template < class c
#define ris         return * this
#define dor         > debug & operator <<
#define eni(x)      sim > typename \
  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {

using namespace std;

sim > struct rge {c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug 
{
	~debug() 
	{ 
		cerr<<endl; 
	}
	eni(!=) cerr << boolalpha << i; ris; }
	eni(==) ris << range(begin(i), end(i)); }
	sim, class b dor(pair < b, c > d) 
	{
		ris << "(" << d.first << ", " << d.second << ")";
	}
	sim dor(rge<c> d) 
	{
	  	*this << "[";
	  	for (auto it = d.b; it != d.e; ++it)
	    	*this << ", " + 2 * (it == d.b) << *it;
	  	ris << "]";
	}
};
#define fuck(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

#define N  100005

ll int func(string s)
{
	reverse(all(s));
	ll int ret=0;
	ll int tmp=1;
	for(auto it:s)
	{
		ret+=tmp*(it-'0');
		tmp*=2;
	}
	return ret;
}

ll int m;

string func(ll int n)
{
	string s;
	for(ll int i=0;i<m;i++)
	{
		if(n&(1ll<<i))
		{
			s+='1';
		}
		else
		{
			s+='0';
		}
	}
	reverse(all(s));
	return s;
}

#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template<typename T>
using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>; 
//change null_type to get ordered_map
// int main() {
//     ordered_set<int> s;
//     s.insert(1);
//     s.insert(3);
//     // count of elements in s strictly less than 2
//     cout<<s.order_of_key(2)<<endl;    
//     // print the 0-th smallest number in s (0-indexing)
//     cout<<*s.find_by_order(0)<<endl;
// }

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
	cin>>TESTS;
	while(TESTS--)
	{
		ll int n;
		cin>>n>>m;
		ordered_set<ll int> s;
		for(ll int i=1;i<=n;i++)
		{
			string num;
			cin>>num;
			s.insert(func(num));
			// cout<<"#  "<<func(num)<<endl;
		}
		ll int k=(1ll<<m)-n;
		ll int idx=(k-1)/2;
		// idx++;
		ll int ans=-1;
		ll int low=0,high=(1ll<<m)-1;
		while(low<=high)
		{
			ll int mid=(low+high)/2;
			ll int lessthanequal=mid+1-s.order_of_key(mid+1);
			// debug() << fuck(mid)  << fuck(lessthanequal);
			if(lessthanequal<=idx)
			{
				ans=mid;
				low=mid+1;
			}
			else
			{
				high=mid-1;
			}
		}
		cout<<func(ans+1)<<endl;
	}
	return 0;
}