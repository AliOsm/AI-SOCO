#include <bits/stdc++.h>
#define LL long long
#define pb push_back
#define mp make_pair
#define fi first
#define sc second
using namespace std;

typedef pair<int,int> ii;
int n,m,a[100100],b[100100];
ii tree[500100],lazy[500100];

void build(int node, int a, int b){
	if(a>b) return;
	lazy[node] = mp(-1, -1);
	if(a==b){
		tree[node] = mp(-1, -1);
		return;
	}
	build(node*2, a, (a+b)/2);
	build(node*2+1, (a+b)/2+1, b);
}

void update(int node, int a, int b, int i, int j, ii val){
	if(lazy[node].fi!=-1){
		tree[node] = lazy[node];
		if(a!=b){
			lazy[node*2] = lazy[node];
			lazy[node*2+1] = lazy[node];
		}
		lazy[node] = mp(-1, -1);
	}
	if(a>b || a>j || b<i) return;
	if(a>=i && b<=j){
		tree[node] = val;
		if(a!=b){
			lazy[node*2] = val;
			lazy[node*2+1] = val;
		}
		return;
	}
	update(node*2, a, (a+b)/2, i, j, val);
	update(node*2+1, (a+b)/2+1, b, i, j, val);
	tree[node] = val;
}

ii query(int node, int a, int b, int i, int j){
	if(a>b || a>j || b<i) return mp(-1, -1);
	if(lazy[node].fi!=-1){
		tree[node] = lazy[node];
		if(a!=b){
			lazy[node*2] = lazy[node];
			lazy[node*2+1] = lazy[node];
		}
		lazy[node] = mp(-1, -1);
	}
	if(a>=i && b<=j) return tree[node];
	ii q1 = query(node*2, a, (a+b)/2, i, j);
	ii q2 = query(node*2+1, (a+b)/2+1, b, i, j);
//	cout<<node<<" "<<a<<" "<<b<<" "<<i<<" "<<j<<endl;
//	cout<<q1.fi<<" "<<q1.sc<<endl;
//	cout<<q2.fi<<" "<<q2.sc<<endl;
	if(q1.fi==-1) return q2;
	else return q1;
}

int main(){
	scanf("%d %d",&n,&m);
	for(int i=0;i<n;i++) scanf("%d",&a[i]);
	for(int i=0;i<n;i++) scanf("%d",&b[i]);
	build(1, 0, n-1);
	int x,l,r,k;
	for(int i=0;i<m;i++){
		scanf("%d",&x);
		if(x==1){
			scanf("%d %d %d",&l,&r,&k);
			l--, r--;
			update(1, 0, n-1, r, r+k-1, mp(l,r));
		}
		else{
			scanf("%d",&k);
			k--;
			ii ans = query(1, 0, n-1, k, k);
			if(ans.fi==-1) printf("%d\n", b[k]);
			else printf("%d\n", a[ans.fi+k-ans.sc]);
		}
	}
	
	return 0;
}