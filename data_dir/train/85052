#include <bits/stdc++.h>

using namespace std;

typedef long long LL;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<double> vd;
#define pb push_back
#define loop(i,n) for(int i = 0; i < n; i++)

const int N = 3 * 1e3 + 5;
int n, m;

struct Edge{
    int u, v;
    int l, r;
    int idx;
    Edge() {
        
    }
    Edge(int _idx, int _u, int _v, int _l, int _r) {
        idx = _idx;
        u = _u;
        v = _v;
        l = _l;
        r = _r;
    }
} e[N];

int pa[N], sz[N];

void initDsu() {
    for (int i = 0; i < n; i++) {
        pa[i] = i;
        sz[i] = 1;
    }
}

int find(int u) {
    if (u == pa[u]) return u;
    return pa[u] = find(pa[u]);
}

void merge(int u, int v) {
    int p1 = find(u);
    int p2 = find(v);
    if (p1 == p2) return;
    if (sz[p1] > sz[p2]) swap(p1, p2);
    pa[p1] = p2;
    sz[p2] += sz[p1];
}

int main() {
#ifdef DEBUG
    freopen("in.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int u, v, l , r;
        cin >> u >> v >> l >> r;
        --u;    --v;
        e[i] = (Edge(i, u, v, l, r));
    }
    sort(e, e + m, [](Edge e1, Edge e2) {return e1.r < e2.r;} );
    int res = 0;
    for (int i = 0; i < m; i++) {
        initDsu();
        int maxL = e[i].l;
        int minR = e[i].r;
        for (int j = m - 1; j >= 0; j--) {
            if (e[j].l > maxL) continue;
            merge(e[j].u, e[j].v);
            minR = min(minR, e[j].r);
            if (find(0) == find(n - 1)) {
                res = max(res, minR - maxL + 1);
            }
        }
    }
    if (!res) cout << "Nice work, Dima!" << endl;
    else cout << res << endl;
    return 0;
}