#include <bits/stdc++.h>
using namespace std;

#define    ll    long long int

const int N = 2e5 + 100;
int bit[N];
vector<int> qur[N];
vector< pair<int, int> > v, num;
map< pair<int, int> , int > mp;
int ara[N];
int n, m;

void update(int j)
{
    while (j <= N)
    {
        bit[j]++;
        j = j + (j & -j);
    }
}

int query(int j)
{
    int s = 0;
    while (j > 0)
    {
        s += bit[j];
        j = j - (j & -j);
    }
    return s;
}

int bin_(int pos)
{
    int lo, hi, mid, ans = 1e9, s;
    lo = 1;
    hi = n;
    while (lo <= hi)
    {
        mid = lo + (hi - lo) / 2;
        s = mid - query(mid);
        if (s >= pos)
        {
            hi = mid - 1;
            if (s == pos) ans = min(ans, mid);
        }
        else
            lo = mid + 1;
    }
    return ans;
}

void solve( )
{
    int i, j, k, l, pos;
    for (i = 1; i <= n; i++)
    {
        update(num[i - 1].second);
        for (j = 0; j < (int) qur[n - i].size( ); j++)
        {
            pos = qur[n - i][j];
            l = bin_(pos);
            mp[make_pair(n - i, pos)] = ara[l];
        }
    }

    for (i = 0; i < (int) v.size( ); i++)
    {
        k = v[i].first;
        pos = v[i].second;
        l = mp[make_pair(k, pos)];
        if (k == n)
        {
            cout << ara[pos] << '\n';
            continue;
        }
        //cout << k << ' ' << pos << ' ' << l << '\n';
        cout << l << '\n';
    }
}

int cmp(pair<int, int> a, pair<int, int> b)
{
    if (a.first == b.first)
        return a.second > b.second;
    return a.first < b.first;
}

int main( )
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int i, j, k, l;
    cin >> n;
    for (i = 1; i <= n; i++)
    {
        cin >> ara[i];
        num.push_back(make_pair(ara[i], i));
    }
    sort(num.begin( ), num.end( ), cmp);
    cin >> m;
    for (i = 0; i < m; i++)
    {
        cin >> j >> k;
        v.push_back(make_pair(j, k));
        qur[j].push_back(k);
    }
    solve( );
    return 0;
}
