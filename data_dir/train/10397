/********************************************
*                                           *
*    Solved By : Bir Bahadur Khatri(B'ru)   *
*      Be Positive,be Happy.                *
*                                           *
*********************************************/

#define ff first
#define D double
#define sz size()
#define ss second
#define PB push_back
#define MP make_pair
#define SQR(n) (n*n)
#define CHR getchar()
#define NL printf("\n")
#include<bits/stdc++.h>
#define ULL unsigned LL
#define PI 2.0*acos(0.0)
#define LL long long int
#define S1(a) a=in<int>()
#define SL1(a) a=in<LL>()
#define Max(a,b) ((a>b)?a:b)
#define Min(a,b) ((a<b)?a:b)
#define all(a) a.begin(),a.end()
#define _Max(a,b,c) Max(a,Max(b,c))
#define _Min(a,b,c) Min(a,Min(b,c))
#define SL2(a,b) a=in<LL>(),b=in<LL>()
#define F(i,a,b) for(int i=a;i<b; i++)
#define S2(a,b) a=in<int>(),b=in<int>()
#define R(i,a,b) for(int i=a-1;i>=b; i--)
#define BitCnt(a) __builtin_popcountll(a)
#define MEM(a,val) memset(a,val,sizeof(a))
#define SL3(a,b,c) a=in<LL>(),b=in<LL>(),c=in<LL>()
#define S3(a,b,c) a=in<int>(),b=in<int>(),c=in<int>()
#define cp printf("***** here here here here *****\n");
#define trace1(x)                cerr << #x << ": " << x << endl;
#define InpOut freopen("A.in","r",stdin),freopen("A1.out","w",stdout)
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;

using namespace std;
template <typename T> T in(){char ch;T n = 0;bool ng = false;while (1){ch = getchar();if (ch == '-'){ng = true;ch = getchar();break;}if (ch>='0' && ch<='9')     break;}while (1){n = n*10 + (ch - '0');ch = getchar();if (ch<'0' || ch>'9')   break;}return (ng?-n:n);}
template<typename T>inline T POW(T B,T P){ if(P==0) return 1; if(P&1) return B*POW(B,P-1);  else return SQR(POW(B,P/2));}
template<typename T>inline T Gcd(T a,T b){if(a<0)return Gcd(-a,b);if(b<0)return Gcd(a,-b);return (b==0)?a:Gcd(b,a%b);}
template<typename T>inline T Lcm(T a,T b) {if(a<0)return Lcm(-a,b);if(b<0)return Lcm(a,-b);return a*(b/Gcd(a,b));}
long long Bigmod(long long base, long long power, long long MOD){long long ret=1;while(power){if(power & 1)ret=(ret*base)%MOD;base=(base*base)%MOD;power>>=1;}return ret;}
bool isVowel(char ch){ ch=toupper(ch); if(ch=='A'||ch=='U'||ch=='I'||ch=='O'||ch=='E') return true; return false;}
long long ModInverse(long long number, long long MOD){return Bigmod(number, MOD-2, MOD);}
bool isConst(char ch){if (isalpha(ch) && !isVowel(ch)) return true; return false;}
int toInt(string s)  { int sm; stringstream ss(s); ss>>sm; return sm; }

///**********************************************************//

#define MD1 1000000007ULL
#define MD2 1000000009ULL
#define MD3 1000000021ULL
#define BS1 10000019ULL
#define BS2 10000079ULL
#define BS3 10000103ULL
#define PUL pair<ULL,ULL>

///         0123456789
#define MX  100007
#define MOD 1000000007
#define INF 2000000000000000LL
#define EPS 1e-9
/// ==========================================////


int Nxt[MX];

int dp[20][MX],n;
void Sparse() {

    for (int i=0; i<n; i++)  dp[0][i] = Nxt[i+1];
    for (int i=1; (1<<i) <= n; i++) {
        for(int j=0; j+(1<<i)-1 < n ; j++) {
            if (dp[i-1][j] > dp[i-1][j+(1<<(i-1))])   dp[i][j] = dp[i-1][j];
            else                                      dp[i][j] = dp[i-1][j+(1<<(i-1))];
        }
    }
}

int Query(int xx,int yy) {
    int diff = 31 - __builtin_clz(yy-xx+1);

    return ( dp[diff][xx]>dp[diff][yy-(1<<diff)+1] ? dp[diff][xx]:dp[diff][yy-(1<<diff)+1] );
}

LL Tree[MX*4];

void Up(int id,int l,int r,int pos,LL v) {
    if(l==r) {
        Tree[id]=v;
        return;
    }

    int mid=(l+r)/2;
    int lft=2*id;
    int rgt=lft+1;

    if(pos<=mid)        Up(lft,l,mid,pos,v);
    else Up(rgt,mid+1,r,pos,v);

    Tree[id]=max(Tree[lft],Tree[rgt]);
}

int Qrym(int xx,int yy) {
    xx--,yy--;
    int diff = 31 - __builtin_clz(yy-xx+1);

    return ( dp[diff][xx]>dp[diff][yy-(1<<diff)+1] ? dp[diff][xx]:dp[diff][yy-(1<<diff)+1] );
}

int Qry(int id,int l,int r,int st,int ed) {
    if(l==r) return l;

    int mid=(l+r)/2;
    int lft=2*id;
    int rgt=lft+1;

    if(ed<=mid)     return Qry(lft,l,mid,st,ed);
    else if(st>mid) return Qry(rgt,mid+1,r,st,ed);
    else {
            LL lf=Qrym(max(l,st),mid);
            LL rg=Qrym(mid+1,min(r,ed));
            if(lf>=rg)  return Qry(lft,l,mid,st,ed);
            else return Qry(rgt,mid+1,r,st,ed);
    }
}

LL dp1[MX];

int main()
{
    S1(n);

    F(i,1,n)
    {
        int x;
        S1(x);
        Nxt[i]=x;
    }
    Sparse();
    LL ans=0;
    F(i,1,n+1)
    {
        Up(1,1,n,i,Nxt[i]);
    }
    dp1[n]=0;
    for(int i=n-1;i>=1;i--) {
        int pore=Nxt[i];
        int x=Qry(1,1,n,i+1,pore);
        LL now=dp1[ x ];
        now+=(n-i);
        now-=( pore-x );
        ans+=now;
        dp1[i]=now;
    }
    cout<<ans<<endl;

    return 0;
}
