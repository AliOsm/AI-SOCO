#include <bits/stdc++.h>
#define pb push_back

using namespace std;
using ll = long long int;
using vi = vector<int>;
const int MOD = 1e9 + 7;

array<vi, 2> manacher(const string& s) {
	int n = s.size();
	array<vi,2> p = {vi(n+1), vi(n)};
	for (int z = 0; z < 2; ++z) for (int i=0,l=0,r=0; i < n; i++) {
		int t = r-i+!z;
		if (i<r) p[z][i] = min(t, p[z][l+t]);
		int L = i-p[z][i], R = i+p[z][i]-!z;
		while (L>=1 && R+1<n && s[L-1] == s[R+1])
			p[z][i]++, L--, R++;
		if (R>r) l=L, r=R;
	}
	return p;
}

int main()
{
	ios::sync_with_stdio(0); cin.tie(0);
	int t; cin >> t;
	while (t--)
	{
		string s; cin >> s;
		string t = s; reverse(begin(t), end(t));
		if (s == t)
		{
			cout << s << '\n';
			continue;
		}
		int n = s.size();
		auto p = manacher(s);
		int bestmatch = 0;
		for (int i = 0; i <= n-1-i; ++i)
		{
			if (s[i] != s[n-1-i]) break;
			++bestmatch;
		}
		int ans1 = 0, ans2 = 0;
		int save1 = -1, save2 = -1;
		string ans = "";
		for (int i = 0; i < n; ++i)
		{
			// Odd
			// i is the center of the extra
			int st = i - p[1][i];
			if (st > bestmatch) continue;
			if (2*p[1][i] + 1 + 2*st > n) continue;
			if (2*p[1][i] + 1 + 2*st > ans1)
			{
				ans1 = 2*p[1][i] + 1 + 2*st;
				save1 = i;
			}
			// Prefix k -> 2k + len - ()
		}
		if (save1 != -1)
		{
			int st = save1 - p[1][save1];
			ans = s.substr(0, save1+p[1][save1]+1) + s.substr(n-st);
		}
		for (int i = 1; i <= n; ++i)
		{
			int st = i - p[0][i];
			if (st > bestmatch) continue;
			if (2*p[0][i] + 2*st > n) continue;
			if (2*p[0][i] + 2*st > ans2)
			{
				ans2 = 2*p[0][i] + 2*st;
				save2 = i;
			}
		}
		if (save2 != -1 and ans2 > ans1)
		{
			int st = save2 - p[0][save2];
			ans = s.substr(0, save2+p[0][save2]) + s.substr(n-st);
		}
		ans1 = ans2 = 0;
		save1 = save2 = -1;
		p = manacher(t);
		for (int i = 0; i < n; ++i)
		{
			// Odd
			// i is the center of the extra
			int st = i - p[1][i];
			if (st > bestmatch) continue;
			if (2*p[1][i] + 1 + 2*st > n) continue;
			if (2*p[1][i] + 1 + 2*st > ans1)
			{
				ans1 = 2*p[1][i] + 1 + 2*st;
				save1 = i;
			}
			// Prefix k -> 2k + len - ()
		}
		if (save1 != -1 and ans1 > ans.size())
		{
			int st = save1 - p[1][save1];
			ans = t.substr(0, save1+p[1][save1]+1) + t.substr(n-st);
		}
		for (int i = 1; i <= n; ++i)
		{
			int st = i - p[0][i];
			if (st > bestmatch) continue;
			if (2*p[0][i] + 2*st > n) continue;
			if (2*p[0][i] + 2*st > ans2)
			{
				ans2 = 2*p[0][i] + 2*st;
				save2 = i;
			}
		}
		if (save2 != -1 and ans2 > ans.size())
		{
			int st = save2 - p[0][save2];
			ans = t.substr(0, save2+p[0][save2]) + t.substr(n-st);
		}
		cout << ans << '\n';
	}
}