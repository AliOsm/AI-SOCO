#include <iostream>
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-6
#define BASE 53ll
#define mod 1000000007ll
#define ld long double
#define MAX 1000000000
#define NIL 0
#define INF -1e18-1e10
#define rd(a) scanf("%d",&a)
#define rdll(a) scanf("%I64d",&a)
#define lp(i,a,n) for(int i=a;i<n;i++)
typedef pair<ll,ll>ii;
typedef pair<ii,ii>quad;
typedef pair<int,ii>edge;
typedef pair<vector<int>,int>vii;
const int N=200001;

ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
ll fact(ll n){ll ret=1;for(int i=1;i<=n;i++)ret*=i;return ret;}
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y')return 1;return 0;}
ld getDistance(ld x1,ld y1,ld x2,ld y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}
ll power(ll base,ll p){if(p==1)return base;if(!p)return 1ll;ll ret=power(base,p/2);ret*=ret;ret%=mod;if(p&1)ret*=base;return ret%mod;}

ll a[N];
int n;
struct line{
   ll a,b;
   line(){;}
   line(ll x,ll y){
     a=x;
     b=y;
   }
   ll get(ll x){
      return a*x+b;
   }
};
bool isbad(line l1,line l2,line l3){/// 3 consecutive lines while adding l3 i check if l2 is bad
       /// b is bad if intersection of l1 and l3 is on the left of intersection of l1 and l2
       return (l3.b-l1.b)*(l1.a-l2.a) < (l2.b-l1.b)*(l1.a-l3.a);/// overflow ? slopes can be max n b interception can be max 1e7*1e5 so result = 1e17
}
struct CHT{
   vector<line>v;
   int query;
   CHT(){
      query=0;
   }
   void insert(line l3){ /// slope should be increasing
       while(v.size()>1&&isbad(v[v.size()-2],v.back(),l3))
          v.pop_back();
       v.pb(l3);
   }
   ll getMax(ll x){
       if(v.empty())return 0;
       while(query+1<v.size()&&v[query].get(x)<=v[query+1].get(x))
         query++;
       return v[query].get(x);
   }
};
ll solve(int s,int e){
  if(s==e){
    return max(a[s],0ll);
  }
  ll ret=solve(s,(s+e)/2);
  ret=max(solve((s+e)/2+1,e),ret);
  vector<ii>rgt;
  int mid=(s+e)/2;
  ll sum=0,cur=0;
  /// a[mid+1] + 2*a[mid+2] .....
  lp(i,mid+1,e+1){
     sum+=a[i];
     cur+=a[i]*(i-mid)*1ll;
     rgt.pb(ii(sum,cur));/// query about sum , cur is a number to be increases
  }
  sort(rgt.begin(),rgt.end());
  CHT hull;
  sum=0,cur=0;
  for(int i=mid;i>=s;i--){
      /// ax+b
      /// slope is the number of elements mid-i+1
      sum+=a[i];/// slopes increasing
      cur+=sum;
      hull.insert(line((mid-i+1)*1ll,cur));
  }
  lp(i,0,rgt.size()){
     ret=max(ret,hull.getMax(rgt[i].F)+rgt[i].S);
  }
  return max(ret,0LL);
}
int main()
{
    //freopen("test.in","r",stdin);
    rd(n);
    lp(i,0,n)cin>>a[i];
    cout<<solve(0,n-1);
   return 0;
}
