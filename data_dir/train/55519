#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>

using namespace std;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef complex<ld> base;

#define all(x) (x).begin(), (x).end()
//#define int ll

const ll kek = 1500000LL;
const ll lim = kek * kek;
const int MAXN = 1e5 + 100;
char ans[MAXN];
pii a[MAXN];
mt19937 gen(42342312);

signed main() {

    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline

    int n;
    cin >> n;
    ll cur_x = 0, cur_y = 0;
    for (int i = 0; i < n; ++i) {
        cin >> a[i].first >> a[i].second;
        if (gen() % 2) {
            ans[i] = '+';
            cur_x += a[i].first;
            cur_y += a[i].second;
        }
        else {
            ans[i] = '-';
            cur_x -= a[i].first;
            cur_y -= a[i].second;
        }
    }
    while (true) {
        if (llabs(cur_x) <= kek && llabs(cur_y) <= kek && (cur_x * cur_x + cur_y * cur_y) <= lim) {
            for (int i = 0; i < n; ++i) {
                cout << (ans[i] == '+' ? 1 : -1) << ' ';
            }
            return 0;
        }
        int i = gen() % n;
        if (ans[i] == '+') {
            ans[i] = '-';
            cur_x -= 2 * a[i].first;
            cur_y -= 2 * a[i].second;
        }
        else {
            ans[i] = '+';
            cur_x += 2 * a[i].first;
            cur_y += 2 * a[i].second;
        }
    }
}
