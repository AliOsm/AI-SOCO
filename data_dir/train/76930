#include <bits/stdc++.h>
using namespace std;
#define SZ(v) int((v).size())
#define ALL(vec) begin(vec), end(vec)

typedef long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#ifdef Rahul
# define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#else
# define error(...) 42;
#endif
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
template<typename A> string to_string(vector<vector<A>> v) {string r; 
  for (auto x: v) r += "\n" + to_string(x); return r;}
int Nerr;
template<typename A> string to_string(A *p) {return to_string(vector<A>(p, p + Nerr));}
void err(istream_iterator<string>) { cerr << endl; }
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
int const MOD = 1e9 + 7;
long long const INF = 1e18 + 42;
/***********************************************************************/

int32_t main() {
  cin.tie(nullptr) -> sync_with_stdio(false);
  
  int n, m;
  cin >> n >> m;
  vector<vector<int>> g(n);
  for (int i = 0; i < m; ++i) {
    int u, v;
    cin >> u >> v;
    --u, --v;
    //~ g[u].push_back(v);
    g[v].push_back(u);
  }
  int k; cin >> k;
  vector<int> a(k);
  for (int &x : a) cin >> x, --x;
  vector<int> dis(n, MOD), way(n);
  vector<int> que = {a[k - 1]};
  dis[a[k - 1]] = 0;
  way[a[k - 1]] = 1;
  for (int i = 0; i < SZ(que); ++i) {
    int u = que[i];
    for (int v : g[u]) {
      if (uin(dis[v], 1 + dis[u])) {
        way[v] = 1;
        que.push_back(v);
      } else if (dis[v] == 1 + dis[u]) {
        way[v] = 2;
      }
    }
  }
  error(a);
  error(dis);
  error(way);
  int ans = 0;
  for (int i = 1; i < k; ++i) {
    if (dis[a[i]] == dis[a[i - 1]] - 1); else {
      ++ans;
    }
  }
  cout << ans << ' ';
  ans = 0;
  for (int i = 1; i < k; ++i) {
    if (dis[a[i]] == dis[a[i - 1]] - 1) {
      if (way[a[i - 1]] == 2) ++ans;
    } else {
      ++ans;
    }
  }
  cout << ans << '\n';
}
