/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=1e9+7;
#define OS //single input use oeis
lli INF=1e17;
lli eps=1e-8;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,z,k,x,m,d,y,q;
const double pi=3.14159265358979323846;
lli add(lli a, lli b) {
 	lli res = a + b;
 
 	while (res >= mod) res -= mod;
 
 	while (res < 0) res += mod;
 
 	return res;
}
 lli me(lli a,lli b)
{
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
vector<lli> v[200005];
vector<lli> rev[200005];
vector<lli> path;
lli vis[200005];
lli min_dist[200005];
lli dif_paths[200005];
void bfs(lli end)
{
   priority_queue<ll,vector<ll>,greater<ll>> q;
   q.push({0,end});
//   cout<<end<<"\n";
   while(!q.empty())
   {
       ll p=q.top();
       q.pop();
       lli dist=p.first;
       lli node=p.second;
       if(vis[node])
       {
           if(dist==min_dist[node])
           dif_paths[node]++;
           continue;
       }
    //   cout<<node<<"\n";
    dif_paths[node]++;
       vis[node]=1;
       min_dist[node]=dist;
       for(auto &j: v[node])
       {
           q.push({dist+1,j});
       }
   }
}
int main()
{
 IO;
 OS;
 lli t;
 cin>>t;
 for(int i=1;i<=t;i++)
 {
     lli a,b,c;
     cin>>a>>b>>c;
     lli steps=0;
     lli mi=1e15;
     lli A,B,C;
     lli x,y,z;
     for(lli j=1;j<=40000;j++)
     {
         for(lli k=j;k<=40000;k+=j)
         {
             lli c1=(c/k-1)*k;
             if(c1>0)
             {
                 steps=abs(c1-c)+abs(b-k)+abs(a-j);
                 if(mi>steps)
                 {
                     mi=steps;
                     x=j;
                     y=k;
                     z=c1;
                 }
             }
             lli c2=(c/k+1)*k;
             if(c2>0)
             {
                 steps=abs(c2-c)+abs(b-k)+abs(a-j);
                 if(mi>steps)
                 {
                     mi=steps;
                     x=j;
                     y=k;
                     z=c2;
                 }
             }
             lli c3=(c/k)*k;
             if(c3>0)
             {
                 steps=abs(c3-c)+abs(b-k)+abs(a-j);
                 if(mi>steps)
                 {
                     mi=steps;
                     x=j;
                     y=k;
                     z=c3;
                 }
             }
             
         }
        //  cout<<mi<<"\n";
     }
     cout<<mi<<"\n";
     cout<<x<<" "<<y<<" "<<z<<"\n";
 }
}