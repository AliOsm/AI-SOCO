#include <bits/stdc++.h>
using namespace std;

vector<int> g[100010], h[100010];
pair<int, int> num[100010];

void dfs(int v) {
    if (num[v].first == 1) {
        return;
    }
    num[v].first = 1;
    for (auto &sub_v : h[v]) {
        dfs(sub_v);
    }
}

int main() {
    int n, m;
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i++) {
        int num;
        scanf("%d", &num);
        for (int j = 0; j < num; j++) {
            int v;
            scanf("%d", &v);
            g[i].push_back(v);
        }
    }
    bool sol = true;
    for (int i = 1; i < n; i++) {
        int pos = 0;
        bool same = true;
        while (pos < g[i - 1].size() && pos < g[i].size()) {
            if (g[i - 1][pos] != g[i][pos]) {
                h[g[i - 1][pos]].push_back(g[i][pos]);
                same = false;
                break;
            }
            pos++;
        }
        if (same) {
            if (g[i - 1].size() > g[i].size()) {
                sol = false;
            }
        }
    }
    for (int i = 1; i <= m; i++) {
        num[i] = {0, i};
    }
    for (int i = 1; i <= m; i++) {
        for (auto &v : h[i]) {
            if (i > v) {
                dfs(v);
            }
        }
    }

    for (int i = 1; i <= m; i++) {
        for (auto &v : h[i]) {
            if (num[i] > num[v]) {
                sol = false;
            }
        }
    }
    if (!sol) {
        puts("No");
    } else {
        puts("Yes");
        int cnt = 0;
        for (int i = 1; i <= m; i++) {
            if (num[i].first == 0) {
                cnt++;
            }
        }
        printf("%d\n", cnt);
        if (cnt > 0) {
            bool first = true;
            for (int i = 1; i <= m; i++) {
                if (num[i].first == 0) {
                    if (!first) printf(" ");
                    printf("%d", i);
                    first = false;
                }
            }
            puts("");
        }
    }
    return 0;
}