#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define all(sdk) sdk.begin(),sdk.end()
#define mll map<int, int>
#define pb push_back
#define rep(i,a,b) for(int i=a;i<b;++i)
#define repd(i,a,b) for(int i=a;i>=b;--i)
#define mp make_pair
#define hell 1000000007
#define endl '\n'
#define vvll vector<vector<int> >
#define vll vector<int>
#define mint map<int,int> 
#define sz(x) (int)x.size()
#define sll set<int>
#define pll pair<int,int>
#define F first
#define S second

int a[100005];
int dp[100005];

const int N = 1e5+4;
int n;
int t[2 * N];

int merge(int a,int b){
    //Write merge function here
    return min(a,b);
}

void modify(int p, int value) { 
	++n;
  for (t[p += n] = value; p > 1; p >>= 1) t[p>>1] = merge(t[p] , t[p^1]);
  	--n;
}

int query(int l, int r) { 
	++n;
  ++r;
  int res = 1e9;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res = merge(res,t[l++]);
    if (r&1) res = merge(res,t[--r]);
  }
  --n;
  return res;
}

void solve(){  
	int i=1,j=1;
	int s,l;
	cin>>n>>s>>l;
	rep(i,0,n+1){
		modify(i,1e9);
		dp[i]=1e9;
	}
	modify(0,0);
	rep(i,1,n+1) cin>>a[i];
	multiset<int> st;
	dp[0]=0;
	for(;i<=n;++i){
		st.insert(a[i]);
		while(*st.rbegin()-*st.begin()>s){
			st.erase(st.find(a[j]));
			++j;
		}
		int maxl=i-l;
		int minl=j-1;

		if(maxl>=minl){
			int k=query(minl,maxl);
			if(k!=1000000000)
			dp[i]=k+1;
			modify(i,dp[i]);
		}
	}
	if(dp[n]==1000000000){
		cout<<-1<<endl;
	}
	else
	cout<<dp[n]<<endl;
	// rep(i,1,n+1) cout<<dp[i]<<endl;

}


signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t=1;
    // cin>>t;
    while(t--){
        solve();
    }
    return 0;
}