#include <bits/stdc++.h>
using namespace std;
#define pii             pair<int , int >
#define inf             1111111111
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n")
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b, c)    printf("%d %d %d\n", a, b, c)
#define pcs(a)          printf("Case %d: ", a)
#define mp              make_pair
#define vi              vector<int >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define mem(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
#define x               first
#define y               second
#define lc              (2*i)
#define rc              (2*i+1)

typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1,0};int dy[]={0,1,1,1,0,-1,-1,-1,0};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
bool check(int n, int pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
int  on(int n, int pos) {return n | (1<<pos);} //typecast 1 in case of int
int  off(int n, int pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const int M=100010;

int visited[M];
int cross[33];
int grundy[] = {0,1,2,1,4,3,2,1,5,6,2,1,8,7,5,9,8,7,3,4,7,4,2,1,10,9,3,6,11,12,14};
unordered_map<int, int>mep;
int len;

//int call(int mask)
//{
//    if (mask == 1) return 0;
//    if (mep.find(mask) != mep.end()) return mep[mask];
//
//    int mex[33];
//    mem(mex, 0);
//
//    for (int i = 1; i <= len; i++)
//    {
//        if (check(mask, i))
//        {
//            int k = call(mask & cross[i]);
//            mex[k] = 1;
//        }
//    }
//
//    for (int i = 0; i < 33; i++) if (mex[i] == 0) {mep[mask] = i; return i;}
//    return 0;
//}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("/home/riaz/Documents/in.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);

    int i, j, k, n, oneplus = 0;
    int cnt[33];

//    for (i = 0; i < 30; i++) cross[i] = (1<<30)-1;
//    for (i = 1; i < 30; i++)
//        for (j = i; j < 30; j += i) cross[i] = off(cross[i], j);
//
//    for (len = 1; len <= 29; len++)
//    {
//        grundy[len] = call((1<<(len+1))-1);
//        pr2(len, grundy[len]);
//    }

    in(n);

    int ans = 0;

    mem(visited, false);
    for (LL i = 2; i * i <= n; i++)
    {
        if (visited[i]) continue;
        int s = 0;
        for (LL j = i; j <= n; j *= i)
        {
            if (j < M) visited[j] = true;
            oneplus++;
            s++;
        }
        ans ^= grundy[s];
    }

    if ((n - oneplus) % 2 == 1) ans ^= grundy[1];

    if (ans == 0) printf("Petya\n");
    else printf("Vasya\n");


return 0;
}

