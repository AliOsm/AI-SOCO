#include <bits/stdc++.h>

using namespace std;
#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define LL long long int 

const int N = 1e5 + 5;
const int MOD1 = 1e9 + 7;
const int MOD2 = 1e9 + 9;

int Mod[2] = {MOD1, MOD2};

void solve() {
    int n, i, m, j;
    cin >> n >> m;
    vector<vector<int>> ways[2], reach, reach2;
    vector<vector<int>> ways2[2];
    ways[0].resize(n, vector<int>(m, 0));
    ways[1].resize(n, vector<int>(m, 0));
    ways2[0].resize(n, vector<int>(m, 0));
    ways2[1].resize(n, vector<int>(m, 0));
    reach.resize(n, vector<int>(m, 0));
    reach2.resize(n, vector<int>(m, 0));
    vector<string> s(n);
    for (i=0;i<n;i++) cin >> s[i];
    reach[n-1][m-1] = 1;
    for (i=n-1;i>=0;i--) for (j=m-1;j>=0;j--) {
        if (s[i][j] == '#') {
            reach[i][j] = 0;
        } else {
            if (i+1<n) reach[i][j] |= reach[i+1][j];
            if (j+1<m) reach[i][j] |= reach[i][j+1];
        }
    }
    reach2[0][0] = 1;
    for (i=0;i<n;i++) for (j=0;j<m;j++) {
        if (i == 0 && j == 0) continue;
        if (s[i][j] == '#') {
            reach2[i][j] = 0; 
            continue;
        }
        if (i > 0) reach2[i][j] |= reach2[i-1][j];
        if (j > 0) reach2[i][j] |= reach2[i][j-1];
    }
    ways[0][n-1][m-1] = ways[1][n-1][m-1] = 1;
    ways2[0][0][0] = ways2[1][0][0] = 1;
    for (i=n-1;i>=0;i--) for (j=m-1;j>=0;j--) for (int k=0;k<2;k++) {
        if (s[i][j] == '#') continue;
        if (i + 1 < n) {
            ways[k][i][j] += ways[k][i+1][j];
            if (ways[k][i][j] >= Mod[k]) ways[k][i][j] -= Mod[k];
        }
        if (j + 1 < m) {
            ways[k][i][j] += ways[k][i][j+1];
            if (ways[k][i][j] >= Mod[k]) ways[k][i][j] -= Mod[k];
        }
    }
    for (i=0;i<n;i++) for (j=0;j<m;j++) for (int k=0;k<2;k++) {
        if (s[i][j] == '#') continue;
        if (i > 0) {
            ways2[k][i][j] += ways2[k][i-1][j];
            if (ways2[k][i][j] >= Mod[k]) ways2[k][i][j] -= Mod[k];
        }
        if (j > 0) {
            ways2[k][i][j] += ways2[k][i][j-1];
            if (ways2[k][i][j] >= Mod[k]) ways2[k][i][j] -= Mod[k];
        }
    }
    if (reach[0][0] == 0) {
        cout << "0\n";
        return;
    }
    for (i=n-1;i>=0;i--) for (j=m-1;j>=0;j--) {
        if (i == n-1 && j == m-1) continue;
        if (i == 0 && j == 0) continue;
        if (!reach2[i][j]) continue;
        if (!reach[i][j]) continue;
        LL go0 = (ways2[0][i][j] * 1LL * ways[0][i][j])% Mod[0];
        LL go1 = (ways2[1][i][j] * 1LL * ways[1][i][j])% Mod[1];
        if (go0 == ways[0][0][0] && go1 == ways[1][0][0]) {
            cout << "1\n";
            return;
        }
    }
    cout << "2\n";
    return;
}

int main() {
    FASTIO;
    int T = 1;
    // cin >> T;
    for (int t = 1; t <= T; t++) {
        solve();
    }
    return 0;
}