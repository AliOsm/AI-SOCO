#include <bits/stdc++.h>
using namespace std;
unordered_map<long long,set<long long> > cap;
unordered_set<long long> forbid;
vector<int> capset,capset2,visited;
void dfs(int loc)
{
    visited[loc]=1;
    capset2.push_back(loc);
    for(auto &i:cap[loc])
        if(!visited[i])
        {
            dfs(i);
        }
}
int main() {
    ios::sync_with_stdio(false);cin.tie(0);
    int n,m,l;
    bool poss=true;
    vector<vector<int> > v;
    cin>>n>>m;
    v.resize(n);
    visited.assign(m+1,0);
    for(int i=0;i<n;i++)
    {
        cin>>l;
        v[i].resize(l);
        for(int j=0;j<l;j++)
            cin>>v[i][j];
    }
    for(int i=0;i<n-1;i++)
    {
        int val = min(v[i].size(),v[i+1].size());
        bool flag=true;
        for(int j=0;j<val;j++)
        {
            if(v[i][j]<v[i+1][j])
            {
                cap[v[i+1][j]].insert(v[i][j]);
                flag=false;
                break;
            }
            else if(v[i][j]>v[i+1][j])
            {
                forbid.insert(v[i+1][j]);
                capset.push_back(v[i][j]);
                flag=false;
                break;
            }
        }
        if(flag&&(v[i].size()>v[i+1].size()))
        {
            poss=false;
            break;
        }
    }
    for(int i=0;i<capset.size();i++)
        if(!visited[capset[i]])
            dfs(capset[i]);
    for(auto &i:capset2)
        if(forbid.count(i))
        {
            poss=false;
            break;
        }
    if(!poss)
        cout<<"No";
    else
    {
        cout<<"Yes\n"<<capset2.size()<<'\n';
        for(auto &i:capset2)
            cout<<i<<" ";
    }
    return 0;
}