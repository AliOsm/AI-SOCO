#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
int N , M; // turistu & peregorodki
vi L , R , T , in;
vector< pair<pii , int> > rect;
int main(){
  scanf("%d%d" , &N , &M);
  L.resize(M) , R.resize(M) , T.resize(M);
  in.resize(N);
  vi Q;
  for(int i=0;i<sz(L);++i)
   scanf("%d%d%d" , &L[i] , &R[i] , &T[i]),
   ++L[i] , ++R[i] , ++T[i];
  for(int i=0;i<sz(in);++i)
   scanf("%d" , &in[i]),
   ++in[i] , Q.pb(in[i]);
  // getting rects
  vector<pii> cur;
  for(int i=0;i<sz(L);++i)
   cur.pb(mp(L[i] , T[i]));
  for(int i=0;i<sz(L);++i)
   cur.pb(mp(R[i] , -T[i]));
  sort(all(cur));
  multiset<int> avb;
  int prev = -1;
  for(int i=0;i<sz(cur);){
   if(!avb.empty()){
    int tmp = cur[i].fi , X = *avb.begin();
    rect.pb( mp(mp(prev , tmp) , X) );
    Q.pb(X - prev + 1);
                   }
   prev = cur[i].fi;
   while(i < sz(cur) && prev == cur[i].fi){
    if(cur[i].se > 0)avb.insert(cur[i].se);
    else avb.erase( avb.find(-cur[i].se) );
    ++i;
                                          }
                         }
  // Solving
  sort(all(Q));
  Q.erase(unique(all(Q)) , Q.end());
  vi sum(sz(Q) , 0) , add(sz(Q) , 0) , dp(sz(Q) , 0);
  for(int i=0;i<sz(rect);++i){
   int tlo = rect[i].se - rect[i].fi.se + 1,
       thi = rect[i].se - rect[i].fi.fi + 1;
   int beg = lower_bound(all(Q) , tlo) - Q.begin();
   int end = lower_bound(all(Q) , thi) - Q.begin();
   sum[beg] += Q[beg] - tlo;
   if(beg+1 < sz(Q))++add[beg+1];
   if(end+1 < sz(Q))--add[end+1];
                             }
  int SUM = 0 , ADD = 0;
  for(int i=0;i<sz(Q);++i){
   //cout<<"!"<<Q[i]<<":"<<sum[i]<<' '<<add[i]<<endl;
   ADD += add[i];
   SUM += sum[i];
   SUM += ADD * (i == 0 ? 0 : Q[i] - Q[i-1]);
   dp[i] = SUM;
                          }
  map<int , int> out;
  for(int i=0;i<sz(Q);++i)
   out[ Q[i] ] = dp[i];
  for(int i=0;i<sz(in);++i)
   printf("%d\n" , out[ in[i] ]);
  return 0;
}
