// copied by Nurstan Duisengaliev
// skatal
#include <bits/stdc++.h>
 
#define ll long long
#define all(x) x.begin(), x.end()
#define in insert
#define mp make_pair
#define F first
#define S second
#define ppf pop_front
#define pb push_back
#define ppb pop_back
#define pf push_front
#define pii pair <int, int>
#define boost() ios_base::sync_with_stdio(0), cin.tie(0)
#define sz(x) x.size()
 
using namespace std;
 
const int N = (int)2e5 + 123;
const int mod = (int)1e9 + 7;
const ll INF = (ll)1e18 + 7;
int n, m, a[N];
pii b[N];
int t1[N * 4];
int d[N * 4];
void built (int v, int l, int r) {
	if (l == r) {
		t1[v] = a[l];
		return;
	}
	int mid = l + r >> 1;		
	built (v * 2, l, mid);
	built (v * 2 + 1, mid + 1, r);
	t1[v] = max (t1[v * 2], t1[v * 2 + 1]);
}
int geT (int v, int l, int r, int nl, int nr) {
	if (nl > r || l > nr) return 0;
	if (nl <= l && r <= nr) return t1[v];
	int mid = l + r >> 1;
	return max(geT (v * 2, l, mid, nl, nr), geT (v * 2 + 1, mid + 1, r, nl, nr));
}
void build (int v, int l, int r) {
	if (l == r) {
		d[v] = b[l].S;
		return;
	}
	int mid = l + r >> 1;
	build (v * 2, l, mid);
	build (v * 2 + 1, mid + 1, r);
	d[v] = max (d[v * 2], d[v * 2 + 1]);
}
int get (int v, int l, int r, int nl, int nr) {
	if (nl > r || l > nr) return 0;
	if (nl <= l && r <= nr) return d[v];
	int mid = l + r >> 1;
	return max (get (v * 2, l, mid, nl, nr), get (v * 2 + 1, mid + 1, r, nl, nr));
}
void solve () {
	cin >> n;
	for (int i = 1; i <= n; i ++) {
		cin >> a[i];
	}
	built (1, 1, n);	
	cin >> m;
	for (int i = 1; i <= m; i ++) {
		cin >> b[i].F >> b[i].S;
	}
	sort (b + 1, b + m + 1);
	build (1, 1, m);	         	
	int pos = 1;
	bool check = 1;
	int kol = 0;
	while (pos <= n) {
		kol ++;
		int l = pos, r = n, can = -1;
		while (l <= r) {
			int mid = l + r >> 1;
			int x = geT (1, 1, n, pos, mid);
			int y = mid - pos + 1;
			int L = 1, R = m, oo = -1;
			while (L <= R) {
				int midle = L + R >> 1;
				if (b[midle].F >= x) {
					oo = midle;
					R = midle - 1;					
				}
				else L = midle + 1;
			}
			if (oo == -1) {
				r = mid - 1;
			}
			else {
				int uu = get (1, 1, m, oo, m);
				if (uu >= y) {
					l = mid + 1;
					can = mid; 	
				}
				else r = mid - 1;
			}
		}   
		if (can == -1) {
			check = 0;
			break;
		}
		pos = can + 1;
	}
	if (check == 0) {
		cout << -1 << endl;
	}
	else cout << kol << endl;
}
 
main () {
//	freopen (".in", "r", stdin);
//	freopen (".out", "w", stdout);
	boost ();
	int TT;
	cin >> TT;
	while (TT --) {
		solve ();
	}
	return 0;	
}