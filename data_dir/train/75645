#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define pi pair<int,int>
#define pl pair<ll,ll>
const int N = 2e5+15;

int val[255];

int pre[N];

int tree[N*4];

void update(int pos,int l,int r,int ind,int add){
    if(l==r){
        tree[pos]= add;
        return;
    }
    int mid= (l+r)/2;

    if(ind<=mid)
        update(pos*2,l,mid,ind,add);
    else
        update(pos*2+1,mid+1,r,ind,add);
    tree[pos]= max(tree[pos*2],tree[pos*2+1]);
}
int query(int pos,int l,int r,int ql,int qr){

    if(r<ql || qr<l)return 0;
    if(ql<=l && r<=qr)return tree[pos];

    int mid= (l+r)/2;

    return max(query(pos*2,l,mid,ql,qr),query(pos*2+1,mid+1,r,ql,qr));
}
int ind[N];
int main(){

    //freopen("input.txt","r",stdin);

    for(int i=0;i<255;++i)val[i]= 2;

    val['a']= val['e']= val['i']= val['o']=val['u']= -1;
    val['A']= val['E']= val['I']= val['O']=val['U']= -1;

    string s;cin>>s;
    int n = s.size();
    vector<pair<int,int> >in;
    for(int i=1;i<=n;++i){
        pre[i]= pre[i-1] + val[s[i-1]];
        in.push_back(make_pair(pre[i],i));
    }
    in.push_back(pi(0,0));
    sort(in.begin(),in.end());
    for(int i=0;i<in.size();++i){
        ind[in[i].second]= i+1;
    }
    int len = 0;
    for(int i=1;i<=n;++i){
        update(1,1,n,ind[i],i);
    }
    for(int i=1;i<=n;++i){
        int prev = ind[i-1];
        int id = query(1,1,n,prev,n);
        len = max(len,id-i+1);
    }
    if(len==0){
        printf("No solution\n");
        return 0;
    }
    int cc=0;
    for(int i=0;i+len<=n;++i){
        if(pre[i+len]-pre[i]>=0)++cc;
    }
    printf("%d %d\n",len,cc);

    return 0;
}