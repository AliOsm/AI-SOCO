#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define X first
#define Y second
#define pb push_back
#define Scan(a) scanf("%I64d", &a)
#define CLR(a) memset(a,0,sizeof(a))
#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORE(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)

using namespace std;

typedef pair<int, int> II;
typedef vector<II> vi;

string s, t;
int n, m, N, RA[10010], SA[10010], tempRA[10010], tempSA[10010], behind[10010], PLCP[10010], LCP[10010], c[10010];

void countingSort(int k)
{
    int sum = 0, maxi = max(300, N);
    memset(c, 0, sizeof c);
    FOR(i,0,N-1)
        if (i+k < N) c[RA[i+k]]++;
        else c[0]++;
    FOR(i,0,maxi-1) {
        int t = c[i];
        c[i] = sum;
        sum += t;
    }
    FOR(i,0,N-1) {
        int a = 0;
        if (SA[i]+k < N) a = RA[SA[i]+k];
        tempSA[c[a]++] = SA[i];
    }
    FOR(i,0,N-1) SA[i] = tempSA[i];
}

void suffixArray()
{
    int r;
    FOR(i,0,N-1) SA[i] = i;
    FOR(i,0,N-1) RA[i] = s[i];
    for (int k = 1; k < N; k <<= 1) {
        countingSort(k);
        countingSort(0);
        tempRA[SA[0]] = r = 0;
        FOR(i,1,N-1) {
            if (RA[SA[i]] != RA[SA[i-1]]) {
                tempRA[SA[i]] = ++r;
                continue;
            }
            int a = 0, b = 0;
            if (SA[i]+k < N) a = RA[SA[i]+k];
            if (SA[i-1]+k < N) b = RA[SA[i-1]+k];
            if (a != b) tempRA[SA[i]] = ++r;
            else tempRA[SA[i]] = r;
        }
        FOR(i,0,N-1) RA[i] = tempRA[i];
        if (r == N-1) break;
    }
}

void buildLCP()
{
    behind[SA[0]] = -1;
    FOR(i,1,N-1) behind[SA[i]] = SA[i-1];
    int L = 0;
    FOR(i,0,N-1) {
        if (behind[i] == -1) { PLCP[i] = 0; continue; }
        while (s[i+L] == s[behind[i]+L]) L++;
        PLCP[i] = L;
        L = max(L-1, 0);
    }
    FOR(i,0,N-1) LCP[i] = PLCP[SA[i]];
}

int owner(int u)
{
    return (u < n);
}

int main()
{
    ios::sync_with_stdio(0);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> s >> t;
    n = s.length();
    m = t.length();
    s = s + "$" + t + "#";
    N = s.length();
    suffixArray();
    buildLCP();
    int res = 1000000000;
    FOR(i,3,N-1) {
        int h = LCP[i];
        int a = owner(SA[i]);
        int b = owner(SA[i-1]);
        if (a == b) continue;
        if (LCP[i-1] >= h) continue;
        if (i == N-1) res = min(res, LCP[i-1]+1);
        else if (i < N-1 && LCP[i+1] < h) res = min(res, max(LCP[i-1], LCP[i+1])+1);
    }
    if (res == 1000000000) res = -1;
    cout << res;
    return 0;
}
