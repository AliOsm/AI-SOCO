#include <bits/stdc++.h>

using namespace std;

#ifdef DGC
#include "debug.h"
#else
#define debug(...) 9715
#endif
typedef long long ll;
typedef long double ld;
typedef complex<ld> point;
#define F first
#define S second



int main()
{
	#ifdef DGC
		//freopen("a.in", "r", stdin);
		//freopen("b.out", "w", stdout);
	#endif

	ios_base::sync_with_stdio(0), cin.tie(0);

	int t;
	cin >> t;
	while (t--)
	{
		int n, m, a, b;
		cin >> n >> m >> a >> b;
		vector<vector<int>> adj(n);
		for (int u, v; m--; )
		{
			cin >> u >> v;
			--u, --v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}

		auto walk = [&](vector<int> &c)
		{
			queue<int> q;
			int id = 0;
			for (int i = 0; i < n; ++i)
				if (c[i] == -1)
				{
					c[i] = id;
					q.push(i);
					while (!q.empty())
					{
						int u = q.front();
						q.pop();
						for (auto v : adj[u])
							if (c[v] < 0)
							{
								c[v] = id;
								q.push(v);
							}
					}
					++id;
				}
		};

		--a, --b;
		vector<int> c(n, -1);
		c[a] = n;
		walk(c);

		int id = c[b];
		set<int> s;
		for (int i = 0; i < n; ++i)
			if (c[i] == id) s.insert(i);

		c = vector<int>(n, n);
		for (auto i : s)
			c[i] = -1;
		c[b] = n;
		walk(c);

		set<int> bad;
		for (auto v : adj[a])
			if (c[v] != n)
				bad.insert(c[v]);

		int c1 = 0;
		for (int i = 0; i < n; ++i)
			if (c[i] != n && bad.find(c[i]) == bad.end())
				++c1;

		cout << (ll)c1 * (n-1 - s.size()) << "\n";
	}

	return 0;
}
