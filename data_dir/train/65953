#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> pii;
const int N = 1010, inF = 1e4, LIM = 2;

int n, m, u, v, ind[N], up[N], down[N];
bool mark[N];
vector<int> out[N], nei[N];

bool dfs(int v) {
	mark[v] = true;
	for (int u: nei[v])
		if(up[u] == -1 || (mark[up[u]] == false && dfs(up[u]))) {
			up[u] = v;
			down[v] = u;
			return true;
		}
	return false;
}

int max_matching() {
	fill(up, up + n, -1);
	fill(down, down + n, -1);
	int matching = 0;
	bool done = false;
	while(done == false) {
		done = true;
		memset(mark, false, sizeof mark);
		for (int v = 0; v < n; v++)
			if(mark[v] == false && down[v] == -1 && dfs(v)) {
				matching++;
				done = false;
			}
	}
	return matching;
}

int solve(int center) {
	int res = 2 * (n - 1) + 1;
	for (int u: out[center])
		res -= (u != center);
	res -= ind[center];
	
	for (int i = 0; i < n; i++)
		nei[i].clear();
	int cnt = 0;
	for (int v = 0; v < n; v++)
		if(v != center)
			for (int u: out[v])
				if(u != center)
					nei[v].push_back(u), cnt++;
	return res + n - 1 + cnt - 2 * max_matching();
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> m;
	while(m--) {
		cin >> u >> v;
		out[--u].push_back(--v);
		ind[v]++;
	}
	int ans = inF;
	for (int i = 0; i < n; i++)
		ans = min(ans, solve(i));
	cout << ans;
	return 0;
}
