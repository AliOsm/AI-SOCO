#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define boost() ios_base :: sync_with_stdio(0); cin.tie(); cout.tie(); cout << fixed; cout << setprecision(15); srand(time(NULL))
#define endl '\n'
typedef long long LL;
const int _N = 1e5 + 11;
const LL INF = 1e18;
const LL MOD = 1e9 + 7;

LL n, m, k, u, v, a, is_imp_node[1111], tot_comp = 0, is_comp_imp[1111], vis[1111], cnt_comp[1111], cnt_comp_edge[1111];
vector <int> adj[1111];
LL res = 0;

bool dfs(int v) {
	vis[v] = 1;
	cnt_comp_edge[tot_comp] += adj[v].size();
	bool res = 0;
	cnt_comp[tot_comp]++;
	if (is_imp_node[v]) res = 1;
	for (int i = 0; i < (int)adj[v].size(); i++) {
		int ch = adj[v][i];
		if (vis[ch]) continue;
		res |= dfs(ch);
	}
	return res;
}

int main() {
	boost();
	#ifndef ONLINE_JUDGE
		freopen("in", "r", stdin);
//		freopen("out", "w", stdout);
	#endif
	cin >> n >> m >> k;
	for (int i = 0; i < k; i++) {
		cin >> a;
		is_imp_node[a] = 1;
	}
	while (m--) {
		cin >> u >> v;
		adj[u].pb(v);
		adj[v].pb(u);
	}
	for (int i = 1; i <= n; i++) {
		if (vis[i]) continue;
		is_comp_imp[tot_comp] = dfs(i);
		cnt_comp_edge[tot_comp] >>= 1;
		res += (cnt_comp[tot_comp] * (cnt_comp[tot_comp] - 1LL) / 2LL) - cnt_comp_edge[tot_comp];
		tot_comp++;
	}
	for (int i = 0; i < tot_comp; i++) {
		if (is_comp_imp[i]) continue;
		LL mx = 0, c_j = -1;
		for (int j = 0; j < tot_comp; j++) {
			if (i == j) continue;
			if (mx < cnt_comp[j]) {
				mx = cnt_comp[j];
				c_j = j;
			}
		}
		if (c_j == -1) continue;
		res += cnt_comp[c_j] * cnt_comp[i];
		cnt_comp[c_j] += cnt_comp[i];
		cnt_comp[i] = 0;
	}
	cout << res << endl;
	return 0;
}
