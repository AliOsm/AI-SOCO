#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define MS0(I) memset(I, 0, sizeof(I));
#define MS1(I) memset(I, -1, sizeof(I));
#define rep(i, n) for(int i = 0; i < (n); ++i)
#define rep1(i, s, n) for(int i = (s); i < (n); ++i)
#define per1(i, a, b) for(int i = a; i >= b; --i)
#define DRI(A) int A; scanf("%d", &A);
#define DRII(A, B) int A, B; scanf("%d %d", &A, &B);
#define DRIII(A, B, C) int A, B, C; scanf("%d %d %d", &A, &B, &C);
#define DRL(A) long long A; scanf("%lld", &A);
#define DRLL(A, B) long long A, B; scanf("%lld %lld", &A, &B);
#define DRLLL(A, B, C) long long A, B, C; scanf("%lld %lld %lld", &A, &B, &C);
#define SZ(X) ((int)X.size() )
#define MP make_pair 
#define pb push_back
#define F first
#define S second
#define ALL(I) (I).begin(), (I).end()
typedef long long LL;
typedef unsigned long long ULL;
typedef double DB;
typedef long double LDB;
typedef pair<int, int> PII; 
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;
typedef pair<LL, LL> PLL;
const double eps = 1e-9;
const double PI = acos(-1);
const LL INFF = 1e18;
const int INF = 1e9+1;
const int mod = 1e9+7;
const int MAX = 1e5+7;
int a[MAX];
int n;
bool ck(LL v){
  rep1(i, 1, n+1){
    while(v % a[i] == 0) v /= a[i];
    if(v == 1) return 1;
  }
  return 0;
}
vector<LL>st1;
void go(LL p, LL v){
  if(p > n){
    st1.pb(v); return ;
  }
  go(p+2, v);
  while(1){
    if(1e18 / a[p] < (LDB)v) break;
    v *= a[p];
    go(p+2, v);
  }
  return ;
}
vector<LL>st2;
void gogo(LL p, LL v){
  if(p > n){
    st2.pb(v); return ;
  }
  gogo(p+2, v);
  while(1){
    if(1e18 / a[p] < (LDB)v) break;
    v *= a[p];
    gogo(p+2, v);
  }
  return ;
}
int sol(LL v){
  int p1 = upper_bound(ALL(st2), v) - st2.begin() - 1;
  int res = p1 + 1;
  rep1(i, 1, SZ(st1)){
    while(p1 >= 0 && (LDB)st1[i]*st2[p1] > (LDB)v) p1--;
    if(p1 == -1) break;
    res += p1 + 1;
  }
  return res;
}
int main(void){
  scanf("%d", &n);
  rep1(i, 1, n+1) scanf("%d", a + i);
  DRI(k);
  if(n == 1){
    k--; LL ans = 1;
    while(k--){
      ans *= a[1];
    }
    printf("%lld\n", ans); return 0;
  }
  go(1, 1);
  gogo(2, 1);
  sort(ALL(st1));
  sort(ALL(st2));
  LL l = 1, r = INFF;
  while(l <= r){
    LL mid = (l + r) >> 1;
    int res = sol(mid);
    if(res > k) r = mid - 1;
    else if(res == k){
      if(ck(mid)){
        printf("%lld\n", mid); 
        return 0;
      }
      else r = mid - 1;
    }
    else l = mid + 1;
  }
  puts("QQ");
  return 0;
}
