#include <bits/stdc++.h>
using namespace std;
#define forn(i, n) for(int i = 0; i < (int) (n); i++)
#define db(x) cerr << #x << " = " << x << "\n"
typedef long long ll;
typedef long long tint;
const int MAXN = 200050;

struct RMQ{
	#define LVL 18
	int vec[LVL][1<<(LVL+1)];
	int &operator[](int p){return vec[0][p];}
	int get(int i, int j) {//intervalo [i,j)
		int p = 31-__builtin_clz(j-i);
		return max(vec[p][i],vec[p][j-(1<<p)]);
	}
	void build(int n) {//O(nlogn)
		int mp = 31-__builtin_clz(n);
		forn(p, mp) forn(x, n-(1<<p))
			vec[p+1][x] = max(vec[p][x], vec[p][x+(1<<p)]);
}};

struct RminQ{
	#define LVL 18
	int vec[LVL][1<<(LVL+1)];
	int &operator[](int p){return vec[0][p];}
	int get(int i, int j) {//intervalo [i,j)
		int p = 31-__builtin_clz(j-i);
		return min(vec[p][i],vec[p][j-(1<<p)]);
	}
	void build(int n) {//O(nlogn)
		int mp = 31-__builtin_clz(n);
		forn(p, mp) forn(x, n-(1<<p))
			vec[p+1][x] = min(vec[p][x], vec[p][x+(1<<p)]);
}};

RminQ worst;
RMQ best;
int n, s, l, A[MAXN];

int main(){
  
  //~ forn(i, 65){
    //~ printf("%d %d\n", i, __builtin_clz(i));
  //~ }
  
  scanf("%d %d %d", &n, &s, &l);
  forn(i, n){
    scanf("%d", &A[i]);
  }
  
  int r = 0;
  multiset<int> S;
  forn(i, n){
    if(i) S.erase(S.find(A[i - 1]));
    if(r <= i) S.insert(A[i]);
    r = max(r, i + 1);
    while(r < n){
      int k = A[r];
      int d1 = abs(k - *S.begin());
      int d2 = abs(k - *S.rbegin());
      if(max(d1, d2) <= s){
        S.insert(k);
        r++;
      }
      else {
        break;
      }
    }
    
    //~ for(auto it : S){
      //~ printf("%d ", it);
    //~ }
    //~ puts("");
    
    best[i] = r;
    if(best[i] - i < l){
      best[i] = -1;
    }
  }
  
  forn(i, n){
    //~ printf("%d -> %d\n", i, best[i]);
    worst[i] = i + l <= best[i] ? i + l : 1e9;
    //~ printf("%d -> %d\n", i, worst[i]);
  }
  
  worst.build(n);
  best.build(n);
  
  int a, b, cnt;
  cnt = 0;
  a = 0;
  b = 0;
  
  //~ printf("%d %d\n", a, b);
  while(true){
    int na = worst.get(a, b + 1);
    int nb = best.get(a, b + 1);
    a = na;
    b = nb;
    cnt++;
    //~ printf("%d %d\n", a, b);
    if(a > n || b < a){
      printf("-1\n");
      break;
    }
    if(b == n){
      printf("%d\n", cnt);
      break;
    }
  }
  
  return 0;
}
