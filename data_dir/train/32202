#include "bits/stdc++.h"
#include "chrono"

using namespace std;

#define ALL(x) x.begin(), x.end()
#define bits(x) __builtin_popcount(x)
#define bitsll(x) __builtin_popcountll(x)
#define precision(a) fixed << setprecision(a)

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef vector <int> vi;

template <class T>
inline T sqr (T x) {
	return x * x;
}

template <class T>
inline bool isSquare (T x) {
	T y = sqrt(x + 0.5);
	return (y * y) == x;
}

template <class T1, class T2>
inline T1 gcd (T1 a, T2 b) {
	return b ? gcd(b, a % b) : a;
}

template <class T1, class T2>
inline T1 eqMin (T1 & x, const T2 & y) {
	if (T1(y) < x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 eqMax (T1 & x, const T2 & y) {
	if (T1(y) > x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 min (const T1 & x, const T2 & y) {
	return x < (T1) y ? x : (T1) y;
}

template <class T1, class T2>
inline T1 max (T1 & x, const T2 & y) {
	return x > (T1) y ? x : (T1) y;
}

template <typename T>
inline T getint () {
	T x = 0, p = 1;
	char ch;
	do {
		ch = getchar();
	} while (ch <= ' ');
	if (ch == '-')
		p = -1, ch = getchar();
	while (ch >= '0' && ch <= '9')
		x = x * 10 + ch - '0', ch = getchar();
	return x * p;
}

struct _flag_t {
	string val;
}
const _1d{", "}, _2d{"\n  "};
_flag_t _flag = _1d;

ostream & operator<< (ostream & os, _flag_t flag) {
	_flag = flag;
	return os;
}

template <class It>
ostream & _out (ostream & os, It f, It l) {
	if (f == l) return os << "{}";
	_flag_t cur_flag = _flag;
	os << _1d << "{ " << *f;
	for (; ++f != l; os << cur_flag.val << *f);
	return os << " }";
}

template <class C>
auto operator<< (ostream & os, C const & cont)
-> decltype(begin(cont), end(cont), cont.size(), declval <ostream &>()) {return _out(os, begin(cont), end(cont));}

ostream & operator<< (ostream & os, string const & s) {return os << s.data();}

template <class X, class Y>
ostream & operator<< (ostream & os, pair <X, Y> const & p) {return os << "[" << p.first << ", " << p.second << "]";}

const double PI = acos(-1);
const double EPS = 1e-8;
const int INF = (int) 2e9;
const int MOD = (int) 998244353;
const int MAXN = (int) 2e5 + 10;

int n, k;
int a[MAXN];
bool used[MAXN];
ll ans = 1;

void input () {
	cin >> n >> k;
	for (int i = 1; i <= n; i++) {
		cin >> a[i];
	}
}

void check () {
	for (int i = 3; i <= n; i++) {
		if (a[i] != -1 && a[i - 2] != -1) {
			if (a[i] == a[i - 2]) {
				cout << 0;
				exit(0);
			}

		}
	}
}

ll f (int x, int y, int n) {
	if (x == 0 && y == 0) {
		ll result = k;
		for (int i = 1; i < n; i++) {
			result = (result * (k - 1)) % MOD;
		}
		return result;
	}
	if (x == 0 || y == 0) {
		ll result = 1;
		for (int i = 1; i <= n; i++) {
			result = (result * (k - 1)) % MOD;
		}
		return result;
	}

	if (k == 2 && x != y) {
		return 0;
	}
	vector <ll> dp(n + 2, 0);
	dp[1] = 1;
	for (int i = 2; i <= n + 1; i++) {
		dp[i] = (dp[i - 1] * (k - 2) + dp[i - 2] * (k - 1)) % MOD;
	}
	if (x == y) {
		if (n % 2) {
			return (dp[n + 1] + 1) % MOD;
		} else {
			return (dp[n + 1] - 1 + MOD) % MOD;
		}
	}
	return dp[n + 1];
}

void solve () {
	for (int i = 1; i <= n; i++) {
		if (used[i]) continue;
		if (a[i] != -1) continue;
		int cnt = 0;
		for (int j = i; a[j] == -1; j += 2, cnt++) used[j] = true;
		int x = 0, y = 0;
		if (i - 2 >= 1) x = a[i - 2];
		if (i + cnt * 2 <= n) y = a[i + cnt * 2];
		ans = (ans * f(x, y, cnt)) % MOD;
	}
}

int main () {
	ios_base::sync_with_stdio(false);
	input();
	check();
	solve();
	cout << ans;
}