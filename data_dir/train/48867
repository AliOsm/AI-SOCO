/* ********************************************* */
/*     Codeforces round 394                      */
/*     Bulbasaur Sabo                            */
/*     Kazakh-British TU 5, Team Sorry           */
/*     Problem A                                 */
/* ********************************************* */
#include <bits/stdc++.h>

using namespace std;
const int N = 2e5 + 7;

const int inf = 1e9 + 7;
const int mod = 1e9 + 7;
const double pi = acos(-1);

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef vector <int> vi;
typedef vector <ll> vl;
typedef vector <pii> vpi;
typedef vector <pll> vpl;

#define ff first
#define ss second
#define all(a) a.begin(), a.end()
#define sz(a) int(a.size())
#define pb push_back
#define mp make_pair
#define file "A"

// close your eyes and belive that this work
// coding just for doner


vi g[N];
int color[N];
int newcolor[N];
int newcol = 1;
 
void dfs(int v = 1, int curcol = 1, int p = -1){
    newcolor[v] = curcol;
    for (auto to : g[v]){
        if (p == to) continue;
        if (color[v] == color[to]){
            dfs(to, curcol, v);
        }
        else{
            newcol++;
            dfs(to, newcol, v);
        }
    }
}
 
 
bool check(int v){
    set<int> id;
    id.insert(newcolor[v]);
    for (auto i : g[v])
    {
        id.insert(newcolor[i]);
    }
    return (int) id.size() == newcol;
}
 
 
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); 
    int n;
    cin >> n;
    for (int i = 1; i < n; i++){
        int a, b;
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    for (int i = 1; i <= n; i++){
        cin >> color[i];
    }
    dfs();
    for (int i = 1; i <= n; i++)
    {
        if ((int) g[i].size() >= (newcol - 1) && check(i)){
            cout << "YES" << endl;
            cout << i << endl;
            return 0;
        }
    }
    cout << "NO" << endl;
    #ifndef ONLINE_JUDGE
        fprintf(stderr, "Time: %d ms\n", (int)(clock() * 1000. / CLOCKS_PER_SEC));
    #endif
    return 0;
}