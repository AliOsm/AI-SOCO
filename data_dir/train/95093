#include<bits/stdc++.h>
#define pb push_back
using namespace std;
const int N = 1000*100 + 10 , L = 18;

vector <int> adj1[N] , adj2[N];

int h[N] , f[N] , st[N] , par[N][20] , pt;
bool mark[N] , c[N];


void DFS1(int v , int p){

    mark[v] = 1;
    h[v] = h[p] + 1;
    f[v] = v;
    st[v] = pt++;

    for(int i = 0 ; i < (int) adj1[v].size() ; i++){
        int u = adj1[v][i];
        if(!mark[u]){
                DFS1(u , v);
                if(h[f[u]] < h[f[v]])
                        f[v] = f[u];
        }
        else if(u != p && st[v] > st[u]){
                c[u] = 1;
                if(h[u] < h[f[v]])
                        f[v] = u;
        }
    }
    
    return;

}

void DFS2(int v , int p){

   mark[v] = 1;
   f[v] = f[f[v]];
   
   for(int i = 0 ; i < (int) adj1[v].size() ; i++){
        int u = adj1[v][i];
        if(!mark[u])
            DFS2(u , v);
        
        adj2[f[v]].pb(u);
   }

   return;


}

void Make_LCA(int v , int p){

    par[v][0] = p;
    h[v] = h[p] + 1;
    mark[v] = 1;

    for(int i = 1 ; i <= L ; i++)
        par[v][i] = par[par[v][i-1]][i-1];

    for(int i = 0 ; i < (int) adj2[v].size() ; i++){
        int u = adj2[v][i];
        if(!mark[u])
            Make_LCA(u , v);
    }

    return;
}


int LCA(int u , int v){

    if(h[u] < h[v])
        swap(u , v);
    
    int t = h[u] - h[v] , ans = 0;

    for(int i = L ; i >= 0 ; i--){
        int k = 1 << i;
        if(k & t){
                ans += k;
                u = par[u][i];
        }
    }
    
    if(u == v)
        return ans;

    for(int i = L ; i >= 0 ; i--){
        if(par[u][i] != par[v][i]){
                ans += 1 << (i+1);
                u = par[u][i];
                v = par[v][i];
        }
    }
    
    return ans+2;

}

int main(){

     int n , m , q , u , v;
     cin >> n >> m;

     for(int i = 0 ; i < m ; i++){
           cin >> u >> v;
           adj1[--u].pb(--v);
           adj1[v].pb(u);
     }

     DFS1(0 , 0);
     fill(mark , mark+n , 0);
 
     DFS2(0 , 0); 
     fill(mark , mark+n , 0);
     
     h[0] = 0;
     Make_LCA(0 , 0);

     cin >> q;

     for(int i = 0 ; i < q ; i++){
           cin >> u >> v;
           cout << LCA(f[--u] , f[--v]) << endl;
     }

     return 0;

}