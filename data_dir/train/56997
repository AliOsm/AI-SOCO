#include <bits/stdc++.h>
#pragma GCC optimize ("Ofast")
#pragma GCC target ("sse4")
#pragma GCC optimize("unroll-loops")
#define ll          long long
#define pb          push_back
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
using namespace std;
vi adj[400005],adj2[400005];
int in[400005],out[400005];
bool vis[400005];
void dfs(int u){
	vis[u]=1;
	for(auto x:adj2[u])
		if(!vis[x])
			dfs(x);
}
int main()
{	
	std::ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int n,i,sz=0,u,v,in1=0,out1=0;
	string res;
	map<string,int> mp;
	map<int,string> revmp;
	string s,a,b;
	vi path;
	stack<int> st;
	cin>>n;
	for(i=0;i<n;i++){
		cin>>s;
		a=s.substr(0,2);
		b=s.substr(1,2);
		if(!mp.count(a))
			mp[a]=++sz;
		u=mp[a];
		if(!mp.count(b))
			mp[b]=++sz;
		v=mp[b];
		adj[u].pb(v);
		adj2[u].pb(v);
		adj2[v].pb(u);
		out[u]++;
		in[v]++;
	}
	for(auto it:mp)
		revmp[it.S]=it.F;
	dfs(1);
	for(i=1;i<=sz;i++)
		if(!vis[i]){
			cout<<"NO";
			return 0;
		}
	for(i=1;i<=sz;i++)
		if(in[i]==out[i])
			continue;
		else if(in[i]==out[i]+1)
			in1++;
		else if(out[i]==in[i]+1)
			out1++;
		else
			break;
	if(i<=sz){
		cout<<"NO";
		return 0;
	}
	if(!(in1==0 and out1==0) and !(in1==1 and out1==1)){
		cout<<"NO";
		return 0;
	}
	u=1;
	for(i=1;i<=sz;i++)
		if(out[i]>in[i]){
			u=i;
			break;
		}
	st.push(u);
	while(!st.empty()){
		if(!adj[u].empty()){
			v=adj[u].back();
			adj[u].pop_back();
			st.push(u);
			u=v;
		}
		else{
			path.pb(u);
			u=st.top();
			st.pop();
		}
	}
	reverse(all(path));
	res.append(revmp[path[0]]);
	for(i=1;i<sz(path);i++)
		res.pb(revmp[path[i]].back());
	if(sz(res)==n+2)
		cout<<"YES"<<endl<<res;
	else
		cout<<"NO";
	return 0;
}