#include <bits/stdc++.h>

using namespace std;

#define ff first
#define ss second
#define pb push_back
using ll = long long;
using ii = pair<int,int>;
#define eps 1e-9
#define mod 1000000007

int low[300005];
int vis[300005];
int lvl[300005];
int vis2[300005][2];
vector<int> adj[300005];
set<ii> bds;
int ans;
int id;

void bidg(int x, int p){
    if(vis[x]) return;
    ++id;
    vis[x] = id;
    low[x] = id;
    for(int i : adj[x]){
        if(i == p) continue;
        if(lvl[i] == 0) lvl[i] = lvl[x] + 1;
        lvl[i] = min(lvl[x] + 1, lvl[i]);
        bidg(i, x);
        if(low[i] > vis[x]){
            bds.insert({x, i});
        }
        low[x] = min(low[x], low[i]);
    }
}

int dfs(int x, int q){
    if(vis2[x][q] != -1) return vis2[x][q];
    int ret = 0;
    int ret2 = 0;
    if(q){
        for(int i : adj[x]){
            if(lvl[i] <= lvl[x] || vis[i] < vis[x]) continue;
            int a = dfs(i, 1) + bds.count({x, i});
            ret = max(ret, a);
        } 
        return vis2[x][q] = ret;
    }
    for(int i : adj[x]){
        if(lvl[i] <= lvl[x] || vis[i] < vis[x]) continue;
        int a = dfs(i, 1) + bds.count({x, i});
        ret2 = max(ret2, a);
        if(ret2 > ret){
            swap(ret, ret2);
        }
    }
    ret += ret2;
    for(int i : adj[x]){
        if(lvl[i] <= lvl[x] || vis[i] < vis[x]) continue;
        ret = max(ret, dfs(i, 0));
    }
    return vis2[x][q] = ret;
}

int main(){
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i = 0; i < m; i++){
        int x, y;
        scanf("%d %d", &x, &y);
        adj[x].pb(y);
        adj[y].pb(x);
    }
    lvl[1] = 1;
    bidg(1, -1);
    memset(vis2, -1, sizeof vis2);
    ans = dfs(1, 0);
    printf("%d\n",ans );
    return 0;
}