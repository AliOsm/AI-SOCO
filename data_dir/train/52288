#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>


#define LL long long
#define uLL unsigned long long
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vI vector<int>
#define vvI vector<vector<int>>
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define sc(a) scanf("%d", &(a))
const LL mod = 1000000007;
const LL Inf = 2 * 1e9;
using namespace std;
LL gcd(LL a, LL b) {
	if (b == 0)
		return a;
	else
		return gcd(b, a % b);
}
int n;
long double dist(long double x1, long double y1, long double x2, long double y2) {
	return sqrt((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1));
}


int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin >> n;
	vector<long double> x(n), y(n);
	forn(i, 0, n) {
		cin >> x[i] >> y[i];
	}
	long double ans = 1e15;

	forn(i, 0, n) {
		forn(j, i + 1, n) {
			long double d = dist(x[i], y[i], x[j], y[j]);
			ans = min(ans, d / 2);
		}
	}

	forn(i, 0, n - 2) {
		long double a = dist(x[i], y[i], x[i + 1], y[i + 1]);
		long double b = dist(x[i + 1], y[i + 1], x[i + 2], y[i + 2]);
		long double c = dist(x[i], y[i], x[i + 2], y[i + 2]);
		long double p = (a + b + c) / 2.0;
		long double s = sqrt(p*(p - a)*(p - b)*(p - c));
		long double h1 = 2 * s / c;
		long double h2 = 2 * s / a;
		long double h3 = 2 * s / b;
		ans = min(ans, h1 / 2);
		ans = min(ans, h2 / 2);
		ans = min(ans, h3 / 2);
	}

	long double a = dist(x[n - 2], y[n - 2], x[n - 1], y[n - 1]);
	long double b = dist(x[n - 1], y[n - 1], x[0], y[0]);
	long double c = dist(x[n - 2], y[n - 2], x[0], y[0]);
	long double p = (a + b + c) / 2;
	long double s = sqrt(p*(p - a)*(p - b)*(p - c));
	long double h1 = 2 * s / c;
	long double h2 = 2 * s / a;
	long double h3 = 2 * s / b;
	ans = min(ans, h1 / 2);
	ans = min(ans, h2 / 2);
	ans = min(ans, h3 / 2);
	a = dist(x[n - 1], y[n - 1], x[0], y[0]);
	b = dist(x[0], y[0], x[1], y[1]);
	c = dist(x[n - 1], y[n - 1], x[1], y[1]);
	p = (a + b + c) / 2;
	s = sqrt(p*(p - a)*(p - b)*(p - c));
	h1 = 2 * s / c;
	h2 = 2 * s / a;
	h3 = 2 * s / b;
	ans = min(ans, h1 / 2);
	ans = min(ans, h2 / 2);
	ans = min(ans, h3 / 2);
	printf("%.9Lf", ans);
	return 0;
}