#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define mod 1000000007
// #define int long long
#define ll long long
#define EPS 0.000000001
#define ld long double
#define PI 3.14159265358979323846
#define inf 10000000
const int N = 1000000;

 
  
// Depth-First Search to find a connected 
// component 
vector<int> g[N+1],vis(N+1,0),deg(N+1,0),odd(N+1,0);
int ct = 0;
void dfs(int comp, int v) 
{ 
    vis[v] = 1; 
    ct++;
    if (deg[v]%2 == 1) 
        odd[comp]++; 
  
    for (int u : g[v]) 
        if (vis[u] == 0) 
            dfs(comp, u); 
} 
  
// Return minimum edge required to make Euler 
// Circuit 
int minEdge(int n, int m) 
{ 
    // g : to store adjacency list 
    //     representation of graph. 
    // e : to store list of even degree vertices 
    // o : to store list of odd degree vertices 
    vector<int> e, o; 

    // 'ans' is result and 'comp' is component id 
    int ans = 0, comp = 0; 
    for (int i = 1; i <= n; i++) 
    { 
        if (vis[i]==0) 
        { 
            comp++; 
            ct = 0;
            dfs(comp, i); 
  
            // Checking if connected component 
            // is odd. 
            if (odd[comp] == 0)
            {
                if(ct > 1 or i == 1)
                {

                    e.push_back(comp); 
                }
                else
                {
                    if(deg[i] > 0)
                        e.push_back(comp);
                }

            } 
  
            // Checking if connected component 
            // is even. 
            else
                o.push_back(comp); 
        } 
    } 
  
    // If whole graph is a single connected 
    // component with even degree. 
    if (o.size() == 0 && e.size() == 1) 
        return 0; 
  
    // If all connected component is even 
    if (o.size() == 0) 
        return e.size(); 
  
    // If graph have atleast one even connected 
    // component 
    if (e.size() != 0)
    {
        ans += e.size(); 
       
    } 
  
    // For all the odd connected component. 
    for (int i : o) 
    {
        ans += odd[i]/2; 
    }
  
    return ans; 
} 
  


int32_t main()
{
    IOS;
    #ifndef ONLINE_JUDGE
    freopen("int.txt","r",stdin);
    freopen("out.txt","w",stdout);
    #endif
    int n,m;
    cin >> n >> m;
    for(int i = 0;i < m;i++)
    {
        int a,b;
        cin >> a >> b;
       
        g[a].push_back(b);
        g[b].push_back(a);
        deg[a]++;
        deg[b]++;
    }
    cout << minEdge(n,m);

}   
 
 
