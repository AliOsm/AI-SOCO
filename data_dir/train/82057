//#include <cstdio>
//#include <cstring>
//#include <algorithm>
//#include <iostream>
//#include <string>
//#include <vector>
//#include <stack>
//#include <bitset>
//#include <cstdlib>
//#include <cmath>
//#include <set>
//#include <list>
//#include <deque>
//#include <map>
//#include <queue>
//#include <fstream>
//#include <cassert>
//#include <unordered_set>
//#include <unordered_map>
//#include <cmath>
//#include <sstream>
//#include <time.h>
//#include <complex>
//#define Max(a,b) ((a)>(b)?(a):(b))
//#define Min(a,b) ((a)<(b)?(a):(b))
//#define FOR(a,b,c) for (int (a)=(b);(a)<(c);++(a))
//#define FORN(a,b,c) for (int (a)=(b);(a)<=(c);++(a))
//#define DFOR(a,b,c) for (int (a)=(b);(a)>=(c);--(a))
//#define FORSQ(a,b,c) for (int (a)=(b);(a)*(a)<=(c);++(a))
//#define FORC(a,b,c) for (char (a)=(b);(a)<=(c);++(a))
//#define FOREACH(a,b) for (auto &(a) : (b))
//#define rep(i,n) FOR(i,0,n)
//#define repn(i,n) FORN(i,1,n)
//#define drep(i,n) DFOR(i,n-1,0)
//#define drepn(i,n) DFOR(i,n,1)
//#define MAX(a,b) a = Max(a,b)
//#define MIN(a,b) a = Min(a,b)
//#define SQR(x) ((LL)(x) * (x))
//#define reset(a,b) memset(a,b,sizeof(a))
//#define fi first
//#define se second
//#define mp make_pair
//#define pb push_back
//#define all(v) v.begin(),v.end()
//#define ALLA(arr,sz) arr,arr+sz
//#define SIZE(v) (int)v.size()
//#define SORT(v) sort(all(v))
//#define REVERSE(v) reverse(ALL(v))
//#define SORTA(arr,sz) sort(ALLA(arr,sz))
//#define REVERSEA(arr,sz) reverse(ALLA(arr,sz))
//#define PERMUTE next_permutation
//#define TC(t) while(t--)
//#define forever for(;;)
//#define PINF 1000000000000
//#define newline '\n'
//
//#define test if(1)cout
//using namespace std;
//
//using namespace std;
//typedef vector<int> vi;
//typedef vector<vi> vvi;
//typedef pair<int,int> ii;
//typedef pair<double,double> dd;
//typedef pair<char,char> cc;
//typedef vector<ii> vii;
//typedef long long ll;
//typedef pair<ll, ll> l4;
//const double pi = acos(-1.0);
//typedef pair<int, ii> iii;
//typedef vector<iii> viii;
//
//vector<int> pa;
//vector<set<int> > adj;
//map<int, int> m;
//
//void print(int n)
//{
//    
//    for (int i = 0; i < n; ++i)
//    {
//        cout << i << ":\n";
//        for (auto nxt : adj[i])
//            cout << nxt << " ";
//        cout << newline;
//    }
//}
//
//
//int findpa(int id)
//{
//    if (pa[id] != id)
//    {
//        pa[id] = findpa(pa[id]);
//    }
//    return pa[id];
//        
//}
//void merge(int x, int y)
//{
//   pa[findpa(x)] = findpa(y);
//}
//int id(int n)
//{
//    if (m.count(n) == 0)
//    {
//        int result = m.size();
//        m[n] = result;
//    }
//    return m[n];
//}
//int main()
//{
//    int n;  cin >> n;
//    vector<int> color(n+1);
//    pa = vector<int>(n+1);
//    repn(i, n)
//    pa[i] = i;
//    repn(i, n)
//    cin >> color[i];
//    vector<pair<int,int> > edges(n-1);
//    rep(i, n-1)
//    {
//        int u, v;   cin >> u >> v;
//        edges[i] = mp(u, v);
//        if (color[u] == color[v])
//            merge(u, v);
//    }
//    adj = vector<set<int>>(n, set<int>());
//    rep(i, n-1)
//    {
//        int u = id(findpa(edges[i].first)), v = id(findpa(edges[i].second));
//        
//        if (u != v)
//        {
//            adj[u].insert(v), adj[v].insert(u);
//            
//        }
//    }
//    int total = m.size();
//    if (total == 1 && color[0] == 0)
//    {
//        cout << 0 << newline;
//        return 0;
//    }
//
//    for (int i = 1; i <= n; ++i)
//    {
//        int p = findpa(i);
//        int pp = id(p);
//        if (color[p] == 0 && adj[pp].size() == 1)
//        {
//            int nxt = *adj[pp].begin();
//            adj[nxt].erase(pp);
//            total -= 1;
//            adj[pp].clear();
//        }
//        
//    }
//    cout << "total = " << total << newline;
//    if (total == 0)
//    {
//        cout << 0 << newline;
//        return 0;
//    }
//    print(m.size());
//    int start = 0;
//    for (start = 0; start < m.size(); ++start)
//        if (adj[start].size() != 0 )
//            break;
//    queue<int> q;
//    q.push(start);
//    vector<bool> vis(m.size(), false);
//    vis[0] = true;
//    int result = -1;
//    while (!q.empty())
//    {
//        auto cur = q.front();   q.pop();
//        result = cur;
//        for (auto nxt: adj[cur])
//        {
//            if (vis[nxt])
//                continue;
//            vis[nxt] = true;
//            q.push(nxt);
//        }
//    }
//    for (auto e:vis)
//        e = false;
//    int d = -1;
//    q.push(result);
//    vis[result] = true;
//    while (!q.empty())
//    {
//        int len = q.size();
//        d += 1;
//        for (int i = 0; i < len; ++i)
//        {
//            auto cur = q.front(); q.pop();
//            for (auto nxt: adj[cur])
//            {
//                if (vis[nxt])
//                    continue;
//                vis[nxt] = true;
//                q.push(nxt);
//            }
//        }
//        
//    }
//    cout << (d+1)/2+1 << newline;
//    
//    
//}
//
//
//
//
//

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
#include <fstream>
#include <cassert>
#include <unordered_set>
#include <unordered_map>
#include <cmath>
#include <sstream>
#include <time.h>
#include <complex>
#define Max(a,b) ((a)>(b)?(a):(b))
#define Min(a,b) ((a)<(b)?(a):(b))
#define FOR(a,b,c) for (int (a)=(b);(a)<(c);++(a))
#define FORN(a,b,c) for (int (a)=(b);(a)<=(c);++(a))
#define DFOR(a,b,c) for (int (a)=(b);(a)>=(c);--(a))
#define FORSQ(a,b,c) for (int (a)=(b);(a)*(a)<=(c);++(a))
#define FORC(a,b,c) for (char (a)=(b);(a)<=(c);++(a))
#define FOREACH(a,b) for (auto &(a) : (b))
#define rep(i,n) FOR(i,0,n)
#define repn(i,n) FORN(i,1,n)
#define drep(i,n) DFOR(i,n-1,0)
#define drepn(i,n) DFOR(i,n,1)
#define MAX(a,b) a = Max(a,b)
#define MIN(a,b) a = Min(a,b)
#define SQR(x) ((LL)(x) * (x))
#define reset(a,b) memset(a,b,sizeof(a))
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define all(v) v.begin(),v.end()
#define ALLA(arr,sz) arr,arr+sz
#define SIZE(v) (int)v.size()
#define SORT(v) sort(all(v))
#define REVERSE(v) reverse(ALL(v))
#define SORTA(arr,sz) sort(ALLA(arr,sz))
#define REVERSEA(arr,sz) reverse(ALLA(arr,sz))
#define PERMUTE next_permutation
#define TC(t) while(t--)
#define forever for(;;)
#define PINF 1000000000000
#define newline '\n'

#define test if(1)cout
using namespace std;

using namespace std;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
typedef pair<double,double> dd;
typedef pair<char,char> cc;
typedef vector<ii> vii;
typedef long long ll;
typedef pair<ll, ll> l4;
const double pi = acos(-1.0);
typedef pair<int, ii> iii;
typedef vector<iii> viii;

vector<int> color;
vector<bool> vis;
vector<vector<int> > adj, adj2;
vector<int> dsu;
vector<int> dp;
int diameter = 0;
void dfs1(int cur, int col, int group)
{
    if (dsu[cur] != -1) return;
    if (col != color[cur]) return;
    dsu[cur] = group;
    for (auto nxt : adj[cur])
        dfs1(nxt, col, group);
    
}

void dfs2(int cur, int pa = -1)
{
    int mx1 = 0, mx2 = 0;
    for (auto nxt : adj2[cur])
    {
        if (pa == nxt)
            continue;
        dfs2(nxt, cur);
        MAX(mx2, dp[nxt]+1);
        if (mx1 < mx2)  mx1 ^= mx2 ^= mx1 ^= mx2;
    }
    dp[cur] = mx1;
    MAX(diameter, mx1 + mx2);
}

int main()
{
    int n;  cin >> n;
    color.resize(n);
    rep(i, n)
    {
        cin >> color[i];
    }
    adj.resize(n);
    rep(i, n-1)
    {
        int u, v;   cin >> u >> v;
        adj[u-1].pb(v-1);
        adj[v-1].pb(u-1);
    }
    dsu = vector<int>(n, -1);
    int g = 0;
    rep(i, n)
    {
        if (dsu[i] == -1)
            dfs1(i, color[i], g++);
    }
    
    adj2.resize(g);
    rep(i, n)
    {
        for (auto nxt : adj[i])
        {
            if (dsu[i] != dsu[nxt])
                adj2[dsu[i]].pb(dsu[nxt]);
        }
    }
    dp.resize(g);
    diameter = 0;
    dfs2(0);
    cout << (diameter + 1)/2 << newline;
    
    
}