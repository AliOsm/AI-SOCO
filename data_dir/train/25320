#include<bits/stdc++.h>
#define fr first
#define sc second
#define pb push_back
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int> >
const int INF = 1e18;
const int inf = 1e9;
const int MAXN = 3e5 + 200;
const  long double eps = 1e-8;
const long double pi = acos(-1.0);
using namespace std;


int level[MAXN], parent[MAXN];
vector <int> g[MAXN];
int n;
int dfs(int v, int sz, int &center, int p = -1){
    int sum = 1;
    for (int x : g[v])
        if (level[x] == -1 && x != p)
            sum += dfs(x, sz, center, v);
    if (center == -1 && (2 * sum >= sz || p == -1))
        center = v;
    return sum;
}

void build(int v, int sz, int depth, int last){
    //cout << "V " << v << "\n";
    int center = -1;
    dfs(v, sz, center);
    level[center] = depth;
    parent[center] = last;
    for (int x : g[center])
        if (level[x] == -1)
        build(x, sz / 2, depth + 1, center);
}
void solve(){
    cin >> n;
    for (int i = 0; i < n; i++) level[i] = -1;
    for (int i = 0; i < n - 1; i++){
        int x, y;
        cin >> x >> y;
        x--; y--;
        g[x].pb(y); g[y].pb(x);
    }
    build(0, n, 0, -1);
    //for (int i = 0; i < n; i++)
      //  cout << level[i] << " ";
    cout << "\n";
    for (int i = 0; i < n; i++)
        cout << char (level[i] + 'A') << " ";

}

int main() {
ios::sync_with_stdio(NULL), cin.tie(0), cout.tie(0);
cout.setf(ios::fixed), cout.precision(20);
 //freopen("input.in", "r", stdin);
// freopen("output.out", "w", stdout)
 int step;
 step = 1;
  for (int i = 1; i <= step; i++){
         solve();
    }
}
