#define _CRT_SECURE_NO_WARNINGS
#include<bits\stdc++.h>

using namespace std;

#define Files


#define rdi(i)          scanf("%d", &i)
#define rdii(i, j)      scanf("%d%d", &i, &j)
#define rep(i, v)       for(int i=0;i<v.size();++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define all(v)          ((v).begin()), ((v).end())
#define clr(v, d)       memset(v, d, sizeof(v))
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
typedef unsigned long long   ull;
const ll OO = 1e8;
const ll OOL = 1e16;
const ll MOD = 1e9 + 7;

#define pb                  push_back
#define MP                  make_pair
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef pair<int, int>    pii;
typedef pair<ll, ll>      pll;
typedef vector<pair<int, int> > vii;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
typedef vector<ll>        vl;
typedef vector<vector<ll> >     vvl;
typedef vector<pair<ll, ll> >   vll;

ull gcd(ull a, ull b) { return (b == 0 ? a : gcd(b, a % b)); }
ull lcm(ull a, ull b) { return (a * (b / gcd(a, b))); }
ull power(ull a, ull b){ if (b == 0) return 1; ull ans = power(a, b / 2); ans = (ans * ans) % MOD; if (b & 1) ans = (ans * a) % MOD; return ans; }
typedef pair<ll, pair<ll, ll> > pp;

int n, m;
string user[111];
map<string, int> idx;
int assigned[111];
set<int> G[111];
string msg[111];

bool valid(char c){
	if (c >= 'a' && c <= 'z') return 1;
	if (c >= 'A' && c <= 'Z') return 1;
	if (c >= '0' && c <= '9') return 1;
	return 0;
}


int memo[111][111];
int dp(int c, int lasti){
	if (c == m) return 1;

	int &ret = memo[c][lasti];
	if (ret != -1) return ret;

	ret = 0;
	if (assigned[c] != -1){
		if (lasti == assigned[c]) return ret = 0;
		return ret = dp(c + 1, assigned[c]);
	}
	lp(i, n){
		if (G[c].count(i) || lasti == i) continue;
		ret = dp(c + 1, i);
		if (ret) break;
	}
	return ret;
}

void path(int c, int lasti){
	if (c == m) return;

	int ret = 0;
	if (assigned[c] != -1){
		cout << user[assigned[c]] << msg[c] << endl;
		path(c + 1, assigned[c]);
		return;
	}
	lp(i, n){
		if (G[c].count(i) || lasti == i) continue;
		ret = dp(c + 1, i);
		if (ret == 0) continue;
		cout << user[i] << msg[c] << endl;
		path(c + 1, i);
		return;
	}
}

int main() {
#ifdef Filesx
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif
	ios::sync_with_stdio(0);

	int t; cin >> t;
	while (t--){
		clr(assigned, -1);
		cin >> n;
		lp(i, 111) G[i].clear();
		clr(memo, -1);
		idx.clear();
		lp(i, n){
			cin >> user[i];
			idx[user[i]] = i;
		}
		cin >> m;
		cin.get();
		lp(j, m){
			string s;
			getline(cin, s);
			if (s[0] == '?'){
				string name;
				msg[j] = s.substr(1);
				lpi(i, 2, s.size()){
					if (valid(s[i])){
						name.push_back(s[i]);
					}
					else{
						if (name.size() > 0 && idx.count(name)) G[j].insert(idx[name]);
						name.clear();
					}
				}
				if (name.size() > 0 && idx.count(name) != 0) G[j].insert(idx[name]);
			}
			else{
				string name;
				rep(i, s){
					if (s[i] == ':'){
						msg[j] = s.substr(i);
						break;
					}
					name.push_back(s[i]);
				}
				assigned[j] = idx[name];
			}
		}
		if (dp(0, 110) == 0){
			cout << "Impossible" << endl;
			continue;
		}
		path(0, 110);
	}

	return 0;

}