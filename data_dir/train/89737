#include <iostream>
#include<algorithm>
#include<vector>
#include<map>
using namespace std;



long double ax, ay, bx, by, tx, ty;
long double d[2][2][100500];
int n;
long double a[100500], b[100500], t[100500];
vector < pair<long double, long double> > vec;
long double dis(long double a, long double b, long double c, long double d)
{
	return sqrt((a - c)*(a - c) + (b - d)*(b - d));
}

long double solve(int i, int adi, int bera)
{
	if (i == n)
	{
		if (adi || bera) return 0;
		else return 1LL << 50;
	}

	if (d[adi][bera][i] != -1.0) return d[adi][bera][i];
	long double sum = 1LL << 50;
	pair<long double, long double> p;
	p = vec[i];
	if (!adi)
	{
		sum = min(sum, a[i] + t[i] + solve(i + 1, 1, bera));
	}
	if (!bera)
	{
		sum = min(sum, b[i] + t[i] + solve(i + 1, adi, 1));
	}

	sum = min(sum, 2 * t[i] + solve(i + 1, adi, bera));
	return  d[adi][bera][i] = sum;
}

int main()
{
	cin >> ax >> ay >> bx >> by >> tx >> ty;
	cin >> n;
	for (int i = 0; i < 2; i++)
		for (int j = 0; j < 2; j++)
			for (int k = 0; k < 100100; k++) d[i][j][k] = -1;
	for (int i = 0; i<n; i++)
	{
		long double x, y;
		cin >> x >> y;
		a[i] = dis(x, y, ax, ay);
		b[i] = dis(x, y, bx, by);
		t[i] = dis(x, y, tx, ty);
		vec.push_back(make_pair(x, y));
	}

	printf("%.10f\n", solve(0, 0, 0));
	return 0;
}