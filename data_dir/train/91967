#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define re return
#define ll long long
#define ull unsigned ll
#define ld long double
#define s second
#define f first
#define S second
#define F first
#define pi acosl(-1)
#define oo (int)1e9
#define OO 1e18
#define EPS 1e-9
#define Endl '\n'
#define all(v) (v).begin(),(v).end()
#define FX(n) fixed<<setprecision(n)
#define mm(o,k) memset(o,k,sizeof o)
#define IO ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
using namespace std;
const int N = 1e5 + 5, M = 6 * N + 5;
const int range = N;

int n, a[N];
map<int, ll> cnt;


int LG[range],sparse[19][range];
void build_sparse(){
    LG[0]=-1;
    for(int i=0;i<range;++i){
        LG[i+1]=LG[i]+!(i&(i+1));
        sparse[0][i]=a[i];
    }
    for(int lg=1;(1<<lg)<=range;++lg){
        for(int i=0;i+(1<<lg)<=range;++i){
            int I=sparse[lg-1][i];
            int J=sparse[lg-1][i+(1<<(lg-1))];
            sparse[lg][i]=__gcd(I,J);
        }
    }
}
int query(int l,int r){
    if(l>r)swap(l,r);
    int sz=r-l+1;
    int lg=LG[sz];
    int i=sparse[lg][l];
    int j=sparse[lg][r-(1<<lg)+1];
    re __gcd(i,j);
}

int bs(int bdaya, int fen, int kam){
    int l = fen, r = n - 1, mid, ret = -1;
    while(l <= r){
        mid = (l + r) / 2;
        if(query(bdaya, mid) != kam)
            r = mid - 1;
        else{
            ret = mid;
            l = mid + 1;
        }
    }
    assert(ret != -1);
    re ret;
}

void pre(){

    for(int i = 0 ; i < n ; ++i){
        int nw = a[i], idx = i, lst = i;
        while(true){
            idx = bs(i, lst, nw);
            cnt[nw] += (1LL * (idx - lst + 1));
            if(idx == n - 1)break;
            lst = idx + 1;
            nw = query(i, lst);
        }
    }

}

int main()
{
    scanf("%d", &n);
    for(int i = 0 ; i < n ; ++i)
        scanf("%d", a + i);
    build_sparse();
    pre();
    int q;
    scanf("%d", &q);
    while(q--){
        int x;
        scanf("%d", &x);
        printf("%lld\n", cnt[x]);
    }
    re 0;
}