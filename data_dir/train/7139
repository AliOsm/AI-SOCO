#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

//#define PB push_back
#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

#define rick 0
#define morty 1
#define lose 0
#define win 1

int n;
int k[2];
int s[2][7005];
int b[2][7005];
int dp[2][7005];

void dfs( int player, int node )
{
	if( dp[player][node] == lose ) {
		for( int i = 0; i < k[player^1]; ++i ) {
			int node2 = node-s[player^1][i];
			if( node2 <= 0 ) node2 += n;
			if( dp[player^1][node2] == -1 ) {
				dp[player^1][node2] = win;
				dfs( player^1, node2 );
			}
		}
	}
	else if( dp[player][node] == win ) {
		for( int i = 0; i < k[player^1]; ++i ) {
			int node2 = node-s[player^1][i];
			if( node2 <= 0 ) node2 += n;
			if( dp[player^1][node2] == -1 ) {
				++b[player^1][node2];
				if( b[player^1][node2] == k[player^1] ) {
					dp[player^1][node2] = lose;
					dfs( player^1, node2 );
				}
			}
		}
	}
}

int main()
{
	optimize();
	mem(dp, -1);
	cin >> n;
	for( int i = 0; i < 2; ++i ) {
		cin >> k[i];
		for( int j = 0; j < k[i]; ++j ) {
			cin >> s[i][j];
		}
	}
	dp[rick][1] = dp[morty][1] = lose;
	dfs(rick, 1);
	dfs(morty, 1);
	for( int i = 2; i <= n; ++i ) {
		if( dp[rick][i] == -1 ) cout << "Loop ";
		else if( dp[rick][i] == win ) cout << "Win ";
		else if( dp[rick][i] == lose ) cout << "Lose ";
	}
	cout << endl;
	for( int i = 2; i <= n; ++i ) {
		if( dp[morty][i] == -1 ) cout << "Loop ";
		else if( dp[morty][i] == win ) cout << "Win ";
		else if( dp[morty][i] == lose ) cout << "Lose ";
	}
	cout << endl;
}





















