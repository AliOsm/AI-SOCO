#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((ll)(1e16))
#define pi (2*acos(0))
#define mp make_pair
#define M ((int)(998244353))
#define xx first
#define yy second
#define NN ((ll)(1e6+2))
#define N ((ll)(1e5+5))
#define eps 0
#define log 15
#define pb push_back
#define MOD 998244353


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long lu;

typedef tree < ll,  null_type,  less < ll >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;

char s[N], str[N];

int mark[30];

ll a[N], dp[N][34];

ll call(int i, int mask, int n)
{
    if(i==n){
        if((1<<4)&mask) return MAX;
        return 0;
    }
    if(dp[i][mask]!=-1) return dp[i][mask];
    dp[i][mask] = MAX;
    int j = mark[s[i]-'a'];
    if(j==10) dp[i][mask] = call(i+1,mask,n);
    else if((1<<j)&mask){
        dp[i][mask] = min(dp[i][mask],call(i+1,mask|(1<<(j+1)),n));
        dp[i][mask] = min(dp[i][mask],call(i+1,mask,n) + a[i]);
    }
    else dp[i][mask] = min(dp[i][mask],call(i+1,mask,n));
    return dp[i][mask];
}

int main()
{
    int n;
    scanf("%d %s",&n,s);
    for(int i = 0; i<28; i++) mark[i] = 10;
    mark['h'-'a'] = 0;
    mark['a'-'a'] = 1;
    mark['r'-'a'] = 2;
    mark['d'-'a'] = 3;
    for(int i = 0; i<n; i++) scanf("%lld",&a[i]);
    /*int now = 0, j = 0;
    for(int i = 0; i<n; i++){
        if(mark[s[i]-'a']<=now){
            now++;
            str[j] = s[i];
            a[j] = a[i];
            j++;
        }
    }
    str[j] = '\0';
    n = j;
    int c = 0;
    for(int i = 0; i<n; i++){
        s[c] = str[i];
        a[c] = a[i];
        int ii = -1;
        for(int j = i+1; j<n; j++){
            if(str[j]==str[i])
            {
                a[c] += a[j];
            }
            else{
                ii = j-1;
                break;
            }
        }
        if(ii==-1) i = n-1;
        else i = ii;
        c++;
    }
    s[c] = '\0';
    n = c;
    ///printf("%s\n",s);
    ///for(int i = 0; i<n; i++) cout<<a[i]<<endl;
    */
    memset(dp,-1,sizeof dp);
    printf("%lld\n",call(0,1,n));
    return 0;
}
