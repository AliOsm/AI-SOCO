#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#define f first
#define s second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define ll long long
#define ld double
#define ull unsigned long long
#define PI pair < int, int > 
#define hash puper123

const int N = 1e6 + 123;
const int M = 123;
const ld Pi = acos(-1);
const ll Inf = 1e18;
const int inf = 1e9;
const int mod = 1e9 + 7;
const int Sz = 501;
const int MOD = 1e9 + 7;

void add(int &a, int b) {
  a += b;
  if (a >= mod) a -= mod;
}
int mult(int a, int b) {
  return 1ll * a * b % mod;
}
int sum(int a, int b) {
  add(a, b);
  return a;
}

int n, q, mn[N], dp[N], mini, par[N];
vector < int > g[N];

void dfs(int v, int pr) {
  mn[v] = v;
  par[v] = pr;
  if (pr != -1) mn[v] = min(mn[v], mn[pr]);
  for (auto to : g[v]) {
    if (to != pr) dfs(to, v);
  }
}
bool used[N];
void upd(int x) {
  while(!used[x]) {
    used[x] = 1;
    mini = min(mini, x);
    x = par[x];
  }
}
void solve() {
  cin >> n >> q;
  for (int i = 1, u, v;i < n;i++) {
    cin >> u >> v;
    g[u].pb(v);
    g[v].pb(u);
  }
  for (int i = 1;i <= n;i++) mn[i] = inf;
  for (int it = 0, t, x, lst = 0;it < q;it++) {
    cin >> t >> x;
    x = (x + lst) % n + 1;
    if (t == 1) {
      if (it == 0) {
        dfs(x, -1);
        mini = x;
        used[x] = 1;
      }
      else upd(x);
    } else {
      lst = min(mn[x], mini);
      cout << lst << "\n";
    }
  }
}  

int main() {
  #ifdef wws
   freopen("in", "r", stdin);
 //  freopen("out", "w", stdout);
  #endif 
  ios_base::sync_with_stdio(0);
  int tt = 1; 
  while(tt--) solve();
  return 0;
}