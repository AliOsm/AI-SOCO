#pragma GCC optimize("O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4")
#pragma GCC optimize("trapv")
#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;


#define ll long long
#define ld long double
#define pb push_back
#define f first
#define s second
#define y1 bbp
#define sz size()
int const N=1e6+3,inf=1e9+7,md=998244353,p=47;
ll n,qq,ans,k,m,x,q,x1,y1;
string s;
ll hs[N],hs1[N],st[N];
bool pr(ll l,ll r)
{
    ll x=(hs[r]-hs[l-1]+inf)%inf;
    ll y=(hs1[l]-hs1[r+1]+inf)%inf;
    x=(x*st[n-1-r])%inf;
    y=(y*st[l-1])%inf;
//    cout<<x<<" "<<y<<endl;
    if (x==y) return 1;
    return 0;
}
main()
{
    srand(time(0));
//    freopen("parties.in","r",stdin);freopen("parties.out","w",stdout);
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin>>qq;
    st[0]=1;
    for (int i=1;i<=N-3;i++)
    {
        st[i]=st[i-1]*p;
        st[i]%=inf;
    }
    for (int _=0;_<qq;_++)
    {
        cin>>s;
        s='#'+s;n=s.sz;
        ll l=0,r=n;
        while(l<=r && s[l+1]==s[r-1])
        {
            l++,r--;
        }
        if (l+1>=r)
        {
            for (int i=1;i<n;i++) cout<<s[i];
            cout<<endl;
            continue;
        }
        for (int i=1;i<n;i++)
        {
            hs[i]=(hs[i-1]+(s[i]*st[i]))%inf;
        }
        for (int i=n-1;i>0;i--)
        {
            hs1[i]=(hs1[i+1]+(s[i]*st[n-i]))%inf;
        }
        x1=0;y1=0;
        for (int i=l+1;i<r;i++)
        {
            if (pr(l+1,i)) x1=i-l;
        }
        for (int i=r-1;i>l;i--)
        {
            if (pr(i,r-1)) y1=r-i;
        }
        for (int i=1;i<=l;i++) cout<<s[i];
//        cout<<l<<" "<<r<<endl;
        if (x1>y1)
        {
            for (int i=l+1;i<=l+x1;i++) cout<<s[i];

        } else
        {
            for (int i=r-y1;i<r;i++) cout<<s[i];
        }
        for (int i=r;i<n;i++) cout<<s[i];
        cout<<endl;
    }

}
