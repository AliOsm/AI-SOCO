#include <cstdio>
#include <iostream>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <ctime>
#include <queue>
#include <map>
#include <list>
#include <fstream>
#include <iomanip>
#include <set>

#define For(i,a,b) for(int (i)=(a);(i)<=int(b);(i)++)
#define Ford(i,a,b) for(int (i)=(a);(i)>=int(b);(i)--)
#define Rep(i,a,b) for(int (i)=(a);(i)<int(b);(i)++)
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )
#define fi first
#define se second
#define dbg(x) cerr<<#x<<":"<<x<<endl
#define dg(x) cerr<<#x<<":"<<x<<' '
#define fill(x,y) memset(x,y,sizeof x)
#define all(x) x.begin(),x.end()
#define bin(x) (1LL<<(x))
#define gcd __gcd
#define pb push_back 
 
using namespace std;
 
typedef long long Lint;
typedef pair<int,int> ii;
typedef pair<Lint,Lint> Lii;
typedef pair<int,ii> iii;
 
const int inf = 1e9+5;
const Lint Linf = 1e18+5;
 
template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T lcm(T a,T b){
	return a*b/gcd(a,b);
}
 
int read(){
int res = 0 ;
int neg ;
while(true){
char ch = getchar();
if((ch>='0' && ch<='9') || ch=='-'){
if(ch=='-') neg = -1;
else neg = 1 , res = ch-'0';
break;
}
}
while(true){
char ch = getchar();
if(ch>='0' && ch<='9') res*=10 , res+=ch-'0';
else break;
}
return res*neg;
}
void print(int x){
 
if(x==0){
putchar('0');
putchar('\n');
return ;
}
static char buf[20];
int nn = 0 ;
if(x<0) putchar('-') , x*=-1;
while(x){
buf[++nn] = x%10+'0';
x/=10;
}
Ford(i,nn,1) putchar(buf[i]);
putchar('\n');
}
 
const int MAXN = 1e5+5; 

list<ii> W[MAXN];   
Lint dp[MAXN];  
 
Lint f(int node,int pre){
	foreach(it,W[node])
		if(it->fi!=pre){
			umax(dp[node],f(it->fi,node)+it->se);
		}
	return dp[node];	
} 
 
int main(){
	
	int N = read();

	Lint sum = 0LL;

	For(i,1,N-1){
		int u = read() , v = read() , c = read();
		W[u].pb(ii(v,c));
		W[v].pb(ii(u,c));
		sum+=c+c;
	}
	
	cout << sum-f(1,-1) << endl;
	
	return 0; 
}
