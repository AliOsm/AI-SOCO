//Pham Huu Canh
//B. Bear and Compressing
//Algorithm:
//Complexity:
//AC:

#include <iostream>
#include <fstream>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

#define max64 9223372036854775807LL
#define max32 2147483647
#define maxty 1001001001
#define max16 32767
#define EPS 1e-8
#define ll long long
#define ull unsigned long long
#define pb push_back
#define mp make_pair
#define PQ priority_queue
#define LB lower_bound
#define UB upper_bound
#define fi first
#define se second
#define timmax(x, y)    ((x) > (y) ? (x) : (y))
#define timmin(x, y)    ((x) < (y) ? (x) : (y))
#define fori(i, n)      for((i) = 0; (i) < (n); (i)++)
#define ford(i, n)      for((i) = (n-1); (i) >= 0; (i)--)
#define fore(i, v)      for(typeof(v.begin()) i = v.begin(); i != v.end(); i++)
#define repi(i, a, b)   for((i) = (a); (i) <= (b); (i)++)
#define repd(i, a, b)   for((i) = (a); (i) >= (b); (i)--)
#define all(tmpv)      tmpv.begin(), tmpv.end()

#define fii "b.inp"
#define foo "b.out"
#define MOD 1000000007
#define inf 1000111000111000111LL

using namespace std;

typedef pair<int, int> II;
typedef vector<int> VI;

int val[150];
ll dp[1000000];
char s[50][5], t[50][5];
int n, nq;

ll dfs(int x, int len){
	if (len == n)		return 1;
	if (dp[x] != -1)	return dp[x];
	dp[x] = 0;
	int i;
	fori(i, nq)
		if (x % 10 == t[i][0]){
			int newx = x/10;
			newx = newx * 100 + s[i][1] * 10 + s[i][0];
			ll temp = dfs(newx, len+1);
			dp[x] += temp;
		}
	return dp[x];
}

void input(){
	int i;

	val['a'] = 1, val['b'] = 2, val['c'] = 3, val['d'] = 4, val['e'] = 5, val['f'] = 6;
	
	scanf("%d %d", &n, &nq);
	fori(i, nq){
		scanf("%s %s", &s[i], &t[i]);
		s[i][0] = val[s[i][0]];
		s[i][1] = val[s[i][1]];
		t[i][0] = val[t[i][0]];
	}
	
	memset(dp, -1, sizeof(dp));
	
	printf("%I64d\n", dfs(1, 1));
}

int main()
{
    #ifndef ONLINE_JUDGE
        freopen(fii,"r",stdin);
        freopen(foo,"w",stdout);
    #endif

    input();

    return 0;
}
