#include<bits/stdc++.h>
using namespace std;

using ll = long long;
const int N = 2e5 + 5 , M = 1e6 + 6;

struct query {
    int l , r , dx,  L_block;

    query(){
        l = r = dx = 0;
    }
}Q[N];

int n , q , block;
ll ans[N];
int a[N];

bool cmp(query a , query b){
    if(a.L_block == b.L_block)return a.r < b.r;
    return a.l < b.l;
}

int freq[M];
ll res = 0;

void add(int dx){
    int x = a[dx];

    res -= 1ll * freq[x] * freq[x] * x;
    freq[x] ++;
    res += 1ll * freq[x] * freq[x] * x;
}

void del(int dx){
    int x = a[dx];

    res -= 1ll * freq[x] * freq[x] * x;
    freq[x] --;
    res += 1ll * freq[x] * freq[x] * x;
}

main(){

    scanf("%d %d" , &n , &q);
    block = sqrt(n);

    for(int i = 1 ; i <= n ; i ++){
            scanf("%d" , &a[i]);
    }

    for(int i = 1 ; i <= q ; i ++){
        scanf("%d %d" , &Q[i].l , &Q[i].r);
        Q[i].dx = i;
        Q[i].L_block = Q[i].l / block;
    }

    sort(Q + 1 , Q + q + 1 , cmp);

    int L = 1 , R = 0;
    for(int i = 1 ; i <= q ; i ++){

        while(R < Q[i].r)add(++ R);
        while(R > Q[i].r)del(R --);
        while(L < Q[i].l)del(L ++);
        while(L > Q[i].l)add(-- L);

        ans[Q[i].dx] = res;
    }

    for(int i = 1 ; i <= q ; i ++){
        printf("%I64d\n" , ans[i]);
    }

    return 0;
}
