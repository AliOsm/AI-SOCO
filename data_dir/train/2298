#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 1e5 + 7;
const int K = 102;

int n, m, k, s, T[N];
vector < int > G[N];
int cost[N][K];

void bfs(int t)
{
    queue < int > Q;
    for(int i = 1; i <= n; i++)
    {
        if(T[i] == t)
            Q.push(i);
        else
            cost[i][t] = N;
    }
    while(!Q.empty())
    {
        int v = Q.front();
        Q.pop();
        DBG(t, v);
        for(auto u: G[v])
        {
            if(cost[u][t] > cost[v][t] + 1)
            {
                cost[u][t] = cost[v][t] + 1;
                Q.push(u);
            }
        }
    }
}

int main()
{
    _upgrade
    cin >> n >> m >> k >> s;
    for(int i = 1; i <= n; i++)
        cin >> T[i];
    for(int i = 0; i < m; i++)
    {
        int a, b; cin >> a >> b;
        G[a].push_back(b);
        G[b].push_back(a);
    }
    for(int i = 1; i <= k; i++)
        bfs(i);
    
    for(int i = 1; i <= n; i++)
    {
        sort(cost[i] + 1, cost[i] + k + 1);
        int ans = 0;
        for(int j = 1; j <= s; j++)
            ans += cost[i][j];
        cout << ans << " ";
    }
	return 0;
}
