#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <deque>
#include <map>
#include <set>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; }
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; }
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

const int MAXN = 201*1000;

string s, t;
int l[MAXN], r[MAXN];

int main() {
	cin >> s >> t;
	for (int i = 0, m = 0; i < Size(s); i++) {
		if (m < Size(t) && s[i] == t[m]) m++;
		l[i+1] = m;
	}
	for (int i = Size(s)-1, m = Size(t)-1; i >= 0; i--) {
		if (m >= 0 && s[i] == t[m]) m--;
		r[i+1] = m;
	}
	map<char, int> last;
	int pt = 0;
	FOR(i, 0, Size(s)) {
		while (pt < l[i+1]) last[t[pt]] = pt, pt++;
		if (!in(last, s[i]) || last[s[i]] <= r[i+1]) {
			cout << "No" << endl;
			return 0;
		}
	}
	cout << "Yes" << endl;
	return 0;
}

