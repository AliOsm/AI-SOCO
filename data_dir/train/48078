/*input
4
1 2
2 3
2 4
2 1 3 4 
*/
#include <iostream>
#include <cstdio>
#include <vector>
#include <functional>
#include <cmath>
#include <cstring>
#include <utility>
#include <algorithm>
#include <iomanip>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <bitset>
#include <list>
#include <cstdlib>
#include <list>
#include <cassert>
#include <ctime>
#include <fstream>
#include <sstream>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define ll long long
#define N 100005
// const int INF = 1e18;

int n;
int col[N];
vector<vector<int> > a(N);
pair<int, int> root = mp(-1, -1);

void dfs(int u, int p) {
	if (root != mp(-1, -1)) return;
	for (int i = 0; i < a[u].size(); i++) {
		int v = a[u][i];
		if (v == p) continue;
		if (col[v] != col[u]) {
			root = mp(u, v);
			return;
		}
		dfs(v, u);
	}
}

bool dfs2(int u, int p) {
	for (int i = 0; i < a[u].size(); i++) {
		int v = a[u][i];
		if (v == p) continue;
		if (col[v] != col[u]) return false;
		if (dfs2(v, u) == false) return false;
	}
	return true;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n;
	for (int i = 1; i <= n - 1; i++) {
		int u, v;
		cin >> u >> v;
		a[u].push_back(v);
		a[v].push_back(u);
	}
	for (int i = 1; i <= n; i++) cin >> col[i];
	dfs(1, 1);
	if (root == mp(-1, -1)) {
		cout << "YES" << endl;
		cout << 1 << endl;
		return 0;
	}
	bool ok = true;
	for (int i = 0; i < a[root.fi].size(); i++) {
		ok = min(ok, dfs2(a[root.fi][i], root.fi));
	}
	if (ok) {
		cout << "YES" << endl;
		cout << root.fi << endl;
		return 0;
	}
	ok = true;
	for (int i = 0; i < a[root.se].size(); i++) {
		ok = min(ok, dfs2(a[root.se][i], root.se));
	}
	if (ok) {
		cout << "YES" << endl;
		cout << root.se << endl;
		return 0;
	}
	cout << "NO" << endl;
}