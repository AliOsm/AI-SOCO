#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <cstdlib>
#include <utility>
#include <memory.h>
#include <cassert>
#include <iterator>
#include <bitset>
#include <iomanip>
#include <complex>
#include <queue>
#include <ctime>
#include <deque>
#include <stack>
#include <set>
#include <map>
 
using namespace std;
 
#define pb push_back
#define mp make_pair
#define F first
#define S second

using namespace std;

const int N = 100500;
          
string s;
string add;
bool f[N][2];

void go(char a, char b, char c) {
	add = "";
	add += a;
	add += b;
	add += c;
}

void go(char a, char b) {
	add = "";
	add += a;
	add += b;
}

int main() {
  //freopen("input.txt","r",stdin);
  //freopen("output.txt","w",stdout);
  cin >> s;                  
  int n = (int)s.size();
  s = "0" + s;
 	if (n < 7) {
 		puts("0");
 		return 0;
 	}
 	f[n - 1][0] = true;
 	if (n - 2 >= 6) f[n - 2][1] = true;
 	set<string> have;
 	add = "";
 	add += s[n - 1];
 	add += s[n];
 	if (n - 1 >= 6) have.insert(add);    
 	add = s[n - 2] + add;
 	if (n - 2 >= 6) have.insert(add);
 	for (int i = n - 1; i >= 6; --i) {
 		for (int j = 0; j < 2; j++) {
 			if (f[i][j]) {
 				if (j == 0) {
 					if (i - 2 >= 6) {
 						if (s[i - 2] != s[i] || s[i - 1] != s[i + 1]) {
 							go(s[i - 2], s[i - 1]);
 							have.insert(add);
 							f[i - 2][0] = true;
 						}
 					}
 					if (i - 3 >= 6) {                       							
 						go(s[i - 3], s[i - 2], s[i - 1]);
 						have.insert(add);
 						f[i - 3][1] = true;
 					}
 				} else {
 					if (i - 2 >= 6) {            							
 						go(s[i - 2], s[i - 1]);
 						have.insert(add);
 						f[i - 2][0] = true;
 					}
 					if (i - 3 >= 6) {
 						if (s[i - 3] != s[i] || s[i - 2] != s[i + 1] || s[i - 1] != s[i + 2]) {
 							go(s[i - 3], s[i - 2], s[i - 1]);
 							have.insert(add);
 							f[i - 3][1] = true;
 						}
 					}
 				}
 			}
 		}	
 	}
 	printf("%d\n", (int)have.size());
 	set<string> :: iterator it;
 	for (it = have.begin(); it != have.end(); it++) {
 		cout << *it;
 		puts("");
 	}
  return 0;
}