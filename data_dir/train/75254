#include <bits/stdc++.h>
using namespace std;

#define ii pair<int, int>
#define D(x) cout << (x) << endl;
#define value first
#define index second
int n;
int op = 0;
int minimum = 1e9;
int history[10000][100];
priority_queue<ii> best_ratings;

void print(){
  cout << minimum << endl;
  cout << op << endl;
  for(int i = 0; i < op; i++){
    for(int j = 0; j < n; j++){
      cout << history[i][j];
    }
    cout << endl;
  }
}

void read(){
  cin >> n;
  for(int i = 0; i < n; i++){
    int a;
    cin >> a;
    minimum = min(minimum, a);
    best_ratings.push(ii(a, i));
  }
}

int main(){
  read();

  while(1){
    if(best_ratings.top().value == minimum){
      break;
    }

    vector<ii> chosen(1, best_ratings.top());
    vector<ii> choose(1, best_ratings.top());
    best_ratings.pop();
    int s = 1;
    int cnt = 1;

    while(1){
      if(best_ratings.top().value == choose[0].value){
        choose.push_back(best_ratings.top());
        best_ratings.pop();
        cnt++;
      }
      else{
        break;
      }
    }

    for(int i = 1; i < choose.size(); i++){
      best_ratings.push(choose[i]);
    }

    for(int i = 1; i < ((cnt % 5 == 1)? 4 : 5); i++){
      if(best_ratings.top().value == chosen[0].value){
        chosen.push_back(best_ratings.top());
        chosen.back().value--;
        s++;
        best_ratings.pop();
      }
      else{
        break;
      }
    }

    chosen[0].value--;

    if(s == 1){
      chosen[s++] = ii(best_ratings.top().value - 1, best_ratings.top().index);
      best_ratings.pop();
    }

    for(int i = 0; i < s; i++){
      chosen[i].value = max(chosen[i].value, 0);
      history[op][chosen[i].index] = 1;
      minimum = min(minimum, chosen[i].value);
      best_ratings.push(chosen[i]);
    }

    op++;
  }

  print();
}
