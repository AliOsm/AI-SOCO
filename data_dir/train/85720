#include<iostream>
#include<algorithm>
#include<map>
#include<bitset>
#include<set>
#include<vector>
#include<queue>
#include<deque>
#include<stack>
#include<string>
#include<string.h>
#include<cstring>
#include<bitset>
#include<locale>
#include<cmath>
#include<iomanip>
#include<math.h>
#include<bitset>
using namespace std;
#define ll  long long int
#define ld long double
#define PI 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844
int GCD(int x, int y) { return !y ? x : GCD(y, x % y); }
int LCM(int x, int y){ return x*y / GCD(x, y); }
ll ceilDivision(ll dividend, ll divisor){ return (dividend + divisor - 1) / divisor; }
#define Size 10000000
bitset<Size>prime;
vector<ll>Primes;
vector<ll>numbers;
void Sieve()
{
    prime[0] = prime[1] = true;
    for (ll i = 4; i < Size; i += 2)
        prime[i] = true;
    for (int i = 3; i*i <= Size; i += 2)
        if (!prime[i])
            for (ll j = i*i; j < Size; j += i)
                prime[j] = true;
}
void GetPrimes()
{
    for (int i = 0; i < prime.size(); i++)
        if (!prime[i])
            Primes.push_back(i);
}
ll GET(ll number)
{
    ll counter,result=1;
    for (int i = 0; i < Primes.size() && number>1; i++)
    {
        counter = 0;
        while (number%Primes[i]==0)
            counter++,number/=Primes[i];
        result *= (counter + 1);
    }
    return result;
}
int main()
{
    int a, b, c;
    ll result = 0;
    cin >> a >> b >> c;
    Sieve();
    GetPrimes();
    for (int i = 1; i <= a; i++)
        for (int j = 1; j <= b; j++)
            for (int k = 1; k <= c; k++)
                numbers.push_back(i*j*k);
    for (int i = 0; i < numbers.size(); i++)
        result += GET(numbers[i]);
    cout << result << endl;
    return 0;
}