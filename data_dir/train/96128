#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <map>
#include <queue>
#include <set>
#include <iomanip>
#include <deque>
#include <cassert>
#include <ctime>
#include <cstring>
#include <cstdlib>
#include <chrono>
#include <ctime>
#include <random>
#include <stack>
#include <unordered_set>
#include <unordered_map>
#include <iterator>
#include <climits>
using namespace std;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
typedef long long ll;
typedef long double ld;
#define INF 2001001001
#define MOD 1000000007

string S;
int N,Q;
int arr[100001];
int convert[100001];
int tree[5][11][11][100001];
//letter: A-0, C-1, G-2, T-3
//length of string
//first index
//ind

void update(int a, int b, int c, int pos, int val){
  while (pos<=N){
    tree[a][b][c][pos]+=val;
    pos+=(pos&(-pos));
  }
}

int query(int a, int b, int c, int pos){
  int ans=0;
  while (pos>=1){
    ans+=tree[a][b][c][pos];
    pos-=(pos&(-pos));
  }
  return ans;
}

int main()
{
  //ios_base::sync_with_stdio(0);cin.tie(0);
  //freopen (".in","r",stdin);
  //freopen (".out","w",stdout);
  cin>>S;
  N=S.length();
  convert['A']=1; convert['C']=2; convert['G']=3; convert['T']=4;
  for (int i=0;i<N;i++)
    arr[i+1]=convert[S[i]];
  for (int i=1;i<=N;i++){
    //cout<<"INDEX: "<<i<<endl;
    for (int j=1;j<=10;j++){
      int k=(i-1)%j+1;
      //cout<<"UPDATE "<<arr[i]<<' '<<j<<' '<<k<<' '<<i<<endl;
      update(arr[i],j,k,i,1);
    }
  }
  cin>>Q;
  while (Q--){
    int type; cin>>type;
    if (type==1){
      int x; char c;
      cin>>x>>c;
      for (int i=1;i<=10;i++){
	int j=(x-1)%i+1;
	update(convert[c],i,j,x,1);
	update(arr[x],i,j,x,-1);
      }
      arr[x]=convert[c];
    }
    else{
      int l,r;
      string e;
      cin>>l>>r>>e;
      int n=e.length();
      int ans=0;
      for (int i=0;i<n;i++){
	int firstInd=(l+i-1)%n+1;
	//cout<<"QUERY "<<convert[e[i]]<<' '<<n<<' '<<firstInd<<' '<<l<<' '<<r<<endl;
	//	cout<<"res: "<<query(convert[e[i]],n,firstInd,r)<<' '<<query(convert[e[i]],n,firstInd,l-1)<<endl;
	ans+=query(convert[e[i]],n,firstInd,r)-query(convert[e[i]],n,firstInd,l-1);
      }
      cout<<ans<<endl;
    }
  }
  return 0;
}
