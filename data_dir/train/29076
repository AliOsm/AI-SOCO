#pragma comment(linker, "/stack:256000000")

#include <cstdio>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#include <cassert>
#include <queue>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define sz(v) (int)(v).size()
#define all(v) (v).begin(), (v).end()

int p[100100];
bool u[100100];

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	long long start = clock();
#endif
	//for (int len = 1; len <= 12; len++) {
	//	vector <int> p(len);
	//	REP(i, len) p[i] = i;
	//	do {
	//		bool OK = 1;
	//		REP(i, len) {
	//			if (p[p[i]] != len - 1 - i) {
	//				OK = 0;
	//				break;
	//			}
	//		}
	//		if (OK) {
	//			REP(i, len) cout << p[i] + 1 << " ";
	//			cout << endl;
	//		}
	//	} while (next_permutation(all(p)));
	//	cout << endl;
	//}
	int n;
	cin >> n;
	if (n == 1) {
		printf("1");
	} else if (n % 4 == 0 || n % 4 == 1) {
		for (int i = 1; i <= n; i++) {
			if (!u[i]) {
				int j = i;
				p[j] = i + 1;
				u[j] = 1;
				while (!u[p[j]]) {
					p[p[j]] = n - j + 1;
					j = p[j];
					u[j] = 1;
				}
			}
		}
		if (n % 2 == 1) {
			p[(n + 1) / 2] = (n + 1) / 2;
		}
		for (int i = 1; i <= n; i++) {
			printf("%d ", p[i]);
		}
	} else {
		puts("-1");
	}
#ifdef LOCAL
	fprintf(stderr, "\n\nTime: %.3lf\n\n", (clock() - start) / 1000.);
#endif
	return 0;
}