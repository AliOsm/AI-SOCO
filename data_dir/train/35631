#include <bits/stdc++.h>
#define all(x) (x).begin(),(x).end()
#define isz(x) (int)(x).size()
using ll = long long;
using vi = std::vector<int>;
using pii = std::pair<int,int>;
using vpii = std::vector<pii>;
using vvi = std::vector<vi>;
using li = std::list<int>;
using vli = std::vector<li>;
using msi = std::multiset<int>;
using vmsi = std::vector<msi>;
std::vector<msi*> kek;
std::vector<ll> sum;
ll solve(vpii& arr, int begin, int after) {
    kek.resize(after - begin);
    for (int i = 0; i < isz(kek); i++) {
        kek[i] = new msi{};
    }
    sum.assign(after - begin, 0);
    for (int i = begin; i < after; i++) {
        kek[arr[i].first - arr[begin].first]->insert(arr[i].second);
    }
    for (int i = 0; i < isz(kek); i++) {
        for (auto &it : *kek[i]) {
            sum[i] += it;
        }
    }
    ll answ = 0;
    for (int i = 0; i < isz(kek); i++) {
        assert(kek[i]->size());
        // we keep last item
        sum[i] -= *kek[i]->rbegin();
        kek[i]->erase(std::prev(kek[i]->end()));
        answ += sum[i];
        if (i+1 == isz(kek)) {
            assert(kek[i]->size() == 0);
            delete kek[i];
            break;
        }
        if (kek[i]->size() > kek[i+1]->size()) {
            std::swap(kek[i], kek[i+1]);
        }
        assert(kek[i]->size() <= kek[i+1]->size());
        kek[i+1]->insert(kek[i]->begin(), kek[i]->end());
        delete kek[i];
        sum[i+1] += sum[i];
    }
    return answ;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    int n; std::cin >> n;
    vi cnt(n), t(n);
    for (int i = 0; i < n; i++) {
        std::cin >> cnt[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> t[i];
    }
    vpii arr(n);
    for (int i = 0; i < n; i++) {
        arr[i] = pii(cnt[i], t[i]);
    }
    std::sort(all(arr));
    int i = 0;
    ll answ = 0;
    while (i < isz(arr)) {
        int j = i;
        while (j < isz(arr) && std::abs(arr[j].first - arr[i].first) <= j - i) j++;
        answ += solve(arr,i,j);
        i = j;
    }
    std::cout << answ << std::endl;
    return 0;
}