#include <cstdio>


int solve();

int main(int argc, char* argv[])
{
    
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif // online-judge
 
    
    solve();
    
    return 0;
}



#define N  105105

typedef long long ll;

struct pt{  ll x, y; } p[N], q[N];

pt operator - (pt a, pt b) { return { a.x - b.x, a.y - b.y } ; }
ll operator ^ (pt a, pt b) { return a.x * b.y - a.y * b.x; } 

int np, nq, n ;

bool lie_line(pt a, pt b, pt c)
{
    pt d = b - a, e = c - a;
    return (d ^ e ) == 0;
}

bool can_single_line(pt p[], int n)
{
    if ( n <= 2 ) {
        return true;
    }
    
    for(int i = 2; i < n ; ++ i)
    {
        if ( ! lie_line(p[0], p[1], p[i] ) )
        {
            return false;
        }
    }
    return true;
}

bool can_two_lines(pt p[], int n)
{
    //1. step. all lied single line.
    if (can_single_line(p, n)){
        return true;
    }
    
    
    //2. p[1] and p[0] lies single line
    nq = 0;
    for(int i = 0; i<n; ++i){
        if ( ! lie_line(p[0], p[1], p[i])){
            q[nq++] = p[i];
        }
    }
    
    //  and others lied 2-line.
    if (can_single_line(q, nq)){
        return true;
    }
    
    
    
    //3. p[0] and p[1] are not same line
    //3.1 p[0] - it single , and other single
    if (can_single_line( p + 1, n - 1 ) ){
        return true;
    }
    
    
    //3.2 
    int o_i = 0;
    for(int i = 0; i < n; ++i ) {
        if ( ! lie_line(p[0], p[1], p[i] ) ) {
            o_i = i;
            break;
        }
    }
    
    nq = 0;
    
    for(int i = 0; i < n; ++i){
        if ( ! lie_line(p[0], p[ o_i ], p[ i ] ) ) {
            q[nq++] = p[i];
        }
    }
    
    if (can_single_line(q, nq)){
        return true;
    }
    
    nq = 0;
    for(int i = 0; i < n; ++i){
        if ( ! lie_line(p[1], p[o_i], p[i] )  ) {
            q[nq++] = p[i];
        }
    }
    
    if (can_single_line(q, nq)){
        return true;
    }
    
    return false;
}

int solve()
{
    scanf("%d", &n);
    for(int  i = 0; i < n; ++i)scanf("%lld%lld", &(p[i].x), &(p[i].y) );
    
    if (can_two_lines(p, n ) ) {
        printf("YES\n"); 
    } else {
        printf("NO\n");
    }
    return 0;
}