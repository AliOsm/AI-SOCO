///****In the name of Allah, most Gracious, most Compassionate****//

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <ll, ll> pii;

#define ALL(a) a.begin(), a.end()
#define FastIO ios::sync_with_stdio(false); cin.tie(nullptr);cout.tie(nullptr)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

#define DBG(a) cout<< #a <<" --> "<<(a)<<endl
#define NL cout<<"\n"

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const ll N=3e6+9 ;
const ll oo=1LL<<50;

/// idea : "k790alex" in cf 11-4-19

//let f be the matrix representation of your trie

//let to[k] be the list of links for the k-th node

//let to[k][x] = m, the node who represents the son of k-th node using x-th character, m = -1 is there is not a link.

const ll MAX = N ;
const ll CHARSET = 2;
const ll ROOT = 0;
ll sz = 1;

ll to[MAX][CHARSET];

void init()
{
    sz=1;
    memset(to,-1,sizeof to);
}
bool ch(ll s,ll i)
{
    return s&(1LL<<i);
}

const ll TOT = 29;

void add(const ll s)
{
    ll node = ROOT;
    for (ll i = TOT; i >= 0; i--)
    {
        bool c = ch(s,i);
//        DBG(c);
        if ( to[node][c ] == -1 )
            to[node][ c ] = sz++;
        node = to[node][ c ];
    }
}
//Notes: Root node is at to[0] sz is the numbers of nodes currently in trie


ll ans(ll i,ll pos)
{

    if(pos==-1)
        return 0;
    ll ret= oo;
    ll zr = oo , on = oo;
    if(to[i][0]!=-1) zr =  ans(to[i][0]  , pos-1);
    if(to[i][1]!=-1) on =  ans(to[i][1]  , pos-1);

//    DBG(pos);
//    DBG(zr);
//    DBG(on);

    if(on < oo and zr < oo)
    {
        ret = min(ret , (1LL<<pos) + min(zr , on));
    }
    else
    {
        if(on == oo)
        {
            ret = min(ret , zr );
        }
        else  if( zr ==oo )
            ret = min(ret , on);
        else
            ret =0;
    }

    return ret;
}

int32_t main()
{
    FastIO;
    init();
    ll n;
    cin>>n;
    for(ll i=1;i<=n;i++)
    {
        ll a;
        cin>>a;
        add(a);
    }
    cout<<ans(ROOT , TOT)<<"\n";
}
