
#include <iostream>
#include <string>
using namespace std;

int main () {

 ios::sync_with_stdio(false);
 cin.tie(nullptr);

 int n, m;
 cin >> n >> m;
 const int maxn = (int)1e5 + 123;
 int isprime[maxn + maxn] = {0};
 for (int i = 2; i * i <= maxn; ++i) {
  if (!isprime[i]) {
   for (int j = i * i; j <= maxn; j += i) {
    isprime[j] = 1;
   }
  }
 }
 const int maxdiv = 10;  //6
 int divs[maxn + 123][maxdiv];
 int divamt[maxn + 123] = {0};
 for (int i = 2; i <= n; ++i) {
  int w = i;
  for (int d = 2; d * d <= w; ++d) {
   if (w % d == 0) {
    divs[i][divamt[i]++] = d;
    while (w % d == 0) { 
     w /= d;
    }
   }
  }
  if (w > 1) {
   divs[i][divamt[i]++] = w;
  }
 }
 int ison[maxn] = {0};
 int forprime[maxn] = {0};
 string s;
 int t;
 bool can;
 int breaker;
 while (m --> 0) {
  cin >> ws >> s;
  cin >> t;
  if (s[0] == '+'){
   if (ison[t]) {
    cout << "Already on" << "\n";
   } else {
    if(t == 1){
     cout << "Success" << "\n";
     ison[t] = 1;
     continue;
    }
    can = true;
    for(int r = 0; r < divamt[t]; ++r) {
     int prm = divs[t][r];
     if (forprime[prm] != 0) {  
      breaker = forprime[prm];
      can = false;
      break;
     }
    }
    if (can) { 
     cout << "Success" << "\n";
     for (int r = 0; r < divamt[t]; ++r){
      int prm = divs[t][r];
      forprime[prm] = t;
     } 
     ison[t] = 1;
    } else{
     cout << "Conflict with " << breaker << "\n";
    }
   }
  } else {
   if (!ison[t]) {
    cout << "Already off" << "\n";
   } else {
    cout << "Success" << "\n";
    if (t == 1) {
     ison[t] = 0;
     continue;
    }
    for (int r = 0; r < divamt[t]; ++r) {
     int prm = divs[t][r]; 
     forprime[prm] = 0;
    }
    ison[t] = 0;
   }  
  }
 }
 return 0;
}