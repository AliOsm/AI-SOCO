#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>   
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)5e6 + 123;
const ll inf = (ll)3e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;
const ld dx[] = {0, 2, -1, 1};
const ld dy[] = {0, 0, 1, 1};

int n, m, k;
int k1[1001], k2[1001], key1[1001][1001], key2[1001][1001];
int x[1001], y[1001], pos1[1001], pos2[1001], p[3][1001], sz[3][1001];
bool used[3][1001][1001], ok, was[1001];
string s1[1001], s2[1001];
vector <pii> g[1001];
vector <int> how1, how2;
set <string> name[3][1001];
queue <int> q;

int get (int v, int type) {
   if (v == p[type][v]) return v;
   return p[type][v] = get (p[type][v], type);
}

inline void unite (int a, int b, int id, int type) {
   a = get (a, type), b = get (b, type);
   if (a == b) return;
   if (!used[type][a][id] && !used[type][b][id]) return;
   ok = 1;
   if (sz[type][a] < sz[type][b]) swap (a, b);
   sz[type][a] += sz[type][b];
   p[type][b] = a;
   for (auto it : name[type][b]) name[type][a].in (it);
   for (int i = 1; i <= m; i ++) {
      used[type][a][i] |= used[type][b][i];
      used[type][b][i] |= used[type][a][i];
   }
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}
                      
inline void Solve () {
   cin >> n >> m >> k;
   for (int i = 1; i <= m; i ++) {
      cin >> x[i] >> y[i];
      g[x[i]].pb ({y[i], i});
      g[y[i]].pb ({x[i], i});
   }
   for (int i = 1; i <= n; i ++) {
      p[1][i] = p[2][i] = i;
      sz[1][i] = sz[2][i] = 1;
   }
   for (int i = 1; i <= k; i ++) {
      cin >> s1[i] >> pos1[i] >> k1[i];
      name[1][pos1[i]].in (s1[i]);
      for (int j = 1; j <= k1[i]; j ++) 
         cin >> key1[i][j], used[1][pos1[i]][key1[i][j]] = 1;
   }
   for (int i = 1; i <= k; i ++) {
      cin >> s2[i] >> pos2[i] >> k2[i];
      name[2][pos2[i]].in (s2[i]);
      for (int j = 1; j <= k2[i]; j ++) 
         cin >> key2[i][j], used[2][pos2[i]][key2[i][j]] = 1;
   }
   ok = 1;
   while (ok) {
      ok = 0;
      for (int i = 1; i <= m; i ++) {
         unite (x[i], y[i], i, 1);
         unite (x[i], y[i], i, 2);
      }   
   }
   for (int i = 1; i <= n; i ++) {
      how1.pb (get (i, 1));
      how2.pb (get (i, 2));
   }
   sort (all (how1));
   sort (all (how2));
   how1.resize (unique (all (how1)) - how1.begin ());
   how2.resize (unique (all (how2)) - how2.begin ());
   if (sz (how1) != sz (how2)) cout << "NO", exit (0);
   for (int i = 0; i < sz (how1); i ++) {
      bool is = 0;
      for (int j = 0; j < sz (how2); j ++) {
         if (was[j]) continue;
         bool can = 1;
         if (name[1][how1[i]] != name[2][how2[i]]) continue;
         for (int c = 1; c <= m; c ++)
            if (used[1][how1[i]][c] != used[2][how2[i]][c])
               can = 0;
         if (!can) continue;
         was[j] = 1;
         is = 1;
         break;               
      }
      if (!is) cout << "NO", exit (0);
   }
   cout << "YES";
   
}            

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
// cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
