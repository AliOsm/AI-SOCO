#include <bits/stdc++.h>
using namespace std;
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define lb lower_bound
#define ub upper_bound
#define x first
#define y second
#define in(n) int n = nxt()
#define sz(a) int(a.size())
inline int nxt() {
    int n;
    scanf("%d", &n);
    return n;
}
typedef long long ll;
typedef long double ld;
typedef pair<int, int> PII;
typedef pair<ll, ll> PLL;

template<class T>
T sqr(T a) {
    return a * a;
}


inline void solve() {
    string s1, s2;
    cin >> s1 >> s2;
    int f = 0;
    for (int i = 0; i < int(s1.length()); ++i) {
        f += (s1[i] == '+') ? 1 : -1;
    }
    const int N = 20;
    ld dp[2 * N];
    memset(dp, 0, sizeof(dp));
    dp[N] = 1.0;
    for (int i = 0; i < int(s2.length()); ++i) {
        ld t[2 * N];
        memset(t, 0, sizeof(t));
        if (s2[i] == '+') {
            for (int j = 1; j < 2 * N; ++j) {
                t[j] = dp[j - 1];
            }
        } else {
            if (s2[i] == '-') {
                for (int j = 0; j + 1 < 2 * N; ++j) {
                    t[j] = dp[j + 1];
                }
            } else {
                for (int j = 1; j + 1 < 2 * N; ++j) {
                    t[j] = (dp[j + 1] + dp[j - 1]) / 2;
                }
            }
        }
        memcpy(dp, t, sizeof(dp));
    }
    cout << setprecision(12) << fixed << dp[N + f] << "\n";
}

int main() {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
#else
//#define FILE "optimize"
//    freopen(FILE".in", "r", stdin);
//    freopen(FILE".out", "w", stdout);
#endif

    ios_base::sync_with_stdio(false);
    cin.tie(0);

    solve();
    return 0;
}
