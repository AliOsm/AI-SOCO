#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define ll long long
#define ull  unsigned long long
#define pb push_back

using namespace std;
using namespace __gnu_pbds;
typedef  tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
const int N = 1200000;
int ans[N], a[N];
vector < int > t[N];
void build(int v, int tl, int tr){
    if (tl == tr){
        t[v].pb(a[tl]);
        return;
    }
    int mid = (tl + tr) >> 1;
    build(v + v, tl, mid);
    build(v + v + 1, mid + 1, tr);
    for (auto i: t[v + v]) t[v].pb(i);
    for (auto i: t[v + v + 1]) t[v].pb(i);
    sort(t[v].begin(), t[v].end());
}
int query(int v, int tl, int tr, int l, int r, int x){
    if (l > r) return 0;
    if (l == tl && r == tr){
        int L = 0;
        int R = tr - tl + 2;
        while(R - L > 1){
            int mid = (R + L) / 2;
            if (t[v][mid - 1] >= x) R = mid; else L = mid;
        }
        return L;
    }
    int mid = (tl + tr) >> 1;
    return query(v + v, tl, mid, l, min(r, mid), x) + query(v + v + 1, mid + 1, tr, max(l, mid + 1), r, x);
}
main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    int n;
    cin >> n;
    for (int i = 1; i <= n; i++) cin >> a[i];
    build(1, 1, n);
    for (int i = 1; i < n; i++){
        for (int j = 1; i * (j - 1) + 2 <= n; j++){
            int l = i * (j - 1) + 2;
            int r = min(n, i * j + 1);
            ans[i] += query(1, 1, n, l, r, a[j]);
        }
    }
    for (int i = 1; i < n ; i++) cout << ans[i] << " ";
}
