#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <vector>
#include <queue>
#include <deque>
#include <utility>
#include <string>
#include <ext/rope>
#include <iterator>

using namespace std;
using namespace __gnu_cxx;

#define pb push_back
#define mp make_pair
#define F first
#define S second
#define sz size
#define scf scanf
#define prf printf       
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define gcd(a,b) __gcd(a,b)
#define getBit(x,i) ((x&(1<<i))!=0 ? 1 : 0)
#define For(i,n) for (int i = 0; i < n; ++i)
#define FOR(i,begin,end,move) for (int i = begin; i != end; i += move)

typedef long long ll;

const ll base = 1000000007LL;
const ll INF = 10000000000000LL;

struct point {
    int x;
    int y;
}; 
                                         
int n, m;  
int ans = 0;
int num[1011][1011] = {0};                           
int dist[1011][1011];
char matrix[1011][1011];
pair < int, int > para;
priority_queue < pair < int, int > > pq;            
point start, end;

int get(int x, int y)
{
    return num[x][y];
}                     

void go(int x, int y, int d)
{
    if (x < 0 || y < 0 || x >= n || y >= m)
        return;
    if (matrix[x][y] == 'T')
        return;
    if (dist[x][y] <= d)
        return;
    dist[x][y] = d;
    pq.push(mp(-d, get(x, y)));
}

void Dijkstra()
{
    pq.push(mp(0, get(end.x, end.y)));
    while (!pq.empty())
    {
        para = pq.top();
        pq.pop();        
        int num = para.S;
        int x = num / m;
        int y = num % m;
        int d = -para.F;
        if (dist[x][y] < d)
            continue;
        dist[x][y] = d;
        go(x + 1, y, d + 1);
        go(x - 1, y, d + 1);
        go(x, y + 1, d + 1);
        go(x, y - 1, d + 1);
    }
}

int main()
{                                                          
    scf("%d %d\n", &n, &m);
    int curNum = 0;
    For(i, n)
        For(j, m)
        {
            num[i][j] = curNum++;                    
            dist[i][j] = (int)1e9;
            scf("%c", &matrix[i][j]);
            if (matrix[i][j] == 'S')
            {
                start.x = i;
                start.y = j;
            }
            if (matrix[i][j] == 'E')
            {
                end.x = i;
                end.y = j;
            }
            if (j == m - 1 && i != n - 1)
                scf("\n");                                                  
        }               
    Dijkstra();
    For(i, n)
        For(j, m)
        {
            int cnt = (int)matrix[i][j] - 48;
            if (cnt >= 0 && cnt <= 9)
                if (dist[i][j] <= dist[start.x][start.y])
                    ans += cnt;
        }
    prf("%d\n", ans);
    return 0;
}
