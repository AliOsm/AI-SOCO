///*** One Last Try ***///
#include<bits/stdc++.h>
using namespace std;
#pragma comment(linker, "/stack:200000000")
#define ll long long int
#define inf ( int )( 1e9 + 1e9 )
#define mxs (int)( 1e6 + 10 )
#define md  int mid = ( l + r )>>1;
#define mod (ll)(1e9)+7
//int dx[]={+1,0,+0,-1};///Four Directions
//int dy[]={+0,-1,+1,+0};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
int t, n, m, j, ans, k,a, b, c, d, e,f ,sum , i,sz,cases ;
string s, s2, s3, s4;
map < int , set < int > > mp;
map < int , set < int > >::iterator it;
bool visited [ mxs ];
vector < int > graph [ mxs ];
int ar [ mxs ] , ar2 [ mxs ] , ar3 [ mxs ] , parent [ mxs ] ;
void brainfuck();
bool checker();
int main()
{
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>n;
    for ( i = 1 ; i <= n; i++ )
    {
        cin>>a;
        if ( !ar [ a ] )
        {
            mp [ 1 ].insert( a );
            ar [ a ] = 1;
        }
        else
        {
            b = ar [ a ];
            mp [ b ].erase( a );
            if ( mp [ b ].size() == 0 )mp.erase( b );
            mp [ ++b ].insert( a );
            ar [ a ] = b;
        }
        if ( checker() )ans = i;
    }
    cout<<ans;
}
bool checker()
{
    it = mp.begin();
    if ( mp.size() == 1 )
    {
        if ( it->first == 1 || it->second.size() == 1 )return 1;
        else return 0;
    }
    if ( mp.size() == 2 )
    {
        a = it->second.size();
        b = it->first;
        it++;
        if ( it->first - b == 1 && it->second.size() == 1 )return 1;
        if ( b == 1 && a == 1 )return 1;
        return 0;
    }
    return 0;
}
