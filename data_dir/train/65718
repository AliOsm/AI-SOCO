#include<iostream>
#include<algorithm>
#include<map>
#include<bitset>
#include<set>
#include<vector>
#include<queue>
#include<algorithm>
#include<math.h>
#include<cmath>
#include<deque>
#include<stack>
#include<string>
#include<string.h>
#include<cstring>
#include<iomanip>
#include<stdio.h>
#include<sstream>
#include<bitset>
#include<locale>
#include<iostream>
#include<conio.h>
#include<cmath>
#include<iomanip>
#include<math.h>
#include<bitset>
using namespace std;
#define ll  long long
#define ld long double
#define PI 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844
int main()
{
	ios::sync_with_stdio(false);
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr), cout.tie(nullptr);
	ll n, sum;
	string arr;
	cin >> n >> sum;
	cin >> arr;
	for (int i = 0; i < arr.size(); i++)
	{
		ll move;
		if (arr[i] <= 'm')
			move = 'z' - arr[i];
		else
			move = 'a' - arr[i];
		if (sum < abs(move))
		{
			if (move < 0)
				arr[i] -= sum;
			else
				arr[i] += sum;
		}
		else
			arr[i] += move;
		sum -=min(sum, abs(move));
	}
	if (sum == 0)
			cout << arr << endl;
		else
			cout << -1 << endl;
	return 0;
}

/*
const long long mod = 1000000007;
long long dp[1010][10];
int n, S, k;
	cin >> n >> S >> k;
	dp[S][0] = 1;
	for (int i = S - 1; i >= 0; i--)
		for (int j = 0; j < k; j++)
			if (i % 2 == 1)
				dp[i][j] = dp[i + 1][(j * 10 + n) % k];
			else
				for (int x = (i == 0); x < 10; x++)
				{
					if (x == n)
						continue;
					dp[i][j] = (dp[i][j] + dp[i + 1][(j * 10 + x) % k]) % mod;
				}
	for (int i =0; i<10; i++,cout<<endl)
		for (int j = 0; j < 10; j++)
			cout << dp[i][j] << " ";
	cout << dp[0][0] << endl;*/