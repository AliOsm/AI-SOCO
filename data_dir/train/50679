#ifdef _MSC_VER
#define _CRT_SECURE_NO_DEPRECATE
#pragma comment(linker, "/STACK:66777216")
#else
#pragma GCC optimize("O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#endif
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <sstream>
#include <fstream>
#include <ctime>
#include <cstring>
#include <chrono>
using namespace std;
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define x first
#define y second
#define pii pair<int,int>
#define pdd pair<double,double>
#define INF 1000000000
#define FOR(i,a,b) for (int _n(b), i(a); i <= _n; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;i--)
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))
#define rep(i,n) FOR(i,1,(n))
#define rept(i,n) FOR(i,0,(n)-1)
#define L(s) (int)((s).size())
#define C(a) memset((a),0,sizeof(a))
#define VI vector <int>
#define ll long long

int a, b, c, d, n, m, k;
char mas[102][102][102];
int cc[3], pc[3], nc[3];
int pp1[3], pp2[3];
inline bool cool(int p1[], int p2[]) {
	rept(d1, 3) {
		memmove(pp1, p1, 3 * sizeof(int));
		pp1[d1] += 1;
		if (pp1[0] >= n || pp1[1] >= m || pp1[2] >= k || mas[pp1[0]][pp1[1]][pp1[2]] == '0') continue;
		rept(d2, 3) {
			memmove(pp2, p2, 3 * sizeof(int));
			pp2[d2] -= 1;
			if (pp2[0] < 0 || pp2[1] < 0 || pp2[2] < 0 || mas[pp2[0]][pp2[1]][pp2[2]] == '0') continue;
			if (pp1[0] == pp2[0] && pp1[1] == pp2[1] && pp1[2] == pp2[2]) return 1;
		}
	}
	return 0;
}
inline bool check(int ci, int cj, int cz) {
	cc[0] = ci, cc[1] = cj, cc[2] = cz;
	mas[ci][cj][cz] = '0';
	bool ok = 1;
	rept(pd, 3) {
		memmove(pc, cc, 3 * sizeof(int));
		pc[pd] -= 1;
		if (pc[0] < 0 || pc[1] < 0 || pc[2] < 0 || mas[pc[0]][pc[1]][pc[2]] == '0') continue;
		rept(nd, 3) {
			memmove(nc, cc, 3 * sizeof(int));
			nc[nd] += 1;
			if (nc[0] >= n || nc[1] >= m || nc[2] >= k || mas[nc[0]][nc[1]][nc[2]] == '0') continue;
			if (!cool(pc, nc)) {
				ok = 0;
				break;
			}
		}
		if (!ok) break;
	}
	mas[ci][cj][cz] = '1';
	return !ok;
}
int main() {
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	scanf("%d%d%d", &n, &m, &k);
	rept(i, n) {
		rept(j, m) {
			scanf("%s", mas[i][j]);
		}
	}
	
	int ans = 0;
	rept(i, n) {
		rept(j, m) {
			rept(z, k) {
				if (mas[i][j][z] == '1' && check(i, j, z)) {
					++ans;
				}
			}
		}
	}
	printf("%d\n", ans);
}
