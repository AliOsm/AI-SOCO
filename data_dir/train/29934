#include <bits/stdc++.h>

using namespace std;
const int K = 40;
const long long md = 7;
const int N = 5e3 + 5;

short dp[N][N], dp_md_i[N][N], dp_md_j[N][N], dp_eq_i[N][N], dp_eq_j[N][N];

int main() {
    ios::sync_with_stdio(false);

#ifdef VK_LOCAL
//    freopen("output.txt", "w", stderr);
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif // VK_LOCAL

    int n, m;
    cin >> n >> m;
    vector<int> ans[2];

    ans[0].resize(n + 1);
    ans[1].resize(n + 1);

    bool was = false;
    for (int i = 0; i < n; i++) {
        string str;
        cin >> str;

        int fst = str.find('1');
        int lst = str.rfind('1');
        if (!was && fst == string::npos)
            continue;
        fst = (fst == string::npos) ? (m + 1) : fst;
        lst = (lst == string::npos) ? 0 : lst;

        if (!was) {
            ans[0][i + 1] = lst;
            ans[1][i + 1] = m + 1 - fst;
            was = true;
        } else {
            ans[0][i + 1] = min(ans[0][i] + 2 * lst, ans[1][i] + m + 1) + 1;
            ans[1][i + 1] = min(ans[0][i] + m + 1, ans[1][i] + 2 * (m + 1 - fst)) + 1;
        }
//        cout << ans[0][i + 1] << " " << ans[1][i + 1] << "\n";
    }

    cout << ans[0][n] << "\n";

    return 0;
}
