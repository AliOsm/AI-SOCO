#pragma comment(linker, "/STACK:167177216")

#include <stdio.h>
#include <stack>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string.h>
#include <string>
#include <memory.h>
#include <vector>
#include <map>
#include <queue>
#include <set>
#include <time.h>
#include <cassert>
#include <cstring>
//#include <unordered_set>

using namespace std;

#define mp make_pair
#define pb push_back
#define pii pair<int, int>
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef unsigned long long uli;

const int INF = 1e9;
const ld eps = 1e-9;
const li MOD = INF + 7;
const li INF64 = (li)(INF) * (li)(INF);

const int ddx[] = {-1, 1, 1, -1};
const int ddy[] = {1, 1, -1, -1};
const int dx[] = {-1, -1, 0, 1, 1, 1, 0, -1};
const int dy[] = {0, 1, 1, 1, 0, -1, -1, -1};
const int dx4[] = {-1, 0, 1, 0};
const int dy4[] = {0, 1, 0, -1};
const int dxh[] = {-1, -1, -1, 1, 1, 1, 1, -1};
const int dyh[] = {1, -1, -1, -1, -1, 1, 1, 1};
const string dirs[] = {"RIGHT", "UP", "LEFT", "DOWN"};

int n, m;
li ans = INF64;
li all = 0;
int a[111111];
bool was[111111];
vector<int> pos[111111];

li f(int val, int need)
{
    li res = all;
    //if(val == 4 && need == 3)
        //cout << "res == " << res << endl;
    forn(j, pos[val].size())
    {
        int i = pos[val][j];
        if(i > 1)
        {
            if(a[i - 1] != val)
            {
                //if(val == 4 && need == 3)
                    //cout << i << ' ' << a[i - 1] << ' ' << val << ' ' << need << endl;
                //cout << "res before " << res << endl;
                res -= abs(a[i - 1] - val);
                res += abs(a[i - 1] - need);
                //cout << "res after " << res << endl;
            }
        }

        if(i < m)
        {
            if(a[i + 1] != val)
            {
                //if(val == 4 && need == 3)
                    //cout << i << ' ' << a[i + 1] << ' ' << val << ' ' << need << endl;
                res -= abs(a[i + 1] - val);
                res += abs(a[i + 1] - need);
            }
        }
    }

    return res;
}

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //ios_base::sync_with_stdio(false);
    scanf("%d %d", &n, &m);
    for(int i = 1; i <= m; i++)
    {
        scanf("%d", &a[i]);
        was[a[i]] = true;
        pos[a[i]].pb(i);
    }

    for(int i = 2; i <= m; i++)
        all += abs(a[i] - a[i - 1]);

    for(int i = 1; i <= 100000; i++)
    {
        if(!was[i])
            continue;
        int val = i;
        int lf = 1, rg = n;
        while(rg - lf > 3)
        {
            int mid1 = lf + (rg - lf) / 3;
            int mid2 = rg - (rg - lf) / 3;
            if(f(val, mid1) < f(val, mid2))
                rg = mid2;
            else
                lf = mid1;
        }

        for(int j = max(1, lf - 10); j <= min(n, rg + 10); j++)
        {
            li cur = f(val, j);
            //cout << val << ' ' << j << ' ' << cur << endl;
            ans = min(ans, cur);
        }
    }

    ans = min(ans, all);
    printf("%I64d\n", ans);
    return 0;
}
