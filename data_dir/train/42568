#define  _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<map>
#include<cmath>
#include<vector>
#include<algorithm>
#include<iomanip>
#include<cmath> 
#include<stack>
#include<math.h>
#include<set>
#include<string>
#include<cstring>
#include<queue>
#include<complex>	
#include<assert.h>
#include<math.h>
#include<memory.h>
#include <stdlib.h>
#include<sstream>	
#include<cstdio>
using namespace std;

#define rep(i,n) for(int i=0;i<n;i++)
#define repi(i,a,n) for(int i=a;i<n;i++)

#define mp make_pair
#define pb push_back
#define fastIO ios::sync_with_stdio(false)
#define read freopen("in.in","r",stdin)
#define write freopen("out.out","w",stdout)
#define scf(xx) scanf("%d",&xx)
#define All(a) a.begin(), a.end()
#define LSOne(S) (S & (-S))

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef long double ld;

#define X first 
#define Y second 
int dx[] = { 0, 0, 1, -1, -1, -1, 1, 1 };
int dy[] = { 1, -1, 0, 0, 1, -1, 1, -1 };



const int N = 100010;
vi a;
int n;
struct node{
	int l, r;
	node(){}
	node(int l, int r) :r(r), l(l){}
};
node seg[4 * N];
int lazy[4 * N];
void update(int x, int y,int xx, int yy, int id = 1, int l = 0, int r = n - 1){
	if (l > y || r < x)return;
	if (l >= x && r <= y){
		lazy[id] = 1;
		seg[id] = node(l + xx - x, r + xx - x);
		return;
	}
	int mid = (l + r) / 2;
	if (lazy[id]){
		seg[id * 2] = node(seg[id].l, (seg[id].l + seg[id].r) / 2);
		seg[id * 2 + 1] = node((seg[id].l + seg[id].r) / 2 + 1, seg[id].r);
		lazy[id * 2] = lazy[id * 2 + 1] = 1;
		lazy[id] = 0;
	}
	update(x, y, xx, yy, id * 2, l, mid);
	update(x, y, xx, yy, id * 2 + 1, mid + 1, r);
}
int query(int x, int id = 1, int l = 0, int r = n - 1){
	if (l == r && l == x)return seg[id].l;
	int mid = (l + r) / 2;
	if (lazy[id]){
		seg[id * 2] = node(seg[id].l, (seg[id].l + seg[id].r) / 2);
		seg[id * 2 + 1] = node((seg[id].l + seg[id].r) / 2 + 1, seg[id].r);
		lazy[id * 2] = lazy[id * 2 + 1] = 1;
		lazy[id] = 0;
	}
	if (x <= mid)return query(x, id * 2, l, mid);
	return query(x, id * 2 + 1, mid + 1, r);
}
int main(){
	//read; write;
	int m;
	scf(n); scf(m);
	a = vi(n + n);
	rep(i, n+n)scf(a[i]);
	update(0, n - 1, n, n + n - 1);
	int t, x, y, k;
	while (m--){
		scf(t);
		if (t == 1){
			scf(x); scf(y); scf(k);
			x--; y--; k--;
			update(y, y + k , x , x + k);
		}
		else {
			scf(x);
			printf("%d\n", a[query(x-1)]);
		}
	}
	return 0;
}


