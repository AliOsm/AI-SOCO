#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((ll)(1e18))
#define pi (2*acos(0))
#define mp make_pair
#define M ((int)(998244353))
#define xx first
#define yy second
#define NN ((int)(5e5+2))
#define N ((int)(1e3 + 5))
#define pq priority_queue
///#define Q queue
#define eps 0
#define log 20
#define pb push_back
#define MOD 998244353


using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef unsigned long long int lu;

typedef tree < int,  null_type,  less < int >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;

bool mark[N];

vector < int > v[N];

int dfs(int n, int p)
{
    if(mark[n]) return n;
    for(int i = 0; i<v[n].size(); i++){
        if(p!=v[n][i]){
            int a = dfs(v[n][i],n);
            if(a!=-1) return a;
        }
    }
    return -1;
}

int y[N];

int main()
{
    int t;
    scanf("%d",&t);
    while(t--){
        memset(mark,0,sizeof mark);
        int n;
        scanf("%d",&n);
        for(int i = 1; i<=n; i++){
            v[i].clear();
        }
        for(int i = 1; i<n; i++){
            int a, b;
            scanf("%d %d",&a,&b);
            v[b].pb(a);
            v[a].pb(b);
        }

        int a, b;
        scanf("%d",&a);
        for(int i = 0; i<a; i++){
            scanf("%d",&b);
            mark[b] = 1;
        }
        scanf("%d",&b);
        for(int i = 0; i<b; i++) scanf("%d",&y[i]);

        printf("B %d\n",y[0]);
        fflush(stdout);
        int node;
        scanf("%d",&node);
        if(mark[node]){
            printf("C %d\n",node);
            fflush(stdout);
            continue;
        }

        a = dfs(node,0);
        printf("A %d\n",a);
        fflush(stdout);
        scanf("%d",&node);
        bool flag = 0;
        for(int i = 0; i<b; i++){
            if(node==y[i]){
                flag = 1;
                break;
            }
        }

        if(flag){
            printf("C %d\n",a);
            fflush(stdout);

        }
        else{
            printf("C -1\n");
            fflush(stdout);
        }
    }
    return 0;
}
