#include<bits/stdc++.h>
#define MOD 1000000007
#define ll long long
#define mp make_pair
#define pb push_back
#define N 200010
using namespace std;
int tree[N], n;
map<char, set<int> > df;
void update(int ind, int val){
	for(int i = ind; i < N; i = (i + (i & (-1 * i))))
		tree[i] += val;
} 
int query(int ind){
	int ans = 0;
	for(int i = ind; i > 0; i = (i - (i & (-1 * i))))
		ans += tree[i];
	return ans;
}
int findind(int ind){
	int low = 1, high = n + 1;
	while(low < high){
		int mid = (low + high) / 2;
		if(query(mid) >= ind)
			high = mid;
		else low = mid + 1;
	}
	return low;
}
int qrg(int a, int b){
	if(a > b)
		return 0;
	if(a <= 1)
		return query(b);
	return query(b) - query(a - 1);
}
int main(){
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	int m;
	cin >> n >> m;
	string s;
	cin >> s;
	s = "*" + s;
	for(int i = 1; i <= n; i++){
		df[s[i]].insert(i);
		update(i, 1);
	}
	while(m--){
		int l, r;
		cin >> l >> r;
		char c;
		cin >> c;
		int x = findind(l);
		int y = findind(r);
		auto it = df[c].lower_bound(x);

		vector<int> vals;
		for(auto i = it; i != df[c].end(); i++){
			if(*i <= y)
				vals.pb(*i);
			else break;
		}
		for(auto elem: vals){
			update(elem, -1);
			df[c].erase(elem);
		}
	}
	string ans = "";
	for(int i = 1; i <= n; i++){
		if(qrg(i, i))
			ans.pb(s[i]);
	}
	cout << ans << '\n';

}