#include <iostream>
#include <bits/stdc++.h>
#define ll long long

using namespace std;
deque < ll > Q;

ll n,m,a[200100],b[400100], Ans, FinalAns , N= 400100;;
pair < ll , ll > Seg[400100 * 4];


void Update(int i , int v , int p = 1, int L = 1, int R = N)
{
    if (i < L || i > R) return;
    if (L == R)
    {
        Seg[p].first+=v;
        Seg[p].second = (Seg[p].first < 0);
        return;
    }
    int mid = (L + R)/2;
    Update(i , v , p * 2, L, mid);
    Update(i , v , p * 2 + 1, mid + 1, R);

    Seg[p].second = Seg[p * 2].second + Seg[p * 2 + 1].second;
}

int Query(int i, int j, int p = 1, int L = 1, int R = N)
{
    if (L > j || R < i) return 0;
    if (L >= i && R <= j)
        return Seg[p].second;

    int mid = (L + R)/2;
    return Query(i, j, p * 2, L, mid) + Query(i, j, p * 2 + 1, mid + 1, R);
}

bool Match = false;

int main()
{
    cin >> n;
    for(int i=1; i<=n; i++)  cin >> a[i];
    cin >> m;
    for(int i=1; i<=m; i++)  cin >> b[i], Update(b[i] , 1);
    if(m == 1)  return cout << 0 , 0;
    int curr = 1;
    bool Up = true;
    for(int i=1; i<=m; i++)
    {
        Update(curr , -1);
        if(Q.size())  Ans+=abs(a[curr] - a[Q.back()]);
        Q.push_back(curr);
        if(curr == 1 && !Up)  Up = true;
        if(curr == n && Up)   Up = false;
        Up ? curr++ : curr--;
    }
    for(int i = 1 ; i<= max(n, m)*2 ; i++)
    {
        if(!Seg[1].second && Match && FinalAns != Ans)  return cout << "-1", 0;
        else if(!Seg[1].second)  FinalAns = Ans, Match = true;
        int curr = Q.back(), Next;
        if(curr == 1 && !Up)  Up = true;
        if(curr == n && Up)   Up = false;
        Up ? Next = curr + 1 : Next = curr - 1;
        int Last = Q.front();
        Q.pop_front();
        Update(Last , 1);
        Update(Next , -1);
        Ans+=abs(a[Next] - a[curr]);
        Ans-=abs(a[Last] - a[Q.front()]);
        Q.push_back(Next);
    }
    cout << FinalAns;
    return 0;
}
