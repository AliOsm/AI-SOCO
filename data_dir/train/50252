#include <bits/stdc++.h>
typedef long long ll ;
using namespace std ;

const int inf = -1e6;

int n ;
vector < int > ve ;
vector < int > idx[9];

int memo[1001][(1 << 8)];
int pre[1001][1001];
int mx ;


int solve(int i , int mask){

    if(i > n) return inf ;

    if(i == n){
        if(mx != 1){
             int x = (mask == (1 << 8) - 1 ? 0 : inf);
             return x ;
        }
        return 0 ;
    }

    int &ret = memo[i][mask];
    if(ret != -1) return ret ;

    ret = solve(i + 1 , mask);

    if(mask & (1 << ve[i])) return ret ;

    int c1 = inf , c2 = inf;

    if(pre[i][mx] != inf)
           c1 = mx + solve(pre[i][mx] + 1 , mask | (1 << ve[i]));
    if(mx != 1 && pre[i][mx - 1] != inf)
           c2 = (mx - 1) + solve(pre[i][mx - 1] + 1 , mask | (1 << ve[i]));

    return ret = max(ret , max(c1 , c2));
}


bool check(int mid){
     mx = mid ;
     memset(memo , -1 , sizeof memo);
     int ret = solve(0 , 0) ;
     return solve(0 , 0) > 0 ;
}

int main(){

    ios::sync_with_stdio(false) ,  cin.tie(0) , cout.tie(0);

    cin >> n ;

    for(int i = 0 ; i < n ; i++){
          int x ; cin >> x ;
          x--;
          ve.push_back(x);

          idx[x].push_back(i);
    }


    for(int i = 0 ; i <= n ; i++)
        for(int j = 1 ; j <= n ; j++)
            pre[i][j] = inf ;

    for(int cnt = 1 ; cnt <= n ; cnt++){
       for(int num = 0 ; num < 8 ; num++){
           for(int j = 0 ; j < idx[num].size() ; j++){



                if(j + cnt - 1 < idx[num].size())
                    pre[idx[num][j]][cnt] = idx[num][j + cnt - 1];

           }
       }
    }

    int low = 1 , high = n , res = -1 ;

    while(low <= high){
          int mid = (low + high)/2 ;
          if(check(mid))
               res = mid , low = mid + 1 ;
          else
               high = mid - 1 ;
    }

    memset(memo , -1 , sizeof memo);
    mx = res ;

    cout << solve(0 , 0) << endl ;

    return 0 ;
}
