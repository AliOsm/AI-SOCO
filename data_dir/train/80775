#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>
#include <unordered_map>

using namespace std;

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.14159265358979
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

int dp[100][100][100];
int n;
int a[30];
int b[30];
int r(int p, int b1, int b2)
{
	if (p == n)
	{
		if (b1 == b2) {
			return 0;
		}
		return 1000000000;
	}
	if (dp[p][b1][b2] != -1)
		return dp[p][b1][b2];
	int res = a[p] + r(p + 1, b1 + 1, b2);
	if (b1 > 0)
	{
		res = min(res, b[p] + r(p + 1, b1 - 1, b2));
	}
	return dp[p][b1][b2]=res;
}

int dp1[100][100][100];
int r1(int p, int b1, int b2)
{
	if (p == n+n)
	{
		if (b1 == b2) {
			return 0;
		}
		return 1000000000;
	}
	if (dp1[p][b1][b2] != -1)
		return dp1[p][b1][b2];
	int res = 1000000000;
	res=min(res,a[(p<n)?p:(p-n)] + r1(p + 1, b1 + 1, b2));
	if (b1 > 0)
	{
		res = min(res, b[(p<n) ? p : (p - n)] + r1(p + 1, b1 - 1, b2));
	}
	return dp1[p][b1][b2] = res;
}
int main()
{
#ifdef Fcdkbear
	freopen("in.txt", "r", stdin);
	//freopen("out.txt","w",stdout);
	double beg = clock();
#endif

	int m;
	scanf("%d%d", &n, &m);
	MEMS(dp, -1);
	MEMS(dp1, -1);
	FOR(i, 0, n)
		scanf("%d", &a[i]);
	FOR(i, 0, n)
		scanf("%d", &b[i]);
	if (n == 1)
	{
		int cnt = n*m / 2;
		int res = (a[0] + b[0])*cnt;
		cout << res << endl;
		return 0;
	}
	int res = 2100000000;
	FOR(b2, 0, n+1)
	{
		int res1 = r(0, 0, b2);
		int res2 = r1(0, b2, b2);
		int res3 = r(0, b2, 0);
		if ((res1 >= 1000000000) || (res2 >= 1000000000) || (res3 >= 1000000000))
			continue;
		int now = res1 + (m - 2)/2*res2 + res3;
		res = MIN(res, now);
	}
	cout << res << endl;
#ifdef Fcdkbear
	double end = clock();
	fprintf(stderr, "*** Total time = %.3lf ***\n", (end - beg) / CLOCKS_PER_SEC);
#endif
}