//Author : Siriuslight
#include "bits/stdc++.h"
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
#define FIO ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0),cout<<setprecision(10)<<fixed;
#define int long long
#define F first
#define S second

using namespace std;
using namespace __gnu_pbds;

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

typedef long long ll;
typedef long double ld;
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const ll inf = 1e9+100, N = 1e6+5;
const ll INF = 1e18+100, MOD = 1e9+7;

ll powmod(ll a,ll b,ll m=MOD){ll r=1;while(b>0){if(b&1)r=r*a%m;a=a*a%m;b>>=1;}return r;}
ll power(ll a,ll b){ll r=1;while(b>0){if(b&1)r=r*a;a=a*a;b>>=1;}return r;}
ll gcd(ll a,ll b){if(!b)return a;return gcd(b,a%b);}
ll inv(ll a, ll m = MOD){return powmod(a,m-2,m);}
ll lcm(ll a,ll b){return(a*b)/gcd(a,b);}

//ordered_set X;
//X.insert(3);
//X.order_of_key(3) no of elements less than 3
//*X.find_by_order(n) nth greatest element(0-indexed)

int n, pre[N], T[N][21], ans;
string s;

int query(int l, int r){
    int j = log2(r - l + 1);
    return min(T[l][j], T[r - (1 << j) + 1][j]);
}

int32_t main(){
    FIO;
    cin >> n >> s;
    s = '@' + s;
    for(int i = 1; i <= n; ++i){
        if(s[i] == '(') pre[i] = 1;
        else pre[i] = -1;
        pre[i] += pre[i - 1];
    }

    for(int i = 1; i <= n; ++i) T[i][0] = pre[i];
    for(int j = 1; j <= 20; ++j){
        for(int i = 1; (i + (1 << (j - 1))) <= n; ++i){
            T[i][j] = min(T[i][j - 1], T[i + (1 << (j - 1))][j - 1]);
        }
    }

    string s1 = s;
    bool ok = 1;
    if(s1[1] == '(') s1[1] = ')';
    else s1[1] = '(';
    int d = 0;
    for(int i = 1; i <= n; ++i){
        if(s1[i] == '(') d++;
        else d--;
        if(d < 0){
            ok = 0;
            break;
        }
    }
    if(d != 0) ok = 0;
    ans += ok;

    for(int i = 2; i <= n; ++i){
        bool ok = 1;
        if(s[i] == '('){
            int x = query(1, i - 1);
            if(x < 0){
                ok = 0;
            }
            x = query(i, n);
            if(x < 2 || pre[n] != 2){
                ok = 0;
            }
        }
        else{
            int x = query(1, i - 1);
            if(x < 0){
                ok = 0;
            }
            x = query(i, n);
            if(x < -2 || pre[n] != -2){
                ok = 0;
            }
        }
        ans += ok;
    }
    cout << ans;
}
