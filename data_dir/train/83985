#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;

int N;
int w[300010];
ll sum[300010];
ll ans[300010];

vector <pair <pair <int, int>, int> > queries; // b, a, id (a + bx)

ll dense(int a, int b){
    int x = a + (N-1-a) / b * b;
    ll ans = sum[x];
    if(a-b >= 0) ans -= sum[a-b];
    return ans;
}

ll discrete(int a, int b){
    int i;
    ll ans = 0;
    for(i=a;i<N;i+=b) ans += w[i];
    return ans;
}

int main(void){
    int Q,a,b,i,j;
    
    cin >> N;
    REP(i,N) cin >> w[i];
    cin >> Q;
    REP(i,Q){
        cin >> a >> b; a--;
        queries.push_back(make_pair(make_pair(b,a),i));
    }
    sort(queries.begin(),queries.end());
    
    i = 0;
    
    for(b=1;b<=500;b++){
        REP(j,N){
            sum[j] = w[j];
            if(j-b >= 0) sum[j] += sum[j-b];
        }
        
        while(i < Q && queries[i].first.first == b){
            ans[queries[i].second] = dense(queries[i].first.second, b);
            i++;
        }
    }
    
    for(;i<Q;i++) ans[queries[i].second] = discrete(queries[i].first.second, queries[i].first.first);
    
    REP(i,Q) cout << ans[i] << endl;
    
    return 0;
}
