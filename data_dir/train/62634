#include <bits/stdc++.h>
using namespace std;
typedef long long i64;
#define SZ(v) int((v).size())
#define ALL(vec) (vec).begin(),(vec).end()
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
 
#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string>) {}
template<typename T1,typename T2> ostream& operator<<(ostream& os, pair<T1,T2> buf) {
  return os << "(" << buf.first << ": " << buf.second << ")"; }
#define DefOut(Con) template<typename T>ostream&operator<<(ostream&os,Con<T>&A){ bool f = false; os << "{"; \
  for (const auto e: A) { if (f) os << ", "; os << e; f = true; } return os << "}"; }
#define DefOut2(Con) template<typename K,typename V>ostream&operator<<(ostream&os,Con<K,V>&A) \
{ bool f = false; os << "{"; for (auto &e: A) { if (f) os << ", "; os << e; f = true; } return os << "}"; }
template<typename T>ostream &operator << (ostream &os,vector<vector<T>>& A) {
  for (auto &B: A) os << '\n' << B; return os; }
DefOut(vector) DefOut(set) DefOut(multiset) DefOut2(map) 
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << a << endl; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
int const MOD = 1000000007;
long long const INF = 1e18;
#define PI 3.14159265358979323846
/***********************************************************************/

int32_t main() {

  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n;
  cin >> n;
  vector<int> a(n), b(n);
  for (int &z: a) cin >> z;
  for (int &z: b) cin >> z;
  int ans = 0;
  int z = 0;
  set<int> my;
  for (int i = 0; i < n; ++i) {
    if (a[i] == 0) z++;
    else my.insert(a[i]);
  }
  //~ if (my.empty()) {
    //~ if (is_sorted(ALL(b))) {
      //~ kek(0);
    //~ }
    //~ kek(2 * n);
  //~ }
  int last = b[n - 1];
  bool ok = true;
  for (int i = n - 1; i >= 0 && ok; --i) {
    if (b[i] != last) ok = false;
    last--;
    if (last == 0) break;
  }
  if (ok) {
    vector<int> t(b);
    t.resize(4 * n);
    set<int> s(my);
    int pos = n;
    int need = b[n - 1] + 1;
    while (!s.empty()) {
      if (*s.begin() != need) break;
      s.erase(s.begin());
      if (t[pos - n] > 0) {
        s.insert(t[pos - n]);
      }
      pos++;
      need++;
    }
    if (need == n + 1) kek(pos - n);
  }
  b.resize(4 * n);
  int ptr = n;
  while (!my.count(1)) {
    b[ptr] = 0;
    z--;
    if (b[ptr - n] > 0) {
      my.insert(b[ptr - n]);
    } else {
      z++;
    }
    ptr++;
    ans++;
  }
  auto can = [&] (int m) {
    vector<int> t(4 * n);
    for (int i = 0; i < n; ++i) {
      t[i] = b[ptr - n + i];
    }
    set<int> s(my);
    int pos = n;
    while (SZ(s) < n && m > 0) {
      t[pos] = 0;
      if (t[pos - n] > 0) {
        s.insert(t[pos - n]);
      }
      pos++;
      m--;
    }
    int need = 1;
    while (SZ(s) > 0) {
      if (*s.begin() != need) {
        return false;
      }
      s.erase(s.begin());
      need++;
      if (t[pos - n] > 0) {
        s.insert(t[pos - n]);
      }
      pos++;
    }
    return need == n + 1;
  };
  int lo = 0, hi = n;
  while (lo < hi) {
    int md = (lo + hi) / 2;
    if (can(md)) {
      hi = md;
    } else {
      lo = md + 1;
    }
  }
  ans += lo + n;
  kek(ans);
    
  return 0;
}
