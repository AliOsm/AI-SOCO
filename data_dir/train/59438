#include <bits/stdc++.h>
using namespace std;
int n, m;

#define fail puts("NO");exit(0);
#define succeed puts("YES");exit(0);

pair<int, int> a[100008];

map<pair<int, int>, int> mapa;
vector<int> veca;

pair<int, int> get(int i, int init = 0) {
	int l, r, f, g;
	l = a[i].first - a[init].first;
	r = a[i].second - a[init].second;
	if (l == 0) {
		return {0,1};
	}
	if (r == 0) {
		return {1,0};
	}

	f = ((l < 0) == (r < 0));
	l < 0 ? l = -l : 0;
	r < 0 ? r = -r : 0;
	g = __gcd(l, r);
	l /= g;
	r /= g;
	if (!f) {
		r = -r;
	}
	return {l,r};
}

int main() {
	scanf("%d", &n);
	if (n <= 4) {
		succeed
	}

	for (int i = 0; i < n; i++) {
		scanf("%d", &a[i].first);
		scanf("%d", &a[i].second);
		if (mapa.find(a[i]) != mapa.end()) {
			i--;
			n--;
		} else {
			mapa[a[i]];
		}
	}

	int round = min(20, n);
	int init = 0;
	while (round--) {
		mapa.clear();
		veca.clear();

//		init = (int) (rand() / double(RAND_MAX) * n);
		for (int i = 0; i < n; i++) {
			if (i == init) {
				continue;
			}
			mapa[get(i, init)]++;
//			cout << get(i).first << " " << get(i).second << endl;
		}
//		cout << endl;

		int maxi = 0;
		pair<int, int> maxa;

		if (mapa.size() <= 2) {
			succeed
		}

		for (auto &au : mapa) {
			if (au.second > maxi) {
				maxi = au.second;
				maxa = au.first;
			}
		}

		for (int i = 0; i < n; i++) {
			if (i == init) {
				continue;
			}
			if (get(i, init) != maxa) {
				veca.push_back(i);
			}
		}

//		for (auto au : veca) {
//			cout << a[au].first << " " << a[au].second << endl;
//		}

		if (veca.size() <= 2) {
			succeed
		}

		mapa.clear();

		for (int i : veca) {
			if (i == veca[0])
				continue;
			mapa[get(i, veca[0])]++;
//			cout << get(i, veca[0]).first << " " << get(i, veca[0]).second
//					<< endl;
			if (mapa.size() > 1) {
				goto failThisTime;
			}
		}
		succeed
		failThisTime: 0;
		init++;
	}
	fail
	return 0;
}

