# include <iostream>
# include <vector>
# include <algorithm>
# include <iomanip>

using namespace std;

int n;
int mt[1010][1010];
pair < int, int > mn2[1010][1010];
pair < int, int > mn5[1010][1010];
pair < int, int > m25[1010][1010];
bool T = false;

int main()
{
	ios_base::sync_with_stdio(false);
	cin >> n;
	for ( int i = 1; i <= n; i ++ ){
		for ( int j = 1; j <= n; j ++ ){
			cin >> mt[i][j];
			int x = mt[i][j];
			if ( x == 0 ){
				x = 10;
				T = true;
			}
			while( !( x % 2 )  ){
				x >>= 1;
				m25[i][j].first++;
			}
			while( !( x % 5 ) ){
				x /= 5;
				m25[i][j].second ++;
			}	
		}
	}
	
	for ( int i = 1; i <= n; i ++ ){
		for ( int j = 1; j <= n; j ++ ){
			if ( i == 1 ){
				mn2[i][j] = mn2[i][j - 1];
				mn5[i][j] = mn5[i][j - 1];
			}
			else if ( j == 1 ){
				mn2[i][j] = mn2[i - 1][j];
				mn5[i][j] = mn5[i - 1][j];
			}
			else{
				mn2[i][j] = min( mn2[i - 1][j], mn2[i][j - 1] );
				mn5[i][j] = min( mn5[i - 1][j], mn5[i][j - 1] );
			}
			mn2[i][j].first += m25[i][j].first;
			mn2[i][j].second += m25[i][j].second;
			mn5[i][j].first += m25[i][j].second;
			mn5[i][j].second += m25[i][j].first;
		}
	}
	int m2 = min( mn2[n][n].first, mn2[n][n].second );
	int m5 = min( mn5[n][n].first, mn5[n][n].second );
	
	if ( min( m2, m5) > 0 && T ){
		cout << 1 << endl;
		for ( int i = 1; i <= n; i ++ ){
			for ( int j = 1; j <= n; j ++ ){
				if( mt[i][j] == 0 ){
					for ( int l = 1; l < i; l ++ )
						cout << 'D';
					for ( int l = 1; l < j; l ++ )
						cout << 'R';
					for ( int l = i; l < n; l ++ )
						cout << 'D';
					for ( int l = j; l < n; l ++ )
						cout << 'R';
					return 0;
				}
			} 
		}
	}
	cout << min( m2, m5 ) << endl;
	
	
	if ( m5 < m2 )
		swap( mn2, mn5 );
	
	vector < char > dir;
	int x = n, y = n;
	
	while ( x != 1 || y != 1 ){
		int p = mt[x][y];
		if ( p == 0 )
			p = 10;
		if ( m5 < m2 ){
			mn2[x][y].first -= m25[x][y].second;
			mn2[x][y].second-= m25[x][y].first;
		}
		else{
			mn2[x][y].first -= m25[x][y].first;
			mn2[x][y].second -= m25[x][y].second;
		}
		
		if ( mn2[x][y] == mn2[x - 1][y] && x != 1 ){
			dir.push_back( 'D' );
			x--;
		}
		else{
			dir.push_back( 'R' );
			y--;
		}
	}
	reverse( dir.begin(), dir.end() );
	for ( auto c : dir )
		cout << c;
	
}
/*
5
1 3 7 9 11
2 2 2 2 2
1 3 0 9 7
5 5 5 5 5
1 1 1 1 1
*/
