/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

class DSlime {
public:
	void solve(std::istream& in, std::ostream& out) {
        int n; in >> n;
        int arr[n+1], prefix[n+1], prefix_min[n+1], suffix_min[n+1];
        prefix[0] = 0, prefix_min[0] = INT_MAX;
        rep(i, 1, n){
            in >> arr[i], prefix[i] = abs(arr[i]) + prefix[i-1];
            prefix_min[i] = min(prefix_min[i-1], arr[i]);
        }
        suffix_min[n] = arr[n];
        for(int i = n - 1; i>=1; --i) suffix_min[i] = min(suffix_min[i+1], arr[i]);

        int res = LLONG_MIN;
        rep(i, 1, n){
            int left = 0, right = 0;
            left = prefix[i-1] - abs(prefix_min[i-1]);
            left = prefix_min[i-1] - left;
            if(i==1) left = 0;
            right = prefix[n] - prefix[i] - abs(suffix_min[i+1]);
            right = suffix_min[i+1] - right;
            if(i==n) right = 0;
            res = max(res, arr[i] - left - right);
        }
        out << res;
	}
};


int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	DSlime solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
