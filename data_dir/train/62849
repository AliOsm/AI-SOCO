#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
constexpr int inf = 0x3f3f3f3f;
constexpr double EPS = 1e-15;
constexpr double PI = atan(1) * 4;

template <typename T> inline bool chmax(T& x, T y) {return x < y ? x = y, 1 : 0;}
template <typename T> inline bool chmin(T& x, T y) {return x > y ? x = y, 1 : 0;}
inline int LSB(int i) {return (i & -i);}

/*
    - Look for patterns/observations
    - Read carefully
    - Think backwards
*/

int n, k;
map <int, int> mp;

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> k;

    /*
        Let's say we take the first k + 1 numbers. There are k different ways to select k different
        numbers, and each time we exclude 1 number. Therefore, the (m + 1)th number will be the mth largest
        number in the selected k numbers m times, because we will exclude m numbers less than it m times.
    */

    for (int i = 1; i <= k + 1; i++){
        cout << "? ";
        for (int j = 1; j <= k + 1; j++){
            if (i == j) continue;
            cout << j << " ";
        }

        cout << endl;

        int x, y;
        cin >> x >> y;
        mp[y]++;
    }

    cout << "! " << (*--mp.end()).second << endl;
    return 0;
}
