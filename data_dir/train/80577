#include <algorithm>
#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <set>
#include <map>
#include <deque>
using namespace std;

#define F first
#define S second
#define P_B push_back
#define size(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define debug(x) cerr<< #x << ": " << x << endl;
#define fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

//const int mod = 1000 * 1000 * 1000 + 7;
const int MAXN = 5000 + 10;
const ll INF = 1000LL * 1000 * 1000 * 1000 * 1000;
int x[MAXN];
pii p[MAXN];
ll dp[2][MAXN], t[MAXN], ex[MAXN];

int main()
{
	int n, m;
	scanf("%d %d", &n, &m);
	FR(i, 0, n)
		scanf("%d",  x + i);
	FR(i, 0, m)
		scanf("%d %d", &p[i].F, &p[i].S);

	sort(x, x + n);
	sort(p, p + m);

	FR(i, 0, n)
		if(i < p[0].S)
			dp[0][i] = (i? dp[0][i - 1]:0) + abs(x[i] - p[0].F);
		else
			dp[0][i] = INF;

	int ind = 0;
	FR(j, 1, m)
	{
		ind = 1 - ind;
		deque <pll> deq;
		deq.P_B({0, -1});
		FR(i, 0, n)
		{
		//	t[i] = (i? t[i - 1]:0) + abs(x[i] - p[j].F);
//			FR(k, 0, p[j].S + 1)
//				dp[ind][i] = min(dp[ind][i], dp[1 - ind][i - k] + t[i] - ((i - k >= 0)? t[i - k]:0));
		
			ex[i] = abs(x[i] - p[j].F);
			if(i >= 0)	ex[i] += ex[i - 1];

			if(dp[1 - ind][i] - ex[i] < deq.front().F)
				deq.push_front({dp[1 - ind][i] - ex[i], i});
			else
				deq.P_B({dp[1 - ind][i] - ex[i], i});

			while(deq.front().S < i - p[j].S)
				deq.pop_front();

			dp[ind][i] = min(INF, deq.front().F + ex[i]);
		}
	}
	if(dp[ind][n - 1] >= INF)
		dp[ind][n - 1] = -1;
	printf("%lld\n", dp[ind][n - 1]);

	return 0;
}

