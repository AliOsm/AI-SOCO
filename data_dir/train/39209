#include <bits/stdc++.h>
#include <ctime>

#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")

using namespace std;

#define space ' '
#define enter "\n"
#define fi first
#define se second
#define mp make_pair
#define ALL(x) x.begin(), x.end()
#define bits(x) __builtin_popcount(x)
#define bitsll(x) __builtin_popcountll(x)
#define crr(a) cerr << #a << " = " << a << "\n"

typedef long long ll;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef set <int> si;
typedef map <int, int> mii;
typedef pair <ll, ll> pll;
typedef vector <int> vi;
typedef vector <pii> vii;

inline bool isDigit (char c) {
	return '0' <= c && c <= '9';
}

template <class T>
inline T sqr (T x) {
	return x * x;
}

template <class T>
inline bool isSquare (T x) {
	T y = sqrt(x + 0.5);
	return (y * y) == x;
}

template <class T1, class T2>
inline T1 gcd (T1 a, T2 b) {
	return b ? gcd(b, a % b) : a;
}

template <class T1, class T2>
inline T1 eqMin (T1 & x, const T2 & y) {
	if (T1(y) < x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 eqMax (T1 & x, const T2 & y) {
	if (T1(y) > x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 min (const T1 & x, const T2 & y) {
	return x < (T1) y ? x : (T1) y;
}

template <class T1, class T2>
inline T1 max (T1 & x, const T2 & y) {
	return x > (T1) y ? x : (T1) y;
}

template <typename T>
inline T getint () {
	T x = 0, p = 1;
	char ch;
	do {
		ch = getchar();
	} while (ch <= ' ');
	if (ch == '-')
		p = -1, ch = getchar();
	while (ch >= '0' && ch <= '9')
		x = x * 10 + ch - '0', ch = getchar();
	return x * p;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const pair <T1, T2> & p) {
	return os << '(' << p.fi << ", " << p.se << ')';
}

template <class T>
ostream & operator << (ostream & os, const vector <T> & v) {
	os << '{';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '}';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const set <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const multiset <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const map <T1, T2> & m) {
	os << '<';
	bool was = false;
	for (const auto & x : m) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '>';
	return os;
}

template <size_t sz>
ostream & operator << (ostream & os, const bitset <sz> & bit) {
	os << '/';
	for (int i = 0; i < sz; i++)
		os << bit[i];
	os << '\\';
	return os;
}

const double PI = acos(-1);
const double EPS = 1e-8;
const int INF = (int) 2e9;
const ll LINF = (ll) 2e18;
const int MOD = (int) 1e9 + 7;
const int MAXN = (int) 1e5 + 10;

int n, m, s;
vi d[MAXN], v[MAXN];
bool us[MAXN][2], bad[MAXN];
bool p[MAXN];
int back[MAXN][2];

void ex (int res = -1) {
	if (res == -1) {
		cout << "Lose";
		exit(0);
	}
	if (res == 0) {
		cout << "Draw";
		exit(0);
	}

	cout << "Win\n";
	vi path;
	bool f = 1;
	while (res != 0) {
		path.push_back(res);
		res = back[res][f];
		f = !f;
	}
	reverse(ALL(path));
	for (int it : path) {
		cout << it << ' ';
	}
	exit(0);
}

void input () {
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		int c;
		cin >> c;
		while (c--) {
			int x;
			cin >> x;
			d[i].push_back(x);
			v[x].push_back(i);
		}
	}
	cin >> s;
}

void bfs () {
	queue <pii> q;
	q.push({s, 0});
	us[s][0] = true;

	while (q.size()) {
		int x = q.front().first;
		bool y = q.front().second;
		q.pop();

		for (int to : d[x]) {
			if (us[to][!y]) {
				continue;
			}
			us[to][!y] = true;
			q.push({to, !y});
			back[to][!y] = x;
		}
	}
}

void bfs2 () {
	queue <int> q;
	for (int i = 1; i <= n; i++) {
		if (d[i].size() == 0) {
			q.push(i);
			bad[i] = true;
		}
	}
	while (q.size()) {
		int x = q.front();
		q.pop();

		for (int to : v[x]) {
			if (bad[to]) {
				continue;
			}
			bad[to] = true;
			q.push(to);
		}
	}
}

void dfs (int x) {
	bad[x] = true;
	p[x] = true;
	for (int to : d[x]) {
		if (p[to]) {
			ex(0);
		}
		if (bad[to]) {
			continue;
		}
		dfs(to);
	}
	p[x] = false;
}

void check () {
	for (int i = 1; i <= n; i++) {
		if (d[i].size() == 0 && us[i][1]) {
			ex(i);
		}
	}
	dfs(s);
	ex();
}

int main () {
	ios_base::sync_with_stdio(false);
	input();
	bfs();
//	bfs2();
	check();
}