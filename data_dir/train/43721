#define _CRT_SECURE_NO_WARNINGS
#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <math.h>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <bitset>
#include <map>
using namespace std;

#define int64 long long
#define mp make_pair

#ifdef _DEBUG
const int N = 310;
#else
const int N = 3000010;
#endif

const int inf = 1e9+1;

#define left var1 
#define right var2

int n, m, p, k, left[N], right[N], neigbour[N], a[N];
string s, w;

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	scanf("%d%d%d\n", &n, &m, &p);
	cin >> s;
	cin >> w;
	k = 0;
	p--;
	for (int i = 0; i < n; i++)
		if (s[i] == '(')
		{
			a[++k] = i;
		}
		else
		{
			neigbour[i] = a[k];
			neigbour[a[k]] = i;
			k--;
		}
	for (int i = 0; i < n; i++) left[i] = i - 1;
	for (int i = 0; i < n; i++) right[i] = i + 1;
	for (int i = 0; i < m; i++)
	{
		if (w[i] == 'R') p = right[p];
		else if (w[i] == 'L') p = left[p];
		else
		{
			int j = neigbour[p];
			int k = p;
			if (k > j) swap(k, j);
			int j1 = left[k];
			int j2 = right[j];
			if (j1 != -1) right[j1] = j2;
			if (j2 != n) left[j2] = j1;
			if (j2 != n) p = j2;
			else p = j1;
		}
	}
	while (left[p] != -1) p = left[p];
	while (p != n) 
	{
		cout << s[p];
		p = right[p];
	}
	return 0;
}