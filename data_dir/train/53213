#include<bits/stdc++.h>
#include<ctime>
#include<random>
using namespace std;

int n;

vector<int> primes;
vector<int> smallestPrimeFactor;
void linearSieve(int n) {
	if (n < 1) n = 1;
	if ((int)smallestPrimeFactor.size() >= n + 1) return;
	int primePiBound = n < 20 ? n - 1 : (int)(n / (log(n * 1.) - 2) + 2);
	primes.assign(primePiBound + 1, numeric_limits<int>::max());
	int P = 0;
	smallestPrimeFactor.assign(n + 1, 0);
	smallestPrimeFactor[1] = 1;
	int n2 = n / 2, n3 = n / 3, n5 = n / 5;
	if (n >= 2)
		primes[P++] = 2;
	if (n >= 3)
		primes[P++] = 3;
	for (int q = 2; q <= n; q += 2)
		smallestPrimeFactor[q] = 2;
	for (int q = 3; q <= n; q += 6)
		smallestPrimeFactor[q] = 3;
	for (int q = 5; q <= n5; q += 2) {
		if (smallestPrimeFactor[q] == 0)
			primes[P++] = smallestPrimeFactor[q] = q;
		int bound = smallestPrimeFactor[q];
		for (int i = 2;; ++i) {
			int p = primes[i];
			if (p > bound) break;
			int pq = p * q;
			if (pq > n) break;
			smallestPrimeFactor[pq] = p;
		}
	}
	for (int q = (n5 + 1) | 1; q <= n; q += 2) {
		if (smallestPrimeFactor[q] == 0)
			primes[P++] = smallestPrimeFactor[q] = q;
	}
	primes.resize(P);
}

typedef int FactorsInt;
typedef vector<pair<FactorsInt, int> > Factors;
void primeFactors(FactorsInt x, Factors &out_v) {
	linearSieve(x);
	out_v.clear();
	while (x != 1) {
		int p = smallestPrimeFactor[x], k = 0;
		x /= p, k++;
		while (x % p == 0) x /= p, k++;
		out_v.push_back(make_pair(p, k));
	}
}

map<int, int> mp;

map<int, int> mp2;
int grundy(int a){
	if (a == 0){
		return 0;
	}
	if (mp2.count(a)){
		return mp2[a];
	}
	set<int> ss;
	for (int i = 0;; i++){
		int state = a;
		if ((a >> i) & 1){
			state ^= (1 << i);
		}
		int tmp = state;
		state &= (1 << i) - 1;
		tmp >>= (i+1);
		state |= tmp;
		ss.insert(grundy(state));
		if (tmp == 0)break;
	}
	int c = 0;
	while (ss.count(c)){
		c++;
	}
	mp2[a] = c;
	return c;
}
int main(){
	linearSieve(100000);
	cin >> n;
	for (int i = 0; i < n; i++){
		int a;
		scanf("%d", &a);
		for (int num : primes){
			int cnt = 0;
			while (a%num == 0){
				cnt++;
				a /= num;
			}
			if (cnt == 0)continue;
			cnt--;
			mp[num] |= (1<<cnt);
		}
		if(a>1)mp[a] = 1;
	}
	int x = 0;
	for (auto it : mp){
		x ^= grundy(it.second);
	}
	if (x){
		puts("Mojtaba");
	}
	else{
		puts("Arpa");
	}
	return 0;
}