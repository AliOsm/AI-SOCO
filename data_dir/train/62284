//**KEEP IT SHORT AND SIMPLE**
#include <bits/stdc++.h>
#define IO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define FILES freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define REP(i,a,b) for (int i = a; i < b; i++)
#define NL '\n'
#define F first
#define S second
#define dot(a, b) (conj(a) * (b)).real()
#define cross(a, b) (conj(a)* (b)).imag()

//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/rope>

using namespace std;

//using namespace __gnu_pbds;
//using namespace __gnu_cxx;
//template<class T> using orderd_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef bool bl;
typedef vector < vector<long long> > vvl;
typedef vector <long long> vll;
typedef pair <long long, long long> pll;
typedef priority_queue<long long, vector<long long>, greater<long long> > minPq;
typedef tuple<ll, ll, ll> line;
typedef complex<double> point;
const double pi = 2 * acos(0.0);
const int OO = 0x3f3f3f3f;
int main()
{
    IO
    char C1, C2;
    vector<string>ans;
    short R1, R2;
    cin >> C1 >> R1 >> C2 >> R2;
    while(R1 != R2 || C1 != C2)
    {
        string s;
        if(C1 < C2)         s += 'R', C1++;
        else if(C1 > C2)    s += 'L', C1--;
        if(R1 < R2)         s += 'U', R1++;
        else if(R1 > R2)    s += 'D', R1--;
        ans.push_back(s);
    }
    cout << ans.size() << NL;
    for(auto it : ans)
        cout << it << NL;
    return 0;
}
