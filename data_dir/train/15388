/* winners never quit and quitters never win.
      #swap                                 */
      
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
using namespace std;
using namespace __gnu_pbds;
#pragma GCC optimize ("-O3")
using ll = long long;
using ld = long double;
const ll mod = 1000000007;
const ll inf = 1000000000000000000;
const ll rk = 256;
const ld PI = 3.141592653589793;

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

#define pb push_back
#define mp make_pair
#define vc vector
#define fs first
#define sec second
#define pq priority_queue
#define lb lower_bound
#define ub upper_bound
#define pll pair<ll,ll> 
#define pls pair<ll,string>
#define psl pair<string,ll>
#define plc pair<ll,char>
#define pcl pair<char,ll>
#define pss pair<string,string>
#define all(v) v.begin(),v.end()
#define tol(s) transform(s.begin(),s.end(),s.begin(),::tolower);
#define tou(s) transform(s.begin(),s.end(),s.begin(),::toupper);
#define printclock cerr<<"Time : "<<1000*(ld)clock()/(ld)CLOCKS_PER_SEC<<"ms\n";

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << endl;
	err(++it, args...);
}

#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define T ll t=0;cin>>t;for(ll test=0;test<t;test++)


ll dp[35][35][55];

ll solve(ll n,ll m,ll k)
{
    
    if(n*m<k or n==0 or m==0)
        return inf;

    if(n*m==k or k==0)
        return 0;
    
    if(k==1)
        if(n==1 or m==1)
            return 1;
        else
            return min(n*n,m*m)+1;
    
    if(dp[n][m][k]!=inf)
        return dp[n][m][k];
    
    ll ans=inf;

            for(ll c=1;c<n;c++)
            {
                for(ll k1=0;k1<=k;k1++)
                {
                    ans=min(ans,m*m+solve(c,m,k1)+solve(n-c,m,k-k1));
                }
            }
            for(ll c=1;c<m;c++)
            {
                for(ll k1=0;k1<=k;k1++)
                {
                    ans=min(ans,n*n+solve(n,c,k1)+solve(n,m-c,k-k1));
                }
            }


    return dp[n][m][k]=ans;
}


int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
	//isprime();
	//coeff();
	/*freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);*/
    rep(a,0,35)
        rep(b,0,35)
            rep(c,0,55)
                dp[a][b][c]=inf;
    T
    {
        ll n,m,k;
        cin>>n>>m>>k;
        cout<<solve(n,m,k)<<endl;
    }
	printclock;
	return 0;
}