#define pb push_back
#define MX 1e18
#define mod 1000000007
#define ff first
#define ss second
#define MAX_N 4
#include <bits/stdc++.h>
using namespace std;
typedef long long  ll;


ll MATMOD = 1000000007;
struct Matrix{
    ll mat[MAX_N][MAX_N];
    int row , col;
    Matrix(){
        row = MAX_N;
        col = MAX_N;
        init();
    };
    Matrix(int r,int c){
        row = r;
        col = c;
        init();
    }
    void init(){
        memset(mat,0,sizeof mat);
    }
    void identity(){
        for(int i=0;i<row;i++)mat[i][i] = 1;
    }

};

Matrix matMul(Matrix a, Matrix b){
    Matrix c ;
    for(int i=0;i<MAX_N;i++){
        for(int j=0;j<MAX_N;j++){
            for(int k=0;k<MAX_N;k++){
                c.mat[i][j] = (c.mat[i][j] +  (a.mat[i][k] * b.mat[k][j])%MATMOD )%MATMOD;
            }
        }
    }
    return c;
}

Matrix matPow(Matrix A, ll p){
    Matrix res;
    res.identity();
    while(p){
        if(p & 1)res  = matMul(res,A);
        A = matMul(A, A);
        p >>= 1;
    }
    return res;
}


ll n, ans;
int main(int argc, char const *argv[]) {
    while(1){
        ll n;
        scanf("%lld", &n);
        Matrix A,C;
        A.mat[0][0] = 0; A.mat[0][1] = 1; A.mat[0][2] = 1; A.mat[0][3] = 1;
        A.mat[1][0] = 1; A.mat[1][1] = 0; A.mat[1][2] = 1; A.mat[1][3] = 1;
        A.mat[2][0] = 1; A.mat[2][1] = 1; A.mat[2][2] = 0; A.mat[2][3] = 1;
        A.mat[3][0] = 1; A.mat[3][1] = 1; A.mat[3][2] = 1; A.mat[3][3] = 0;

        C.mat[0][0] = 0; C.mat[1][0] = 1; C.mat[2][0] = 1; C.mat[3][0] = 1;

        Matrix x;
        x = matPow(A, n-1);
        x = matMul(x, C);
        printf("%lld\n", x.mat[0][0]);
        break;
    }
    return 0;
}
