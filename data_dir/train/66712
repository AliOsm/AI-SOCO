#include <bits/stdc++.h>
#define ll long long
#define rw freopen("input.txt","r",stdin),freopen("output.txt","w",stdout);
#define pb push_back
#define F first
#define S second
#define pf push_front
#define lp(i,a,b) for (int i=a;i<=(int)b;++i)
#define lp2(i,a,b) for (int i=a;i>=b;--i)
#define f(x) return cout<<x<<"\n",0
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pil pair<int,ll>
#define pli pair<ll,int>
#define mod 1000000007
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
#define p(x) cout<<#x<<" = { "<<x<<" } \n"
#define FAST ios::sync_with_stdio(0),ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
using namespace std;
const int N=(int)1e6;
bool vis[2005][2005]= {};
int n,m,st,en,xs,ys;
char arr[2005][2005]= {};
struct node
{
    int x;
    int y;
    int remx;
    int remy;
    node(int xx,int yy,int remxx,int remyy)
    {
        x=xx;
        y=yy;
        remx=remxx;
        remy=remyy;
    }
    node() {}
};
deque<node>dq;
bool valid(int nx,int ny)
{
    return (nx>=1&&nx<=n&&ny<=m&&ny>=1&&!vis[nx][ny]&&arr[nx][ny]=='.');
}
int main()
{
#ifdef ONLINE_JUDGE
    FAST;
#endif
    int cnt=1;
    cin>>n>>m;
    cin>>st>>en;
    cin>>xs>>ys;
    lp(i,1,n)
    {
        lp(j,1,m)
        cin>>arr[i][j];
    }
    vis[st][en]=true;
    dq.pf(node(st,en,xs,ys));
    while(!dq.empty())
    {
        node c=dq.front();
        dq.pop_front();
        lp(i,-1,1)
        {
            lp(j,-1,1)
            {
                if (j!=i&&(!j||!i))
                {
                    int nx=c.x+i;
                    int ny=c.y+j;
                    if (!valid(nx,ny))
                        continue;
                    if (j)
                    {
                        if (j<0&&c.remx>0)
                        {
                            dq.pb(node(nx,ny,c.remx-1,c.remy));
                            vis[nx][ny]=true;
                            cnt++;
                        }
                        else if (c.remy>0&&j>0)
                        {
                            dq.pb(node(nx,ny,c.remx,c.remy-1));
                            vis[nx][ny]=true;
                            cnt++;
                        }
                    }
                    else
                    {
                        dq.pf(node(nx,ny,c.remx,c.remy));
                        vis[nx][ny]=true;
                        cnt++;
                    }
                }
            }
        }
    }
    cout<<cnt<<"\n";
    return 0;
}