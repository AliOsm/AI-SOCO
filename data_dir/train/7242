#include<bits/stdc++.h>

#define SZ(x) ((int(x.size())))

typedef long long ll;

using namespace std;

const int maxn = 400*1000+10;
int n, m, u, v, s[maxn], f[maxn], t, c[maxn], zero, clr, ja[maxn], dt[4 * maxn];
ll data[4 * maxn];
vector <int> vec[maxn];

void bld (int x, int &l, int &r)
{
    if (r - l == 1)
    {
        data[x] ^= (1ll << c[ja[l]]);
        return;
    }
    int mid = (l + r) / 2;
    bld (2 * x + 1, l, mid);
    bld (2 * x + 2, mid, r);
    data[x] = (data[2 * x + 1] | data[2 * x + 2]);
}

inline void push (int x, int &l, int &r)
{
    if (dt[x] > 0)
    {
        dt[2 * x + 1] = dt[2 * x + 2] = dt[x];
        data[2 * x + 1] = data[2 * x + 2] = (1ll << dt[x]);
        dt[x] = 0;
    }
}

void dfs (int x, int p)
{
    s[x] = t;
    ja[t] = x;
    t++;
    for (int i = 0; i < SZ(vec[x]); i++)
    {
        if (vec[x][i] != p)
            dfs (vec[x][i], x);
    }
    f[x] = t;
}

void cng (int x, int &l, int &r)
{
    if (l >= f[v] || s[v] >= r)
        return;
    if (s[v] <= l && r <= f[v])
    {
        dt[x] = clr;
        data[x] = (1ll << clr);
        return;
    }
    int mid = (l + r) / 2;
    push (x, l, r);
    cng (2 * x + 1, l, mid);
    cng (2 * x + 2, mid, r);
    data[x] = (data[2 * x + 1] | data[2 * x + 2]);
}

ll get (int x, int &l, int &r)
{
    if (l >= f[v] || s[v] >= r)
        return 0;
    if (s[v] <= l && r <= f[v])
        return data[x];
    int mid = (l + r) / 2;
    push (x, l, r);
    return (get (2 * x + 1, l, mid) | get (2 * x + 2, mid, r));
}

int main()
{
    scanf ("%d %d", &n, &m);
    for (int i = 0; i < n; i++)
        scanf ("%d", &c[i]);
    for (int i = 0; i < n - 1; i++)
    {
        scanf ("%d %d", &u, &v);
        u--;
        v--;
        vec[u].push_back (v);
        vec[v].push_back (u);
    }
    dfs (0, -1);
    bld (zero, zero, n);
    for (int i = 0; i < m; i++)
    {
        scanf ("%d %d", &t, &v);
        v--;
        if (t == 1)
        {
            scanf("%d", &clr);
            cng (zero, zero, n);
        }
        else
            printf("%d\n", __builtin_popcountll (get (zero, zero, n)));
    }
	return 0;
}
