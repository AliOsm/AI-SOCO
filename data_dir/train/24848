/*jai mata di
 let's rock*/
#include <bits/stdc++.h>
using namespace std;
const int N=504;
int a[N][N];
int main()
{
	int n,m,k;
	scanf("%d %d %d",&n,&m,&k);
	int moves=4*n*m-2*n-2*m;
	if(moves<k) printf("NO\n");
	else
	{
		printf("YES\n");
		vector<pair<int,string> >vec;
		int i=1;
		while(k>0)
		{
			
			if(k>=n-1)
			{
				k=k-(n-1);
				if(n>1)
				   vec.push_back(make_pair(n-1,"D"));
			}
			else
			{
				vec.push_back(make_pair(k,"D"));
				k=0;
				break;
			}
			if(i<m)
			{
				int val=k/3;
				if(val<=n-1)
				{
					if(val!=0)
					   vec.push_back(make_pair(val,"RLU"));
					k=k-val*3;
					if(k==0) break;
					else
					{
						if(val==n-1)
						{
							if(k==1)
							{
								vec.push_back(make_pair(1,"R"));
								k=0;
								break;
							}
							else if(k==2)
							{
								vec.push_back(make_pair(1,"RL"));
								k=0;
								break;
							}
							else
							{
								vec.push_back(make_pair(1,"R"));
								if(n>1)
								{
									vec.push_back(make_pair(1,"DU"));
									k=0;
									break;
								}
								else
								{
									vec.push_back(make_pair(1,"LL"));
									k=0;
									break;
								}
							}
						}
						else
						{
							if(k==1)
							{
								vec.push_back(make_pair(1,"R"));
								k=0;
								break;
							}
							else if(k==2)
							{
								vec.push_back(make_pair(1,"RL"));
								k=0;
								break;
							}
						}
					}	
				}
				else
				{
					if(n>1)
					{
					    k=k-(n-1)*3;
					    if(n>1)
					       vec.push_back(make_pair(n-1,"RLU"));	
					}
					if(k>=1)
					{
						k--;
						vec.push_back(make_pair(1,"R"));
					}
				}
			}
			else
			{
				if(k>n-1)
				{
					if(n>1)
					   vec.push_back(make_pair(n-1,"U"));
					k=k-(n-1);
					vec.push_back(make_pair(k,"L"));
					break;
				}
				else
			    {
					vec.push_back(make_pair(k,"U"));
					k=0;
					break;
				}
			}
			i++;
		}
		printf("%d\n",(int)vec.size());
		for(i=0;i<vec.size();i++)
		   cout<<vec[i].first<<" "<<vec[i].second<<endl;
	}
	return 0;
}
