#include "bits/stdc++.h"
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
using namespace __gnu_pbds;
using namespace std;
typedef long long ll;
#define int long long
#define pb push_back
#define fi first
#define se second
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
const int mod = 1e9 + 7;
// const int mod1 = 998244353;
typedef double f80;
 
#ifndef LOCAL
#pragma GCC optimize ("O2")
#define endl '\n'
#endif
 
template<typename T>
using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
 
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
    uniform_int_distribution<int> uid(l, r);
    return uid(rng);
}
 
ll pwr(ll a,ll b, ll mod){
    a %= mod;
    int ans = 1;
    while(b){
        if(b & 1) ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}
 
string to_string(string s) {
  return '"' + s + '"';
}
 
string to_string(const char* s) {
  return to_string((string) s);
}
 
string to_string(bool b) {
  return (b ? "true" : "false");
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
 
void debug_out() { cerr << endl; }
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
 
#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

void debug1(int a[], int l,int r) {
	#ifdef LOCAL
		vector<int> temp(a + l, a + r + 1);
		debug(temp);
	#endif
}

const int N = 1e5 + 5;
vector<int> g[N];
int n, k, p;

int cnt[N], val[N], pre_cnt[N], pre_val[N];

void dfs(int u,int p,int d) {
	if(d >= 0) cnt[d]++;
	for(int v : g[u]) {
		if(v != p) {
			dfs(v, u, d + 1);
		}
	}
}

int get_val(int l,int r) {
	if(l > r) return 0;
	int ans = pre_val[r];
	if(l > 0)
		ans -= pre_val[l - 1];
	return ans;
}

int get_cnt(int l,int r) {
	if(l > r) return 0;
	int ans = pre_cnt[r];
	if(l > 0)
		ans -= pre_cnt[l - 1];
	return ans;
}

bool fun(int m,int t) { // all can be taken from m to t
	return t * get_cnt(m, t) - get_val(m, t) <= p;
}

int get_max(int t) {
	if(t * get_cnt(0, t) - get_val(0, t) <= p) { // all can be taken
		return pre_cnt[t];
	}
	int l = 0, r = t + 1;
	while(r - l > 1) {
		int m = (l + r) >> 1;
		if(fun(m, t))
			r = m;
		else
			l = m;
	}
	int taken = get_cnt(r, t);
	int per_cost = t - l;
	int cur_cost = t * taken - get_val(r, t);
	assert(cur_cost <= p);
	assert(per_cost != 0);
	taken += (p - cur_cost) / per_cost;
	return taken;
}

void solve(){
	cin >> n >> k >> p;
	fr(i, 1, n - 1) {
		int u, v;
		cin >> u >> v;
		g[u].pb(v);
		g[v].pb(u);
	}
	dfs(1, 0, -1);
	int ans = 0;
	pre_cnt[0] = cnt[0];
	fr(i, 0, n) {
		val[i] = i * cnt[i];
		pre_val[i] = val[i];
		pre_cnt[i] = cnt[i];
		if(i > 0) pre_val[i] += pre_val[i - 1];
		if(i > 0) pre_cnt[i] += pre_cnt[i - 1];
	}
	for(int t = 0; t <= n; t++) {
		ans = max(ans, get_max(t));
	}
	ans = min(ans, k);
	cout << ans;
}
signed main(){
    IO;
    #ifdef LOCAL
        freopen("inp.txt","r", stdin);
        freopen("out.txt", "w", stdout);
    #endif
    cout << setprecision(10) << fixed;
    int t = 1;
    // cin >> t;
    fr(tt, 1, t){
        solve();
    }
    return 0;
} 