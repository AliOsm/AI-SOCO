#include<bits/stdc++.h>
#include<unordered_map>
#define MEM(dp,i) memset(dp,i,sizeof(dp))
#define F first
#define pb push_back
#define S second
#define C continue
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<ll> vll;
typedef double D;
const int MX=1e5+9;
const ll INF=(1ll<<60);
const int inf=(1<<30);
const ll mod=1e9+7;
int n,a[MX],m;
struct N{
    int gcd,mn,sum;
}tree[MX*3];
int GCD(int x,int y){
    if(x<y)swap(x,y);
    if(y==0)return x;
    return GCD(y,x%y);
}
N Merge(N A,N B){
    N ret;
    ret.gcd=GCD(A.gcd,B.gcd);
    if(A.mn==B.mn){
        ret.mn=A.mn;
        ret.sum=A.sum+B.sum;
    }
    else{
        if(A.mn>B.mn)swap(A,B);
        ret.mn=A.mn;
        ret.sum=A.sum;
    }
    return ret;
}
void build(int node,int l,int r){
    if(l==r){
        tree[node].gcd=a[l];
        tree[node].mn=a[l];
        tree[node].sum=1;
        return;
    }
    build(node*2,l,(l+r)/2);
    build(node*2+1,(l+r)/2+1,r);
    tree[node]=Merge(tree[node*2],tree[node*2+1]);
}
N Q(int node,int l,int r,int s,int e){
    if(l>e||r<s){
        N ret;
        ret.sum=0;
        ret.mn=inf;
        ret.gcd=0;
        return ret;
    }
    if(l>=s&&r<=e){
        return tree[node];
    }
    return Merge(Q(node*2,l,(l+r)/2,s,e),Q(node*2+1,(l+r)/2+1,r,s,e));
}
int main(){
    scanf("%d",&n);
    for(int i=1;i<=n;i++)scanf("%d",&a[i]);
    build(1,1,n);
    scanf("%D",&m);
    int l,r;
    while(m--){
        scanf("%d%d",&l,&r);
        N ans=Q(1,1,n,l,r);
        if(ans.gcd==ans.mn)printf("%d\n",r-l+1-ans.sum);
        else printf("%d\n",r-l+1);
    }
}
