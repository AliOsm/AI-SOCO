#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <stack>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define T (1<<18)

int tree[2*T];

void update(int node, int low, int high, int l, int r, int x){
    if(r <= low || l >= high) return;
    if(l <= low && r >= high) {tree[node] = max(tree[node],x); return;}
    int mid = (low + high) / 2;
    update(2*node,low,mid,l,r,x);
    update(2*node+1,mid,high,l,r,x);
}

map <int, int> mp;
int pm[200010];
int h[100010],l[100010],r[100010];
vector <pair <int, int> > ans;

int main(void){
    int N,M,i;
    
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    
    scanf("%d",&N);
    REP(i,N) scanf("%d%d%d",&h[i],&l[i],&r[i]);
    
    REP(i,N) mp[l[i]] = mp[r[i]] = 0;
    i = 0;
    foreach(mp,itr) {(itr->second) = i; pm[i] = (itr->first); i++;}
    M = i;
    
    REP(i,N) update(1,0,T,mp[l[i]],mp[r[i]],h[i]);
    REP(i,2*T) tree[i] = max(tree[i],tree[i/2]);
    
    REP(i,M){
        int lh = 0, rh = 0;
        if(i > 0) lh = tree[T+i-1];
        if(i < M-1) rh = tree[T+i];
        if(lh != rh){
            ans.push_back(make_pair(pm[i],lh));
            ans.push_back(make_pair(pm[i],rh));
        }
    }
    
    printf("%d\n",ans.size());
    REP(i,ans.size()) printf("%d %d\n",ans[i].first,ans[i].second);
    
    return 0;
}
