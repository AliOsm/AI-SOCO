#include<bits/stdc++.h>
#define setzero(a) memset(a,0,sizeof(a))
#define setdp(a) memset(a,-1,sizeof(a))

typedef long long ll;

using namespace std;

ll n,m,t;
vector<vector<int> >tree(5005);
map<pair<int,int>,int> mp;
vector<int> ans;
ll dp[5005][5005];
ll parent[5005];
ll tot;

ll dfs(int node,int cnt)
{
    if(cnt==0)
        if(node==n)
            return 0;
        else
            return 1e15;
    if(dp[node][cnt]!=-1)
        return dp[node][cnt];
    ll mn=1e15;
    for(int i=0; i<tree[node].size(); i++)
        mn=min(mn,dfs(tree[node][i],cnt-1)+mp[ {node,tree[node][i]}]);
    return dp[node][cnt]=mn;
}

void out(int cur,int cnt)
{
    cout<<cur<<" ";
    if(cnt==0)
        return;
    for(int i=0; i<tree[cur].size(); i++)
    {
        //cout<<dp[cur][cnt]<<" *** "<<dfs(tree[cur][i],cnt-1)+mp[{cur,tree[cur][i]}]<<endl;
        if(dp[cur][cnt]==dfs(tree[cur][i],cnt-1)+mp[{cur,tree[cur][i]}])
        {
            out(tree[cur][i],cnt-1);
            return;
        }
    }
}

int main()
{
    setdp(dp);
    cin>>n>>m>>t;
    for(int i=0; i<m; i++)
    {
        int x,y,z;
        cin>>x>>y>>z;
        tree[x].push_back(y);
        mp[ {x,y}]=z;
    }
    vector<int> ans;
    for(int i=n; i>=1; i--)
    {
        setdp(parent);
        tot=dfs(1,i);
        if(tot<=t)
        {
            cout<<i+1<<endl;
            out(1,i);
            return 0;
        }
    }
    return 0;
}
