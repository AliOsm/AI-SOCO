// TestPrj.cpp : main project file.
//inplace_merge(T + beg, T + mid + 1, T + end + 1);

//#include "stdafx.h"

/*
ID: Tariqul
PROG: 
LANG: C++
*/

#include <algorithm> 
#include <cctype> 
#include <cmath> 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
#include <deque> 
#include <iostream> 
#include <list> 
#include <map> 
#include <numeric> 
#include <queue> 
#include <set> 
#include <sstream> 
#include <stack> 
#include <string> 
#include <vector>

using namespace std; 

#define fo(i,j,n) for(i=j;i<n;++i)
#define Fo(i,j,n) for(i=n-1;i>=j;--i)
#define foo(i,j,v) fo(i,j,sz(v))
#define Foo(i,j,v) Fo(i,j,sz(v))
#define li(v) v.begin(),v.end()
#define sz(v) ((int)v.size())
#define CLR(a,v) memset((a),(v),sizeof(a))
#define inf 1e9
typedef long long Long;
//typedef __int64 Long;
#define pi (2*acos(0))
#define eps 1e-9

#define two(X) (1<<(X))
#define twoL(X) (((Long)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)

char BUFFER[100000 + 5];
bool readn(int &n)	{ return scanf("%d",&n) == 1; } 
bool readl(Long &n)	{ return scanf("%I64d",&n) == 1; } 
bool readd(double &n){ return scanf("%lf",&n) == 1; } 
bool reads(string &s){ s = ""; int n = scanf("%s",BUFFER); if(n == 1)s = BUFFER; return n == 1; }
bool readln(string &s){ char *valid = gets(BUFFER); if(valid)s = BUFFER; return ((bool)valid); }
#ifdef localhost
void Print(Long &n, bool printNewLine = true)	{ printNewLine ? printf("%lld\n",n) : printf("%lld",n);  }
#else
void Print(Long &n, bool printNewLine = true)	{ printNewLine ? printf("%I64d\n",n) :  printf("%I64d",n); }
#endif // localhost

Long modPow(Long a, Long x, Long p) 
{    
	Long res = 1;
	while(x > 0) 
	{
		if( x % 2 != 0) {
			res = (res * a) % p;
		}
		a = (a * a) % p;
		x /= 2;
	}
	return res;
}

Long modInverse(Long a, Long p) {
	return modPow(a, p-2, p);
}

const int Mod = 1e9 + 7;
vector<pair<int,int> > v;
vector<Long> dp,f;

Long val(Long a, Long b)
{	
	return  (f[a+b] * modInverse((f[a]*f[b])%Mod,Mod)) % Mod;
}

int main()
{
	#ifdef localhost
	freopen("E://input.txt","r",stdin);
	//freopen("E://output.txt","w",stdout);
	#endif	
	
	int r,c,n,i,j; cin >> r >> c >> n; n +=2; v.resize(n); 
	v[0] = make_pair(1,1); v[1] = make_pair(r,c); foo(i,2,v)cin >> v[i].first >> v[i].second; sort(li(v)); 
	dp.resize(n,0); dp[0] = 1; f.resize(r+c+5); f[0] = 1; foo(i,1,f)f[i] = (f[i-1] * i) % Mod;
	foo(i,1,v)
	{
		dp[i] = val(v[i].first - 1,v[i].second - 1);
		fo(j,1,i)if(v[j].second <= v[i].second)
		{
			int tmp = val(v[i].first - v[j].first,v[i].second - v[j].second);
			dp[i] -= (val(v[i].first - v[j].first,v[i].second - v[j].second) * dp[j])%Mod;
			if(dp[i] < 0) dp[i] += Mod;
		}
	}	
	cout << dp[n-1] << endl;
	return 0;
}