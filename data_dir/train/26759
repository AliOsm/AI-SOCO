///https://www.youtube.com/watch?v=vOIqVQ76Iug
#include<bits/stdc++.h>

using namespace std;
#define ll long long
#define dbug printf("I am here\n");
#define fast ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
const int maxn = 1e6+100;

const ll inf = 1e18;
int seg[maxn*4][3];
int n ;
string s;

void Merge(int x){
    int lf = x*2+1, rh = x*2+2;
    seg[x][0] = seg[lf][0] + seg[rh][0];
    seg[x][1] = min(seg[lf][1] , seg[lf][0]+seg[rh][1]);
    seg[x][2] = max(seg[lf][2] , seg[lf][0]+seg[rh][2]);
}

void update(int x , int s , int e , int point , int val){
    if(s == e){
        seg[x][0] = val;
        seg[x][1] = 0;
        seg[x][2] = 0;
        return;
    }
    int mid = (s+e)/2;
    if(point <= mid)
        update(x*2+1,s,mid,point,val);
    else update(x*2+2,mid+1,e,point,val);
    Merge(x);
}

int main()
{
    fast;
    cin >> n;
    cin >> s;
    int pos = 0 , val , point;
    for(int i = 0; i<n; i++){

        if(s[i] == '('){
            update(0,0,n-1,pos,1);
        }
        else if(s[i] == ')'){
            update(0,0,n-1,pos,-1);
        }
        else if(s[i] == 'R'){
            pos++;
        }
        else if(s[i] == 'L'){
            pos = max(0,pos-1);
        }
        else{
            update(0,0,n-1,pos,0);
        }
        if(seg[0][0] == 0 and seg[0][1] == 0){
            cout << seg[0][2] << " ";
        }
        else cout << -1 << " ";
    }
    return 0;
}
/*



*/

