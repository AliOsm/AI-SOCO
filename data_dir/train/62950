#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <map>
#include <queue>
#include <cstring>
#include <cstdlib>
#include <set>
using namespace std;
#define INF 2001001001
#define MOD 1000000007
typedef long long ll;

int N;
int firs[5001],last[5001],dp[5001];
int arr[5001];

int solve(int L, int R){
  bool used[5001];
  for (int i=0;i<=5000;i++)
    used[i]=false;
  int ans=0;
  for (int i=L;i<=R;i++){
    if (!used[arr[i]]){
      used[arr[i]]=true;
      ans=ans xor arr[i];
    }
  }
  return ans;
}

int getindex(int pos){
  int ans=pos;
  int i=pos;
  while (i>=ans){
    if (last[arr[i]]<=pos)
      ans=min(ans,firs[arr[i]]);
    i--;
  }
  for (int j=ans;j<=pos;j++)
    if (last[arr[j]]>pos)
      return -1;
  return ans;
}

int main()
{
  ios_base::sync_with_stdio(0);cin.tie(0);
  cin>>N;
  for (int i=1;i<=N;i++)
    cin>>arr[i];
  for (int i=0;i<=5000;i++){
    firs[i]=-1;
    last[i]=-1;
  }
  for (int i=N;i>=1;i--)
    if (last[arr[i]]==-1)
      last[arr[i]]=i;
  for (int i=1;i<=N;i++)
    if (firs[arr[i]]==-1)
      firs[arr[i]]=i;
  for (int i=1;i<=N;i++){
    if (last[arr[i]]==i){
      int X=getindex(i);
      //cout<<i<<' '<<X<<endl;
      if (X!=-1)
	dp[i]=solve(X,i)+dp[X-1];
    }
    dp[i]=max(dp[i],dp[i-1]);
  }
  cout<<dp[N]<<endl;
  return 0;
}
