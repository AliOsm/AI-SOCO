#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <iomanip>
#include <string>
#include <cmath>
#include <climits>

#define ll long long

using namespace std;

const int maxnodes = 5000;

int nodes = maxnodes, src, dest;
int dist[maxnodes], q[maxnodes], work[maxnodes];

typedef struct Edge {
  int to, rev;
  int f, cap;
}Edge;

vector<Edge> g[maxnodes];

// Adds bidirectional edge
void addEdge(int s, int t, int cap){
  Edge a = {t, (int)g[t].size(), 0, cap};
  Edge b = {s, (int)g[s].size(), 0, 0};
  g[s].push_back(a);
  g[t].push_back(b);
}

bool dinic_bfs() {
  fill(dist, dist + nodes, -1);
  dist[src] = 0;
  int qt = 0;
  q[qt++] = src;
  for (int qh = 0; qh < qt; qh++) {
    int u = q[qh];
    for (int j = 0; j < (int) g[u].size(); j++) {
      Edge &e = g[u][j];
      int v = e.to;
      if (dist[v] < 0 && e.f < e.cap) {
        dist[v] = dist[u] + 1;
        q[qt++] = v;
      }
    }
  }
  return dist[dest] >= 0;
}

int dinic_dfs(int u, int f) {
  if (u == dest)
    return f;
  for (int &i = work[u]; i < (int) g[u].size(); i++) {
    Edge &e = g[u][i];
    if (e.cap <= e.f) continue;
    int v = e.to;
    if (dist[v] == dist[u] + 1) {
      int df = dinic_dfs(v, min(f, e.cap - e.f));
      if (df > 0) {
        e.f += df;
        g[v][e.rev].f -= df;
        return df;
      }
    }
  }
  return 0;
}

int maxFlow(int _src, int _dest) {
  src = _src;
  dest = _dest;
  int result = 0;
  while (dinic_bfs()) {
    fill(work, work + nodes, 0);
    while (int delta = dinic_dfs(src, INT_MAX))
      result += delta;
  }
  return result;
}

int main() 
{
	int n, m; cin >> n >> m;
	nodes = n*m+2;
	int src = n*m;
	int sink = src+1;
	string g[n];
	for(int i = 0; i < n; i++) cin >> g[i];
	int dr[] = {-1, 1, 0, 0};
	int dc[] = {0, 0, -1, 1};
	for(int i = 0; i < n; i++)
	{
		for(int j = 0; j < m; j++)
		{
			if(g[i][j] == 'W')
			{
				addEdge(src, i*m+j, 1);
				for(int k = 0; k < 4; k++)
				{
					int ni = i+dr[k];
					int nj = j+dc[k];
					if(0 <= ni && ni < n && 0 <= nj && nj < m && g[ni][nj] == 'P')
					{
						addEdge(i*m+j, ni*m+nj, 1);
					}
				}
			}
			else if(g[i][j] == 'P')
			{
				addEdge(i*m+j, sink, 1);
			}
		}
	}
	cout << maxFlow(src, sink) << endl;
}