#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

typedef long long int64;
typedef double real;

const int LogN = 17, MaxN = 1 << LogN, MaxE = 101, MaxS = 4,
 MaxC = 0x3F3F3F3F, NA = -1;

// Source: http://chemistry.about.com/od/elementfacts/a/elementlist.htm
char name [MaxE] [MaxS] = {"ZZ",
  "H", "He", "Li", "Be",  "B",  "C",  "N",  "O",  "F", "Ne",
 "Na", "Mg", "Al", "Si",  "P",  "S", "Cl", "Ar",  "K", "Ca",
 "Sc", "Ti",  "V", "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn",
 "Ga", "Ge", "As", "Se", "Br", "Kr", "Rb", "Sr",  "Y", "Zr",
 "Nb", "Mo", "Tc", "Ru", "Rh", "Pd", "Ag", "Cd", "In", "Sn",
 "Sb", "Te",  "I", "Xe", "Cs", "Ba", "La", "Ce", "Pr", "Nd",
 "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho", "Er", "Tm", "Yb",
 "Lu", "Hf", "Ta",  "W", "Re", "Os", "Ir", "Pt", "Au", "Hg",
 "Tl", "Pb", "Bi", "Po", "At", "Rn", "Fr", "Ra", "Ac", "Th",
 "Pa",  "U", "Np", "Pu", "Am", "Cm", "Bk", "Cf", "Es", "Fm"};

int a [MaxN];
int b [MaxN];
bool f [LogN + 1] [MaxN];
int p [LogN + 1] [MaxN];
char buf [MaxS];
int k, n;

int main (void)
{
 int i, j, m, t, u, w;
 bool ok;
 while (scanf (" %d %d", &n, &k) != EOF)
 {
  for (i = 0; i < n; i++)
  {
   scanf (" %s", buf);
   for (j = 0; j < MaxE; j++)
    if (!strcmp (buf, name[j]))
     break;
   assert (j < MaxE);
   a[i] = j;
  }

  for (i = 0; i < k; i++)
  {
   scanf (" %s", buf);
   for (j = 0; j < MaxE; j++)
    if (!strcmp (buf, name[j]))
     break;
   assert (j < MaxE);
   b[i] = j;
  }

  vector <int> v [LogN];
  m = 1 << n;
  for (u = 0; u < m; u++)
  {
   j = 0;
   for (i = 0; i < n; i++)
    if (u & (1 << i))
     j += a[i];
   for (i = 0; i < k; i++)
    if (j == b[i])
     v[i].push_back (u);
  }

  memset (f, 0, sizeof (f));
  f[0][0] = true;
  for (i = 0; i < k; i++)
   for (j = 0; j < (int) v[i].size (); j++)
   {
    t = v[i][j];
    w = (m - 1) & ~t;
    u = w;
    do
    {
     assert ((u & t) == 0);
     if (!f[i + 1][u | t] && f[i][u])
     {
      f[i + 1][u | t] = true;
      p[i + 1][u | t] = t;
     }
     u = (u - 1) & w;
    }
    while (u != w);
   }

  if (f[k][m - 1])
  {
   printf ("YES\n");
   for (i = k, u = m - 1; i > 0 && u != 0; i--, u ^= t)
   {
    t = p[i][u];
    ok = false;
    for (j = 0; j < n; j++)
     if (t & (1 << j))
     {
      if (!ok)
       ok = true;
      else
       printf ("+");
      printf ("%s", name[a[j]]);
     }
    printf ("->%s\n", name[b[i - 1]]);
   }
   assert (i == 0 && u == 0);
  }
  else
  {
   printf ("NO\n");
  }
 }
 return 0;
}
