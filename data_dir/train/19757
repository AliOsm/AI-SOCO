#include <bits/stdc++.h>
using namespace std;

using ll = long long;

#define REP(i, n) for (int i = 0; i < (n); ++i)
#define SIZE(a) ((int)(a).size())

const int N = 2005;
const int mod = 998244353;

int power(int a, int n) {
	int result = 1;
	while (n > 0) {
		if (n % 2) {
			result = (1LL*result*a) % mod;
		}
		a = (1LL*a*a) % mod;
		n /= 2;
	}
	return result;
}

int inv(int a) {
	return power(a, mod - 2);
}

int n, a, b, p;
int sum[N][N];
int A[N], E[N];

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> a >> b;
	p = (1LL*a*inv(b)) % mod;

	sum[0][0] = 1;

	for (int i = 0; i <= n; ++i) {
		for (int j = 0; j <= n; ++j) {
			int P = power(p, i);
			int Q = power(1-p+mod, j);
			sum[i+1][j] = (sum[i+1][j] + 1LL*sum[i][j]*Q) % mod;
			sum[i][j+1] = (sum[i][j+1] + 1LL*sum[i][j]*P) % mod;
		}
	}

	A[1] = 1;
	for (int i = 2; i <= n; ++i) {
		for (int j = 1; j < i; ++j) {
			A[i] = (A[i] + 1LL*A[j]*sum[j][i-j]) % mod;
		}
		A[i] = (1-A[i]+mod) % mod;	
	}

	for (int i = 2; i <= n; ++i) {
		for (int j = 1; j < i; ++j) {
			ll now = 1LL*A[j]*sum[j][i-j] % mod;
			ll s = j*(i-j) + j*(j-1)/2 + E[j] + E[i-j];
			E[i] = (E[i] + 1LL*now*s) % mod;
		}
		E[i] = (E[i] + 1LL*i*(i-1)/2*A[i]) % mod;
		E[i] = (1LL*E[i]*inv(1-A[i]+mod)) % mod;
	}

	cout << E[n] << '\n';

	return 0;
}
