// practice with Dukkha
#include <algorithm>
#include <iostream>

using namespace std;

const int CL = 100000, CE = 100000;

int ll[CL], ee[CE];

int main() {
	int n, m, cl, ce, v; cin >> n >> m >> cl >> ce >> v;
	for (int h = 0; h < cl; h++) {
		int i; cin >> i, i--;
		ll[h] = i;
	}
	for (int h = 0; h < ce; h++) {
		int i; cin >> i, i--;
		ee[h] = i;
	}
	int q; cin >> q;
	while (q--) {
		int i1, j1, i2, j2; cin >> i1 >> j1 >> i2 >> j2, i1--, j1--, i2--, j2--;
		int di = abs(i1 - i2), dj = abs(j1 - j2);
		if (di == 0) {
			cout << dj << '\n';
			continue;
		}
		int ans = m + n + m;
		int h = upper_bound(ll, ll + cl, j1) - ll - 1;
		for (int h_ = h; h_ <= h + 1; h_++)
			if (0 <= h_ && h_ < cl) {
				int j = ll[h_];
				ans = min(ans, abs(j1 - j) + di + abs(j - j2));
			}
		int div = (di + v - 1) / v;
		h = upper_bound(ee, ee + ce, j1) - ee - 1;
		for (int h_ = h; h_ <= h + 1; h_++)
			if (0 <= h_ && h_ < ce) {
				int j = ee[h_];
				ans = min(ans, abs(j1 - j) + div + abs(j - j2));
			}
		cout << ans << '\n';
	}
	return 0;
}
