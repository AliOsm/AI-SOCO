#include <string.h>
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <set>

#include <map>
#include <vector>
#include <string>
#include <stdlib.h>

#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf

#define pf printf
#define mp make_pair

using namespace std;
const int N = 20000;

vector<int> ft;

struct Node{
	int fa;
	int ch[30];
	int len;
	int pre_end;
	Node(){clr(ch);}
	Node &operator =(const Node &x) {
		memcpy(this,&x,sizeof(Node));
		return *this;
	}
}t[N];
int last,tot;
int n,a,b;

void add(int idx, int d) {
	//printf("d = %d, last = %d\n",d,last);
	int p = last;
	last = ++tot;
	t[last].len=t[p].len+1;
	t[last].pre_end = idx;
	//printf("last = %d tot = %d\n",last,tot);
	//printf("p = %d\n",p);
	for(;p&&!t[p].ch[d];p=t[p].fa) {
		t[p].ch[d] = last;
		//printf("p = %d fa = %d\n",p,t[p].fa);
	}
	//printf("p = %d\n",p);
	if(!p) {
		t[last].fa = 1;
	}
	else {
		int q = t[p].ch[d];
		if(t[p].len+1==t[q].len) {
			t[last].fa = q;
			t[q].pre_end = min(t[q].pre_end,idx);
		}
		else {
			int nq = ++tot;
			t[nq] = t[q];
			t[nq].len = t[p].len+1;
			t[last].fa = nq;
			t[q].fa = nq;
			t[nq].pre_end = min(t[last].pre_end,t[q].pre_end);
			//t[nq].pre_end = n+1;
			for(; p&&t[p].ch[d]==q; p = t[p].fa) t[p].ch[d] = nq;
		}
	}
	//printf("last = %d\n",last);
}

ll dp[N];
string s;

int main() {
	cin>>n>>a>>b;
	cin>>s;
	tot = 1;
	last = 1;
	dp[0] = 0;
	for(int i = 1; i <= n; ++i) {
		add(i,s[i-1]-'a');
	//}

	/*
	for(int i = 1; i <=tot; ++i) {
		int p = t[i].fa;
		if(p)
			t[p].pre_end = min(t[p].pre_end,t[i].pre_end);
	}
	*/
		
	//for(int i = 1; i <= n; ++i) {
		/*
		for(int j = 1; j <=tot; ++j) {
			printf("j = %d len = %d fa = %d ep = %d\n",j,t[j].len,t[j].fa, t[j].pre_end);
		}
		*/
	
		dp[i] = dp[i-1]+a;
		int x = last;
		while(x>1) {
			int len = t[x].len;
			int ep = t[x].pre_end;
			//printf("i = %d x = %d len = %d, ep = %d\n",i,x,len, ep);
			if(i-len>=ep)
				dp[i] = min(dp[i],dp[i-len]+b);
			x = t[x].fa;
		}
		//printf("i = %d dp = %lld\n",i,dp[i]);
	}
	cout<<dp[n]<<endl;
}

