// start of CP 2.0
#include <bits/stdc++.h>

//____By:sirjan13____

#define ll long long int
#define ld long double
#define mod 1000000007
#define mod1 mod
#define mod2 100000009
#define show(a) for(int i=0;i<a.size();i++) cout<<a[i]<<" ";
#define fi first
#define se second
#define vi vector<int>
#define vs vector<string>
#define vll vector<ll>
#define pb push_back
#define pi pair<int,int>
#define si set<int>
#define sll set<ll>
#define pll pair<ll, ll>
#define sci(x) scanf("%d",&x)
#define scs(x)  scanf("%s", x)
#define scll(x) scanf("%I64d",&x)
#define all(v) v.begin(),v.end()
#define sot(v) sort(v.begin(), v.end())
#define maxheap priority_queue<int>
#define minheap priority_queue<int,vector<int>,greater<int>>
#define mp make_pair
#define fast_io() cin.sync_with_stdio(false);cout.sync_with_stdio(false);
#define PI 3.1415926535
#define long_zero 0ll
#define long_one 1ll

inline int sbt(int x){return __builtin_popcount(x);}

using namespace std;

#define TRACE
#ifdef TRACE
#define deb(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << std::endl;
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define deb(...)
#endif
#define N 1013
char a[N][N];
bool vis[N][N];
int res[13];
int dx[][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };

int main() {
    fast_io()
    
    int n, m, p;
    cin >> n >> m >> p;
    int s[13];
    for(int i = 1; i <= p; i++) {
        cin >> s[i];
    }
    queue<pair<int, pi>> q[13];
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            cin >> a[i][j];
            if(a[i][j] != '#' && a[i][j] != '.') {
                q[a[i][j] - '0'].push(mp(a[i][j] - '0', mp(i, j)));
            }
        }
    }
    int curr = 1;
    while(1) {
        //deb(curr);
        for(int i = 1; i <= p; i++) {
            //deb(i, q[i].size());
            int steps = s[i];
            int kuch_ho_rha_hai = 1;
            if(!q[i].size()) continue;
            while(steps && kuch_ho_rha_hai) {
                steps--;
                kuch_ho_rha_hai = 0;
                queue<pair<int, pi>> tmp;
                //deb(q[i].size());
                while(!q[i].empty()) {
                    //deb(q[i].front().fi);
                    tmp.push(q[i].front());
                    q[i].pop();
                }
                while(!tmp.empty()) { 
                    auto p = tmp.front();
                    tmp.pop();

                    for(int ii = 0; ii <= 3; ii++) {
                        int dxx = dx[ii][0] + p.se.fi;
                        int dyy = dx[ii][1] + p.se.se;
                        //int steps = s[i];
                        if(dxx >= 1 && dyy >= 1 && dxx <= n && dyy <= m && a[dxx][dyy] == '.') {
                            a[dxx][dyy] = char(i + 48);
                            q[i].push(mp(i, mp(dxx, dyy)));
                            kuch_ho_rha_hai++;
                            //ok++;
                        }
                    } 
                }
            }
            //if(q[i].size()) { ok = false; }
        }
        int ok = 1;
		for(int i = 1; i <= p; i++) {
			if(q[i].size()){
				ok = 0;
				break;
			}
		}
		if(ok) break;
        
        // deb(curr);
        // for(int i = 1; i <= n; i++) {
        //     for(int j = 1; j <= m; j++) {
        //         cout << a[i][j] << ' ';
        //     }
        //     cout << endl;
        // }
        // cout << endl;
    }
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            if(a[i][j] != '#' && a[i][j] != '.') 
                res[a[i][j] - '0']++;
        }
    }    
    // for(int i = 1; i <= n; i++) {
    //     for(int j = 1; j <= m; j++) {
    //         cout << a[i][j] << ' ';
    //     }
    //     cout << endl;
    // }
    for(int i = 1; i <= p; i++) {
        cout << res[i] << ' ';
    }
	return 0;
}