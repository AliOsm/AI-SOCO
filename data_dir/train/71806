#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES

#include <iostream>
#include <cstdio>
#include <string>
#include <stdlib.h>
#include <set>
#include <vector>
#include <list>
#include <algorithm>
#include <regex>
#include <math.h>
#include <map>
#include <iterator>
#include <climits>
#include <numeric>
#include <bitset>
#include <unordered_map>
#include <unordered_set>
#include <iomanip>
#include <queue>	
#include <deque>
#include <stack>
#include <array>
#include <valarray>
#include <complex>
#include <random>
#include <functional>
#include <thread>

using namespace std;

#define ll long long
typedef int hv;
#define double long double
#define make(type, x) type x; cin>>x	
#define make2(type, x, y) type x, y; cin>>x>>y
#define make3(type, x, y, z) type x, y, z; cin>>x>>y>>z
#define make4(type, x, y, z, q) type x, y, z, q; cin>>x>>y>>z>>q
#define ALL(x) (x).begin(), (x).end()
#define RALL(x) (x).rbegin(), (x).rend()
#define FORIT(p) for(auto it = p.begin(); it != p.end(); it++)
#define FOR(b) for(signed i = 0; i <(b); i++)
#define FORE(i, l, r) for(int i = (l); i < (r); i++)
#define NFOR(i, n) for(int i = (((int) n)-1); i >= 0; i--)
#define VI vector<int>
#define VVI vector<vector<int>>
#define PII pair<int, int>
#define PPII pair<PII, int>
#define M7 1000000007ll
#define M9 1000000009ll
#define makev(a, n) VI a(n); FOR(n) cin >> a[i];

struct q {
	int x1, x2, y1, y2, ind;
};

bool check(list<q> a) {
	int st = a.size();
	if (st < 2) return true;
	unordered_set<int> was;

	auto left = a;
	auto right = a;
	auto up = a;
	auto down = a;

	left.sort([](const q& a, const q& b) { return  a.x1 < b.x1; });
	right.sort([](const q& a, const q& b) { return  a.x2 > b.x2; });
	up.sort([](const q& a, const q& b) { return  a.y1 < b.y1; });
	down.sort([](const q& a, const q& b) { return  a.y2 > b.y2; });

	list<q>::iterator it1, it2, it3, it4;
	int cnt1, cnt2, cnt3, cnt4;
	int brd1, brd2, brd3, brd4;

	auto initial = [&]() {
		while (!left.empty() && was.count(left.begin()->ind)) left.pop_front();
		while (!right.empty() && was.count(right.begin()->ind)) right.pop_front();
		while (!up.empty() && was.count(up.begin()->ind)) up.pop_front();
		while (!down.empty() && was.count(down.begin()->ind)) down.pop_front();
		if (left.empty() || right.empty() || up.empty() || down.empty()) return;
		it1 = ++left.begin(), it2 = ++right.begin(), it3 = ++up.begin(), it4 = ++down.begin();
		cnt1 = cnt2 = cnt3 = cnt4 = 0;
		brd1 = left.begin()->x2, brd2 = right.begin()->x1, brd3 = up.begin()->y2, brd4 = down.begin()->y1;
	};
	initial();

	auto sprt = [&](list<q>& l, list<q>::iterator& it) {
		list<q> res;
		while (l.begin() != it) {
			was.insert(l.begin()->ind);
			res.push_back(*l.begin());
			l.pop_front();
		}
		return res;
	};

	while (it1 != left.end() || it2 != right.end() || it3 != up.end() || it4 != down.end()) {

		if (it1 != left.end()) {
			if (was.count(it1->ind)) it1 = left.erase(it1);
			else {
				if (brd1 <= it1->x1 && cnt1 * 2 <= left.size()) {
					if (!check(sprt(left, it1))) return false;
					initial();
					continue;
				}
				else {
					cnt1++;
					brd1 = max(brd1, it1->x2);
					it1++;
				}
			}
		}

		if (it2 != right.end()) {
			if (was.count(it2->ind)) it2 = right.erase(it2);
			else {
				if (brd2 >= it2->x2 && cnt2 * 2 <= right.size()) {
					if (!check(sprt(right, it2))) return false;
					initial();
					continue;
				}
				else {
					cnt2++;
					brd2 = min(brd2, it2->x1);
					it2++;
				}
			}
		}

		if (it3 != up.end()) {
			if (was.count(it3->ind)) it3 = up.erase(it3);
			else {
				if (brd3 <= it3->y1 && cnt3 * 2 <= up.size()) {
					if (!check(sprt(up, it3))) return false;
					initial();
					continue;
				}
				else {
					cnt3++;
					brd3 = max(brd3, it3->y2);
					it3++;
				}
			}
		}

		if (it4 != down.end()) {
			if (was.count(it4->ind)) it4 = down.erase(it4);
			else {
				if (brd4 >= it4->y2 && cnt4 * 2 <= down.size()) {
					if (!check(sprt(down, it4))) return false;
					initial();
					continue;
				}
				else {
					cnt4++;
					brd4 = min(brd4, it4->y1);
					it4++;
				}
			}
		}
	}
	return left.size() < 2 || right.size() < 2 || up.size() < 2 || down.size() < 2;
}

void Solve() {
	make(int, n);
	list<q> a;
	FOR(n) {
		q z;
		cin >> z.x1 >> z.y1 >> z.x2 >> z.y2;
		z.ind = i;
		a.push_back(z);
	}
	cout << (check(a) ? "YES" : "NO");
}

signed main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#ifdef _SUPER_DEFINE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	Solve();
	fflush(stdout);
	while (!cin.eof()) {
		string s = "_";
		do getline(cin, s);
		while (!cin.eof() && !s.empty());
		if (cin.eof()) return 0;
		FOR(2) cout << endl;
		Solve();
		fflush(stdout);
	}
#else
	Solve();
#endif
	return 0;
}