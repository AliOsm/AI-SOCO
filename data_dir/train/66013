#include <queue>
#include <string>
#include <cstdio>
#include <limits>
#include <climits>
#include <cstring>
#include <vector>
#include <stack>
#include <utility>
#include <algorithm>
#include <numeric>
#include <ciso646>
#include <type_traits>
#include <functional>
#include <cassert>
#include <cmath>
#include <cstddef>
#include <map>
#include <cctype>
 
bool is_prime(int n)
{
    if (n <= 10) return ( n == 2 || n == 3 || n == 5 || n == 7);
    for(int i = 2; i*i <=n ;++i)if (n %i == 0) return false;
    return true;
}

std::vector< long long > pws[66];

long long solv(long long x, int p)
{
    
    if ( p > 63 || p <= 1  ) {
        return 1;
    }
        
    
    if(p == 2)
    {
        long long c2 = (long long)sqrt(x + .0);
        while(c2 * c2 < x)++c2;
        while(c2 * c2 > x)--c2;
 
         return c2 ;
    }
    
    if (p == 3)
    {
        long long c3 = (long long)std::cbrt(x + .0);
        while(c3 * c3 * c3 < x)++c3;
        while(c3 * c3 * c3 > x)--c3;
         
        return c3 ;
    }

    size_t e = std::upper_bound(pws[p].begin(), pws[p].end(), x) - pws[p].begin();
     
    //printf("pws[%d][%d] = %lld, x = %lld\n", p, e-1, pws[p][e-1], x);
    return e - 1;//exclude zero
    
}

 int fmyu(int n)
{
    if (n == 1) return 1;
    
    
    int r = -1;
    for(int i = 2; i <= n; ++i)
    {
        if (n % i == 0)
        {
            r = -r;
            n /= i;
            
            if (n %i == 0) return 0;
        }
    }
    
    return r;
    
}

int myu_table[ 66 ];

long long solv(long long x)
{
    if (x <= 0) 
    {
        return 0;
    }
    
    if (x == 1)
    {
        return 1;
    }
    
    long long ans =  1; // a= 1, p > 1
    
    
    for(int p = 2; p <= 62; ++p)
    {
        long long myu =   myu_table[ p ];
        
        long long cp = myu == 0  ? 1: solv(x, p);
        
        ans += myu * ( cp - 1  ) ;
    }
    
    return ans;
}

int solve()
{
    for(int i = 1; i<= 62; ++i)myu_table[i] = fmyu(i);
    
    pws[0].resize( 4040, 1 );
    pws[0][0] = 0;
    
    for(int i = 1; i <= 62; ++i)
    {
        pws[ i ].resize( 4040, 0 );
        pws[ i ] [ 0 ] = 0 ;
        pws[ i ] [ 1 ] = 1 ;
        
        for(int k = 2; k < 4040; ++k)
        {
            long long previous_pws = pws[ i - 1 ][ k ];// k ^ (i-1)
            
            if (previous_pws > (1ll << 62) / k ){
                pws[i][k] = 1ll << 62; 
                continue;
            }
            
            long long current_pws  = previous_pws * k ;
            
             
            
            pws[i][ k ] = current_pws ;
        }
    }
    //printf("pws[5][31] = %lld\n", pws[5][2]);
    
    //return 0;
    int Q;
    scanf("%d", &Q);
    for(int i = 0; i < Q; ++i)
    {
        long long l, r;

        scanf("%lld %lld", &l, &r);
        printf("%lld\n", solv(r) - solv(l-1) ) ;
    }
    return 0;
}



int main(int argc, char * argv[])
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif 
    
    solve();
}

