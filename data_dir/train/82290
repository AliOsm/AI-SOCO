#include <bits/stdc++.h>
#pragma GCC optimize(ofast)

using namespace std;

signed main() {
       ios_base::sync_with_stdio(false);
       cin.tie(0);
       cout.tie(0); 
       
      int a,k,m;
       cin>>a>>k>>m;
      
      vector <pair<pair<int,int>,int>> q(m); 
      for (int i=0;i<m;i++) {
          cin>>q[i].first.first>>q[i].first.second>>q[i].second; 
      }
      long long ans=1; 
     long long mod=998244353; 
       for (int i=k-1;i>=0;i--) {
           vector <pair<int,int>> one;
           
            vector <int> max_left(a+2); 
           
           for (int j=1;j<=a+1;j++) max_left[j]=max(max_left[j],max_left[j-1]); 
           
           
           for (int j=0;j<m;j++) if (q[j].second&(1<<i)) { one.push_back(q[j].first); }
           
           
           else {max_left[q[j].first.second]=max(max_left[q[j].first.second],q[j].first.first);  }
            for (int j=1;j<=a+1;j++) max_left[j]=max(max_left[j],max_left[j-1]); 
            
           vector <int> cover(a+5);
           for (int j=0;j<one.size();j++) { cover[one[j].first]++; cover[one[j].second+1]--; }
           
           for (int j=1;j<=a+1;j++) { cover[j]+=cover[j-1]; } 
           //for (int j=1;j<=a+1;j++) cout<<cover[j]<<" "; cout<<"\n";
           
           long long dp[a+2];
           dp[0]=1; 
           
          
           
           long long pref[a+2];
           pref[0]=1;
           
            for (int j=1;j<=a+1;j++) {
               if (cover[j]) dp[j]=0; else {
                   int l=max_left[j-1]; dp[j]=pref[j-1]-(l>0?pref[l-1]:0);  
                   if (dp[j]<0) dp[j]+=mod; 
               }
               dp[j]%=mod; 
               pref[j]=pref[j-1]+dp[j]; pref[j]%=mod; 
           }
           
           ans*=dp[a+1]; ans%=mod; 
       }
       cout<<ans; 
       
        return 0;
    }
