#include <iostream>
#include <vector>
#include <set>
#include<algorithm>
#include <iomanip>

using namespace std;

#define pb push_back
#define ff first
#define ss second
#define endl "\n"
#define sz(a) (int)(a.size())
#define all(a) a.begin(), a.end()

typedef long long int ll;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<int> vi;
typedef vector<ll> vll;

const ll INF = 1e18;
const int inf = 1e9;
const int MOD = 1e9 + 7;
const int nax = 200000 + 10;

int x[nax], y[nax];
set<pii> mainans;

void ins(int x1, int y1, int x2, int y2, set<pii> &ans)
{
    if(x1 <= x2)
    while(x1 <= x2) ans.insert({x1, y1}), x1++;
    else
    while(x1 >= x2) ans.insert({x1, y1}), x1--;
    x1 = x2;
    if(y1 <= y2)
    while(y1 <= y2) ans.insert({x1, y1}), y1++;
    else
    while(y1 >= y2) ans.insert({x1, y1}), y1--;

    return;
}
int solve(int id1, int id2, int id3, set<pii> &ans)
{
    int x1 = x[id1], y1 = y[id1];
    int x2 = x[id2], y2 = y[id2];
    int x3 = x[id3], y3 = y[id3];

    ins(x1, y1, x1, y2, ans);
    ins(x2, y2, x1, y2, ans);
    ins(x2, y2, x3, y3, ans);

    return sz(ans);
}

int osolve(int id1, int id2, int id3, set<pii> &ans)
{
    int x1 = x[id1], y1 = y[id1];
    int x2 = x[id2], y2 = y[id2];
    int x3 = x[id3], y3 = y[id3];

    ins(x1, y1, x2, y2, ans);
    ins(x2, y2, x3, y3, ans);

    return sz(ans);
}
vi graph[nax];
int main()
{
    int n;
    cin >> n;
    double s;
    cin >> s;
    for(int i = 1; i <= n - 1; i++)
    {
        int u, v;
        cin >> u >> v;
        graph[u].pb(v);
        graph[v].pb(u);
    }
    int leaves = 0;
    for(int i = 1; i <= n; i++) if(sz(graph[i]) == 1) leaves++;
    double ans = s / (1.0 * leaves);
    ans = (ans * 2.0);
    cout << fixed << setprecision(10) << ans << endl;
    return 0;
}