#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>

using namespace std;
const int N = 100010;

struct P {
  int v, add;
  P(int _v, int _add): v(_v), add(_add) {}

  bool operator<(const P& other) const {
    return add > other.add;
  }
};

int n;
vector<int> g[N];
vector<int> p;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
  cin >> n;
  p.resize(n);
  for(int i = 1; i < n; ++i) {
    int x;
    cin >> x;
    --x;
    p[i] = x;
    g[x].emplace_back(i);
  }
  
  vector<int> sz(n, 0);

  function<int(const int)> dfs = [&](const int v) {
    if (g[v].size() == 0) {
      sz[v] = 1;
      return 1;
    }

    for(int to : g[v]) {
      sz[v] += dfs(to);
    }
    return sz[v];
  };
  dfs(0);

  sort(sz.begin(), sz.end());
  for(auto i : sz) {
    cout << i << " ";
  }
  cout << endl;

	return 0;
}
