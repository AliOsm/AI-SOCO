#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>
#include <random>
#include <iomanip>


typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}



tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) )
		Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

tint maximumSum (vector<tint> &a) // a no vacio
{
	tint maxTotal = a[0], maxAca = a[0], n = a.size();
	forsn(i,1,n)
	{
		maxAca = max(a[i],maxAca + a[i]);
		maxTotal = max(maxTotal,maxAca);
	}
	return maxTotal;
}

const tint INFINITO = 1e15;

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n,k;
	while (cin >> n >> k)
	{
		vector<tint> a (n);
		forn(i,n)
			cin >> a[i];
		tint ans = -INFINITO;
		forn(r,n)
		forn(l,r+1)
		{
			vector<tint> outside, inside;
			forn(i,l)
				outside.push_back(a[i]);
			forsn(i,l,r+1)
				inside.push_back(a[i]);
			forsn(i,r+1,n)
				outside.push_back(a[i]);
			
			sort(inside.begin(),inside.end());
			sort(outside.begin(),outside.end());
			
			tint pasos = 0, swaps = 0, suma = 0;
			while (pasos < r-l+1)
			{
				tint in = -INFINITO, out = -INFINITO;
				if (!inside.empty())
					in = inside.back();
				if (swaps < k && !outside.empty())
					out = outside.back();
				if (out > in)
				{
					suma += out;
					outside.pop_back();
					swaps++;
				}
				else
				{
					suma += in;
					inside.pop_back();
				}
				pasos++;
			}
			ans = max(ans,suma);
			
		}
		cout << ans << "\n";
	}
	return 0;
}




