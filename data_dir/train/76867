#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const ll N = 1e6 + 100;
ll mod = 1e9 + 7;


namespace Combi {
    ll fact[N], inv[N];

    ll bm(ll b, ll p, ll m) {
        if(p == 0) return 1%m;
        ll t = bm(b,p/2,m);
        t = (1ll*t*t)%m;
        if(p&1) return 1ll*t*b%mod;
        return t;
    }

    ll C(ll n, ll r) {
        if(n < 0 or r < 0 or r > n) return 0;
        ll ret = 1ll*fact[n]*inv[r]%mod;
        ret = 1ll*ret*inv[n-r]%mod;
        return ret;
    }

    void init() {
        fact[0] = 1;
        for(ll i = 1; i < N; i++) {
            fact[i] = 1ll*fact[i-1]*i%mod;
        }
        inv[N-1] = bm(fact[N-1], mod-2, mod);
        for(ll i = N-2; i >= 0; i--) {
            inv[i] = 1ll*inv[i+1]*(i+1)%mod;
        }
    }
}

ll cur_ans, cur_n, cur_r;

void update(ll n, ll r) {
    if(r == 0) {
        cur_n = n, cur_r = r;
        cur_ans = 1;
        return;
    }
    if(r >= n) {
        cur_n = n, cur_r = n;
        cur_ans = Combi::bm(2,n,mod);
        return;
    }
    assert(n == cur_n + 1);
    cur_ans = (cur_ans + cur_ans - Combi::C(cur_n, cur_r))%mod;
    cur_n = n;
    while(cur_r > r) {
        cur_ans = (cur_ans - Combi::C(cur_n,cur_r))%mod;
        cur_r--;
    }
}


int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    Combi::init();
    ll n, T;
    cin >> n >> T;
    ll tot = 0, ans = 0;
    for(ll i = 1; i <= n; i++) {
        ll t;
        cin >> t;
        tot += t;
        ll gap = T-tot;
        if(gap < 0) break;
        update(i, gap);
        ll p = Combi::bm(2, mod-2, mod);
        p = Combi::bm(p, i, mod);
        ll cur = cur_ans*p%mod;
        ans += cur;
        ans %= mod;
    }
    if(ans < 0) ans += mod;
    cout << ans << "\n";
    return 0;
}

