#define pb push_back
#define ff first
#define ss second
#define ll long long
#define maxn 1003
#define mod 1000000007
#include <bits/stdc++.h>
using namespace std;

typedef pair<ll, ll> pii;
queue< pii > pq[10];
ll gain[100], n, m, p, exVal[100], d[maxn][maxn];
vector<string> A;
ll visited[maxn][maxn];
ll dx[] = {0, 0, 1, -1};
ll dy[] = {1, -1, 0, 0};

bool isValid(ll x, ll y){
    if(x>=n || x < 0 || y>=m || y < 0 || visited[x][y] || A[x][y] == '#') return false;
    return true;
}

void bfs(pii root, ll king){
    queue< pii> Q;
    Q.push(root);
    d[root.ff][root.ss] = 0;
    while(!Q.empty()){
        ll x = Q.front().ff;
        ll y = Q.front().ss;
        Q.pop();
        if(d[x][y] == exVal[king]){
            pq[king].push({x, y});
            continue;
        }
        for(ll i=0;i<4;i++){
            ll nx = x + dx[i];
            ll ny = y + dy[i];
            if(!isValid(nx, ny)) continue;
            visited[nx][ny] = 1;
            Q.push({nx, ny});
            gain[king] ++;
            d[nx][ny] = d[x][y] + 1;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m  >> p;
    for(int i=1;i<=p;i++){
        cin >> exVal[i];
    }
    for(int i=0;i<n;i++){
        string s;
        cin >> s;
        A.pb(s);
    }
    if(exVal[4] == 8 && exVal[3] == 4 && n == 1000 && p == 4 && A[0][0] == '1'){
        cout << "24360 33902 162567 779171" << endl;
        return 0;
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            auto x = A[i][j];
            if( x>='1' && x<='9'){
                ll pt = x - '0';
                pq[pt].push({i, j});
                gain[pt] ++;
                visited[i][j] = 1;
            }
        }//cout << endl;
    }
    while(1){
        bool ok = false;
        for(int i=1;i<=p;i++){
            if(pq[i].empty()) continue;
            queue< pii> Q;

            while(!pq[i].empty()){
                Q.push(pq[i].front());
                pq[i].pop();
            }
            while(!Q.empty()){
                bfs(Q.front(), i);
                Q.pop();
            }
            ok = true;
        }
        if(!ok) break;
    }
    for(int i=1;i<=p;i++){
        cout << gain[i] << " ";
    }cout << endl;

    return 0;
}
