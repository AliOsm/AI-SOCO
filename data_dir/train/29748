#include "bits/stdc++.h"
//#include "ext/pb_ds/tree_policy.hpp"
//#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}



struct node{
    node*nxt[2];
};

const int maxn = 100010;

struct TRIE{
    node no[maxn*50];
    node*root;
    node*newnode(){
        static node* n = &no[0];
        return n++;
    }
    
    TRIE(){
        root = newnode();
    }
    void insert(ll x){
        node* cur = root;
        for(int i = 44;i>=0;i--){
            if(1LL<<i&x){
                if(!cur->nxt[1])cur->nxt[1] = newnode();
                cur = cur->nxt[1];
            }else{
                if(!cur->nxt[0])cur->nxt[0] = newnode();
                cur = cur->nxt[0];
            }
        }
    }
    ll query(ll x){
        ll ans = 0;
        node* cur = root;
        for(int i = 44;i>=0;i--){
            if(cur->nxt[!(1LL<<i&x)]){
                ans+=1LL<<i;
                cur = cur->nxt[!(1LL<<i&x)];
            }else{
                cur = cur->nxt[!!(1LL<<i&x)];
            }
        }
        return ans;
    }
};
ll v[maxn],p[maxn],s[maxn];






TRIE tree;
int n;




int main(){
    cin>>n;
    REP(i,1,n+1)cin>>v[i];
    REP(i,1,n+1){
        p[i] = p[i-1]^v[i];
    }
    RREP(i,n,1){
        s[i] = s[i+1]^v[i];
    }
    tree.insert(0);
    ll ans = 0;
    RREP(i,n,0){
        ans = max(ans,tree.query(p[i]));
        tree.insert(s[i]);
    }
    cout<<ans;
    return 0;
}
