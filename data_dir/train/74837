#include <bits/stdc++.h>
using namespace std;
using ll = long long;

vector<int> fa, dist;
vector<vector<int>> g;

void die() {
  cout << "No";
  exit(0);
}

void dfs(int u, int p, int d) {
  fa[u] = p;
  dist[u] = d;
  for (auto v : g[u]) {
    if (v == p) continue;
    dfs(v, u, d + 1);
  }
}

bool solve(int u, int p, int k) {
  int kids = 0;
  bool ans = true;
  for (auto v : g[u]) {
    if (v == p) continue;
    kids++;
    ans &= solve(v, u, k - 1);
  }
  if (k < 0) {
    ans = false;
  } else if (k == 0) {
    ans &= (kids == 0);
  } else {
    ans &= (kids >= 3);
  }
  return ans;
}

int main() {
  cin.tie(0);
  cin.sync_with_stdio(0);

  int n, k;
  cin >> n >> k;

  g.resize(n + 1);
  fa.resize(n + 1);
  dist.resize(n + 1);
  for (int i = 1; i < n; ++i) {
    int u, v;
    cin >> u >> v;
    g[u].emplace_back(v);
    g[v].emplace_back(u);
  }

  dfs(1, 0, 0);
  int root = max_element(dist.begin() + 1, dist.end()) - dist.begin();
  
  dfs(root, 0, 0);
  root = max_element(dist.begin() + 1, dist.end()) - dist.begin();
  
  int depth = dist[root];  
  if (depth != 2 * k) die();
  
  for (int i = 0; i < k; ++i) root = fa[root];

  bool can = solve(root, 0, k);
  cout << (can ? "Yes" : "No");
}