/*
▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐
 
*/
#pragma GCC optimize("O3")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>


using namespace std;



#define ll long long
#define ld double
#define null NULL
#define prev prev228
#define index index228
#define left left228
#define right right228
#define hash hash228
#define y1 y1228
#define y0 y0228
#define firn(i, n) for (int i = 0; i < (int)n; ++i)
#define forn(i, n) for (int i = 1; i <= (int)n; ++i)
#define double long double
#define int long long

template<typename T> inline void uin(T &a, T b) {
    if (b < a) a = b;
}

template<typename T> inline void uax(T &a, T b) {
    if (b > a) a = b;
}

const int maxN = 100 * 100 + 17, maxn = 228228, inf = 1e9 + 228;

int n, q;


int val[maxn], LEFT[maxn], RIGHT[maxn], gor[maxn], gol[maxn];

vector<int> open[maxn], clos[maxn], meet[maxn];

vector<int> qq[maxn * 4];


bitset<maxN> res;

bitset<maxN> cur;


vector<int> d;


int m;

void build(int l = 1, int r = m, int v = 1) {
	if (l == r) return ;
	int mid = (l + r) >> 1;
	for (int i = l + 1; i <= mid + 1; ++i) {
		if (d[i] > 0 && gor[i] >= r) {
			qq[v + v + 1].push_back(d[i]);
		}
	}
	for (int i = mid; i < r; ++i) {
		if (d[i + 1] < 0 && gol[i] <= l) {
			qq[v + v].push_back(-d[i + 1]);
		}
	}
	build(l, mid, v << 1);
	build(mid + 1, r, v << 1 | 1);
}




void solve(int l = 1, int r = m, int v = 1) {
	int mid = (l + r) >> 1;
	bitset<maxN> ret = cur;
	
	for (int i : qq[v]) {
		cur |= (cur << i);
	}
	
	if (l == r) {
		if (d[l] > 0) {
			res |= cur;
		}
		return ;
	}
	solve(l, mid, v << 1);
	solve(mid + 1, r, v << 1 | 1);
	cur = ret;
}



signed main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> q;
	forn(i, q) {
		int l, r, x;
		cin >> l >> r >> x;
		val[i] = x;
		open[l].push_back(i);
		clos[r].push_back(i);
	}
	d.push_back(0);
	int pos = 1;
	for (int i : open[1]) {
		d.push_back(val[i]);
		meet[val[i]].push_back(pos);
		++pos;
	}
	for (int i = 2; i <= n; ++i) {
		for (int ind : clos[i - 1]) {
			d.push_back(-val[ind]);
			meet[val[ind]].push_back(pos);
			++pos;
		}
		for (int ind : open[i]) {
			d.push_back(val[ind]);
			meet[val[ind]].push_back(pos);
			++pos;
		}
	}
	m = d.size() - 1;
	for (int elem = 1; elem <= n; ++elem) {
		vector<int> st;
		for (int i : meet[elem]) {
			if (d[i] < 0) {
				gor[st.back()] = i;
				gol[i - 1] = st.back();
				st.pop_back();
			} else {
				st.push_back(i);
			}
		}
	}
	forn(i, m) {
		if (d[i] > 0 && gor[i] == 0) {
			gor[i] = inf + 1;
		}
	}
	forn(i, m) {
		if (d[i] > 0) {
			--gor[i];
		}
	}
	cur[0] = 1;
	if (gor[1] >= m) {
		qq[1].push_back(d[1]);
	}
	build();
	solve();
	int cnt = 0;
	forn(i, n) {
		if (res[i]) {
			++cnt;
		}
	}
	cout << cnt << endl;
	forn(i, n) {
		if (res[i]) {
			cout << i << " ";
		}
	}
	cout << endl;
	return 0;
}



// kek


