#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pf push_front
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("board.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

int a;
struct Node{
    ll x;
    int sz=0;
    Node *l = nullptr, *r = nullptr;
    Node(Node *a, Node *b){
        l = a;
        r = b;
        x = l->x+r->x;
        sz = l->sz+r->sz;
    }
    Node(Node *a, Node *b, int c){
        l=a;
        r=b;
        x = c;
        sz=1;
    }
};
void upd(Node *n){ n->x = n->l->x+n->r->x;}

Node* build(int l, int r, vec<int> &m){
    if(l==r) return new Node(nullptr, nullptr, m[l-1]);
    int md = (l+r)/2;
    return new Node(build(l, md, m), build(md+1, r, m));
}

ll sum(int l, int r, int l1, int r1, Node *n){
    if(l==l1 && r==r1) return n->x;
    int md = (l1+r1)/2;
    if(r<=md) return sum(l,r,l1,md, n->l);
    if(l>md) return sum(l,r,md+1, r1, n->r);
    return sum(l,md,l1,md,n->l)+sum(md+1, r, md+1, r1, n->r);
}

Node* upd(int l1, int r1, Node *n, int p, int v){
    if(l1==r1 && r1==p) return new Node(nullptr, nullptr, v);
    int md = (l1+r1)/2;
    if(p<=md) return new Node(upd(l1,md,n->l, p,v), n->r);
    else return new Node(n->l, upd(md+1,r1,n->r,p,v));
}

int go(Node *l, Node *r, int v, int pos){
    if(!l->l) return v;
    if(pos<=r->l->x - l->l->x) return go(l->l, r->l, v, pos);
    return go(l->r, r->r, v+l->l->sz, pos-(r->l->x - l->l->x));
}

int main() {
    fast;
    int a; cin>>a;
    vec<int> m(a), n(2e6+1), led(2e6+1), us(2e6+1);
    for(int q=0; q<a; q++){
        cin>>m[q];
        n[m[q]] = 1;
    }
    led[0] = -1;
    for(int q=1; q<=2e6; q++) led[q] = n[q] ? q : led[q-1];
    int o = 0;
    for(int q=0; q<a; q++){
        if(us[m[q]]) continue;
        us[m[q]]=1;
        for(int w=m[q]*2-1; w<=2e6; w+=m[q]) o = max(o, led[w]%m[q]);
    }
    cout<<o;
}
