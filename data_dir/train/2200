// stay in my memory
#include <bits/stdc++.h>
//#define int long long
#define hash hashhash
#define X first
#define Y second
#define endl "\n"
#define Mp make_pair
#define debug(x) cerr << #x << " = " << x << endl
using namespace std;
inline int in(){int32_t x ; scanf("%d",&x) ; return x ; }
inline long long lin(){long long x ; scanf("%lld",&x) ; return x ;}
char ch[4000010];
inline string get(){ scanf("%s",ch) ; return string(ch) ; }
inline void read(int *a , int n ) { for (int i = 0 ; i < n ; i ++) a[i] = in() ; }
template <class blank> inline void out(blank x) {cout << x << endl ; exit(0) ;}
template <class blank , class blank2> inline void smin(blank &a , blank2 b) {a = a <= b ? a : b ;}
template <class blank , class blank2> inline void smax(blank &a , blank2 b) {a = a >= b ? a : b ;}
typedef pair<int , int > pii;
typedef long double ld;
typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<pii> vii;
const int maxn  = 3e5 + 10;
const int maxm = 4e6 + 10;
const int maxlg = 20;
const int base = 29;
const int mod = 1e9 + 7;
const int inf = 2e18 + 10;
const double eps = 1e-9;
int a[maxn],kmp[maxn];
bool dp[105][105];
int what[105][105];
pii pre[105][105];
inline void prnt(int a , int b)
{
    if (a <= 0 || b < 0 ) return ;
    prnt(pre[a][b].first,pre[a][b].second);
    cout << char('a' + what[a][b]);
}
int32_t main()
{
    int n = in() , k = in();
    string text = get();
    string res;
    int m = (int)text.size();
    for (int i = 0 ; i <= 100 ; i ++)
        for (int j = 0 ; j <= 100 ; j ++) pre[i][j] = {-1,-1};
    for (int i = 0 ; i < n - m + 1 ; i ++){
        char ch ; cin >> ch ; a[i] = ch - '0';
    }
    res.resize(n,'?');
    for (int i = 0 ; i < n - m + 1 ; i ++){
        if (a[i]){
            for (int j = i ; j < i + m ; j ++)
            {
                if (res[j] != '?' && res[j] != text[j-i]) out("No solution");
                res[j] = text[j-i];
            }
        }
    }
    int tmp = 0;
    for (int i = 1 ; i < m ; i ++)
    {
        while(tmp && text[i] != text[tmp]) tmp = kmp[tmp - 1];
        if (text[tmp] == text[i]) tmp ++;
        kmp[i] = tmp;
    }
    dp[0][0] = true;
    for (int i = 0 ; i < n ; i ++)
    {
        for (int j = 0 ; j < k ; j ++)
        {
            if (res[i] != '?' && res[i] - 'a' != j) continue;
            for (int preVal = 0 ; preVal <= m ; preVal ++)
            {
                if (dp[i][preVal] == 0) continue;
                tmp = preVal;
                while(tmp && (tmp == m || text[tmp] - 'a' != j)) tmp = kmp[tmp - 1];
                if (text[tmp] - 'a' == j ) tmp ++;
                if (tmp == m && !a[i-m+1]) continue;
                dp[i+1][tmp] = true;
                what[i+1][tmp] = j;
                pre[i+1][tmp] = {i,preVal};
            }
        }
    }
    for (int i = 0 ; i <= m ; i ++)
        if (dp[n][i]) {
            prnt(n,i);
            return 0;
        }
    out("No solution\n");
}