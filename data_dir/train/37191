#include <bits/stdc++.h>

using namespace std;
class C1130{
  public:
  int dx[4] = {0 , 0 , 1 , -1};
  int dy[4] = {1 , -1 , 0 , 0};
  int n , cc;
  pair < int , int > s ,d;
  vector < pair < int , int > > ws , wd;
  vector < string > grid;
  vector < vector < bool > > was;
  void scPair(pair < int , int > &p){
    cin >> p.first >> p.second;
    p.first--;
    p.second--;
  }
  void init(){
    cc = 0;
    cin >> n;
    scPair(s);
    scPair(d);
    grid.resize(n);
    was.resize(n , vector < bool > (n , false));
    for(int i = 0; i < n ;i++){
      cin >> grid[i];
    }
  }
  bool valid(int x , int y){
    return x > -1 && y > -1 && x < n && y < n;
  }
  void dfs(int x , int y , int push){
    was[x][y] = true;
    for(int i = 0;i < 4 ; i++){
      int xx = x + dx[i];
      int yy = y + dy[i];
      if(valid(xx , yy) && !was[xx][yy]){
        if(grid[xx][yy] == '1'){
           if(push == 1){
              ws.push_back({x , y});
           }
           if(push == 2){
             wd.push_back({x , y});
           }
           continue;
        }
        dfs(xx , yy , push);
      }
    }
  }
    int cal(int x , int y , int xx , int yy){
      int dx = xx - x;
      int dy = yy - y;
      return dx * dx + dy * dy;
    }
    int solve(){
      dfs(s.first , s.second , 1);
      if(was[d.first][d.second]){
        return 0;
      }
      dfs(d.first , d.second , 2);
      int ans = 2e9;
      for(int i = 0; i < (int)ws.size(); i++){
        int x = ws[i].first;
        int y = ws[i].second;
        for(int j = 0; j < (int)wd.size();j++){
          int xx = wd[j].first;
          int yy = wd[j].second;
          ans = min(ans , cal(x , y , xx , yy));
        }
      }
      return ans;
    }
};
int main(){
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  C1130 c;
  c.init();
  cout << c.solve()<< endl;
  
  return 0;
}
