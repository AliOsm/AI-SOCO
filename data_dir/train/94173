#include <bits/stdc++.h>
#define pb push_back
using namespace std;

const int mx = 100111;
const int mod = 1000000007;
void error(bool flag){ /// NO - 1
    cout<< ( (flag==1)?"NO":"-1"  )<<endl;
    exit(0);
}
int tree[2000001];
int arr[2000111];
void upd(int nd,int b,int e,int i,int j,int val){
    if(e<i||b>j){
        return;
    }
    if(b==e){
        tree[nd]=val;
        return;
    }
    upd(nd<<1,b,(b+e)>>1,i,j,val);
    upd(nd<<1|1,((b+e)>>1)+1,e,i,j,val);
    tree[nd] = __gcd(tree[nd<<1],tree[nd<<1|1]);
}
int cnt;
void query(int nd,int b,int e,int i,int j,int x){
    if(e<i || b>j)return;
    if(b>=i && e<=j){
        int p = b;
        int q = e;
        int node = nd;
        while(tree[nd]%x!=0 && cnt<2){
            if(p==q){
                cnt++;
                break;
            }
            if(tree[nd<<1]%x!=0 && tree[nd<<1|1]%x!=0){
                cnt+=2;
                break;
            }
            int mid = (p+q)>>1;
            if(tree[nd<<1]%x==0){
                nd = nd<<1|1;
                p = mid+1;
            }
            else {
                nd = nd<<1;
                q = mid;
            }
        }
        nd = node;
        return;
    }
    if(cnt<2) query(nd<<1,b,(b+e)>>1,i,j,x);
    if(cnt<2) query(nd<<1|1,((b+e)>>1)+1,e,i,j,x);
}

int main(){
   // freopen("in.txt","r",stdin);
//    freopen("in.txt","w",stdout);

    int n;
    cin>>n;
    for(int i=1;i<=n;i++){
        scanf("%d",&arr[i]);
        upd(1,1,n,i,i,arr[i]);
    }
    int q;
    cin>>q;
    while(q--){
        int type,l,r,x;
        scanf("%d",&type);
        if(type==1){
            scanf("%d%d%d",&l,&r,&x);
            cnt = 0;
            query(1,1,n,l,r,x);
            if(cnt<2)printf("YES\n");
            else printf("NO\n");
        }
        else{
            scanf("%d%d",&l,&x);
            upd(1,1,n,l,l,x);
            arr[l]=x;
        }
    }

    return 0;
}
