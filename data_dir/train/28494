#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <complex>
#include <tuple>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
typedef pair<int, bool> pib;
const int INF = (int) (1e9 + 1e5);
const int64 LINF = (int64) (1e18);
const int64 BASE = 1003;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL(what) {throw logic_error(string(what));}
#define ASSERT(exp) {if (!(exp)) {FAIL("");}}
#define ASSERTC(exp, what) {if (!(exp)) {FAIL(what);}}
#define y1 fjgjf
//typedef complex<double> comp;
const int MOD = 1000000007;

int tnum;


int n;
vector<vector<int>> s;
vector<bool> sun;
vector<int> mns;
int64 ans;

void init() {
	scanf ("%d", &n);
	s.resize(n);
	for (int i = 0; i < n; ++i) {
		int m; scanf ("%d", &m);
		s[i].resize(m);
		for (int j = 0; j < m; ++j) {
			scanf ("%d", &s[i][j]);
		}
	}
}

void solve() {
	int sun_cnt = 0;
	sun.resize(s.size(), false);
	for (int i = 0; i < s.size(); ++i) {
		int mn = INF;
		for (int j = 0; j < s[i].size(); ++j) {
			if (mn < s[i][j]) {
				sun[i] = true;
				++sun_cnt;
				break;
			}
			mn = min(mn, s[i][j]);
		}
		if (!sun[i]) {
			mns.push_back(mn);
		}
	}
	ans += (sq(int64(n)) - sq(int64(n) - sun_cnt));
	sort(mns.begin(), mns.end());
	for (int i = 0; i < s.size(); ++i) {
		if (sun[i]) {
			continue;
		}
		int mx = *max_element(s[i].begin(), s[i].end());
		auto it = lower_bound(mns.begin(), mns.end(), mx);
		ans += (it - mns.begin());
	}
}

void print_answer() {
	printf("%lld\n", ans);
}

void precalc() {
}

void run() {
#ifdef _MY_DEBUG
	freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
	//freopen(getenv("OUTPUT_PATH"), "wt", stdout);
#endif // _MY_DEBUG
	precalc();
	int t = 1; //cin >> t;
	for (tnum = 1; tnum <= t; ++tnum) {
		init();
		solve();
		print_answer();
	}
}

signed main() {
	srand(90);
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	run();
	return 0;
}