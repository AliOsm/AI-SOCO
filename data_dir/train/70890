/*
ID: hamed_51
PROG: ?
LANG: C++
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define LLD "%i64d"
#else
#define LLD "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-13
#define endl "\n"

inline void read(register int *n) {
	register char c; *n = 0;
	do { c = getchar(); } while (c < '0' || c > '9');
	do { *n = c-'0'+*n*10; c = getchar(); } while (c >= '0' && c <= '9');
}

int bt(vector<int> V) {
	int tot = 0, n = Size(V);
	FOR(i, 0, n) FOR(j, i+1, n) {
		int pos = (i+1)%n;
		bool ok = true;
		while (pos != j) {
			if (V[pos] > V[i] || V[pos] > V[j]) ok = false;
			pos = (pos+1)%n;
		}
		bool ok2 = true;
		pos = (j+1)%n;
		while (pos != i) {
			if (V[pos] > V[i] || V[pos] > V[j]) ok2 = false;
			pos = (pos+1)%n;
		}
		if (ok || ok2) tot++;
	}
	return tot;
}

int main() {
	ios::sync_with_stdio(false);
	int n = 50;
	srand(time(NULL));
	cin >> n;
	vector<int> V(n);
	//cout << n << endl;
	FOR(i, 0, n) /*V[i] = rand()%10+1;*/cin >> V[i];
	//FOR(i, 0, n) cout << V[i] << " "; cout << endl;
	//error(bt(V));
	long long tot = 0, mcnt = 0;
	int mx = *max_element(all(V)), m2 = -1;
	FOR(i, 0, Size(V)) mcnt += V[i]==mx;
	FOR(i, 0, Size(V)) if (V[i] < mx) m2 = max(m2, V[i]);
	if (mcnt == 1) FOR(i, 0, Size(V)) if (V[i] == m2) tot--;
	tot += mcnt*(mcnt-1)/2;
	deque<pii> Q;
	FOR(i, 0, 2*n) {
		pii cur(V[i%n], i);
		while (!Q.empty() && Q.back().Y <= i-n) Q.pop_back();
		//cout << i << " (" << cur.X << ") :";
		//FOR(j, 0, Size(Q)) cout << Q[j].X << "(" << Q[j].Y << ")" << " ";
		//cout << endl;
		if (i >= n) {
			const int GO = 300;
			int pos = 0;
			while (pos+GO < Size(Q) && Q[pos+GO].X < cur.X) pos += GO;
			while (pos < Size(Q) && Q[pos].X < cur.X) pos++;
			while (cur.X != mx && pos+GO < Size(Q) && Q[pos+GO].X <= cur.X) pos += GO;
			while (cur.X != mx && pos < Size(Q) && Q[pos].X <= cur.X) pos++;
			if (pos < Size(Q) && cur.X != mx) pos++;
			//cout << " +" << pos << endl;
			tot += pos;
		}
		while (!Q.empty() && Q.front().X < cur.X) Q.pop_front();
		Q.push_front(cur);
	}
	cout << tot << endl;
	return 0;
}
