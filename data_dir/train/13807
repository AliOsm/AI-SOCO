# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (int i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (int i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace std;
inline double Time() {return (clock() * 1.0) / CLOCKS_PER_SEC; } 
inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 1e6 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
int p[N];
pair < int, int > a[N];
vector < int > g[N];
bool u[N];
int sz[N];
ll ans;

inline void read () {
	scanf("%d", &n);
	For (i, 1, n) {
		scanf("%d", &a[i].F);
		a[i].S = i;
	}
	For (i, 2, n) {
		int l, r;
		scanf("%d%d", &l, &r);
		g[l].pb(r);
		g[r].pb(l);
	}
}

inline void pre () {
	For (i, 1, n) {
		u[i] = 0;
		p[i] = i; 
		sz[i] = 1;
	}
}

int get (int x) {
	if (p[x] != x) p[x] = get(p[x]);
	return p[x];
}

void uni (int x, int y, ll val) {
	x = get(x), y = get(y);
	//assert(x == y); 
	ans += sz[x] * val * sz[y];
	if (sz[x] < sz[y]) swap(x, y);
	p[y] = x;
	sz[x] += sz[y];
}

inline void solve () {
	pre ();
	sort(a + 1, a + n + 1);
	for (int c = 1, i; c <= n; c ++) {
		i = a[c].S, u[i] = 1;
		for (auto j : g[i]) if (u[j]) {
			uni(i, j, a[c].F);
		} 
	}

	pre ();
	reverse(a + 1, a + n + 1);
	for (int c = 1, i; c <= n; c ++) {
		i = a[c].S, u[i] = 1;
		for (auto j : g[i]) if (u[j]) {
			uni(i, j, -a[c].F);
		} 
	}
	printf("%lld\n", ans);
}

int main () {               
   	read();
   	solve();
    return Accepted;
}

// B...a D....