#include <bits/stdc++.h>
#define SZ(x) (int)x.size()
#define X first
#define Y second
typedef long long ll;
const int SZ=1e6+5;
using namespace std;

ll res;
ll segTree[1LL<<22];
int n,sz1,sz2,a[SZ];
pair<ll,int> l[SZ],r[SZ];

void update(int bg,int ed,int idxTree,int idxNode)
{
    if(!(bg<=idxNode && idxNode<=ed) || bg>ed)
        return;
        
    if(bg==idxNode && ed==idxNode)
    {
        segTree[idxTree]++;
        return;
    }
    
    int md=(bg+ed)/2;
    update(bg,md  ,idxTree*2+1,idxNode);
    update(md+1,ed,idxTree*2+2,idxNode);
    segTree[idxTree]=segTree[idxTree*2+1]+segTree[idxTree*2+2];
}

ll query(int bg,int ed,int idxTree,int segL,int segR)
{
    if(bg>=segL && ed<=segR)
        return segTree[idxTree];
    
    int md=(bg+ed)/2;
    ll resL=0,resR=0;
    
    if(segL<=md) 
        resL=query(bg,md  ,idxTree*2+1,segL,segR);
    if(segR>=md+1)
        resR=query(md+1,ed,idxTree*2+2,segL,segR);
    return resL+resR;
}

int main()
{
//  freopen("input.in", "r", stdin);
    scanf("%d",&n);
    for(int i=0;i<n;i++)
        scanf("%d",a+i);
    
    map<int,ll> mp1;
    for(int i=0;i<n;i++)
    {
        mp1[a[i]]++;
        l[sz1++]={mp1[a[i]],i};
    }
    
    map<int,ll> mp2;
    for(int i=n-1;i>=0;i--)
    {
        mp2[a[i]]++;
        r[sz2++]={mp2[a[i]],i};
    }
    
    sort(l,l+sz1);
    sort(r,r+sz2);
    
    int j=0;
    for(int i=0;i<n;i++)
    {
        while(j<n && l[i].X>r[j].X)
            update(0,n-1,0,r[j].Y),
            j++;
        res+=query(0,n-1,0,l[i].Y+1,n-1);
    }
    
    cout<<res;
}