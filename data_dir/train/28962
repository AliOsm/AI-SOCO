#include "bits/stdc++.h"
using namespace std;

#define  F  first
#define  S  second
#define  pb push_back
#define  mp make_pair
typedef long long int ll;
const int N = 1e6+6;
ll T[N],lzy[N],mark[N],lzy2[N];

void Merge(int nod)
{
    T[nod] = T[2*nod]+T[2*nod+1];
    mark[nod] = (mark[2*nod]==mark[2*nod+1])?mark[2*nod]:0;
}

void push_down( int nod,int lo,int hi )
{
    if( lzy2[nod] )
    {
        int mid = (lo+hi)>>1;
        mark[2*nod] = mark[2*nod+1] = lzy2[nod];
        lzy2[2*nod] = lzy2[2*nod+1] = lzy2[nod];
        lzy[2*nod] += lzy[nod];
        lzy[2*nod+1] += lzy[nod];
        T[2*nod] += lzy[nod]*(mid-lo+1);
        T[2*nod+1] += lzy[nod]*(hi-mid);
        lzy[nod] = lzy2[nod] = 0;
    }
}

void build( int nod,int lo,int hi )
{
    if(lo==hi)
    {
        mark[nod] = lo;
        return ;
    }
    int mid=(lo+hi)>>1;
    build(2*nod,lo,mid);
    build(2*nod+1,mid+1,hi);
    Merge(nod);
}

void updt( int nod,int lo,int hi,int l,int r,int x )
{
    if( hi<l||lo>r||lo>hi )return ;
    push_down(nod,lo,hi);
    if( lo>=l&&hi<=r&&mark[nod] )
    {
        T[nod] += abs(mark[nod]-x)*(hi-lo+1);
        lzy[nod] += abs(mark[nod]-x);
        lzy2[nod] = mark[nod] = x;
        return ;
    }
    int mid = (lo+hi)>>1;
    updt(2*nod,lo,mid,l,r,x);
    updt(2*nod+1,mid+1,hi,l,r,x);
    Merge(nod);
}

ll qry( int nod,int lo,int hi,int l,int r )
{
    if( hi<l||lo>r )return 0LL;
    push_down(nod,lo,hi);
    if( lo>=l&&hi<=r )return T[nod];
    int mid = (lo+hi)>>1;
    return qry(2*nod,lo,mid,l,r)+qry(2*nod+1,mid+1,hi,l,r);
}

signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);


    int n;cin>>n;
    int q;cin>>q;
    build(1,1,n);
    while(q--)
    {
        int typ;cin>>typ;
        if(typ==1)
        {
            int l,r,x;cin>>l>>r>>x;
            updt(1,1,n,l,r,x);
        }
        else
        {
            int l,r;cin>>l>>r;
            cout<<qry(1,1,n,l,r)<< "\n";
        }
    }














}

