#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <vector>
#include <queue>
#include <deque>
#include <utility>
#include <string>
#include <ext/rope>
#include <iterator>

using namespace std;
using namespace __gnu_cxx;

#define int long long
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define sz size
#define x1 awoifawkjgn
#define y1 aieugsnjkg

#define x2 seorinsjh
#define y2 sohijnsrh
#define scf scanf
#define prf printf
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define gcd(a,b) __gcd(a,b)
#define print(x) prf("%d\n", x.sz()); for (int i = 0; i < x.sz(); i++) prf("%d ", x[i]);
#define getBit(x,i) ((x&(1<<i))!=0 ? 1 : 0)
#define For(i,n) for (int i = 0; i < n; ++i)
#define FOR(i,begin,end,move) for (int i = begin; i != end; i += move)

typedef long long ll;

const ll base = 1000000007LL;
const ll INF = 10000000000000LL;

int n;
int a[2222][2222];
int da[2] = {0};
pair < int, int > dd[2];
int ans = 0;
int x1, y1, x2, y2;
int d[2222][2222] = {0};
int sum;
int used[2222][2222] = {0};
#undef int
int main()
{
//  freopen("input.txt","w",stdout);
#define int long long
    scf("%d", &n);
    For(i, n)
        For(j, n)
            scf("%d", &a[i][j]);
    dd[0].F = dd[0].S = 1;
    dd[1].F = 1;
    dd[1].S = 2;
    For(i, n)
    {
        int x = i;
        int y = 0;
        used[x][y] = 1;
        sum = 0;
        while (true)
        {
            if (x >= n || y >= n)
                break;
            sum += a[x][y];
            x++;
            y++;
        }
        x = i;
        y = 0;
        while (true)
        {
            if (x >= n || y >= n)
                break;
            d[x][y] += sum;
            //cout << x + 1 << " " << y + 1 << " = " << d[x][y] << endl;
            x++;
            y++;
        }
    }
    For(i, n)
    {
        int x = 0;
        int y = i;
        sum = 0;
        if (used[x][y] == 1)
            continue;
        used[x][y] = 1;
        while (true)
        {
            if (x >= n || y >= n)
                break;
            sum += a[x][y];
            x++;
            y++;
         }
        x = 0;
        y = i;
        while (true)
        {
            if (x >= n || y >= n)
                break;
            d[x][y] += sum;
        //  cout << x + 1 << " " << y + 1 << " = " << d[x][y] << endl;
            x++;
            y++;
        }
    }
/*  For(i, n)
    {
        For(j, n)
            prf("%d ", d[i][j]);
        prf("\n");
    }
    cout << "H" << endl; */
    For(i, n)
    {
        int x = i;
        int y = 0;
        if (used[x][y] == 2)
            continue;
        sum = 0;
        used[x][y] = 2;
        while (true)
        {
            if (x < 0 || y >= n)
                break;
            sum += a[x][y];
            x--;
            y++;
        }
        x = i;
        y = 0;
        while (true)
        {
            if (x < 0 || y >= n)
                break;
            d[x][y] += sum;
        //  cout << x + 1 << " " << y + 1 << " = " << d[x][y] << endl;
            x--;
            y++;
        }
    }
    For(i, n)
    {
        int x = n - 1;
        int y = i;
        if (used[x][y] == 2)
            continue;
        sum = 0;
        while (true)
        {
            if (x < 0 || y >= n)
                break;
            sum += a[x][y];
            x--;
            y++;
         }
        x = n - 1;
        y = i;
        while (true)
        {
            if (x >= n || y >= n)
                break;
            d[x][y] += sum;
        //  cout << x + 1 << " " << y + 1 << " = " << d[x][y] << endl;
            x--;
            y++;
        }
    }
    For(i, n)
        For(j, n)
        {
            int x = d[i][j] - a[i][j];
            int ko = (i + j) % 2;
            if (x > da[ko])
            {
                da[ko] = x;
                dd[ko].F = i + 1;
                dd[ko].S = j + 1;
            }
        }
    cout << da[0] + da[1] << endl;
    cout << dd[0].F << " " << dd[0].S << " " << dd[1].F << " " << dd[1].S << endl;
    /*For(i, n)
        For(j, n)
        if (i % 2 != j % 2)
            For(k1, 2)
                For(k2, 2)
                    if (d1[i][k1] + d2[i][k2] > ans)
                    {
                        ans = d1[i][k1] + d2[i][k2];
                        if (k1 == 0)
                            x1 = i + 1, y1 = 1;
                        else y1 = i + 1, x1 = 1;
                        if (k2 == 0)
                            x2 = j + 1, y2 = 1;
                        else x2 = n, y2 = i + 1;
                    }*/

//  cout << ans << endl;
//  cout << x1 << " " << y1 << " " << x2 << " " << y2 << endl;
#undef int
    return 0;
}
