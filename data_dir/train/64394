#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
vector<int> e[200010];
priority_queue<pair<int, int> > l;
int ch[200010], d[200010], cch[200010], par[200010];
long long ans;
void dfs(int v, int p) {
	for (int i = 0; i < e[v].size(); i++) {
		int w = e[v][i];
		if (w == p) continue;
		par[w] = v;
		d[w] = d[v] + 1;
		dfs(w, v);
		ch[v] += ch[w] + 1;
	}
	cch[v] = ch[v];
	if (!ch[v]) l.push(make_pair(d[v], v));
}
int main() {
	int n, k;
	scanf("%d%d", &n, &k);
	for (int i = 1; i < n; i++) {
		int u, v;
		scanf("%d%d", &u, &v);
		--u; --v;
		e[u].push_back(v);
		e[v].push_back(u);
	}
	dfs(0, -1);
	for (int i = 0; i < k; i++) {
		int x = l.top().second;
		ans += l.top().first;
		l.pop();
		int y = par[x];
		cch[y] -= ch[x] + 1;
		if (!cch[y]) {
			l.push(make_pair(d[y] - ch[y], y));
		}
	}
	printf("%lld\n", ans);
	return 0;
}
