#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

#define f first
#define s second

#define pb push_back
#define mp make_pair
#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define rep(i, l, r) for (int i = l; i <= r; i++)
#define per(i, l, r) for (int i = l; i >= r; i--)

#define dbg(x) cerr << (#x) << " --> " << (x) << nl;
#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

#define DoNotStop ""

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef tree < pair <int, int>, null_type, less < pair <int, int> >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 1e5 + 7, inf = 1e9 + 7, mod = 1e9 + 7;
const ll linf = (ll)1e18 + 7;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

  struct line {
    ll k, b;
    inline line() {}
    inline line(ll k, ll b) : k(k), b(b) {}
  };

  inline bool not_inter(line x, line y) {
    return x.k - y.k == 0;
  }

  inline double inter(line x, line y) {
    double f = y.b - x.b, s = x.k - y.k;
    return f / s;
  }

  inline double get(line k, double x) {
    return k.k * x + k.b;
  }

  struct Convex {
    vector <line> p;
    inline void push(const line &l3) {
      while (sz(p) > 1 && inter(p[sz(p) - 2], l3) <= inter(p[sz(p) - 1], p[sz(p) - 2]))
        p.pop_back();
      p.pb(l3);
    }

    inline double find(double x) {
      int l = 0, r = sz(p) - 2, res = 0;
      while (l <= r) {
        int mid = l + r >> 1;
        if (get(p[mid], x) >= get(p[mid + 1], x)) res = mid + 1, l = mid + 1;
        else r = mid - 1;
      }
      return get(p[res], x);
    }

  };

  int n;
  int a[N], b[N];
  ll dp[N];
int main() {
  #ifndef DoNotStop
    freopen (DoNotStop".in", "r", stdin);
    freopen (DoNotStop".out", "w", stdout);
  #endif

  scanf ("%d", &n);
  rep(i, 1, n)
    scanf ("%d", &a[i]), dp[i] = inf;
  rep(i, 1, n)
    scanf ("%d", &b[i]);

  Convex x;
  dp[1] = 0;
  x.push(line(b[1], dp[1]));
  rep(i, 2, n) {
    dp[i] = x.find(a[i]);
    x.push(line(b[i], dp[i]));
  }

  cout << dp[n];
  ioi
}
