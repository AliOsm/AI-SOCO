#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

const int MaxN = 102, MaxD = 4, MaxC = 0x3F3F3F3F, NA = -1;
const int dx [MaxD] = {-1,  0,  1,  0},
          dy [MaxD] = { 0, -1,  0,  1};

int f [MaxN] [MaxN];
char g [MaxN] [MaxN];
bool t [MaxN];
int a, b, c, k, m, n;

void recur (int x, int y, int v)
{
 t[g[x][y] - 'a'] = true;
 if (f[x][y] != v)
  return;
 f[x][y] += k;
 int d;
 for (d = 0; d < MaxD; d++)
  recur (x + dx[d], y + dy[d], v);
}

void mark (int x, int y, int v, char c)
{
 if (f[x][y] != v)
  return;
 g[x][y] = c;
 f[x][y] += k;
 int d;
 for (d = 0; d < MaxD; d++)
  mark (x + dx[d], y + dy[d], v, c);
}

int main (void)
{
 int i, j, p;
 bool ok;
 while (scanf (" %d %d %d %d %d", &n, &m, &a, &b, &c) != EOF)
 {
  ok = true;

  if ((n * m) & 1)
   ok = false;

  memset (f, NA, sizeof (f));
  k = 0;
  if ((n & 1))
  {
   for (j = 0; j < m; j += 2)
   {
    f[n][j + 1] = f[n][j + 2] = k;
    k++;
    a--;
   }
   if (a < 0)
    ok = false;
  }

  if ((m & 1))
  {
   for (i = 0; i < n; i += 2)
   {
    f[i + 1][m] = f[i + 2][m] = k;
    k++;
    b--;
   }
   if (b < 0)
    ok = false;
  }

  for (i = 1; i < n; i += 2)
   for (j = 1; j < m; j += 2)
    if (a >= 2)
    {
     f[i][j] = f[i][j + 1] = k;
     k++;
     a--;
     f[i + 1][j] = f[i + 1][j + 1] = k;
     k++;
     a--;
    }
    else if (b >= 2)
    {
     f[i][j] = f[i + 1][j] = k;
     k++;
     b--;
     f[i][j + 1] = f[i + 1][j + 1] = k;
     k++;
     b--;
    }
    else
    {
     f[i][j] = f[i + 1][j] = f[i][j + 1] = f[i + 1][j + 1] = k;
     k++;
     c--;
    }

  ok &= (c >= 0);

  if (!ok)
   printf ("IMPOSSIBLE\n");
  else
  {
   memset (g, 'z', sizeof (g));
   for (i = 1; i <= n; i++)
    for (j = 1; j <= m; j++)
     if (g[i][j] == 'z')
     {
      memset (t, 0, sizeof (t));
      recur (i, j, f[i][j]);
      for (p = 0; p < MaxN; p++)
       if (!t[p])
        break;
      mark (i, j, f[i][j], p + 'a');
     }

   for (i = 1; i <= n; i++)
   {
    for (j = 1; j <= m; j++)
     putchar (g[i][j]);
    putchar ('\n');
   }
  }
 }
 return 0;
}
