#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;
using namespace std;
typedef tree<pair<int,int> ,null_type,less<pair<int,int> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
long long MOD = 1e9+7;
pair<int,int> dx[4] = {{1,0},{-1,0},{0,1},{0,-1}};
long long fastpow(long long x,long long k)
{
    if(!k)
        return 1;
    if(k & 1)
        return ((x * fastpow(x,k-1) % MOD) % MOD) % MOD;
    long long ans = fastpow(x,k/2);
    ans %= MOD;
    ans *= ans;
    ans %= MOD;
    return ans;
}
long long sumF(long long x)
{
    int s = 0;
    while(x)
        s += x%10,x /= 10;
    return s;
}
string s;
int main()
{
    int t;
    cin >> t;
    while(t--)
    {
          int n;
          cin>>n;
          vector<pair<pair<int,int>,int > > interv(n);
          for(int i = 0 ; i<n;i++){
              cin>> interv[i].first.first >>interv[i].first.second;
                interv[i].second = i+1;
          }
          sort(interv.begin(),interv.end());

          int mxend = interv[0].first.second;
          int split = -1;

          for(int i = 1 ; i< n;i++){
              if(interv[i].first.first > mxend){
                  split = i;break;
              }else{
                  mxend = max(interv[i].first.second , mxend);
              }
          }
            if(split == -1){
                cout<<-1<<"\n";
                continue;
            }
          map<int,int> m;
          for(int i = 0 ; i< split ; i++){
              m[interv[i].second] = 1;
          }
          for(int i = split ; i<n ;i++){
              m[interv[i].second] = 2;
          }
          for(int i =1 ; i<=n;i++){
              cout<<m[i]<<" ";
          }
          cout<<"\n";
    }

  return 0;
}
