#include <bits/stdc++.h>
#include <ctime>

using namespace std;

#define space ' '
#define enter "\n"
#define fi first
#define se second
#define mp make_pair
#define ALL(x) x.begin(), x.end()

typedef long long ll;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef set <int> si;
typedef map <int, int> mii;
typedef pair <ll, ll> pll;
typedef vector <int> vi;
typedef vector <pii> vii;
typedef long double ld;

template <class T>
T sqr (T x) {
	return x * x;
}

template <class T>
T gcd (T a, T b) {
	return b ? gcd(b, a % b) : a;
}

template <class T1, class T2>
T1 chmin (T1 & x, const T2 & y) {
	if (T1(y) < x)
		return x = y;
	return x;
}

template <class T1, class T2>
T1 chmax (T1 & x, const T2 & y) {
	if (T1(y) > x)
		return x = y;
	return x;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const pair <T1, T2> & p) {
	return os << '(' << p.fi << ", " << p.se << ')';
}

template <class T>
ostream & operator << (ostream & os, const vector <T> & v) {
	os << '{';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '}';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const set <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const multiset <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const map <T1, T2> & m) {
	os << '<';
	bool was = false;
	for (const auto & x : m) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '>';
	return os;
}

const ll INF = (ll) 2e9;
const int MOD = (int) 1e9 + 7;
const int MAXN = (int) 1e5 + 10;

int n, k;
int need[MAXN];
bool important[MAXN], us[MAXN];
vi d[MAXN], g[MAXN];
queue <int> q;
vector <int> path, ans;

int main () {
	ios_base::sync_with_stdio(false);
	cin >> n >> k;
	for (int i = 1; i <= k; i++) {
		int x;
		cin >> x;
		important[x] = true;
	}
	for (int i = 1; i <= n; i++) {
		int m;
		cin >> m;
		need[i] = m;
		while (m--) {
			int x;
			cin >> x;
			d[x].push_back(i);
			g[i].push_back(x);
		}
	}
	for (int i = 1; i <= n; i++) {
		if (!g[i].size())
			q.push(i);
	}
	while (q.size()) {
		int x = q.front();
		q.pop();
		path.push_back(x);
		for (auto to : d[x]) {
			need[to]--;
			if (!need[to])
				q.push(to);
		}
	}
	for (int i = path.size() - 1; i >= 0; i--) {
		for (auto back : g[path[i]]) {
			if (important[path[i]])
				important[back] |= true;
		}
	}
	memset(need, false, sizeof(need));
	for (int i = 1; i <= n; i++)
		need[i] = g[i].size();
	for (auto it : path) {
		if (!important[it])
			continue;
		ans.push_back(it);
		if (need[it]) {
			cout << -1;
			return 0;
		}
		for (auto to : d[it])
			need[to]--;
		important[it] = false;
	}
	for (int i = 1; i <= n; i++)
		if (important[i]) {
			cout << -1;
			return 0;
		}
	cout << ans.size() << enter;
	for (auto it : ans)
		cout << it << space;
}