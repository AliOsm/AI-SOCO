
// Problem : E. Tree Painting
// Contest : Educational Codeforces Round 67 (Rated for Div. 2)
// URL : https://codeforces.com/contest/1187/problem/E
// Memory Limit : 256 MB
// Time Limit : 2000 ms
// Powered by CP Editor (https://github.com/cpeditor/cpeditor)

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
ordered_set;	

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<pii, int> para;
const ll inf = 1e18 + 7;
const ll maxN = 1e6 + 5;
const ll MOD = 1e9 + 7;

ll n, treesz[maxN];
vi graph[maxN];
ll ans, maxAns;

void DFS(int u, int par) {
	treesz[u] = 1;
	for (auto v: graph[u]) {
		if (v != par) {
			DFS(v, u);
			treesz[u] += treesz[v];
		}
	}	
}

void DFS2(int u, int par) {
	//cout << u << " " << ans << endl;
	maxAns = max(maxAns, ans);
	for (auto v: graph[u]) {
		if (v != par) {
			ll prev = treesz[v];
			ll prevAns = ans;
			treesz[u] -= treesz[v];
			ans -= treesz[v];
			ans += (n - treesz[v]);
			treesz[v] = n;
			DFS2(v, u);
			ans = prevAns;
			treesz[v] = prev;
			treesz[u] = n;
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin >> n;
	REP(i, n - 1) {
		int a, b;
		cin >> a >> b;
		graph[a].pb(b);
		graph[b].pb(a);
	}
	DFS(1, -1);
	ans = accumulate(treesz + 1, treesz + n + 1, 0LL);
	DFS2(1, -1);
	cout << maxAns << endl;
	return 0;
}
 
