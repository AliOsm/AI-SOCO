#include <bits/stdc++.h>
using namespace std;

const int N = 1e3 + 100;

struct nd {
  int v;
  nd *r, *d;

};

nd a[N][N];

nd * GetNd(int h, int w) {
  nd *cur = &a[0][0];
  while (h--) cur = cur->d;
  while (w--) cur = cur->r;
  return cur;
}

void PrintM(int n, int m) {
  nd *cur = &a[0][0];
  cur = cur->d;
  for (int i = 0; i < n; ++i, cur = cur->d) {
    nd * curc = cur->r;
    for (int j = 0; j < m; ++j, curc = curc->r) {
      if (j > 0) cout << ' ';
      cout << curc->v; 
    }
    cout << '\n';
  }
}

int main()
{
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  int n, m, q;
  cin >> n >> m >> q;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= m; ++j) {
      cin >> a[i][j].v;
    }
  }
  for (int i = 0; i <= n; ++i) {
    for (int j = 0; j <= m; ++j) {
      a[i][j].r = &a[i][j+1];
      a[i][j].d = &a[i+1][j];
    }
  }
  while (q--) {
    int a, b, c, d, h, w;
    cin >> a >> b >> c >> d >> h >> w;
    nd *up1 = GetNd(a-1, b),    *up2 = GetNd(c-1, d);
    nd *dw1 = GetNd(a+h-1, b),  *dw2 = GetNd(c+h-1, d);
    nd *le1 = GetNd(a, b-1),    *le2 = GetNd(c, d-1);
    nd *rg1 = GetNd(a, b+w-1),  *rg2 = GetNd(c, d+w-1);
    nd *p1 = up1, *p2 = up2;
    for (int i = 0; i < w; ++i) {
      swap(p1->d, p2->d);
      p1 = p1->r;
      p2 = p2->r;
    }
    p1 = dw1, p2 = dw2;
    for (int i = 0; i < w; ++i) {
      swap(p1->d, p2->d);
      p1 = p1->r;
      p2 = p2->r;
    }
    p1 = le1, p2 = le2;
    for (int i = 0; i < h; ++i) {
      swap(p1->r, p2->r);
      p1 = p1->d;
      p2 = p2->d;
    }
    p1 = rg1, p2 = rg2;
    for (int i = 0; i < h; ++i) {
      swap(p1->r, p2->r);
      p1 = p1->d;
      p2 = p2->d;
    }
  }

  PrintM(n, m);
}
// g++ -W -Wall -Wextra -pedantic -std=c++0x -o p main.cpp
