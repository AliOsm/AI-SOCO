#include <bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define oo 2000000000
const int N = 1510 , M = 1000010;
int n , k;
char tmpread[9];
int dist[N][N];
vector< int > onpath;
bool ask(int a,int b,int c){
	printf("? %d %d %d\n",a,b,c);
	fflush(stdout);
	scanf("%s",tmpread);
	if(tmpread[0] == 'Y')
		return 1;
	return 0;
}

bool OO = true;

inline void getdist(int a,int b){
	dist[a][b] = dist[b][a] = 1;
	if(OO){
		onpath.clear();
	}
	for(int i = 1;i<=n;i++){
		if(i == a || i == b) continue;
		if(ask(a,i,b)){
			dist[a][b]++;
			if(OO)onpath.push_back(i);
		}
	}
	dist[b][a] = dist[a][b];
}

void finish(int answer){
	printf("! %d\n",answer);
	fflush(stdout);
	exit(0);
}

bool check(int node){
	int node2 = 1;
	if(node == 1) node2 = 2;
	for(int i = 1;i<=n;i++){
		if(i == node || i == node2) continue;
		if(ask(node2,node,i))
			return false;
	}
	return true;
}
int node1 = -1,  node2 = -1;
int depth = 0;
vector< int > v , v2;
int main() {
	srand(time(0));
	scanf("%d%d",&n,&k);
	int tmp = 1 , sum = 0;
	while(sum < n){
		sum += tmp;
		depth++;
		tmp *= k;
	}
	depth--;
	if(n == 1)
		finish(1);
	for(int i = 1;i<=n;i++){
		v.push_back(i);
	}
	for(int i = 0;i<10;i++) random_shuffle(v.begin(),v.end());
	for(int i = 0;i<(int)v.size();i++){
		if(check(v[i])){
			if(node1 == -1)
				node1 = v[i];
			else{
				getdist(node1,v[i]);
				if(dist[node1][v[i]] == depth * 2){
					node2 = v[i];
					break;
				}
			}
		}
	}
	OO = false;
	for(int i = 0;i<(int)onpath.size();i++){
		getdist(node1,onpath[i]);
		if(dist[node1][onpath[i]] == depth){
			finish(onpath[i]);
		}
	}
	assert(false);
	return 0;
}