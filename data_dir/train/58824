#include "bits/stdc++.h"
using namespace std;
const int N = 505;

char get(int x) {
	return (char) (x + 'a');
}

int n , m , w;
int dp[N][N];
int mn[N][N];
int pref[N][N];
string has_class[N];

int solve(int row , int can_skip) {
	if(row > n) return 0;
	if(dp[row][can_skip] != -1)
		return dp[row][can_skip];
	int res = (int) 2e9;
	for(int sk = 0; sk <= can_skip; ++sk) {
		res = min(res , mn[row][sk] + solve(row + 1 , can_skip - sk));
	}
	return dp[row][can_skip] = res;
}

int main() {
	cin >> n >> m >> w;
	for(int i = 0; i < n; ++i) {
		cin >> has_class[i];
	}
	for(int i = 0; i < n; ++i) {
		for(int j = 0; j < m; ++j) {
			if(j > 0) {
				pref[i][j] = pref[i][j - 1] + (has_class[i][j] == '1');
			} else {
				pref[i][j] = has_class[i][j] == '1';
			}
		}
		for(int j = 0; j < N; ++j) {
			mn[i][j] = (int) 2e9;
		}
		mn[i][pref[i][m - 1]] = 0;
		for(int j = 0; j < m; ++j) {
			if(has_class[i][j] != '1') continue;
			for(int k = j; k < m; ++k) {
				if(has_class[i][k] != '1') continue;
				int skipped = pref[i][m - 1] - (pref[i][k] - (j > 0 ? pref[i][j - 1] : 0));
				mn[i][skipped] = min(mn[i][skipped] , k - j + 1); 
			}
		}
	}
	memset(dp , -1 , sizeof dp);
	printf("%d\n" , solve(0 , w));
	return 0;
}