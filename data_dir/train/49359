#include<bits/stdc++.h>
using namespace std;

#define ll             long long
#define gcd(a,b)       __gcd(a,b)
#define lcm(a,b)       a*(b/gcd(a,b))
#define pii            pair<int, int>
#define pll            pair<ll, ll>
#define pil            pair<int, ll>
#define pli            pair<ll, int>
#define vi             vector<int>
#define vl             vector<ll>
#define vii            vector<pii>
#define vll            vector<pll>
#define vil            vector<pil>
#define vli            vector<pli>
#define mii            map<int, int>
#define mll            map<ll, ll>
#define pb             push_back
#define ppb            pop_back
#define mp             make_pair
#define mt             make_tuple
#define lb             lower_bound
#define ub             upper_bound
#define ff             first
#define ss             second
#define all(v)         v.begin(),v.end()
#define fill(a,b)      memset(a,b,sizeof a)
#define smax(a, b)     a=max(a, b)
#define smin(a, b)     a=min(a, b)
#define sqr(x)         x*x
#define cube(x)        x*x*x
#define asort(a, n)    sort(a+1, a+n+1)
#define FOR(i, l, r)   for(int i=l;i<=r;i++)
#define ROF(i, l, r)   for(int i=r;i>=l;i--)
#define endl           '\n'

int in() {
    int n;
    scanf("%d",&n);
    return n;
}

ll Lin() {
    ll n;
    scanf("%lld",&n);
    return n;
}

double Din() {
    double n;
    scanf("%lf",&n);
    return n;
}

const double gama = 0.57721566490;
const double eps = 0.00000001;
const ll inf = 1e17;
const ll mod = 1e9 + 7;
const int N = 2e5 + 5;

vi g[N];
bool vis[N];
int d[N], pre[N], l[N];

vi s;

void dfs(int u) {
    vis[u]=true;
    s.pb(u);
    l[u]=d[u]=s.size()-1;
    for(auto v : g[u]) {
        if(!vis[v]) {
            dfs(v);
        }
    }
    d[u]=s.size()-1;
}

int main() {
    int n=in(), q=in();
    for(int i=2; i<=n; i++) {
        int u=in();
        g[u].pb(i);
        g[i].pb(u);
    }
    dfs(1);
    for(int i=0; i<n; i++) {
        pre[s[i]]=i;
    }
    while(q--) {
        int u=in(), k=in();
        if(d[u]-l[u]+1<k)
            printf("-1\n");
        else
            printf("%d\n", s[l[u]+k-1]);
    }

    return 0;
}
