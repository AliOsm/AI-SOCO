#include <bits/stdc++.h>
using namespace std;

signed main() {
  ios::sync_with_stdio(false);

  int N, M;
  cin >> N >> M;

  vector<vector<int>> G(N);

  for (int i = 0; i < N; ++i) {
    int K;
    cin >> K;
    for (int j = 0; j < K; ++j) {
      int U;
      cin >> U;
      G[i].push_back(U - 1);
    }
  }

  int S;
  cin >> S;

  vector<vector<int>> dp(N, vector<int>(2));
  vector<vector<int>> pr(N, vector<int>(2, -1));
  dp[S - 1][0] = 1;
  queue<pair<int, int>> que;
  que.emplace(S - 1, 0);
  while (que.size()) {
    int u, p;
    tie(u, p) = que.front();
    que.pop();
    for (int v : G[u]) {
      if (dp[v][p ^ 1]) continue;
      dp[v][p ^ 1] = 1;
      pr[v][p ^ 1] = u;
      que.emplace(v, p ^ 1);
    }
  }

  vector<int> rng(N);
  iota(rng.begin(), rng.end(), 0);
  if (any_of(rng.begin(), rng.end(), [&](int x) { return dp[x][1] && G[x].empty(); })) {
    cout << "Win" << endl;
    int u = *find_if(rng.begin(), rng.end(), [&](int x) { return dp[x][1] && G[x].empty(); });
    vector<int> ans;
    for (int x = u, p = 1; ~x; x = pr[x][p], p ^= 1) {
      ans.push_back(x);
    }
    for (int i = ans.size() - 1; ~i; --i) cout << ans[i] + 1 << " \n"[!i];
  } else {
    vector<int> vis(N);
    function<bool(int)> has_reachable_cycle = [&](int u) {
      for (int v : G[u]) {
        if (vis[v] == -1) return true;
        vis[v] = -1;
        bool hrc = has_reachable_cycle(v);
        if (hrc) return true;
        vis[v] = 1;
      }
      return false;
    };
    cout << (has_reachable_cycle(S - 1) ? "Draw" : "Lose") << endl;
  }

  return 0;
}
