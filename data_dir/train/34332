#include <string.h>
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <set>
 
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
 
#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf
 
#define pf printf
#define mp make_pair
 
using namespace std;
const int N = 5010;
const int mod = 998244353;

int inf = 1000000000;
int n,k,L;
ll dp[N][N];
ll p[N];

ll pw(ll a, int b) {
	ll ret = 1;
	while(b>0) {
		if(b&1) ret = (1ll*ret *a)%mod;
		a = (1ll*a*a)%mod;
		b = b>>1;
	}
	return ret;
}

ll add(ll a, ll b) {
	return (a+b)%mod;
}

ll sol(){
	p[0] = 1;
	for(int i = 1; i <=n; ++i) {
		p[i] = (p[i-1]*i)%mod;
	}
	dp[1][1] = 1;
	for(int i = 1; i <= 2*n; ++i) {
		for(int j = 0; j <=i; ++j) {
			if(i+j+2<=2*n)
				dp[i+1][j+1] = add(dp[i+1][j+1],dp[i][j]);
			if(j)
				dp[i+1][j-1] = add(dp[i+1][j-1],(dp[i][j]*j)%mod);
		}
	}
	ll ans = 0;
	for(int i = 1; i <=2*n; ++i) {
		for(int j = k; j <=n;++j) {
			if(i+j>2*n)break;
			ans = (ans + (dp[i][j]*dp[2*n-i][j])%mod*p[j])%mod;
		}
	}
	ans = (ans * pw(dp[2*n][0],mod-2))%mod;
	ans = (ans *(L*pw(2*n+1,mod-2) %mod))%mod;
	return ans;
}

int main() {
	cin>>n>>k>>L;
	cout<<sol()<<endl;
}

