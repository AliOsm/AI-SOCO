#include <bits/stdc++.h>

using namespace std;

template <class T,class U>
void maximize(T &x,U y){
    if(x < y)x = y;
}
template <class T,class U>
void minimize(T &x,U y){
    if(x > y)x = y;
}
template <class T>
T Abs(T x){
    return (x < (T)0 ? -x : x);
}

#define llong long long
#define MASK(i) ((1LL) << (i))
#define BIT(x,i) (((x) >> (i)) & 1)
#define all(c) (c).begin(),(c).end()
#define fn "test"    ///FILE_NAME_HERE

/*----------END_OF_TEMPLATE----------*/

namespace task{

    class Line{
    public:
        llong m,b;
    public:
        Line(){};
        Line(llong _m,llong _b):m(_m),b(_b){};
        llong evaluate(int x) const{
            return m * (llong)x + b;
        }
    };

    class ConvexHullTrick{
    private:
         deque <Line> hull;
    public:
        ConvexHullTrick(){
            hull.clear();
        }
        bool bad(const Line &la,const Line &lb,const Line &lc){
            return (long double) (lc.b - lb.b) * (la.m - lb.m) >= (long double) (lb.b - la.b) * (lb.m - lc.m);
        }
        void addLine(const Line &nw){
            while(hull.size() >= 2 and bad(hull[hull.size() - 2],hull.back(),nw)){
                hull.pop_back();
            }
            hull.emplace_back(nw);
        }
        llong get(const int &x){
            while(hull.size() >= 2 and hull[0].evaluate(x) <= hull[1].evaluate(x)){
                hull.pop_front();
            }
            return hull[0].evaluate(x);
        }
    };
    ConvexHullTrick *cht = new ConvexHullTrick();

    const int N = 1e6 + 6;
    int n;
    llong f[N];
    vector <pair <pair <int,int>,llong> > rect;

    void solve(){
        cin>>n;
        for(int i = 1;i <= n;++i){
            int x,y;
            llong a;
            cin>>x>>y>>a;
            rect.emplace_back(make_pair(make_pair(x,y),a));
        }
        sort(all(rect));
        cht -> addLine(Line(0,0));
        llong ans = numeric_limits <llong> :: min();
        for(int i = 0;i < n;++i){
            f[i] = 1LL * rect[i].first.first * 1LL * rect[i].first.second - rect[i].second + cht -> get(rect[i].first.second);
            cht -> addLine(Line(-rect[i].first.first,f[i]));
            maximize(ans,f[i]);
        }
        cout<<ans;
    }
}

int main(void){
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    //freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    task::solve();
}
