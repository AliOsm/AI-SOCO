#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAX = 1e5 + 5;
vector<ii> pairs;
vector<int> adj[MAX];
int mark[MAX];
int pass = 1;
int n;

vector<ii> gen_pairs(const vector<int> &v) {
	vector<ii> p;
	int sz = v.size();
	fori(i, 0, sz) {
		int a = v[i], b = v[(i + 1) % sz];
		if(a > b) {
			swap(a, b);
		}
		p.emplace_back(a, b);
		a = v[i], b = v[(i + 2) % sz];
		if(a > b) {
			swap(a, b);
		}
		p.emplace_back(a, b);
	}
	sort(p.begin(), p.end());
	return p;
}

vector<int> gen(const vector<int> &v) {
	pass++;
	vector<int> new_v = v;
	for(auto &each : new_v) {
		mark[each] = pass;
	}
	while((int) new_v.size() < n) {
		int back = new_v.back();
		int back_back = new_v[new_v.size() - 2];
		int guy = -1;
		for(auto &each : adj[back]) {
			if(mark[each] != pass) {
				if(find(adj[back_back].begin(), adj[back_back].end(), each) != adj[back_back].end()) {
					if(guy == -1) {
						guy = each;
					}
					else {
						return new_v;
					}
				}
			}
		}
		if(guy == -1) {
			return new_v;
		}
		mark[guy] = pass;
		new_v.push_back(guy);
	}
	return new_v;
}

int main() {
	scanf("%d", &n);
	fori(i, 1, 2 * n + 1) {
		int a, b;
		scanf("%d %d", &a, &b);
		if(a > b) {
			swap(a, b);
		}
		adj[a].push_back(b);
		adj[b].push_back(a);
		pairs.emplace_back(a, b);
	}

	fori(i, 1, n + 1) {
		if(adj[i].size() != 4) {
			puts("-1");
			return 0;
		}
	}

	sort(pairs.begin(), pairs.end());

	if(n == 5) {
		vector<int> p {1, 2, 3, 4, 5};
		vector<int> _ans;
		do {
			auto _p = gen_pairs(p);
			if(_p == pairs) {
				_ans = p;
				break;
			}
		} while(next_permutation(p.begin(), p.end()));
		if(!_ans.empty()) {
			for(auto &each : _ans) {
				printf("%d ", each);
			}
			printf("\n");
		}
		else {
			puts("-1");
		}
		return 0;
	}

	vector<int> ans;
	vector<int> v {1};
	fori(i, 0, adj[1].size()) {
		fori(j, 0, adj[1].size()) {
			if(i != j) {
				v.push_back(adj[1][i]);
				v.push_back(adj[1][j]);
				vector<int> new_v = gen(v);
				if((int) new_v.size() == n) {
					vector<ii> p = gen_pairs(new_v);
					if(p == pairs) {
						ans = new_v;
						break;
					}
				}
				v.pop_back();
				v.pop_back();
			}
		}
		if(!ans.empty()) {
			break;
		}
	}

	if(!ans.empty()) {
		for(auto &each : ans) {
			printf("%d ", each);
		}
		printf("\n");
	}
	else {
		puts("-1");
	}

	return 0;
}

