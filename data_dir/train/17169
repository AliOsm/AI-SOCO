#include "bits/stdc++.h"
using namespace std;
 
// #define int long long

template <typename A, typename B>
string to_string(pair<A, B> p);

string to_string(const string&);

string to_string(const char* s);

string to_string(bool b);

template <typename A>
string to_string(A v);

template <typename A, typename B>
string to_string(pair<A, B> p);

void debug_out(); 

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T);

vector<string> vec_splitter(string s);
void debug_var(
vector<string> __attribute__ ((unused)) args,
__attribute__ ((unused)) int idx, 
__attribute__ ((unused)) int LINE_NUM) { cerr << endl; } 

template <typename Head, typename... Tail>
void debug_var(vector<string>, int, int, Head, Tail...);

#ifndef ONLINE_JUDGE
#define var(...) debug_var(vec_splitter(#__VA_ARGS__), 0, __LINE__, __VA_ARGS__)
#define stl(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define var(x...)
#define stl(...) 
#endif

const int mod = 1e9 + 7;
const int N = 1e6 + 5; 

vector<int> use;
string s;
int k;

int check(int mid) {  
  int K = k;
  int last = -1;
  for (int i = 0; i < use.size(); ++i) {
    if (use[i] - last <= mid) {
      // no problem
    }
    else {
      if (i == 0) return 0;
      --K;
      last = use[i-1]; 
    }
    // cout << use[i] << ' ' << last << '\n';
    if (use[i] - last > mid) return 0;
  }
  // cout << s.size() << ' '  << '\n';
  if (s.size() - 1 - last > mid) {
    --K;
    if (!use.empty())
      last = use.back();
  }
  if (s.size() - 1 - last > mid) {
    return 0;
  }
  return K > 0;
}

void solve() {
  string st, st2;
  cin >> st >> s;
  var(s);
  k = stoi(st);
  char ch;
  // cin >> ch;
  getline(cin, st2);
  s += st2;
  var(k, s);
  for (int i = 0; i < s.size(); ++i) {
    if (s[i] == '-' || s[i] == ' ') {
      use.push_back(i);
    }
  }
  int lo = 1, hi = s.size(), ans = -1; 
  while (lo <= hi) {
    int mid = lo + hi >> 1;
    if (check(mid)) {
      hi = mid - 1;
      ans = mid;
      var(mid);
    }
    else {
      lo = mid + 1;
    }
  } 
  if (ans == -1) ans = s.size();
  cout << ans << '\n';
} 

signed main() {
  ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
  // int T = 1; cin >> T; for (int i = 1; i <= T; ++i)
  solve();
  return 0;
}

string to_string(const string& s) {
  return '"' + s + '"';
}

string to_string(const char* s) {
  return to_string((string) s);
}

string to_string(bool b) {
  return (b ? "T" : "F");
}

template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}

template <typename Head, typename... Tail>
void debug_var(vector<string> args, int idx, int LINE_NUM, Head H, Tail... T) {
  if(idx > 0) cerr << ", "; else cerr << "Line(" << LINE_NUM << "): ";
  stringstream ss; ss << H;
  cerr << args[idx] << " = " << ss.str();
  debug_var(args, idx + 1, LINE_NUM, T...);
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}

vector<string> vec_splitter(string s) {
  s += ',';
  vector<string> res;
  while(!s.empty()) {
    res.push_back(s.substr(0, s.find(',')));
    s = s.substr(s.find(',') + 1);
  }
  return res;
}