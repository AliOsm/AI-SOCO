#include <iostream>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define y1 __y1
#define endl '\n'
#define sqr(x) (x) * (x)

typedef long long li;
typedef long double ld;
typedef pair<li, li> pt;

const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-15;
const ld pi = ld(3.1415926535897932384626433832795);

bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}

inline int myrand()
{
    return rand() ^ (rand() << 15);
}

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};

const int dxh[] = {-2, -1, 1, 2, 2, 1, -1, -2};
const int dyh[] = {1, 2, 2, 1, -1, -2, -2, -1};

const int N = 2e5 + 555;

pt b[N];
li a[N];
int n;
li r, mx;

int main(){
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    cout << setprecision(15) << fixed;
    cerr << setprecision(10) << fixed;

    srand(int(time(NULL)));

    scanf("%d %I64d %I64d", &n, &mx, &r);

    li sum = 0LL;

    forn(i, n)
        scanf("%I64d %I64d", &a[i], &b[i].X), b[i].Y = mx - a[i], sum += a[i];

    sort(b, b + n);

    li ans = 0;
    li need = r * n;
    need = max(0LL, need - sum);

    forn(i, n)
    {
        li can = min(b[i].Y, need);
        need -= can;
        ans += can * b[i].X;
    }

    cout << ans << endl;

    return 0;
}