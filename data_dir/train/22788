#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const ll N = 27, M = 16, inF = 2e9 + 100;

ll k, t, len, have[M], c[N][N], dp[N][N];
bool ok;
string ans;

void pre_pro() {
	for (int i = 0; i < N; i++)
		c[0][i] = 1;
	for (int i = 1; i < N; i++)
		for (int j = 1; j < N; j++)
			c[i][j] = c[i][j - 1] + c[i - 1][j - 1];
}

ll get(ll l) {
	if(l == 0)
		return 1;
	ll res = 0;
	for (int i = (ok == false? 1: 0); i < M; i++)
		if(have[i]) {
			have[i]--;
			memset(dp, 0, sizeof dp);
			for (int i = 0; i <= have[0]; i++)
				dp[0][i] = 1;
			for (int i = 1; i < M; i++)
				for (int j = 0; j <= l - 1; j++)
					for (int k = 0; k <= min(have[i], 1LL * j); k++) {
						dp[i][j] += c[k][j] * dp[i - 1][j - k];
						if(dp[i][j] > inF) {
							have[i]++;
							return inF;
						}
					}
			res += dp[M - 1][l - 1];
			have[i]++;
		}
	return res;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	pre_pro();
	cin >> k >> t;
	for (int i = 0; i < M; i++)
		have[i] = t;
	ll cnt = 0;
	for (int i = 1; i < N; i++) {
		cnt += get(i);
		if(cnt >= k) {
			cnt -= get(i);
			k -= cnt;
			len = i;
			break;
		}
	}
	
	ok = true;
	
	while(k) {
		//cerr << "len = " << len << " k = " << k << '\n';
		string t = ans;
		ll cnt = 0;
		for (int i = 0; i < M; i++)
			if(have[i]) {
				if(ans.size() == 0 && i == 0)
					continue;
				have[i]--;
				ll help = get(len - 1);
				cnt += help;
				if(cnt >= k) {
					if(i < 10)
						ans.push_back(char('0' + i));
					else
						ans.push_back(char('a' + i - 10));
					cnt -= help;
					k -= cnt;
					//cerr << i << " del: " << cnt << ' ' << help << '\n';
					break;
				}
				have[i]++;
				//cerr << i << " just " << help << " cnt = " << cnt << '\n';
			}
		len--;
		//cerr << ans << '\n';
		if(t == ans)
			break;
	}
	cout << ans;
	return 0;
}
