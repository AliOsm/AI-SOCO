#include <bits/stdc++.h>
using namespace std;

const long long mod = 998244353;

long long C[5110][105];
int p, s, r;

long long mod_pow(long long x, long long n){
	long long ret = 1;
	while (n > 0){
		if (n & 1) ret = ret * x % mod;
		x = x * x % mod;
		n >>= 1;
	}
	return ret;
}

void _init(){
	for (int i = 0; i <= 5100; i++) C[i][0] = 1;
	for (int i = 1; i <= 5100; i++){
		for (int j = 1; j <= min(i, 100); j++){
			C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % mod;
		}
	}
}

long long calc(int n, int m, int x){
	long long ret = 0, rec;
	for (int i = 0; i <= m && i * x <= n; i++){
		rec = C[m][i] * C[n - i * x + m - 1][m - 1] % mod;
		if (i & 1) ret -= rec;
		else ret += rec;
		ret = (ret % mod + mod) % mod;
	}
	return ret;
}

int main(){
	_init();
	long long ans, sum;
	scanf("%d %d %d",&p,&s,&r);
	ans = 0;
	for (int x = r; x <= s; x++){
		if (x * p < s) continue;
		for (int i = 1; i <= p; i++){
			if (i * x > s) break;
			if (p * (x - 1) + i < s) continue;
			if (i == p) ans += (i * x == s ? mod_pow(i, mod - 2) : 0);
			else ans += C[p - 1][i - 1] * calc(s - i * x, p - i, x) % mod * mod_pow(i, mod - 2) % mod;
			ans %= mod;
		}
	}
	ans *= mod_pow(C[s - r + p - 1][p - 1], mod - 2);
	ans %= mod;
	printf("%I64d\n", ans);
	return 0;
}