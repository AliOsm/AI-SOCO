/* 496E */
#include <iostream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
#include <iterator>
#include <iomanip>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define sti				set<int>
#define stpii			set<pair<int, int> >
#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define clr				clear
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1

typedef struct node_t {
	int l, r, k, id;
	
	friend bool operator< (const node_t& a, const node_t& b) {
		if (a.r == b.r)
			return a.l > b.l;
		return a.r < b.r;
	}
	
	void print() {
		printf("l = %d, r = %d, k = %d, id = %d\n", l, r, k, id);
	}
} node_t;

const int maxn = 1e5+5;
node_t Q[maxn], P[maxn];
int ans[maxn];

int main() {
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	int n, m;
	
	scanf("%d", &n);
	rep(i, 0, n) {
		scanf("%d %d", &Q[i].l, &Q[i].r);
		Q[i].id = i;
		// Q[i].print();
	}
	scanf("%d", &m);
	rep(i, 0, m) {
		scanf("%d %d %d", &P[i].l, &P[i].r, &P[i].k);
		P[i].id = i+1;
	}
	
	sort(Q, Q+n);
	sort(P, P+m);
	set<pii> st;
	set<pii>::iterator iter, titer;
	
	int i, j, k;
	
	i = 0;
	for (j=0; j<m; ++j) {
		while (i<n && Q[i].r<=P[j].r) {
			st.insert(mp(Q[i].l, Q[i].id));
			++i;
		}
		iter = st.lower_bound(mp(P[j].l, -1));
		while (iter!=st.end() && P[j].k-- > 0) {
			ans[iter->sec] = P[j].id;
			
			titer = iter;
			iter++;
			st.erase(titer);
		}
	}
	
	if (i<n || st.size()>0) {
		puts("NO");
	} else {
		puts("YES");
		rep(i, 0, n) {
			printf("%d ", ans[i]);
		}
		putchar('\n');
	}
	
	#ifndef ONLINE_JUDGE
		printf("time = %d.\n", (int)clock());
	#endif
	
	return 0;
}
