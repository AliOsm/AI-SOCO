#include <bits/stdc++.h>

using namespace std;
using ll = long long;
using ii = pair<int, int>;
#define ff first
#define ss second
#define pb push_back

const int N = 2003;

int n, k;
char mat[N][N];
int dist[N][N];
bool mark[N][N];

int in(int x, int y){
	return x >= 0 && y >= 0 && x < n && y < n;
}

int f(int x, int y){
	if(x == 0 && y == 0) return dist[x][y] = k - (mat[0][0] != 'a');
	int &ans = dist[x][y];
	if(mark[x][y]) return ans;
	mark[x][y] = 1;
	ans = -N;
	if(in(x-1, y)){
		ans = max(ans, f(x-1, y) - (mat[x][y] != 'a'));
	}
	if(in(x, y-1)){
		ans = max(ans, f(x, y-1) - (mat[x][y] != 'a'));
	}
	return ans;
}

int main(){
	scanf("%d %d", &n, &k);
	for(int i = 0; i < n; i++){
		scanf("%s", mat[i]);
	}
	memset(dist, -1, sizeof dist);
	f(n-1, n-1);
/*	priority_queue<pair<int, ii>> pq;
	pq.push({k - (mat[0][0] != 'a'), {0, 0}});
	dist[0][0] = k - (mat[0][0] != 'a');
	while(!pq.empty()){
		int p;
		ii xy;
		tie(p, xy) = pq.top();
		int x, y;
		tie(x, y) = xy;
		pq.pop();
		if(p < dist[x][y] || p <= 0){
			continue;
		}
		if(in(x+1, y) && dist[x+1][y] < p - (mat[x+1][y] != 'a')){
			dist[x+1][y] = p - (mat[x+1][y] != 'a');
			pq.push({dist[x+1][y], {x+1, y}});
		}
		if(in(x, y+1) && dist[x][y+1] < p - (mat[x][y+1] != 'a')){
			dist[x][y+1] = p - (mat[x][y+1] != 'a');
			pq.push({dist[x][y+1], {x, y+1}});
		}
	}
	*/
	int ma = -1;
	set<ii> ini[2];
	for(int i = 0; i < n; i++){
		for(int j = 0; j < n; j++){
			if(dist[i][j] >= 0){
				ma = max(ma, i+j);
			}
		}
	}
	for(int i = 0; i < n; i++){
		for(int j = 0; j < n; j++){
			if(dist[i][j] >= 0 && i+j == ma){
				ini[0].insert({i, j});
			}
		}
	}
	if(k == k){
		for(int i = 0; i <= ma; i++){
			printf("a");
		}
	}
	if(ma == -1){
                ma = 0;
		printf("%c", mat[0][0]);
	}
	if(ini[0].empty()){
		ini[0].insert({0, 0});
	}
	int at = ma;
	int id = 0;
	while(at != 2 * n - 2){
		char mi = 'z';
		for(ii i : ini[id]){
			if(in(i.ff+1, i.ss)){
				mi = min(mi, mat[i.ff+1][i.ss]);
			}
			if(in(i.ff, i.ss+1)){
				mi = min(mi, mat[i.ff][i.ss+1]);
			}
		}
		printf("%c", mi);
		for(ii i : ini[id]){
			if(in(i.ff+1, i.ss) && mat[i.ff+1][i.ss] == mi){
				ini[id^1].insert({i.ff+1, i.ss});
			}
			if(in(i.ff, i.ss+1) && mat[i.ff][i.ss+1] == mi){
				ini[id^1].insert({i.ff, i.ss+1});
			}

		}
		ini[id].clear();
		id^=1;
		at++;
	}
	printf("\n");
	return 0;
}
