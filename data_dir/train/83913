#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
const int maxn = 5001;
ll dp[2][maxn][2];
int ptr;
const ll infy = 1e14;
bool comp(pair<ll, int> a, pair<ll, int> b) {
    return a.y < b.y;
}
int main()
{
    fastread;
    int n, k;
    cin >> k >> n;
    vector<int> seq(n);
    vector< pair<ll, int> > v;
    for (int i = 0; i < n; i++) {
        cin >> seq[i];
    }
    sort(seq.begin(), seq.end());
    for (int i = 1; i < n; i++)
        v.pb({seq[i] - seq[i - 1], i - 1});
    sort(v.begin(), v.end());
    while (v.size() > (3 * k))
        v.pop_back();
    sort(v.begin(), v.end(), comp);
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < maxn; j++) {
            for (int p = 0; p < 2; p++) {
                dp[i][j][p] = infy;
            }
        }
    }
    dp[0][0][0] = 0;
    dp[0][1][1] = v[0].x;
    dp[1][0][0] = 0;
    for (int i = 1; i < v.size(); i++) {
        for (int j = 1; j <= k; j++) {
            dp[1 - ptr][j][0] = min(dp[ptr][j][1], dp[ptr][j][0]);
            if (v[i].y == (v[i - 1].y + 1)) {
                dp[1 - ptr][j][1] = dp[ptr][j - 1][0] + v[i].x;
            } else {
                dp[1 - ptr][j][1] = min(dp[ptr][j - 1][0], dp[ptr][j - 1][1]) + v[i].x;
            }
        }
        ptr = 1 - ptr;
    }
    cout << min(dp[ptr][k][0], dp[ptr][k][1]);
    return 0;
}