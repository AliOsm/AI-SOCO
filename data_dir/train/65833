#include <bits/stdc++.h>
using namespace std;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

class Graph{
    long int v;
    list<long int> *adj;
    unordered_set<long int> g;

    public:
        Graph(long int v): v(v){
            adj = new list<long int>[v];
        }

        void addEdge(long int u, long int v){
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        void addGov(long int x){
            g.insert(x);
        }

        bool DFS(long int i, unordered_set<long int> &visited, long int &count){
            bool ans;
            if(g.find(i) == g.end())
                ans = false;
            else
                ans = true;

            visited.insert(i);
            for(auto itr = adj[i].begin(); itr != adj[i].end(); itr++){
                if(visited.find(*itr) == visited.end()){
                    ans |= DFS(*itr,visited,count);
                    count += adj[*itr].size();
                }
            }
            return ans;
        }

        long int pos(){
            priority_queue<long int> govt;
            long int nongovt = 0;
            unordered_set<long int> visited;
            long int ans = 0;

            for(long int i = 0; i < v; i++){
                if(visited.find(i) == visited.end()){
                    long int size = visited.size(), count = adj[i].size();
                    bool isGov = DFS(i,visited,count);
                    long int forestSize = visited.size() - size;
                    if(isGov)
                        govt.push(forestSize);
                    else
                        nongovt += forestSize;
                }
            }

            long int topgov = govt.top();
            govt.pop();
            govt.push(topgov + nongovt);

            while(govt.size()){
                ans += ((govt.top() -1) * (govt.top())) / 2;
                govt.pop(); 
            }
            return ans;
        }
};

int main(){
   IOS;

   long int n,m,k;
   cin>>n>>m>>k;

   Graph g(n);

   for(long int i = 0; i < k; i++){
       long int x;
       cin>>x;
       g.addGov(x-1);
   }   

   for(long int i = 0; i < m; i++){
       long int u,v;
       cin>>u>>v;
       g.addEdge(u-1,v-1);
   }

   cout<<g.pos() - m;
   return 0;
}