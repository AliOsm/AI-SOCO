///Allah gave me the brain.Allah will help me///
/*
Nahid Hossain
Jahangirnagar University
Roll:54
*/
#include<bits/stdc++.h>
#define ll          long long int
#define db          double
#define pf          printf
#define sf          scanf
#define ff          first
#define ss          second
#define clr         clear()
#define sz          size()
#define pb          push_back
#define mk          make_pair
#define pi          acos(-1)
#define inf         10e14
#define mod         1000000007
#define ull         unsigned long long int
#define f(i,k,n)    for(ll i=k;i<n;i++)
#define fr(i,n,k)   for(i=n;i>=k;i--)
#define ent(a)      scanf("%lld",&a)
#define ent2(a,b)   scanf("%lld%lld",&a,&b)
#define ent3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define mem(a)      memset(a,0,sizeof(a))
#define vec(v,s)    vector<ll>v[s]
#define arr(a,s)    ll a[s];
//#define check(n,pos) (n&(1<<pos))
//#define set(n,pos)  (n|(1<<pos))
//knight and king//
int dr[]= {2, 2, -2, -2, 1, -1, 1, -1};
int dc[]= {1,-1,  1, -1, 2,  2,-2, -2};
int dr1[]= {0, 0, 0, 1, 1, 1, -1, -1, -1};
int dc1[]= {-1,0, 1,-1, 0, 1, -1, 0,   1};
int dr2[]= {0, 0, 1, -1};
int dc2[]= {1,-1, 0,  0};
////////////////////////////
using namespace std;

#define ma 350002
ll tree[ma*3],dp[ma],laz[ma*3],last[ma];

void build(ll n,ll b,ll e)
{
 if(b==e)
 {
  tree[n]=dp[b-1];
  return;
 }

 ll mid=(b+e)>>1,l=n*2,r=l+1;
 build(l,b,mid);
 build(r,mid+1,e);
 tree[n]=max(tree[l],tree[r]);
}


void update(ll n ,ll b,ll e,ll x,ll y,ll val)
{
 if(b>y||e<x)return;
 if(b>=x&&e<=y)
 {
  tree[n]+=val;
  laz[n]+=val;
  return;
 }

 ll mid=(b+e)>>1,l=n*2,r=l+1;
 if(laz[n]!=0)
 {
  tree[l]+=laz[n];
  tree[r]+=laz[n];
  laz[l]+=laz[n];
  laz[r]+=laz[n];
  laz[n]=0;
 }
 update(l,b,mid,x,y,val);
 update(r,mid+1,e,x,y,val);

 tree[n]=max(tree[r],tree[l]);
}


ll query(ll n,ll b,ll e,ll x,ll y)
{
 if(b>y||e<x)return 0;
 if(b>=x&&e<=y)return tree[n];
 ll mid=(b+e)>>1,l=n*2,r=l+1;

 if(laz[n]!=0)
 {
  tree[l]+=laz[n];
  tree[r]+=laz[n];
  laz[l]+=laz[n];
  laz[r]+=laz[n];
  laz[n]=0;
 }


 ll p=query(l,b,mid,x,y);
 ll p1=query(r,mid+1,e,x,y);
 return max(p,p1);
}

ll a[ma];
int main()
{
 ll n,k,i,j;
 while(cin>>n>>k)
 {
  f(i,1,n+1)cin>>a[i];

  for(i=1;i<=n;i++)
  {
   ll p=a[i];
   if(last[p]==0)dp[i]=dp[i-1]+1;
   else dp[i]=dp[i-1];
   last[p]=i;
  }



  for(i=2;i<=k;i++)
  {
   mem(tree);
   mem(laz);
   mem(last);
   build(1,1,n);


   for(j=1;j<=n;j++)
   {
    ll p=last[a[j]]+1;
    update(1,1,n,p,j,1);
    dp[j]=query(1,1,n,1,j);
    last[a[j]]=j;
   }
   //f(j,1,n+1)cout<<dp[j]<<" ";
   //cout<<endl;

  }
  cout<<dp[n]<<endl;




 }

 return 0;
}
