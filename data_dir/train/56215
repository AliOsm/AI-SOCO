#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
using ii = pair<int, int>;
#define ff first
#define ss second
#define pb push_back

const int N = 505;
const int modi = 998244353;
vector<ll> fac[N];

void fact(ll x, int i){
	ll lim = sqrt(x) + 1;
	ll div = 2;
	while(x != 1 && div <= lim){
		while(x % div == 0){
			fac[i].pb(div);
			fac[i].pb(div);
			x /= div;
		}
		div++;
	}
	if(x != 1)
		fac[i].pb(x);
	if(x != 1)
		fac[i].pb(x);
}
void fact2(ll x, int i){
	ll lim = sqrt(x) + 1;
	ll div = 2;
	while(x != 1 && div <= lim){
		while(x % div == 0){
			fac[i].pb(div);
			fac[i].pb(div);
			fac[i].pb(div);
			x /= div;
		}
		div++;
	}
	if(x != 1)
		fac[i].pb(x);
	if(x != 1)
		fac[i].pb(x);
	if(x != 1)
		fac[i].pb(x);
}


bool t4[N];
set<ll> ja;

int main(){
	int n;
	scanf("%d", &n);
	map<ll, int> qtd;
	ll a[505];
	map<ll, int> tms;
	for(int i = 0; i < n; i++){
		scanf("%lld", a+i);
		ll x = (int)sqrt(a[i]);
		tms[a[i]]++;
		if((a[i] % x) == 0 && x * x == a[i]){
			fact(x, i);	
		}
		else if(a[i] % (x+1) == 0 && (x+1) * (x+1) == a[i]){
			x++;
			fact(x, i);
		}
		else if(x > 1 && a[i] % (x-1) == 0 && (x-1) * (x-1) == a[i]){
			x--;
			fact(x, i);
		}
		else{
			x = (int)cbrt(a[i]);
			if((a[i] % x) == 0 && x * x * x == a[i]){
				fact2(x, i);	
			}
			else if(a[i] % (x+1) == 0 && (x+1) * (x+1) * (x+1) == a[i]){
				x++;
				fact2(x, i);
			}
			else if(x > 1 && a[i] % (x-1) == 0 && (x-1) * (x-1) * (x-1) == a[i]){
				x--;
				fact2(x, i);
			}
			else
				t4[i] = 1;
		}
	}
	for(int i = 0; i < n; i++){
		for(int j : fac[i]){
			qtd[j]++;
		}
	}

	ll ans = 1;
	for(int i = 0; i < n; i++){
		if(ja.count(a[i])) continue;
		if(t4[i]){
			int ba = 0;
			for(int j = 0; j < n; j++){
				if(j == i) continue;
				ll x = __gcd(a[i], a[j]);
				if(x!= 1 && x != a[i]){
					qtd[x] += tms[a[i]];
					qtd[a[i]/x] += tms[a[i]];
					ba = 1;
					break;
				}
				if(x != 1 && a[i] != a[j]){
					for(int k : fac[j]){
						if(a[i] % k == 0){
							qtd[a[i]/k] += tms[a[i]];
							qtd[k] += tms[a[i]];
							ba = 1;
							break;
						}
					}
				}
				if(ba) break;
			}
			if(!ba){
				ans = (ans * (tms[a[i]] + 1)) % modi;
				ans = (ans * (tms[a[i]] + 1)) % modi;
			}
			ja.insert(a[i]);
		}
	}

	for(auto i : qtd){
		ans = (ans * (i.ss + 1)) % modi;
	}
	printf("%lld\n", ans);
	return 0;
}

