#include <bits/stdc++.h>
using namespace std;

const int N = 5e5 + 100, M = 30;

int n, m, x, y, par, TIME, h[N], st[N], et[N];
string s;
vector<int> nei[N], ps[N], S[N];

void dfs(int v = 0, int par = -1) {
	st[v] = TIME++;
	if(ps[h[v]].empty())
		ps[h[v]].push_back(1 << (s[v] - 'a'));
	else
		ps[h[v]].push_back(ps[h[v]].back() ^ (1 << (s[v] - 'a')));
	S[h[v]].push_back(st[v]);
	for (int u: nei[v])
		h[u] = h[v] + 1, dfs(u, v);
	et[v] = TIME;
}

string solve(int v, int h) {
	int l = lower_bound(S[h].begin(), S[h].end(), st[v]) - S[h].begin(),
		r = lower_bound(S[h].begin(), S[h].end(), et[v]) - S[h].begin();// [)
	return (r <= l || ((r - l) & 1) == __builtin_popcount(ps[h][r - 1] ^ (l? ps[h][l - 1]: 0))? "Yes": "No");
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> m;
	for (int i = 1; i < n; i++)
		cin >> par, nei[--par].push_back(i);
	cin >> s;
	dfs();
	while(m--) {
		cin >> x >> y;
		cout << solve(--x, --y) << '\n';
	}
	return 0;
}
