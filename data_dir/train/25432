#include <string.h>
#include <assert.h>
#include <cassert>
#include <unordered_map>

#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stack>
#include <queue>
#include <set>

#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
#include <cassert>

#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf

#define pf printf
#define mp make_pair
#define N 400000

const int mod = 998244353;

using namespace std;

int n,k;

int p[N][3];

map<pair<int,int>, int>num;

void add(int a, int b) {
    if(a>b)swap(a,b);
    num[mp(a,b)]++;
}

vector<int> g[N];
vector<int> path;
int lt[N],rt[N];
int v[N];

void dfs(int t, int f) {
    path.pb(t);
    //printf("t = %d f = %d\n",t,f);
    v[t] = 1;
    for(int i = 0; i < g[t].size();++i) {
        if(g[t][i]==f||v[g[t][i]])continue;
        dfs(g[t][i],t);
    }
}

map<ll,int> ed;
void add_ed(int x, int id) {
    vector<int> ft;
    ft.pb(p[x][0]);
    ft.pb(p[x][1]);
    ft.pb(p[x][2]);
    sort(ft.begin(), ft.end());
    ll ret = 0;
    for(int i = 0; i < 3; ++i) {
        ret = ret * 100001 + ft[i];
    }

    ed[ret] = id;
}

int find(int x) {
    vector<int> ft;
    ft.pb(lt[x]);
    ft.pb(x);
    ft.pb(rt[x]);

    sort(ft.begin(), ft.end());
    ll ret = 0;
    for(int i = 0; i < 3; ++i) {
        ret = ret * 100001 + ft[i];
    }

    //printf("find lt = %d x = %d rt = %d pos = %d\n",lt[x],x,rt[x],ed[ret]);
    return ed[ret];
}

int main() {
    int t;
    cin>>t;
    while(t--) {
        int n;
        cin>>n;
        fr(i,0,n-2) {
            fr(j,0,3) {
                cin>>p[i][j];
            }
            fr(j,0,3) {
                fr(k,j+1,3) {
                    add(p[i][j],p[i][k]);
                }
            }
            add_ed(i,i+1);
        }

        for(auto it:num) {
            if(it.second==1) {
                g[it.first.first].pb(it.first.second);
                g[it.first.second].pb(it.first.first);
                //printf("add %d %d\n",it.first.first, it.first.second);
            }
        }
        dfs(1,1);
        for(int i = 0; i < path.size();++i) {
            int x = path[i];
            int nt = path[(i+1)%path.size()];
            int pt = path[(i-1+n)%path.size()];
            rt[x] = nt;
            lt[x] = pt;
            printf("%d ",x);
            //printf("path i = %d lt = %d rt = %d\n",x,lt[x],rt[x]);
        }
        printf("\n");

        queue<int> q;
        for(int i = 0; i < n; ++i) {
            int x = path[i];
            if(find(x)) {
                q.push(x);
            }
        }

        vector<int> ans;
        while(!q.empty()) {
            int x = q.front();
            q.pop();
            int pos = find(x);
            ans.pb(pos);
            //printf("x = %d pos = %d\n",x,pos);
            if(ans.size()==n-2)break;

            rt[lt[x]]=rt[x];
            lt[rt[x]]=lt[x];
            if(find(lt[x])) {
                //printf("add lt %d\n",lt[x]);
                q.push(lt[x]);
            }
            if(find(rt[x])) {
                //printf("add rt = %d\n",rt[x]);
                q.push(rt[x]);
            }
        }
        for(int x : ans) {
            printf("%d ",x);
        }
        printf("\n");
        for(int i = 0; i <=n; ++i){
            v[i] = 0;
            g[i].clear();
        }
        num.clear();
        ed.clear();
        path.clear();
    }
}