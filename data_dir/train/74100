#include <bits/stdc++.h>

using namespace std;

const int MaxN = 1e3 + 13;

int a[MaxN][MaxN];

int bRow[MaxN][MaxN], bCol[MaxN][MaxN];

int mxRow[MaxN], mxCol[MaxN];
int n, m;

void compress(vector <pair<int, int> > & v)
{
    sort(v.begin(), v.end(),
         [](auto a, auto b)
         {
             return a.first < b.first;
         }
         );
    int cnt = 0;
    int lst = -1;
    for(int i = 0; i < v.size(); ++i)
    {
        if(v[i].first != lst)
            ++cnt;
        lst = v[i].first;
        v[i].first = cnt;
    }

    sort(v.begin(), v.end(),
         [](auto a, auto b)
         {
             return a.second < b.second;
         });
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
//    freopen("input.txt", "r", stdin);

    cin >> n >> m;
    for(int i = 1; i <= n; ++i)
        for(int j = 1; j <= m; ++j)
            cin >> a[i][j];

    for(int i = 1; i <= n; ++i)
    {
        vector <pair<int, int> > curRow;
        for(int j = 1; j <= m; ++j)
            curRow.push_back({a[i][j], j});
        compress(curRow);

        for(int j = 1; j <= m; ++j)
        {
            bRow[i][j] = curRow[j - 1].first;
            mxRow[i] = max(mxRow[i], curRow[j - 1].first);
        }
    }

    for(int j = 1; j <= m; ++j)
    {
        vector <pair<int, int> > curCol;
        for(int i = 1; i <= n; ++i)
            curCol.push_back({a[i][j], i});
        compress(curCol);

        for(int i = 1; i <= n; ++i)
        {
            bCol[i][j] = curCol[i - 1].first;
            mxCol[j] = max(mxCol[j], curCol[i - 1].first);
        }
    }

    for(int i = 1; i <= n; ++i)
    {
        for(int j = 1; j <= m; ++j)
        {
            int ansCol = mxCol[j];
            int ansRow = mxRow[i];

            if(bCol[i][j] < bRow[i][j])
                ansCol = bRow[i][j] + mxCol[j] - bCol[i][j];
            else
                ansRow = bCol[i][j] + mxRow[i] - bRow[i][j];

            cout << max(ansRow, ansCol) << ' ';
            //cout << bRow[i][j] << ' ';
        }
        cout << '\n';
    }

    return 0;
}
