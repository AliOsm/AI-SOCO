#include <bits/stdc++.h>
using namespace std;
vector<long long> tree;

void update(long long curr){
    while(curr > 0){
        tree[curr] += 1;
        curr /= 2;
    }
}

long long ans(long long a , long long b , long long curr , long long l , long long r){
    if(b < l || a > r){
        return 0;
    }
    if(a <= l && b >= r){
        return tree[curr];
    }
    long long h = (l+r)/2;
    return ans(a,b,2*curr,l,h) + ans(a,b,2*curr+1,h+1,r);
}

int main()
{
    ios_base::sync_with_stdio(false);
    long long n,a;
    scanf("%lld",&n);
    long long t = pow(2,ceil(double(log2(n))));
    tree.resize(2*t,0);
    vector<pair<long long,long long>> x(n);
    vector<long long> y;
    map<long long,long long> b,c;
    for(long long i = 0 ; i < n ; i += 1){
        scanf("%lld",&a);
        y.push_back(a);
        b[a] += 1;
        x[i].first = b[a];
    }
    long long answer=0;
    for(long long i = n-1 ; i >= 0 ; i -= 1){
        c[y[i]] += 1;
        x[i].second = c[y[i]];
        if(x[i].first > 1){
            answer += ans(1,x[i].first-1,1,1,t);
        }
        update(x[i].second-1+t);
    }
    cout << answer;
}