#include<bits/stdc++.h>


using namespace std;

using ll   = long long;
using ii   = pair   < int , int >;
using i3   = pair   < int , ii  >;
using li   = pair   < ll  , int >;
using lii  = pair   < ll  , ii  >;
using pll  = pair   < ll  , ll  >;
using vi   = vector < int       >;
using vl   = vector < ll        >;
using vii  = vector < ii        >;
using vli  = vector < li        >;
using vpll = vector < pll       >;
using vi3  = vector < i3        >;
using vlii = vector < lii       >;


const int N = 3e5 + 5;
const ll INF = 1e17 + 7;
const double eps = 1e-9 , PI = acos(-1);


int n , m;

int to[N] , p[N];
int  u[N] , v[N] , e[N];
int dep[N];

int segTreePos[N] , heavy[N] , chain[N];
int st[N << 2] , lazy[N << 2];

vii adj[N];

int dfs_hld(int u){

    if(u != 1)dep[u] = 1 + dep[p[u]];

    int sz = 1;
    int mx = 0;///heavy child
    for(ii A : adj[u]){
        int v  = A.second;
        int dx = A.first;///edge index

        if(v == p[u])continue;

         p[v]  = u;
        to[dx] = v;///map this edge to node v
        int curr = dfs_hld(v);

        if(curr > mx){
            mx = curr;
            heavy[u] = v;
        }

        sz += curr;
    }

    return sz;
}

void build_chains(){

    dfs_hld(1);

    int pos = 0;///pos in segment tree

    for(int chainRoot = 1 ; chainRoot <= n ; chainRoot ++){

        if(chain[ chainRoot ] == -1 || heavy[ p[ chainRoot ] ] != chainRoot){

            for(int j = chainRoot ; j != -1 ; j = heavy[j]){

                chain[j] = chainRoot;
                segTreePos[j] = ++ pos;

            }

        }

    }
}


void psh(int p , int l , int r){
    if(lazy[p] == 0)return;

    st[p] = max(st[p] , lazy[p]);

    if(l != r){
            lazy[p << 1]     = max(lazy[p << 1]     , lazy[p]);
            lazy[p << 1 | 1] = max(lazy[p << 1 | 1] , lazy[p]);
    }

    lazy[p] = 0;
}

void update_range(int p , int l , int r , int S , int E , int val){
    psh(p , l , r);

    if(l >= S && r <= E){
            lazy[p] = max(lazy[p] , val);
            psh(p , l , r);
            return;
    }
    if(l > E || r < S)return;

    int mid = (l + r) >> 1;

    update_range(p << 1 , l , mid , S , E , val);
    update_range(p << 1 | 1 , mid + 1 , r , S , E , val);

    st[p] = min(st[p << 1] , st[p << 1 | 1]);
}

int rmq(int p , int l , int r , int S , int E){
    psh(p , l , r);

    if(l >= S && r <= E)return st[p];
    if(l > E || r < S)  return 2e9;

    int mid = (l + r) >> 1;

    return min(rmq(p << 1 , l , mid , S , E) , rmq(p << 1 | 1 , mid + 1 , r , S , E));
}

int query(int u , int v){

    int ret = 2e9;
    for( ; chain[u] != chain[v] ; u = p[chain[u]]){
            if(dep[ chain[u] ] < dep[ chain[v] ])swap(u , v);

            ret = min(ret , rmq(1 , 1 , N-1 , segTreePos[ chain[u] ] , segTreePos[u]));
    }

    if(u != v){
            int l = segTreePos[u] , r = segTreePos[v];
            if(l > r)swap(l , r);

            ret = min(ret , rmq(1 , 1 , N-1 , l+1 , r));
    }

    return ret;
}

void update(int u , int v , int val){
    for( ; chain[u] != chain[v] ; u = p[chain[u]]){
            if(dep[ chain[u] ] < dep[ chain[v] ])swap(u , v);

            update_range(1 , 1 , N-1 , segTreePos[ chain[u] ] , segTreePos[u] , val);
    }

    if(u != v){
            int l = segTreePos[u] , r = segTreePos[v];
            if(l > r)swap(l , r);

            update_range(1 , 1 , N-1 , l+1 , r , val);
    }
}

void solve(int testCase){

    scanf("%d" , &n);

    for(int i = 1 ; i < n ; i ++){
            int u , v; scanf("%d %d" , &u , &v);

            assert(u <= n);
            assert(v <= n);

            adj[u].push_back({i , v});
            adj[v].push_back({i , u});
    }

    build_chains();

    for(int i = 1 ; i <= n ; i ++){
            if(segTreePos[i] > n){
                cout << "i = " << i << " , pos = " << segTreePos[i] << endl;
                assert(5 > 6);
            }
    }

    for(int i = 1 ; i < n ; i ++){
            update_range(1 , 1 , N-1 , segTreePos[to[i]] , segTreePos[to[i]] , 1);
    }

    scanf("%d" , &m);
    for(int i = 1 ; i <= m ; i ++){
            scanf("%d %d %d" , &u[i] , &v[i] , &e[i]);
            update(u[i] , v[i] , e[i]);
    }

    for(int i = 1 ; i <= m ; i ++){
            int curr = query(u[i] , v[i]);

            if(curr != e[i]){
                    printf("-1\n");
                    return;
            }
    }

    for(int i = 1 ; i < n ; i ++){
            if(segTreePos[to[i]] > n){
                    cout << i << " " << to[i] << " " << segTreePos[to[i]] << endl;
                    assert(5 > 6);
            }
            int curr = rmq(1 , 1 , N-1 , segTreePos[to[i]] , segTreePos[to[i]]);
            if(curr == 2e9)curr = 1;
            printf("%d%c" , curr , i == n-1 ? '\n' : ' ');
    }

}

main(){

    memset(heavy , -1 , sizeof heavy);
    memset(p     , -1 , sizeof p    );

    int t = 1;
    // scanf("%d" , &t);

    for(int testCase = 1 ; testCase <= t ; testCase ++){
            solve(testCase);
    }

    return 0;
}
