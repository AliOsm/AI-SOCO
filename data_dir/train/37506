#include <bits/stdc++.h>
using namespace std;
using namespace std::chrono;

#define all(x) begin(x), end(x)
#define sz(x) (ll)(x).size()

using ll = long long;
using ld = long double;

ll n, k;
ll greedy1(vector<vector<ll>> in) {
    vector<ll> rb(2);
    for (auto e : in) {
        rb[0] += e[0];
        rb[1] += e[1];
    }
    ll res = 0;
    res += rb[0] / k;
    res += rb[1] / k;
    rb[0] %= k;
    rb[1] %= k;
    for (auto e : in) {
        if (min(e[0], rb[0]) + min(e[1], rb[1]) >= k) {
            res++;
            break;
        }
    }
    return res;
}

ll greedy2(vector<vector<ll>> in) {
    vector<ll> rb(2);
    ll rbsum = 0;
    ll res = 0;
    for (auto e : in) {
        res += (e[0]+e[1]) / k;
        rb[0] += min(e[0], (e[0] + e[1]) % k);
        rb[1] += min(e[1], (e[0] + e[1]) % k);
        rbsum += (e[0] + e[1]) % k;
    }
    res += min(rbsum / k, rb[0] / k + rb[1] / k);
    return res;
}

ll greedy3(vector<vector<ll>> in) {
    vector<ll> rb(2);
    for (auto e : in) {
        rb[0] += e[0];
        rb[1] += e[1];
    }
    ll res = 0;
    for (auto e : in) {
        ll r = min(e[0], rb[0] % k);
        ll b = k - r;
        if (b <= e[1]) {
            rb[0] -= r;
            rb[1] -= b;
            res++;
        }
    }
    res += rb[0] / k;
    res += rb[1] / k;
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cin >> n >> k;
    vector<vector<ll>> in(n, vector<ll>(2));
    for (ll i = 0; i < n; i++) {
        cin >> in[i][0] >> in[i][1];
    }
    ll res = 0;
    res = max(res, greedy1(in));
    res = max(res, greedy2(in));
    mt19937 rng(time(nullptr));
    for (ll i = 0; i < 10000; i++) {
        shuffle(all(in), rng);
        res = max(res, greedy3(in));
        for(auto& e : in) swap(e[0], e[1]);
        res = max(res, greedy3(in));
    }
    cout << res << endl;
}
