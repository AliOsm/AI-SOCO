#include <iostream>
#include <cstring>
#include <algorithm>

using namespace std;

const int mod = 998244353;

inline void add(int &a, int b) {
  a += b;
  if (a >= mod) {
    a -= mod;
  }
}

inline int mul(int a, int b) {
  return (int)((long long)a * b % mod);
}

const int N = 509;

int ways[N][N];
int nways[N][N];
int f[N];

int main() {
  int n, m;
  cin >> n >> m;
  memset(ways, 0, sizeof ways);
  ways[0][0] = 1;
  for (int i = 0; i < n; ++i) {
    memset(nways, 0, sizeof nways);
    for (int j = 0; j <= n; ++j) {
      for (int k = 0; k <= n; ++k) {
        if (ways[j][k] == 0) {
          continue;
        }
        add(nways[max(j, k + 1)][k + 1], ways[j][k]);
        add(nways[max(j, 1)][1], ways[j][k]);
      }
    }
    memcpy(ways, nways, sizeof ways);
  }
  int ans = 0;
  for (int i = 1; i <= n && i < m; ++i) {
    memset(f, 0, sizeof f);
    f[0] = 1;
    for (int j = 0; j < n; ++j) {
      for (int k = 0; k <= j; ++k) {
        if ((j + 1 - k) * i < m) {
          add(f[j + 1], f[k]);
        }
      }
    }
    int cur = 0;
    for (int j = 1; j <= n; ++j) {
      add(cur, ways[i][j]);
    }
    cur = mul(cur, f[n]);
    add(ans, cur);
  }
  cout << ans << endl;
}
