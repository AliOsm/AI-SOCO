#include <bits/stdc++.h>
using namespace std;
const int N = 1000 + 5;

vector< int > G[ N ];
int clr[ N ];

int dis[ N ];
int mxd( int );

int main() {
	ios_base::sync_with_stdio( false );
	cin.tie( nullptr );
	memset( dis, -1, sizeof( dis ) );
	int n, m; cin >> n >> m;
	for ( int i = 0 ; i < m ; ++ i ) {
		int u, v; cin >> u >> v;
		-- u, -- v;
		G[ u ].push_back( v );
		G[ v ].push_back( u );
	}
	int ans = 0;
	bool flag = true;
	for ( int i = 0 ; i < n ; ++ i ) {
		if ( clr[ i ] ) continue;
		// cout << "> " << i << '\n';
		vector< int > bfs;
		size_t pt = 0;
		bfs.push_back( i );
		clr[ i ] = 1;
		while ( pt < bfs.size() ) {
			int u = bfs[ pt ++ ];
			// cout << "@ " << u << '\n';
			for ( int v : G[ u ] ) {
				if ( not clr[ v ] ) {
					clr[ v ] = ( clr[ u ] & 1 ) + 1;
					bfs.push_back( v );
				} else {
					flag &= ( clr[ u ] != clr[ v ] );
				}
			}
		}

		int sub = 0;
		for ( int u : bfs ) sub = max( sub, mxd( u ) );
		ans += sub;
	}
	cout << ( flag ? ans : -1 ) << '\n';
	return 0;
}

int mxd( int x ) {
	dis[ x ] = 0;
	vector< int > bfs;
	size_t pt = 0;
	bfs.push_back( x );

	int mx = 0;

	while ( pt < bfs.size() ) {
		int u = bfs[ pt ++ ];
		mx = max( mx, dis[ u ] );
		// cout << "dis[ " << u << " ] = " << dis[ u ] << '\n';
		for ( int v : G[ u ] ) {
			if ( dis[ v ] != -1 )
				continue;
			dis[ v ] = dis[ u ] + 1;
			bfs.push_back( v );
		}
	}

	// cout << x << ": " << mx << '\n';

	for ( int u : bfs ) dis[ u ] = -1;
	return mx;
}