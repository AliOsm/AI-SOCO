#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
#include <cassert>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
#define MAXN 1000010
const int INF = 1E9;
int N , C;
vi L[MAXN] , R[MAXN];
char buf[110];
vi out;
int build(int lo , int mlo , int mhi){
  if(mlo > mhi) return INF;
  if(lo > mlo) return lo - 1;
  if(!L[lo].empty()){
   relaxMax(mlo , *max_element(all(L[lo])));
   if(*min_element(all(L[lo])) <= lo)
    return INF;
                    }
  if(!R[lo].empty()){
   relaxMax(mlo , *max_element(all(R[lo])));
   if(*min_element(all(R[lo])) <= lo)
    return INF;
                    }
  if(sz(L[lo]) == 0){
   out.pb(lo);
   int tmp = build(lo+1 , mlo , mhi);
   return tmp;
                    }
  if(sz(R[lo]) == 0){
   int tmp = build(lo+1 , mlo , mhi);
   out.pb(lo);
   return tmp;
                    }
  int lm = *max_element(all(L[lo]));
  int rm = *min_element(all(R[lo]));
  if(lm >= rm) return INF;
  int rmax = *max_element(all(R[lo]));
  int mid = build(lo+1 , lm , rm-1);
  out.pb(lo);
  mid = build(mid+1 , max(mlo , rmax) , mhi);
  return (mid <= mhi) ? mid : INF;
}
int main(){
  scanf("%d%d" , &N , &C);
  for(int i=0;i<C;++i){
   int a , b;
   scanf("%d%d%s" , &a , &b , &buf);
   --a , --b;
   if(buf[0] == 'L') L[a].pb(b);
   else R[a].pb(b);
                      }
  int s = build(0 , N-1 , N-1);
  if(s == INF) puts("IMPOSSIBLE");
  else{
   for(int i=0;i<sz(out);++i)
    printf("%d%c" , out[i] + 1 ,
                    (i+1 == sz(out)) ? '\n':' ');
      }
  return 0;
}

