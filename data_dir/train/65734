//**KEEP IT SHORT AND SIMPLE**
#include <bits/stdc++.h>
#define IO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define FILES freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define REP(i,a,b) for (int i = a; i < b; i++)
#define NL '\n'
#define F first
#define S second
#define dot(a, b) (conj(a) * (b)).real()
#define cross(a, b) (conj(a)* (b)).imag()
using namespace std;
typedef long long ll;
typedef long double ld;
typedef bool bl;
typedef vector < vector<long long> > vvl;
typedef vector <long long> vll;
typedef pair <long long, long long> pll;
typedef map <long long, long long> mll;
typedef map <long long, bool> mlb;
typedef priority_queue<long long, vector<long long>, greater<long long> > minPq;
typedef tuple<ll, ll, ll> line;
typedef complex<double> point;
const double pi = 2 * acos(0.0);
const int OO = 0x3f3f3f3f;
using namespace std;
ll n, x, arr[300010], dp[300010][5];
ll solve(ll i, int state)
{
    if(i == n)          return 0;
    if(~dp[i][state])   return dp[i][state];
    ll ans = 0;
    if(state == 0)          ans = max(solve(i, 1), solve(i + 1, state));
    else if(state == 1)     ans = max(solve(i + 1, state) + arr[i], solve(i, 2));
    else if(state == 2)     ans = max(solve(i + 1, state) + arr[i] * x, solve(i, 3));
    else if(state == 3)     ans = max(solve(i + 1, state) + arr[i], solve(i, 4));
    else                    ans = solve(i + 1, state);
    return dp[i][state] = ans;
}
int main()
{
    cin >> n >> x;
    memset(dp, -1, sizeof dp);
    REP(i, 0, n)    cin >> arr[i];
    cout << solve(0, 0);
    return 0;
}
