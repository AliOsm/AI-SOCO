         /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
using namespace std;
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
const int mod=1e9+7;         
const int N=2e5+4;

vector<int> v[N];

int main()
{
	int n;

	scn(n);

	rep(i,1,n+1)
	{
		int val; scn(val);

		for(int fac=2;fac*fac<=val;fac++)
		if(val%fac==0)
		{
			int cnt=0;

			while(val%fac==0)
			val/=fac,cnt++;

			v[fac].pb(cnt);
		}

		if(val>1)
		v[val].pb(1);
	}

	rep(i,2,N)
	sort(v[i].begin(),v[i].end());

	ll ans=1;

	rep(i,2,N)
	{
		//cout<<i<<" "<<v[i].size()<<endl;

		if(v[i].size()==n)
		ans*=pow(i,v[i][1]);
		else if(v[i].size()==n-1)
		ans*=pow(i,v[i][0]);
	}

	lpri(ans);

    return 0;
}
