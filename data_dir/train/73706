/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
/* FOR ACM-ICPC WF*/
#include <bits/stdc++.h>

using namespace std;
using ll = long long;
using vi = vector<int>;
using vvi = vector<vi>;
using pii = pair<int, int>;

#define pb push_back

constexpr auto MOD = 1000000007LL;
constexpr auto LINF = (1LL<<60);
constexpr auto INF = 2147483647LL;
constexpr auto PI = 3.1415926535897932384626433;
constexpr auto EPS = 1E-9;

template<typename T1, typename T2>
ostream& operator<<(ostream& out, const pair<T1, T2> p){
	out << p.first << ' ' << p.second;
	return out;
}

template <typename T1, typename T2>
istream& operator>>(istream& in, pair<T1, T2> &p){
	in >> p.first >> p.second;
	return in;
}

auto printVector = []<typename T>(ostream& out, vector<T> v){
	copy(v.begin(), v.end(), ostream_iterator<T>(out, " "));
};


int n; 

struct point{
	ll x, y;
	point(){
		x = y = 0;
	}
	point(ll x, ll y):x(x), y(y){
	}
	inline bool operator < (point rhs) const{
		if(fabs(x-rhs.x) > EPS)
			return x < rhs.x;
		return y < rhs.y;
	}
	inline bool operator == (point rhs) const{
		return (fabs(x-rhs.x) < EPS && fabs(y-rhs.y) < EPS);
	}
};

vector<point> points;

istream& operator>>(istream& in, point &p){
	in >> p.x >> p.y;
	return in;
}

struct vec{
	ll x, y;
	vec(ll x, ll y): x(x), y(y){
	}
	vec(point a, point b){
		*this = vec(a.x-b.x, a.y-b.y);
	}
	inline vec operator* (ll r){
		this->x *= r, this->y *= r;
	}
	inline vec operator+ (point x){
		this->x += x.x;
		this->y += x.y;
	}
};

inline point operator+ (point p, vec v){
	p.x += v.x;
	p.y += v.y;
	return p;
}

inline ll norm_sq(vec v){
	return v.x*v.x+v.y*v.y;
}

inline ll dot(vec a, vec b){
	return a.x*b.x + a.y*b.y;
}

inline ll cross(vec a, vec b){
	return a.x*b.y - a.y*b.x;
}

inline ll ccw(point p, point q, point r){
	// >0 -> counter-cw == 0 -> collinear <0 -> cw
	return cross(vec(p, q), vec(p, r));
}

bool check(){
	vector<point> alt;
	
	for(int i = 2; i < n; i++){
		if(ccw(points[0], points[1], points[i]))
			alt.pb(points[i]);
	}
	
	if(alt.size() < 2) return true;

	for(int i = 2; i < alt.size(); i++)
		if(ccw(alt[0], alt[1], alt[i]))
			return false;
	
	return true;
}

int main(){
	#ifdef LOCAL
		freopen("input.txt","r",stdin);
//		freopen("output.txt","w",stdout);
	#endif
	ios_base::sync_with_stdio(false);
	
	cin >> n; 
	points.resize(n);
	
	for(auto &x: points)
		cin >> x;
	
	if(n < 3){
		cout << "YES" << endl;
		return 0;
	}
	
	if(check()){
		cout << "YES" << endl;
		return 0;
	}
	
	swap(points[1], points[2]);
	if(check()){
		cout << "YES" << endl;
		return 0;
	}
	
	swap(points[0], points[2]);
	if(check()){
		cout << "YES" << endl;
		return 0;
	}
	
	cout << "NO" << endl;

	return 0;
}

