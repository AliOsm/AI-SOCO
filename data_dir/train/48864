#include<iostream>
#include<algorithm>
#include<vector>

using namespace std;

const int MAXN = 2e5 + 5, MAXL = 7;
int a[MAXN], cnt[500005], ar[MAXN];
vector<int> v[MAXN];
long long sum;

void set(int x)
{
	for(int i = 0; i < (1 << v[x].size()); i++)
	{
		int t = 1;
		for(int j = 0; j < MAXL; j++)
			if(((i >> j) & 1) == 1)
				t *= v[x][j];
		cnt[t] -= ar[x];
	}
	ar[x] = -ar[x];
}

int get(int x, int h)
{
	int ans = 0;
	for(int i = 0; i < (1 << v[x].size()); i++)
	{
		int t = 1, t1 = __builtin_popcount(i);
		for(int j = 0; j < MAXL; j++)
			if(((i >> j) & 1) == 1)
				t *= v[x][j];
		if(t1 % 2 == 0)
			ans += cnt[t];
		else
			ans -= cnt[t];
	}
	sum += h * ans;
}

int main()
{
	int n, q;
	cin >> n >> q;
	for(int i = 0; i < n; i++)
	{
		cin >> a[i];
		for(int j = 2; j * j <= a[i]; j++)
			if(a[i] % j == 0)
			{
				while(a[i] % j == 0)
					a[i] /= j;
				v[i].push_back(j);
			}
		if(a[i] > 1)
			v[i].push_back(a[i]);
	}
	fill(ar, ar + MAXN, -1);
	while(q--)
	{
		int x;
		cin >> x;
		x--;
		if(ar[x] == -1)
		{
			get(x, 1);
			set(x);
		}
		else
		{
			set(x);
			get(x, -1);
		}
		cout << sum << endl;
	}
	return 0;
}
