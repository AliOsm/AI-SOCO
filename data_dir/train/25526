// https://codeforces.com/contest/1337/submission/76849860 (Dukkha)
#include <algorithm>
#include <iostream>

using namespace std;

const int N = 200000;

int oo[1 + (N - 1) * 2], oj[1 + (N - 1) * 2];

int link(int o, int j) {
	static int _ = 1;
	oo[_] = o, oj[_] = j;
	return _++;
}

int ae[N], dd[N], kk[N], ii[N];

void dfs(int p, int i, int d) {
	dd[i] = d;
	int k = 1;
	for (int o = ae[i]; o; o = oo[o]) {
		int j = oj[o];
		if (j != p) {
			dfs(i, j, d + 1);
			k += kk[j];
		}
	}
	kk[i] = k;
}

int main() {
	int n, k; cin >> n >> k;
	for (int h = 0; h < n - 1; h++) {
		int i, j; cin >> i >> j, i--, j--;
		ae[i] = link(ae[i], j);
		ae[j] = link(ae[j], i);
	}
	dfs(-1, 0, 0);
	for (int i = 0; i < n; i++)
		ii[i] = i;
	sort(ii, ii + n, [] (int i, int j) { return kk[i] - dd[i] > kk[j] - dd[j]; });
	long long ans = 0;
	for (int i = 0; i < n - k; i++)
		ans += kk[ii[i]] - 1 - dd[ii[i]];
	cout << ans << '\n';
	return 0;
}
