#include <bits/stdc++.h>
using namespace std;

const int N = 1010, M = 42;

int dis[M][N][N];
int a[N][N];

vector<pair<int,int>> cells[M];
bool col_vis[M];

int dx[] = {0,0,+1,-1};
int dy[] = {+1,-1,0,0};

int main() {
    // freopen("in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n, m, k;
    cin >> n >> m >> k;
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            cin >> a[i][j];
            cells[a[i][j]].push_back({i,j});
        }
    }
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            for(int col = 1; col <= k; col++) {
                dis[col][i][j] = 1e9;
            }
        }
    }
    for(int col = 1; col <= k; col++) {
        queue<int> que;
        for(auto t : cells[col]) {
            int x = t.first, y = t.second;
            dis[col][x][y] = 0;
            que.push(x);
            que.push(y);
        }
        memset(col_vis, 0, sizeof col_vis);
        col_vis[col] = true;
        while(!que.empty()) {
            int x = que.front();
            que.pop();
            int y = que.front();
            que.pop();

            if(!col_vis[a[x][y]]) {
                for(auto t : cells[a[x][y]]) {
                    int xx = t.first, yy = t.second;
                    if(xx >= 1 && xx <= n && yy >= 1 && yy <= m && dis[col][xx][yy] > dis[col][x][y] + 1) {
                        dis[col][xx][yy] = dis[col][x][y] + 1;
                        que.push(xx);
                        que.push(yy);
                    }
                }
            }
            col_vis[a[x][y]] = true;
            for(int k = 0; k < 4; k++) {
                int xx = x + dx[k], yy = y + dy[k];
                if(xx >= 1 && xx <= n && yy >= 1 && yy <= m && dis[col][xx][yy] > dis[col][x][y] + 1) {
                    dis[col][xx][yy] = dis[col][x][y] + 1;
                    que.push(xx);
                    que.push(yy);
                }
            }
        }
    }
    int q;
    cin >> q;
    while(q--) {
        int sx, sy, tx, ty;
        cin >> sx >> sy >> tx >> ty;
        int ans = abs(sx-tx) + abs(sy-ty);
        for(int col = 1; col <= k; col++) {
            int cur_ans = 1 + dis[col][sx][sy] + dis[col][tx][ty];
            ans = min(ans, cur_ans);
        }
        cout << ans << "\n";
    }
    return 0;
}

