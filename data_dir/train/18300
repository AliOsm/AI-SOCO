/*input
5
5 0 0 2 4


*/
 
/*
                                                    ______________
                                                          |       )
                                                          |   )   /
                                                          |______/
                                                    |     |      \
                                                    |     |   )   \
                                                    |_____|_______)
 
*/
 
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <ctime>
#include <cassert>
#include <complex>
#include <string>
#include <cstring>
#include <chrono>
#include <random>
#include <queue>
#include <bitset>
#include <iomanip>
#include <fstream>

using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;
 
#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
int mod = 1000000007;
const int inf = 1034567891;
const ll LL_INF = 1234567890123456789ll;
#define PI 3.14159265
#define endl '\n'
#define F first
#define S second
#define debug(x) cout << #x << " = " << x << endl;
#define TRACE
 
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
 
#define out(container) for (auto it : container) cout << it << " "; cout << endl;
 
 
template < typename T > T GCD(T a, T b)            { ll t; while(a) { t = a; a = b % a; b = t; } return b; }
template < typename T > string toString(T a)       { return to_string(a); }
template < typename T > void toInt(string s, T &x) { stringstream str(s); str >> x;}
inline int add(int x, int y){ x += y; if(x >= mod) x -= mod; return x;}
inline int sub(int x, int y){ x -= y; if(x < 0) x += mod; return x;}
inline int mul(int x, int y){ return (x * 1ll * y) % mod;}
inline int powr(int a, ll b){
  int x = 1 % mod;
  while(b){
    if(b & 1) x = mul(x, a);
    a = mul(a, a);
    b >>= 1;
  }
  return x;
}
inline int inv(int a){ return powr(a, mod - 2);}

map <int, int> mp;

vector <int> get(vector <int> vec) {
  vector <int> ans;
  for (auto it : vec) {
    if (mp[it] == 1)
      ans.pb(it);
  }
  return ans;
}

int main()
{
  ios_base::sync_with_stdio(false); // 🏁 👀 💕
  cin.tie(NULL);
  
  int n;
  cin >> n;
  vector <int> vec(n + 1, 0);
  vector <int> give, take;
  vector <int> ans(n + 1, 0);
  for (int i = 1; i <= n; i++) {
    cin >> vec[i];
    if (vec[i]) {
      take.pb(vec[i]);
      give.pb(i);
    }
    ans[i] = vec[i];
  }  
  for (auto it : give)
    mp[it]++;
  for (auto it : take)
    mp[it]++;
  give = get(give);
  take = get(take);
  vector <int> nothing;
  for (int i = 1; i <= n; i++)
    if (mp[i] == 0)
      nothing.pb(i);

  int k = nothing.size();

  if (k > 1) {
    for (int i = 0; i < k; i++) {
      int next = nothing[(i + 1) % k];
      ans[nothing[i]] = next;
    }
    nothing.clear();
  }
  
  k = take.size();
  for (int i = 0; i < k; i++) {
    int a = take[i];
    int b = give[i];
    if (i < nothing.size()) {
      int c = nothing[i];
      ans[a] = c;
      ans[c] = b;
    } else {
      ans[a] = b;
    }
  }
  for (int i = 1; i <= n; i++) {
    cout << ans[i] << " ";
  }
  cout << endl;



  return 0;
}