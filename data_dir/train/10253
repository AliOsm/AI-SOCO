#include "bits/stdc++.h"
using namespace std;

int count_elements(const vector<int>& a, int left, int right) {
    auto lower = lower_bound(a.begin(), a.end(), left);
    if (lower == a.end()) return 0;
    auto higher = upper_bound(a.begin(), a.end(), right);
    higher--;
    return higher - lower + 1;
}
int choose_elements(int n, int k) {
    if (k == 0) return 1;
    return (n * choose_elements(n - 1, k - 1)) / k;
}
long long solve(vector<vector<int>> tab) {
    for (auto& vec : tab) sort(vec.begin(), vec.end());
    vector<pair<int, int>> num_and_type;
    for (int type = 0; type < tab.size(); type++) {
        for (int idx = 0; idx < tab[type].size(); idx++) {
            num_and_type.push_back(make_pair(tab[type][idx], type));
        }
    }
    sort(num_and_type.begin(), num_and_type.end());
    long long res = 0;
    for (int left = 0; left < num_and_type.size(); left++) {
        for (int right = left + 1; right < num_and_type.size(); right++) {
            if (num_and_type[left].first * 2 < num_and_type[right].first) continue;
            vector<int> need_counts = {1, 2, 3};
            need_counts[num_and_type[left].second]--;
            need_counts[num_and_type[right].second]--;
            bool broken = false;
            for (auto val : need_counts) if (val < 0) broken = true;
            if (broken) continue;
            long long ways = 1;
            for (int idx = 0; idx < tab.size(); idx++) {
                int elements = count_elements(tab[idx], num_and_type[left].first + 1, num_and_type[right].first - 1);
                int choose = choose_elements(elements, need_counts[idx]);
                ways *= choose;
            }
            res += ways;
        }
    }
    return res;
}

int main() {
    vector<vector<int>> tab(3);
    for (int i = 0; i < tab.size(); i++) {
        int size; cin >> size;
        tab[i].resize(size);
    }
    for (int type = 0; type < tab.size(); type++) {
        for (int i = 0; i < tab[type].size(); i++) {
            cin >> tab[type][i];
        }
    }
    cout << solve(tab) << endl;
}