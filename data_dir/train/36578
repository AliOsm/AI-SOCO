#include <algorithm>
#include <iostream>
#include <cstring>
#include <climits>
#include <cassert>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 24;

char foo[11];
int f[1 << N];

string out(int x){
    string res;
    for(int i = N - 1; i >= 0; i--){
        res += char('0' + ((x >> i) & 1));
    }
    return res;
}

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    int n = read();

    for(int i = 0; i < n; i++){
        scanf(" %s",foo);
        int mask = 0;
        for(int j = 0; j < 3; j++)
            mask |= 1 << (foo[j] - 'a');
        f[mask]++;
    }

    for(int i = 0; i < N; i++){
        for(int j = (1 << N) - 1; j >= 0; j--){
            if(!(j & (1 << i))){
                f[j | (1 << i)] += f[j];
            }
        }
    }

    int ans = 0;

    for(int i = 0; i < (1 << N); i++){
        ans ^= (n - f[i]) * (n - f[i]);
    }

    printf("%d\n",ans);

    return 0;

}
