/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

typedef long long i64;

constexpr i64 INF = 1000LL * 1000 * 1000 * 1000 * 1000 * 1000;

class E710 {
public:
    void solve(istream& in, ostream& out) {
        i64 n, x, y;
        in >> n >> x >> y;
        
        vector<i64> dp(n + 1, INF);
        dp[0] = 0;
        for (int i = 0; i < n; ++i) {
            dp[i + 1] = min(dp[i + 1], dp[i] + x);
            if (2 * i <= n) {
                dp[2 * i] = min(dp[2 * i], dp[i] + y);
            }
            if (2 * i - 1 <= n && 2 * i - 1 >= 0) {
                dp[2 * i - 1] = min(dp[2 * i - 1], dp[i] + y + x);
            }
        }
        
        out << dp[n] << "\n";
    }
};


int main() {
	std::ios::sync_with_stdio(false); cin.tie(nullptr);

	E710 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
