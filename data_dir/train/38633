#include<bits/stdc++.h>
using namespace std;

int n, q, a[200005];

vector<int> primeFactors[500005];

set<int> shelf; // Kinds which are on the shelf.

int cnt[500005]; // Count of kinds which have i as a prime factor.

inline void sieve() {
	// Fills primeFactors with the distinct prime factors of each number
	for (int i = 2; i < 500005; ++i)
		if (primeFactors[i].empty())
		  for (int j = i; j < 500005; j += i)
			  primeFactors[j].push_back(i);
}

int count(int x, bool add) { // Counts the number of current elements in shelf coprime with x, and updates cnt

	// Inclusion - Exclusion

	int ans = 0;

	for (int i = 1; i < (1 << primeFactors[x].size()); ++i) {
		int mul = 1;
		for (int j = 0; j < primeFactors[x].size(); ++j)
			if (i & (1 << j)) mul *= primeFactors[x][j];

		ans += (cnt[mul] -= !add) * ((__builtin_popcount(i) & 1) ? 1 : -1);
		cnt[mul] += add;
	}

	return shelf.size() - ans;

}

int main() {
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	sieve();

	cin >> n >> q;

	for (int i = 0; i < n; ++i)
		cin >> a[i];

	long long ans = 0;

	while (q--) {
		int i;
		cin >> i;
		--i;
		if (shelf.count(i)) {
			shelf.erase(i);
			cout << (ans -= count(a[i], 0)) << '\n';
		}
		else {
			cout << (ans += count(a[i], 1)) << '\n';
			shelf.insert(i);
		}
	}
}
