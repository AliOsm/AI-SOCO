#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int x[100005],r[100005],f[100005];
vector<int>ind[10005];
ordered_set<pair<int,int> >s;
set<pair<int,int> >range;

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
 #ifndef ONLINE_JUDGE
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
 #endif
 
// -------------------------------------Code starts here---------------------------------------------------------------------     

   int n,k;
   cin>>n>>k;
   for(int i=1;i<=n;i++)
   {
      cin>>x[i]>>r[i]>>f[i];
      ind[f[i]].push_back(i);
   }

   int ans=0;
   for(int i=1;i<=10000;i++)
   {
      int z=i-k-1;
      if(z>=0)
      {
         for(auto j:ind[z])
         {
            range.erase({r[j],j});
         }
      }
      ordered_set<pair<int,int> >aise;
      set<pair<int,int> >beta;
      for(auto j:ind[i])
      {
         aise.insert({x[j],j});
         beta.insert({r[j],j});
      }
      for(auto j:beta)
      {
         int num1=aise.order_of_key({x[j.second]-j.first,-1});
         int num2=aise.order_of_key({x[j.second]+j.first+1,-1});
         ans+=num2-num1-1;
         aise.erase({x[j.second],j.second});
      }
      
      for(auto j:ind[i])
      {
         aise.insert({x[j],j});
      }
      for(auto j:range)
      {
         if(beta.size()==0)
            break;
         while(beta.begin()->first<j.first)
         {
            int index=beta.begin()->second;
            aise.erase({x[index],index});
            beta.erase(beta.begin());
            if(aise.size()==0)
               break;            
         }
         if(aise.size()==0)
            break;
         int num1=aise.order_of_key({x[j.second]-j.first,-1});
         int num2=aise.order_of_key({x[j.second]+j.first+1,-1});         
         ans+=num2-num1;
      }
      for(auto j:ind[i])
      {
         range.insert({r[j],j});
      }
      // if(i==2)
      //    cout<<range.size()<<'\n';
   }

   range.clear();
   for(int i=10000;i>=1;i--)
   {
      int z=i+k+1;
      if(z<=10000)
      {
         for(auto j:ind[z])
         {
            range.erase({r[j],j});
         }
      }
      ordered_set<pair<int,int> >aise;
      set<pair<int,int> >beta;
      for(auto j:ind[i])
      {
         aise.insert({x[j],j});
         beta.insert({r[j],j});
      }

      for(auto j:range)
      {
         if(aise.size()==0)
            break;
         while(beta.begin()->first<=j.first)
         {
            int index=beta.begin()->second;
            aise.erase({x[index],index});
            beta.erase(beta.begin());
            if(aise.size()==0)
               break;            
         }
         if(aise.size()==0)
            break;
         int num1=aise.order_of_key({x[j.second]-j.first,-1});
         int num2=aise.order_of_key({x[j.second]+j.first+1,-1});         
         ans+=num2-num1;
      }
      for(auto j:ind[i])
      {
         range.insert({r[j],j});
      }
   }

   cout<<ans;

// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }