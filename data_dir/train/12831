#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <vector>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <queue>
 
using namespace std;
const int N = 101;

int n, m, q, u, v, c, ans;
vector < pair < int, int > > G[N];
bool used[N];

void dfs(int u, int color)
{
	//cout << u << endl;
	used[u] = true;
	for (int i = 0; i < G[u].size(); ++i)
	{
		if (used[G[u][i].first] == false && G[u][i].second == color)
			dfs(G[u][i].first, color);
	}
}


int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; ++i)
	{
		scanf("%d%d%d", &u, &v, &c);
		G[u].push_back(make_pair(v, c));
		G[v].push_back(make_pair(u, c));
	}
	scanf("%d", &q);
	for (int i = 0; i < q; ++i)
	{
		scanf("%d%d", &u, &v);
		ans = 0;
		for (int color = 1; color <= m; ++color)
		{
			memset(used, false, sizeof(used));
			dfs(u, color);
			if (used[v] == true)
				ans++;
			//cout << endl;
		}
		printf("%d\n", ans);
	}

	return 0;
}