#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define mod 987654319
#define int long long
#define ll long long
#define EPS 0.00000000000001
#define ld long double
#define inf 1000000002
#define N 201
#define K 202



vector<int> sorted_cyclic_shifts(string const& s)
{
    int n = s.size();
    vector<int> p(n),c(n),pn(n),cn(n),cnt(n + 256,0);
    for(int i = 0;i < n;i++)
        cnt[s[i]]++;
    for(int i = 1; i < 256;i++)
        cnt[i] += cnt[i - 1];
    for(int i = 0;i < n;i++)
        p[--cnt[s[i]]] = i;
    c[p[0]] = 0;
    int classes = 1;
    for(int i = 1;i < n;i++)
    {
        if(s[p[i]] != s[p[i - 1]])
            classes++;
        c[p[i]] = classes - 1;
    }


    for(int h = 0;(1 << h) < n;h++)
    {
        for(int i = 0;i < n;i++)
        {
            pn[i] = p[i] - (1 << h);
            if(pn[i] < 0)
                pn[i] += n;
        }
        fill(cnt.begin(),cnt.begin() + classes,0);

        for(int i = 0;i < n;i++)
            cnt[c[pn[i]]]++;

        for(int i = 1;i < classes;i++)
            cnt[i] += cnt[i - 1];

        for(int i = n - 1;i >= 0;i--)
            p[--cnt[c[pn[i]]]] = pn[i];
        cn[p[0]] = 0;
        classes = 1;
        for(int i = 1;i < n;i++)
        {
            pair<int,int> cur = {c[p[i]],c[(p[i] + (1 << h)) % n]};
            pair<int,int> prev = {c[p[i - 1]],c[(p[i - 1] + (1 << h)) % n]};
            if(cur != prev)
                classes++;
            cn[p[i]] = classes - 1;
        }
        c.swap(cn);
    }
    return p;
}
vector<int> suffix_array_construction(string s)
{
    s += "#";
    vector<int> sorted_shifts = sorted_cyclic_shifts(s);
    sorted_shifts.erase(sorted_shifts.begin());
    return sorted_shifts;
}

vector<int> lcp_construction(string const& s,vector<int> const& p)
{
    int n = s.size();
    vector<int> rank(n,0);
    for(int i = 0;i < n;i++)
        rank[p[i]] = i;
    int k = 0;
    vector<int> lcp(n - 1,0);
    for(int i =0;i < n ;i++)
    {
        if(rank[i] == n - 1)
        {
            k = 0;
            continue;
        }
        int j = p[rank[i] + 1];
        while(i + k < n and j + k < n and s[i + k] == s[j + k])
            k++;
        lcp[rank[i]] = k;
        if(k)
            k--;
    }
    return lcp;
}


int32_t main()
{
    IOS;
    #ifndef ONLINE_JUDGE
    freopen("int.txt","r",stdin);
    freopen("out.txt","w",stdout);
    #endif
    string s;
    
       
    cin >> s;
    int k;
    cin >> k;
    string w = s;
    auto p = suffix_array_construction(w);
    auto lcp = lcp_construction(w,p);
    int  ans = 0;
    int n = s.length();
    vector<int> vis(n,0);
    
    for(int i = 0;i < p.size();i++)
    {
        
        if(i == n - 1)
        {

            if(k > n - p[i] - vis[i])
                cout << "No such line.";
            else
                for(int l = p[i];l < p[i] + vis[i] + k;l++)
                    cout << s[l];
        }
        else
        {
            int j = vis[i] + 1;
            // cerr << i << " s " << j << " " <<  p[i] << endl;
            while(j <= n - p[i])
            {
                k -= 1;
                int z = i;
                while(k > 0 and z < n - 1)
                {
                    if(lcp[z] >= j)
                    {
                        vis[z + 1] = j;
                        k--;
                        z++;
                    }
                    else
                        break;
                }
                // cerr << i << " " << j << " " << z << " " << k << endl;
                if(k == 0)
                {
                    for(int l = p[i]; l < p[i] + j;l++)
                        cout << s[l];
                    return 0;
                }
                j++;    
            }
        }        
    }

    return 0;
}
 
 