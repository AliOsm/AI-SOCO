//==================================================================
//Author        : Nguyen Trung Hieu - vuondenthanhcong11@yahoo.com
//Problem Name  :
//Discription   :
//Reference from:
//==================================================================

// -------------------- include all libraries ------------------
#include <set>
#include <bitset>
#include <queue>
#include <deque>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cstring>
#include <string>
#include <cassert>
#include <vector>
#include <list>
#include <map>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>

using namespace std;

// -------------------- Redefine container ---------------------
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<string> vs;

typedef long long int64;
typedef unsigned long long uint64;
typedef unsigned uint;

// -------------------- Redefine some operator ------------------
#define forn(i,a,b)     for (int i=(a),_b=(b); i<_b; i++)
#define rforn(i,b,a)    for (int i=(b)-1,_a=(a); i>=_a; i--)
#define reset(a,b)      memset((a),(b),sizeof(a))
#define fi              first
#define se              second
#define pb              push_back
#define all(x)          (x).begin(),(x).end()
#define mp(x,y)         make_pair(x,x)
#define foreach(i, c)   for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define debug(x)        {cerr<<#x<<" = "<<x<< endl;}
#define debugArr(a,x,y) {cerr<<#a<<" = ";forn(_,x,y) cerr << a[_] << ' '; cerr <<endl;}

// ===================== Begin template =========================
// --------------------- Quick input output ---------------------
int in(){int x=0,c;for(;(uint)((c=getchar())-'0')>= 10;){if(c=='-')return -in();if(!~c)throw~0;}do{x=(x<<3)+(x<<1)+(c-'0');}while((uint)((c=getchar())-'0')<10);return x;}
int64 in64(){int64 x=0,c;for(;(uint)((c=getchar())-'0')>=10;){if(c=='-')return -in();if(!~c)throw~0;}do{x=(x<<3)+(x<<1)+(c-'0');}while((uint)((c=getchar())-'0')<10);return x;}
void out(int n){char buf[33];int i=30;if(n<0)putchar('-'),n=-n;do{buf[i--]='0'+n%10;n/=10;}while(n);while(i<30)putchar(buf[++i]);}
void out64(int64 n){char buf[55];int i=50;if(n<0)putchar('-'),n=-n;do{buf[i--]='0'+n%10;n/=10;}while(n);while(i<50)putchar(buf[++i]);}

// ===================== End template ===========================
// --------------------- Start code ------------------------------

class DisjoinSet {
    private:
        vector<int> color;
        int setCount;
    public:
        DisjoinSet(int setSize) {
            color.resize(setSize);
            for (int i = 0; i < setSize; i++) {
                color[i] = i;
            }
            setCount = setSize;
        }
        
        bool join(int first, int second) {
            first = get(first);
            second = get(second);
            if (first == second)
                return false;
            setCount--;
            color[second] = first;
            return true;
        }
        
        int get(int index) {
            if (color[index] == index) {
                return index;
            }
            return color[index] = get(color[index]);
        }
        
        int getSetCount() {
            return setCount;
        }
};

int main() {
    //freopen ("input.txt", "r", stdin);
    //freopen ("output.txt", "w", stdout);
    int n = in();
    int A[n];
    forn (i, 0, n) {
        A[i] = in();
    }
    string s[n];
    forn (i, 0, n) {
        cin >> s[i];
    }
    
    DisjoinSet dSet(n);
    forn (i, 0, n) {
        forn (j, 0, n) {
            if (s[i][j] == '1') {
                dSet.join(i, j);
            }
        }
    }
    
    forn (i, 0, n) {
        forn (j, i + 1, n) {
            if (A[i] > A[j] && dSet.get(i) == dSet.get(j)) {
                swap(A[i], A[j]);
            }
        }
    }
    
    forn (i, 0, n) {
        printf("%d ", A[i]);
    }
}
