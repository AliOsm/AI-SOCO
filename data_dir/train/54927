#include <iostream>
#include <string.h>
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

int m, n, v[21];
char s[23][23];
vector<int> X, Y;
pair<int, int> b[21];

int dp[21][21][1 << 16];
int dir[4][2] = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}};

int main(){
	scanf("%d%d", &n, &m);
	for(int i = 1; i <= n; i++)
		scanf("%s", s[i] + 1);
	for(int i = 0; i < 21; i++)
		b[i] = make_pair(0, 0);
	int sx, sy, c = 8;
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= m; j++){
			if(s[i][j] == 'S') sx = i, sy = j, s[i][j] = '.';
			if(s[i][j] >= '1' && s[i][j] <= '9'){
				b[s[i][j] - '1'] = make_pair(i, j);
			}
			if(s[i][j] == 'B'){
				b[c++] = make_pair(i, j);
			}
		}
	for(int i = 0; i <= 16; i++)
		v[i] = -1e8;
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= m; j++)
			for(int k = 0; k < 1 << c; k++)
				dp[i][j][k] = 1e9;
	for(int i = 0; scanf("%d", &v[i]) == 1; i++);
	dp[sx][sy][0] = 0;
	queue<pair<pair<int, int>, int> > que;
	que.push(make_pair(make_pair(sx, sy), 0));
	while(que.size()){
		int x = que.front().first.first;
		int y = que.front().first.second;
		int z = que.front().second;
		que.pop();
		//cout << x << " " << y << " " << z << " " << dp[x][y][z] << endl;
		for(int k = 0; k < 4; k++){
			int nx = x + dir[k][0];
			int ny = y + dir[k][1];
			int nz = z;
			if(nx <= 0 || ny <= 0 || nx > n || ny > m) continue;
			if(s[nx][ny] != '.') continue;
			for(int i = 0; i < c; i++){
				if(b[i].second <= ny) continue;
				if((x == b[i].first && nx == b[i].first - 1) || (nx == b[i].first && x == b[i].first - 1))
					nz ^= (1 << i);
			}
			//cout << "nx = " << nx << " " << ny << " " << nz << " " << dp[nx][ny][nz] << " " << dp[x][y][z] << endl;
			if(dp[nx][ny][nz] <= dp[x][y][z] + 1) continue;
			dp[nx][ny][nz] = dp[x][y][z] + 1;
			que.push(make_pair(make_pair(nx, ny), nz));
		}
	}
	int ans = 0;
	for(int i = 0; i < 1 << c; i++){
		int t = -dp[sx][sy][i];
		if(dp[sx][sy][i] == 1e9) continue;
		//cout << sx << " " << sy << " iii " << i << " " << dp[sx][sy][i] << endl;
		for(int j = 0; j < c; j++){
			if(i & (1 << j)){
				t += v[j];
			}
		}
		ans = max(ans, t);
	}
	cout << ans << endl;
	return 0;
}
