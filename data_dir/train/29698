#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define pll pair<ll, ll>
#define mp(x, y) make_pair(x, y)
using namespace std;
 
const ll MAX_N = 2e5 + 5, inf = 1e18, mod = 1000000007;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 
bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
 
inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       tp %= mod; res %= mod;
       b >>= 1ll;
    }
    return res;
}
 
ll vec_mult(const pll &t1, const pll &t2, const pll &t3) {
   const ll &x1 = t1.first, y1 = t1.second;
   const ll &x2 = t2.first, y2 = t2.second;
   const ll &x3 = t3.first, y3 = t3.second;
   return ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}
 
void ok() {
   cout << "YES" << endl;
}
 
void no() {
   cout << "NO" << endl;
}
 
inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}
 
struct Fenwick {
    int n;
    vector<int> a;
 
    Fenwick(int _n): n(_n), a(_n) {}
 
    void add(int pos, int x) {
        while (pos < n) {
            a[pos] += x;
            pos |= pos + 1;
        }
    }
 
    int get(int pos) {
        int res = 0;
        while (pos >= 0) {
            res += a[pos];
            pos = (pos & (pos + 1)) - 1;
        }
        return res;
    }
    int get(int l, int r) {
        if (l > r) return 0;
        return get(r) - get(l - 1);
    }
};
 
bool solve(vector<pair<char, ll>> tmp) {
    int n = tmp.size();
    vector<ll> p;
    for (int i = 0; i < n; i++) {
        p.push_back(tmp[i].second);
    }
    Fenwick fw(n);
    bool ans = false;
    for (int i = 0; i < n; i++) {
        fw.add(p[i], 1);
        ans ^= fw.get(p[i] + 1, n - 1) % 2;
    }
    return ans;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    int t = nxt();
    while (t--) {
        int n = nxt();
        string s1, s2;
        cin >> s1 >> s2;
        vector<pair<char, ll>> str1, str2;
        for (int i = 0; i < n; i++) {
            str1.push_back({s1[i], i});
            str2.push_back({s2[i], i});
        }
        sort(all(s1));
        sort(all(s2));
        if (s1 != s2) {
            no();
            continue;
        }
        make_unique(s1);
        if (s1.size() != n) {
            ok();
            continue;
        }
        sort(all(str1));
        sort(all(str2));
        if (solve(str1) != solve(str2)) {
            no();
        } else {
            ok();
        }
    }
    return 0;
}