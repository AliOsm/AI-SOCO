#include<bits/stdc++.h>
using namespace std;

# define C continue;
# define R return

# define D double
# define I insert
# define ll long long
# define ld long double

# define ull unsigned long long
# define ui unsigned int

# define pb push_back
# define pf push_front

# define vi vector < int >
# define vc vector < char >
# define vs vector < string >
# define vb vector < bool >
# define vd vector < D >
# define vll vector < ll >
# define vull vector < ull >
# define vld vector < ld >
# define PQ priority_queue

# define vvi vector < vector < int > >
# define vvb vector < vector < bool > >
# define vvc vector < vector < char > >
# define vvs vector < vs >
# define vvll vector < vector < ll > >
# define vvd vector < vector < D > >
# define vvld vector < vector < ld > >

# define all(v) (v).begin() , (v).end()
# define allrev(v) (v).rbegin() , (v).rend()
# define allcomp(v) v.begin() , v.end() , comp
# define allrevcomp(v) v.rbegin() , v.rend() , comp

# define pii pair < int , int >
# define pll pair < ll , ll >
# define pld pair < ld , ld >
# define pDD pair < D , D >

# define vpld vector < pld >
# define vpii vector < pii >
# define vpll vector < pll >
# define vpDD vector < pDD >

# define vvpii vector < vector < pii > >
# define F first
# define S second
# define mp make_pair

# define dist(a,b,p,q) sqrt((p-a)*(p-a) + (q-b)*(q-b))

# define pp(n) printf("%.10Lf",n);
# define line cout<<"\n";
# define fast ios_base::sync_with_stdio(false) ; cin.tie(0) ; cout.tie(0);

string vow = "aeiou";
int month[] = {-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

const int dxhorse[] = {-2, -2, -1, -1, 1, 1, 2, 2};
const int dyhorse[] = {1, -1, 2, -2, 2, -2, 1, -1};

const int dx[] = { -1 , 0 , 1 , 0 } ;
const int dy[] = { 0 , 1 , 0 , -1 } ;

const ld pie = 3.1415926535897932384626 ;
const ll mod = 1e9 + 7 ;

/// Tip : If a and b are positive integers ; we may say - ceil (a/b) = 1 + floor ( (a-1)/b ) .

struct NODE
{
    int minn = INT_MAX ;
    int maxx = INT_MIN ;

    int max_indx = -1 ;
    int min_indx = -1 ;
};

vi v ;
vector < NODE > tree ;

int n , q ;

void prop ( int node )
{
    int lc = 2*node + 1 ;
    int rc = lc + 1 ;

    if ( tree[lc].minn < tree[rc].minn )
    {
        tree[node].minn = tree[lc].minn ;
        tree[node].min_indx = tree[lc].min_indx ;
    }

    else
    {
        tree[node].minn = tree[rc].minn ;
        tree[node].min_indx = tree[rc].min_indx ;
    }

    if ( tree[lc].maxx > tree[rc].maxx )
    {
        tree[node].maxx = tree[lc].maxx ;
        tree[node].max_indx = tree[lc].max_indx ;
    }

    else
    {
        tree[node].maxx = tree[rc].maxx ;
        tree[node].max_indx = tree[rc].max_indx ;
    }

    return ;
}

void build ( int node = 0 , int start = 0 , int end = n - 1 )
{
    if ( start == end )
    {
        tree[node].minn = v[start] ;
        tree[node].maxx = v[start] ;

        tree[node].min_indx = start ;
        tree[node].max_indx = start ;

        return ;
    }

    int mid = start + end >> 1 ;

    build ( 2*node + 1 , start , mid ) ;
    build ( 2*node + 2 , mid+1 , end ) ;

    prop ( node ) ;
}

int l , r , val ;

NODE combine ( NODE lc , NODE rc )
{
    NODE ans ;

    if ( lc.minn < rc.minn )
    {
        ans.minn = lc.minn ;
        ans.min_indx = lc.min_indx ;
    }

    else
    {
        ans.minn = rc.minn ;
        ans.min_indx = rc.min_indx ;
    }

    if ( lc.maxx > rc.maxx )
    {
        ans.maxx = lc.maxx ;
        ans.max_indx = lc.max_indx ;
    }

    else
    {
        ans.maxx = rc.maxx ;
        ans.max_indx = rc.max_indx ;
    }

    return ans ;
}

NODE query ( int node = 0 , int start = 0 , int end = n - 1 )
{
    NODE ans ;

    if ( start > r || end < l )
        return ans ;

    if ( start >= l && end <= r )
    {
        return tree[node] ;
    }

    int mid = start + end >> 1 ;

    NODE lc = query ( 2*node + 1 , start , mid ) ;
    NODE rc = query ( 2*node + 2 , mid+1 , end ) ;

    ans = combine ( lc , rc ) ;
    return ans ;
}

void solve ( int test_case )
{
    cin >> n >> q ;

    v.resize ( n ) ;
    tree.resize ( 4*n ) ;

    for ( int i=0 ; i < n ; i ++ )
        cin >> v[i] ;

    build ( 0 , 0 , n - 1 ) ;

    for ( int i=0 ; i < q ; i ++ )
    {
        cin >> l >> r >> val ;

        l -- ;
        r -- ;

        NODE ans = query ( ) ;

        if ( ans.minn != val ) cout << ans.min_indx + 1 ;
        else if ( ans.maxx != val ) cout << ans.max_indx + 1 ;
        else cout << -1 ;

        line ;
    }
}

int main()
{fast
    int t = 1;
    // cin >> t;

    for ( int i = 1 ; i <= t ; i ++ )
    {
        solve ( i ) ;
    }

    return 0;
}
