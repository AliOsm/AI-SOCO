#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <vector>
#include <queue>
#include <deque>
#include <iomanip>
#include <utility>
#include <functional>
#include <memory.h>
#include <stdlib.h>
#include <string>
#include <ext/rope>
#include <iterator>

using namespace std;
using namespace __gnu_cxx;

#define pb push_back
#define mp make_pair
#define F first
#define S second
#define sz size
#define scf scanf
#define prf printf       
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define print(x) prf("%d\n", x.sz()); for (int i = 0; i < x.sz(); i++) prf("%d ", x[i]);
#define getBit(x,i) ((x&(1<<i))!=0 ? 1 : 0)
#define For(i,n) for (int i = 0; i < n; ++i)                          

typedef long long ll;

const ll base = 1000000007LL;
const ll INF = 10000000000000LL;

int n;
int x, y;
ll ans = 0;   
vector < pair < int, int > > v;

bool can(ll mid)
{
    ll cur = 4;
    ll prev = mid;
    for (int i = n - 1; i >= 0; --i)
    {
        ll delta = prev - (ll)v[i].F;
        if (delta <= 0)
            return false;                                
        if (delta == 1LL)
        {
            if (cur < (ll)v[i].S)
                return false;  
            if (cur < (ll)2e9 + 100LL)
                cur *= 4;
        }
        else
        {
            while (delta > 1)
            {
                if (cur > (ll)2e9 + 100LL)
                    break;
                cur *= 4LL;
                --delta;
            }
            if (cur < (ll)v[i].S)
                return false;   
            if (cur < (ll)2e9 + 100LL)
                cur *= 4LL;
        }
        prev = v[i].F;
    }
    return true;
}           

int main()
{
    scf("%d", &n);
    For(i, n)
    {
        scf("%d%d", &x, &y);
        v.pb(mp(x, y));
    }
    sort(all(v));
    ll l = 1;
    ll r = (ll)1e18;
    while (r - l > 1)
    {
        ll mid = (l + r) / 2LL;    
        if (can(mid))
            r = mid;
        else l = mid;
    }
    if (can(l))
        cout << l << endl; 
    else cout << r << endl;                       
    return 0;
}