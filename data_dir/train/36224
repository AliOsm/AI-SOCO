//besmellah
#include <bits/stdc++.h>
using namespace std;

//#pragma GCC optimize("O3,Ofast,no-stack-protector,unroll-loops,fast-math")
#define int long long
typedef pair <int, int> pii;

const int maxn = 1e5 + 5;
vector <int> adj[maxn];
int dp[maxn], pd[maxn], sz[maxn], h[maxn];
unordered_set <int> ans;
int a = 0;

void dfs(int v, int p = -1) {
	unordered_set <int> S;
	int ch = 0;
	if (adj[v].size() == 1)
		a |= 1 << h[v];
	for (auto u: adj[v]) {
		if (u == p)
			continue;
		h[u] = h[v] ^ 1;
		dfs(u, v);
		pd[v] += pd[u];
		S.insert(dp[u]);
		ch++;
		if (adj[u].size() == 1)
			sz[v]++;
	}
	pd[v] += ch - sz[v];
	pd[v] += min(1ll, sz[v]);
//	cout << v << ' ' << pd[v] << ' ' << ch << ' ' << sz[v] << endl;
	for (int i = 0; i < adj[v].size(); i++) {
		if (S.find(i) == S.end()) {
			dp[v] = i;
			break;
		}
	}
	for (auto u: S) {
		ans.insert(u ^ dp[v]);
	}
}

int32_t main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n;
	cin >> n;
	for (int i = 0; i < n - 1; i++) {
		int v, u;
		cin >> v >> u;
		v--;
		u--;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	int root = 0;
	for (int i = 0; i < n; i++) {
		if (adj[i].size() > 1) {
			root = i;
			dfs(i);
			break;
		}
	}
//	cout << dp[root] << endl;
	if (a == 3)
		cout << 3 << ' ';
	else
		cout << "1 ";
	cout << pd[root];
}
