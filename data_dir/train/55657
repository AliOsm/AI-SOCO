#include <bits/stdc++.h>

#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define for1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(x) (x).begin(), (x).end()
#define clr(x) memset((x), 0, sizeof((x)));
#define pb push_back
#define mp make_pair
#define x first
#define y second

using namespace std;
typedef long double ld;
typedef long long ll;
typedef pair<int, int> PII;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef long long i64;
typedef unsigned long long ull;

mt19937_64 gen;

template<class T>
bool remin(T &a, const T &b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template<class T>
bool remax(T &a, const T &b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

int nxt() {
    int x;
    scanf("%" PRId32, &x);
    return x;
}

ll nxtll() {
    ll x;
    scanf("%" PRId64, &x);
    return x;
}

ll gcd(ll a, ll b) {
    a = abs(a);
    b = abs(b);
    while (b) {
        a %= b;
        swap(a, b);
    }
    return a;
}

struct Q {
    ll n, d;
    Q(ll a = 0): n(a), d(1) {}
    Q(ll nn, ll dd) : n(nn), d(dd) {
        norm();
    }
    void norm() {
        ll g = gcd(abs(n), abs(d));
        n /= g;
        d /= g;
        if (d < 0) {
            n *= -1;
            d *= -1;
        }
    }
    Q operator + (const Q &r) const {
        return Q(n * r.d + d * r.n, d * r.d);
    }
    Q operator - (const Q &r) const {
        return Q(n * r.d - d * r.n, d * r.d);
    }
    Q operator * (const Q &r) const {
        return Q(n * r.n, d * r.d);
    }
    Q operator / (const Q &r) const {
        return Q(n * r.d, d * r.n);
    }
    ll value(const Q &r) const {
        return n * r.d - d * r.n;
    }
    bool operator < (const Q &r) const {
        return value(r) < 0;
    }
    bool operator != (const Q &r) const {
        return value(r) != 0;
    }
    bool operator > (const Q &r) const {
        return value(r) > 0;
    }
    bool operator >= (const Q &r) const {
        return value(r) >= 0;
    }
    bool operator <= (const Q &r) const {
        return value(r) <= 0;
    }
    bool operator == (const Q &r) const {
        return value(r) == 0;
    }
};

ostream &operator<<(ostream &os, const Q &p) {
    return os << p.n << "/" << p.d;
}

struct pt {
    ld x, y;

    pt() = default;

    pt(ld x, ld y) : x(x), y(y) {}

    inline pt operator-(const pt &r) const {
        return pt(x - r.x, y - r.y);
    }

    inline pt operator+(const pt &r) const {
        return pt(x + r.x, y + r.y);
    }

    inline pt operator*(const ld &r) const {
        return pt(x * r, y * r);
    }

    inline pt operator -() const {
        return pt(-x, -y);
    }

    inline ld sqlen() const {
        return fabsl(x * x + y * y);
    }
};

ostream &operator<<(ostream &os, const pt &p) {
    return os << "(" << p.x << "," << p.y << ")";
}

inline ld cross(const pt &l, const pt &r) {
    return l.x * r.y - l.y * r.x;
}

inline ld dot(const pt &l, const pt &r) {
    return l.x * r.x + l.y * r.y;
}


ll pwmod(ll a, ll n, ll mod) {
    ll ret = 1;
    while (n) {
        if (n & 1) ret = ret * a % mod;
        a = a * a % mod;
        n >>= 1;
    }
    return ret;
}

template<typename T>
inline T sqr(T x) {
    return x * x;
}


inline bool is_prime(ull x) {
    for (ull i = 2; i * i <= x; ++i) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}


ll gcdex (ll a, ll b, ll & x, ll & y) {
    if (a == 0) {
        x = 0; y = 1;
        return b;
    }
    ll x1, y1;
    ll d = gcdex (b%a, a, x1, y1);
    x = y1 - (b / a) * x1;
    y = x1;
    return d;
}

const int N = 1000 * 100 * 2 + 10;
vector<int> divs[N];

void solve() {
    for (int i = 1; i < N; ++i) {
        for (int j = i + i; j < N; j += i) {
            divs[j].push_back(i);
        }
    }
    int n = nxt();
    int m = nxt();
    vector<char> ban(m, 0);
    forn(i, n) {
        ban[nxt()] = 1;
    }
    vector<char> used(m, 0);
    forn(i, m) {
        if (!ban[i]) {
            used[i] = 1;
        }
    }

    map<int, vector<int> > a;
    forn(i, m) {
        if (!used[i]) continue;

        ll x, y;
        ll g = gcdex(i, m, x, y);
        a[g].push_back(i);
    }
    vector<int> gg;
    vector<vector<int> > nums;
    map<int, int> ids;
    for (auto pa : a) {
        ids[pa.first] = gg.size();
        gg.push_back(pa.first);
        nums.push_back(pa.second);
    }

    vector<int> dp(gg.size(), 0);
    vector<int> pa(gg.size(), -1);
    forn(i, gg.size()) {
        dp[i] = nums[i].size();
        int ma = 0;
        int pp = -1;
        for (int d : divs[gg[i]]) {
            if (ids.count(d)) {
                int id = ids[d];
                if (dp[id] > ma) {
                    ma = dp[id];
                    pp = id;
                }
            }
        }
        pa[i] = pp;
        dp[i] += ma;
    }
    vector<int> resId;
    int v = -1;
    forn(i, gg.size()) {
        if (v == -1 || dp[v] < dp[i]) {
            v = i;
        }
    }
    assert(v != -1);

    while (v != -1) {
        resId.push_back(v);
        v = pa[v];
    }
    vector<int> res;
    ford(i, resId.size()) {
        for (int x : nums[resId[i]]) {
            res.push_back(x);
        }
    }
    vector<int> ans(res.size());
    ll mul = 1;
    forn(i, res.size()) {
        ll x, y;
        ll g = gcdex(mul, m, x, y);
        x = x * (res[i] / g) % m;
        x = (x + m) % m;
        ans[i] = x;
        mul = mul * x % m;
    }
    cout << ans.size() << "\n";
    for (int x : ans) {
        cout << x << " ";
    }
    cout << "\n";
}

void prepare() {

}

int main() {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    prepare();

    int t = 1;
//    cin >> t;
//    t = nxt();
    forn(i, t) {
        solve();
    }
    cerr << "Time " << clock() / (double) CLOCKS_PER_SEC << endl;
    return 0;
}
