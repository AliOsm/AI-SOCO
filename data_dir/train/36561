#include <bits/stdc++.h>
using namespace std;

#define sz(x) (int)(x).size()
#define all(x) begin(x), end(x)

using ll = long long;
using ld = long double;

ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }

constexpr ll lim = 10000007;
vector<ll> divv(lim, -1);

map<ll, ll> facts;
vector<ll> divvs;

void gen(map<ll, ll>::iterator it = facts.begin(), ll val = 1) {
    if (it == facts.end()) {
        divvs.push_back(val);
    } else {
        for (ll i = 0; i <= it->second; i++) {
            gen(next(it), val);
            val *= it->first;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    divv[1] = 1;
    for (ll i = 2; i < lim; i++) {
        if (divv[i] < 0) {
            divv[i] = i;
            for (ll j = i*i; j < lim; j+=i) {
                divv[j] = i;
            }
        }
    }
    ll n;
    cin >> n;
    vector<pair<ll, ll>> in(n);
    for (ll i = 0; i < n; i++) {
        ll x;
        cin >> x;
        in[i] = {x, i};
    }
    sort(all(in));
    vector<ll> res(10000007, -1);
    ll best = 0x3FFFFFFFFFFFFFFF;
    ll a = 0;
    ll b = 0;
    auto add = [&](ll pos, ll ind){
        if (res[pos] < 0) {
            res[pos] = ind;
        } else {
            ll c = in[ind].first * in[res[pos]].first / pos;
            if (c < best) {
                best = c;
                a = ind;
                b = res[pos];
            }
        }
    };
    for (ll i = 0; i < n && in[i].first < best; i++) {
        facts.clear();
        divvs.clear();
        ll c = in[i].first;
        while (c != 1) {
            facts[divv[c]]++;
            c /= divv[c];
        }
        gen();
        for (ll d : divvs) {
            add(d, i);
        }
    }
    a = in[a].second;
    b = in[b].second;
    if (a > b) swap(a, b);
    cout << a+1 << " " << b+1 << endl;
}
