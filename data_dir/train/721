///https://www.youtube.com/watch?v=UUkazajFDmc&list=RDUUkazajFDmc&start_radio=1
#include<bits/stdc++.h>

using namespace std;
#define ll long long
#define dbug printf("I am here\n");
#define fast ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
const int maxn = 2e5+100;

const ll inf = 1e18;
vector < int > g[maxn];
vector < pair < int , int > > edges;
ll visit[maxn];
ll arr[maxn];
ll n , m;
bool vis[maxn];

bool dfs(int u , int par){
    if(vis[u] == true)return true;
    vis[u] = true;
    bool check = false;
    for(auto v : g[u])if(v-par){
        if(dfs(v,u)){
            visit[u] = visit[v] = (n+1);
            check |= true;
        }
    }
    return check;
}

ll ans(ll u , int par){
    ll mx = 0;
    for(auto v : g[u])if(v-par){
        mx = max(mx , ans(v , u));
    }
    return (arr[u]+mx);
}


int main()
{
    fast;
    cin >> n >> m;
    for(int i = 1; i<=n; i++)cin >> arr[i];
    for(int i = 1; i<=m; i++){
        int u , v; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
        edges.push_back({u,v});
    }
    int s;
    cin >> s;
    dfs(s,-1);
    ll tot = 0;
    for(int i = 1; i<=n; i++){
        if(visit[i] == (n+1))tot += arr[i];
        else visit[i] = i;
    }
    for(int i = 1; i<=n; i++){
        g[i].clear();
    }
    arr[n+1] = tot;
    for(int i = 0; i<m; i++){
        int u = visit[edges[i].first];
        int v = visit[edges[i].second];
        if(u == v)continue;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    cout << ans(visit[s] , -1) << endl;
    return 0;


}
/*



*/

