#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <set>
#include <map>
#include <vector>

using namespace std;

typedef long double ld;

void bad() {
    cout << "-1";
    exit(0);
}

const int maxn = 1<<18;

int n, k;

int d[maxn];

int p[maxn];

int main()
{
    ios_base::sync_with_stdio(0);
    cin >> n >> k;

    for (int i=1;i<=n;i++)
        cin >> d[i];

    memset(p,255,sizeof(p));

    map<int,int> m;
    set<pair<int,int> > q, qq;

    for (int i=1;i<=n;i++)
        q.insert(make_pair(d[i],i)), qq.insert(make_pair(d[i],i));

    for (int w = 1; w <= n; w++) {
        while (!qq.empty() && qq.begin()->first < w - 1) qq.erase(qq.begin());
        while (!qq.empty() && qq.begin()->first == w - 1) {
            m[qq.begin()->second]=(w==1?k:k-1);
            qq.erase(qq.begin());
        }
        while (!q.empty() && q.begin()->first < w) q.erase(q.begin());
        while (!q.empty() && q.begin()->first == w) {
            while (!m.empty() && m.begin()->second==0) m.erase(m.begin());
            if (m.empty()) bad();
            p[q.begin()->second]=m.begin()->first;
            m.begin()->second--;
            q.erase(q.begin());
        }
        m.clear();
    }

    int k = 0;

    for (int i=1;i<=n;i++)
        if (p[i]==-1) k++;

    if (k!=1) bad();

    cout << n-1 << '\n';

    for (int i=1;i<=n;i++)
        if (p[i]!=-1) cout << i << ' ' << p[i] << '\n';

    return 0;
}
