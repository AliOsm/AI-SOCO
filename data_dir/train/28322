#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define ll long long
#define ld long double
#define all(a) a.begin(),a.end()
#define endl '\n'
using namespace std;
using namespace __gnu_pbds;

mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rnd1(chrono::steady_clock::now().time_since_epoch().count());

template<class T>
using ordered_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

template<class T>
using ordered_multiset=tree<T,null_type,less_equal<T>,rb_tree_tag,tree_order_statistics_node_update>;

const int N=5000+7;
const int inf=1e9+5;
const int mod=1e9+7;

int dp[N][N];
bool calc[N][N];
int p[N][N];
vector< pair<int,int> >g[N];

int dfs(int i,int j)
{
    if (j==0)return inf;
    if (calc[i][j])return dp[i][j];
    for (int k=0;k<g[i].size();++k){
        int to=g[i][k].ff;
        int cost=g[i][k].ss;
        if (dfs(to,j-1)+cost<dp[i][j]){
            dp[i][j]=dfs(to,j-1)+cost;
            p[i][j]=to;
        }
    }
    calc[i][j]=true;
    return dp[i][j];
}

main ()
{
    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    int n,m,t;
    cin>>n>>m>>t;
    for (int i=1;i<=m;++i){
        int x,y,t1;
        cin>>x>>y>>t1;
        g[y].pb(mp(x,t1));
    }
    for (int i=1;i<=n;++i){
        for (int j=1;j<=n;++j){
            dp[i][j]=inf;
        }
    }
    dp[1][1]=0;
    calc[1][1]=true;
    for (int i=n;i>=1;--i){
        if (dfs(n,i)<=t){
            vector<int>ans;
            int ii=n;
            int jj=i;
            while(p[ii][jj]>0){
                ans.pb(ii);
                ii=p[ii][jj];
                --jj;
            }
            ans.pb(ii);
            reverse(all(ans));
            cout<<ans.size()<<endl;
            for (int j=0;j<ans.size();++j){
                cout<<ans[j]<<' ';
            }
            exit(0);
        }
    }
}
