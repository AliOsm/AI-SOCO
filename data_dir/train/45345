#include <bits/stdc++.h>
using namespace std;
#define debug(x) cout << #x << " = " << x << endl;
#define finish(x) return cout << x << endl, 0;
#define ll long long

struct uni{
    int par[100001], sz[100001];
    void resize(int n){
        for(int i = 0 ; i < n ; i++)
            par[i] = i, sz[i] = 1;
    }
    void merge(int a, int b){
        a = find(a);
        b = find(b);
        if(a == b) return;
        if(sz[b] > sz[a]) swap(a, b);
        sz[a] += sz[b];
        par[b] = a;
    }
    int find(int a){
        while(par[a] != a) a = par[a];
        return a;
    }
};

uni tree;
ll n, x, ans;
bool vis[100001];
vector <ll> szs;

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> n;
    tree.resize(n);
    for(int i = 1 ; i <= n && cin >> x ; i++)
        tree.merge(i, x);
    for(int i = 1 ; i <= n ; i++){
        int parent = tree.find(i);
        if(!vis[parent]) szs.push_back(tree.sz[parent]);
        vis[parent] = 1;
    }
    if(szs.size() == 1) finish(szs[0]*szs[0]);
    sort(szs.begin(), szs.end());
    szs[(int)(szs.size())-2] += szs.back();
    szs.pop_back();
    for(ll i : szs) ans += i*i;
    cout << ans << endl;
    return 0;
}
