#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define PSET(x,y) fixed<<setprecision(y)<<x
#define pb push_back
#define pf push_front
#define mp make_pair
#define pii pair<int,int>
#define pid pair<int,double>
#define vi vector<int>
#define ff first
#define ss second
#define int long long
#define ull unsigned long long
#define SIZE 200010
#define mod 1000000007
#define BIG 998244353
#define s(t) scanf("%d",&t)
#define p(t) printf("%d\n",t)
#define mii map<int,int>
#define MSET(table,i) memset(table, i, sizeof(table))
#define N 31607
#define INF 1e18
#define endl '\n'
#define tc int t;cin>>t;while(t--)
#define pi  3.1415926358
#define print(x) for(auto el: x) cout<<el<<" ";cout<<endl
#define bits(x) __builtin_popcount(x)

int  max3(int  a,int  b,int c)
{
    return max(c,max(a,b));
}
int min3(int a,int  b,int  c)
{
    return min(a,min(b,c));
}
int  power(int  x,int  y )
{
    int res = 1;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x);
        y = y>>1;
        x = (x*x);
    }
    return res;
}
int  powermod(int  x,int  y,int p )
{
    int res = 1;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x)%p;
        y = y>>1;
        x = (x*x)%p;
    }
    return res%p;
}
int logg(int  a)
{
    int  x=0;
    while(a>1)
    {
        x++;
        a/=2;
    }
    return x;
}
int  gcd(int  a,int   b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
int ceiling (int  a,int  b)
{
    if(a%b==0)
        return a/b;
    else
        return a/b+1;
}
int modinv(int x)
{
    return powermod(x,mod-2,mod);
}

void input(int *arr,int n)
{
    for(int i=0;i<n;i++)
        cin>>arr[i];
}

bool isperfectsquare(int n)
{
    double x=sqrt(n);
    return ((x-floor(x))==0);
}

int sumofdigits(int n)
{
    int ans=0;
    while(n)
        ans+=n%10,n/=10;
    return ans;
}

int cntdigits(int n)
{
    int cnt=0;
    while(n)
        cnt++,n/=10;
    return cnt;
}

bool prime[10001]; 
void SieveOfEratosthenes(int n) 
{ 
    memset(prime, true, sizeof(prime)); 
    prime[0]=false;
    prime[1]=false;
    for (int p=2; p*p<=n; p++) 
    { 
        if (prime[p] == true) 
        { 
            for (int i=p*p; i<=n; i += p) 
                prime[i] = false; 
        } 
    } 
  
} 


int32_t main()
{
    fast;
    int n;cin>>n;
    string str;cin>>str;
    int cnt=0;
    for(int i=0;i<n-1;i++)
    {
        if(str[i]==str[i+1])
        {
            if(i+2<n)
            {
                if(str[i]==str[i+2])
                {
                    if(str[i]=='R' or str[i]=='G')
                        str[i+1]='B';
                    if(str[i]=='B')
                        str[i+1]='R';
                }
                else
                {
                    if(str[i]=='R' and  str[i+2]=='G')
                        str[i+1]='B';
                    if(str[i]=='G' and  str[i+2]=='R')
                        str[i+1]='B';
                    if(str[i]=='R' and  str[i+2]=='B')
                        str[i+1]='G';
                    if(str[i]=='B' and  str[i+2]=='R')
                        str[i+1]='G';
                    if(str[i]=='G' and  str[i+2]=='B')
                        str[i+1]='R';
                    if(str[i]=='B' and  str[i+2]=='G')
                        str[i+1]='R';
                }
            }
            else
            {
                if(str[i]=='R' or str[i]=='G')
                        str[i+1]='B';
                    if(str[i]=='B')
                        str[i+1]='R';
            }
            cnt++;
        }
    }
    cout<<cnt<<endl<<str;
}