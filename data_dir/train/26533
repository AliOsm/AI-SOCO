#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define pll pair<ll, ll>
#define mp(x, y) make_pair(x, y)
using namespace std;
 
const ll N = 2e5 + 5, inf = 1e18, mod = 1e9 + 7;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 
bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
 
inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       //tp %= mod; res %= mod;
       b >>= 1ll;
    }
    return res;
}
 
ll vec_mult(const pll &t1, const pll &t2, const pll &t3) {
   const ll &x1 = t1.first, y1 = t1.second;
   const ll &x2 = t2.first, y2 = t2.second;
   const ll &x3 = t3.first, y3 = t3.second;
   return ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}
 
void ok() {
   cout << "YES" << endl;
   exit(0);
}
 
void no() {
   cout << "NO" << endl;
   exit(0);
}
 
inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}
 
struct Query {
    ll l, r, numBlock, ind;
    ll ans;
    Query(ll _l, ll _r, ll nB, ll _ind) {
        l = _l;
        r = _r;
        numBlock = nB;
        ind = _ind;
        ans = 0;
    }
 
    bool operator <(const Query &cur) const {
        if (numBlock == cur.numBlock) {
            return r < cur.r;
        } else {
            return numBlock < cur.numBlock;
        }
    }
};
 
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll n = nxt(), q = nxt();
    vector<ll> mas(n + 1);
    for (int i = 1; i <= n; i++) {
        mas[i] = nxt();
    }
    ll blockSize = 1100;
    vector<Query> buf;
    for (ll i = 0; i < q; i++) {
        ll l = nxt(), r = nxt();
        buf.push_back(Query(l, r, l / blockSize, i));
    }
    sort(all(buf));
 
    ll left = 0, right = 0;
    ll ans = 0;
    vector<ll> cnt(2000000, 0);
    cnt[0] = 1;
    for (int i = 0; i < q; i++) {
        ll l = buf[i].l, r = buf[i].r;  
        while (right < r) {
            right++;
            ll dig = cnt[mas[right]];
            ans += (2LL * dig + 1) * mas[right];
            cnt[mas[right]]++; 
        }
 
        while (right > r) {
            ll dig = cnt[mas[right]]; 
            ans -= (2LL * dig - 1) * mas[right];
            cnt[mas[right]]--;
            right--;
        }
       
        while (left < l) {
            ll dig = cnt[mas[left]];
            ans -= (2ll * dig - 1LL) * mas[left]; 
            cnt[mas[left]]--; 
            left++;
        }
        
        while (left > l) {
            left--;
            ll dig = cnt[mas[left]];
            cnt[mas[left]]++;
            ans += (2LL * dig + 1LL) * mas[left];
            
        } 
        buf[i].ans = ans; 
    }
 
    vector<ll> rez(q);
    for (int i = 0; i < q; i++) {
        rez[buf[i].ind] = buf[i].ans;
    }
    for (int i = 0; i < q; i++) {
        cout << rez[i] << '\n';
    }
    return 0LL;
}