#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <vector>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <queue>
 
using namespace std;
const int N = 500001;
const int INF = (int)1e9;

int n;
int a[N];
int cnt[2][N];
int pos[2][N];
vector < pair < int, int > > ans;



int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
		scanf("%d", &a[i]);
	for (int i = 0; i < N; ++i)
		pos[0][i] = pos[1][i] = INF;
	cnt[0][0] = cnt[1][0] = 0;
	if (a[0] == 1)
		cnt[0][0] = 1;
	else
		cnt[1][0] = 1;
	pos[0][cnt[0][0]] = 0;
	pos[1][cnt[1][0]] = 0;
	for (int i = 1; i < n; ++i)
	{
		cnt[0][i] = cnt[0][i - 1];
		cnt[1][i] = cnt[1][i - 1];
		if (a[i] == 1)
		{
			cnt[0][i]++;
			pos[0][cnt[0][i]] = i;
		}
		else
		{
			cnt[1][i]++;
			pos[1][cnt[1][i]] = i;
		}
	}

	for (int i = 1; i <= n; ++i)
	{
		int s[2], c[2], last = -1;
		bool flag;
		s[0] = s[1] = 0;
		c[0] = i;
		c[1] = i;
		while (pos[0][c[0]] != INF || pos[1][c[1]] != INF)
		{
			int p = min(pos[0][c[0]], pos[1][c[1]]);
			if (pos[0][c[0]] < pos[1][c[1]])
			{
				s[0]++;
				flag = false;
			}
			else
			{
				s[1]++;
				flag = true;
			}
			c[0] = i + cnt[0][p];
			c[1] = i + cnt[1][p];
			last = p;
		}
		if (last != n - 1)
			continue;
		if (flag == false && s[0] <= s[1])
			continue;
		if (flag == true && s[1] <= s[0])
			continue;
		ans.push_back(make_pair(s[flag], i));
	}
	sort(ans.begin(), ans.end());
	printf("%d\n", ans.size());
	for (int i = 0; i < ans.size(); ++i)
		printf("%d %d\n", ans[i].first, ans[i].second);
	return 0;
}