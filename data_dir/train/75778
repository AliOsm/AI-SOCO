#include <cstdio>
#include <string>
#include <vector>
#include <map>
#include <iostream>
#include <memory.h>
#include <ctime>
#include <algorithm>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define REP(i,n) FOR(i,0,n)
#define pb push_back
#define mp make_pair
#define sz(a) (int)a.size()

int pw[100020];
int q;
map<int, long long> answer;

int p[100005][21];
int a[100005];
int n, m;

int gcd(int a, int b) {
    while(a && b) {
        if (a > b) a %= b; else b %= a;
    }
    return (a + b);
}

inline int get(int l, int r) {
    int len = r - l + 1;
    return gcd(p[l][pw[len]], p[r - (1 << pw[len]) + 1][pw[len]]);
}

int main(){
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        scanf("%d", &a[i]);
        p[i][0] = a[i];
    }

    for (int j = 1; j < 20; ++j)
        for (int i = 0; i < n; ++i) {
            if (i + (1 << (j - 1)) >= n) {
                p[i][j] = p[i][j - 1];
                continue;
            }
            p[i][j] = gcd(p[i][j - 1], p[i + (1 << (j - 1))][j - 1]);
        }
    scanf("%d", &m);
    
    
    pw[1] = 0;
    for (int i = 2; i <= n; ++i) {
        pw[i] = pw[i - 1];
        if ((i & (i - 1)) == 0) {
            pw[i]++;
        }
    }

    


    for (int i = 0; i < n; ++i) {
        int cur = i, lastcur = i;
        while (cur < n) {
            lastcur = cur;
            int now = get(i, cur);
            for (int j = 19; j >= 0; --j)
                if (cur + (1 << j) - 1 < n) {
                    int ret = get(i, cur + (1 << j) - 1);
                    if (ret == now) cur += (1 << j) - 1;
                }
            answer[now] += cur - lastcur + 1;
            cur += 1;
        }
    }

    for (int i = 0; i < m; ++i) {
        int q;
        scanf("%d", &q);
        printf("%I64d\n", answer[q]);
    }
    return 0;
}