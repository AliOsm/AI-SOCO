// I can't tell you what it really is,
// I can only tell you what it feels like.
#include "bits/stdc++.h"
using namespace std;
 
#define int long long
#define F first
#define S second
#define sz(x) ((int)x.size())
#define rep(i,a,n) for (int i = a; i <= n; ++i)
#define all(v)  v.begin(), v.end()
#define pb push_back
#define P pair < int, int >
#define E cout << '\n'
 
#define reno(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {}
 
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
    cout << *it << " = " << a << ' ';
    err(++it, args...);
}
const int mod = 1e9 + 7;
const int N = 2e5 + 5;
 
priority_queue < P, vector< P > , greater < P > > q;
int dist[N];
bool vis[N];
vector < P > v[N];
vector < int > fin ,ans;
vector < pair < int, P > > let;
map < P, int > mp;
 
void Dijkstra(int st) {	
	q.push({0, st});//reno(st);E;
	dist[st] = 0;
	while (!q.empty()) {		
		int cur = q.top().second;
		// reno(cur);E;
		int wt = q.top().first;
		q.pop();
		if (vis[cur]) {
			continue;
		}
		if (cur != st) {
			mp[{min(cur, st), max(cur, st)}] = wt;
		}
		vis[cur] = 1;
		for (auto x : v[cur]) {
			if (!vis[x.first] && dist[x.first] > x.second + wt) {
				dist[x.first] = x.second + wt;
				q.push({dist[x.first], x.first});
			}
		}				
	}
}
 
void dfs(int x) {
	vis[x] = 1;
	for (auto i : v[x])  {
		if (!vis[i.first]) {
			dfs(i.first);
		}
	}
}
 
inline void solve() {
    fill(dist, dist + N, 1000);
    int n, m, x, y, wt, k;
    cin >> n >> m >> k;
    rep(i,1,m) {
    	cin >> x >> y >> wt;
    /*	v[x].push_back({y, wt});
    	v[y].push_back({x, wt});*/
    	let.pb({wt, {x, y}});
    }
    sort(all(let));
    /*for (auto i : let) {
    	cout << i.F << ' ' << i.S.F << ' ' << i.S.S << '\n';
    }*/
    for (int i = 0; i < min(m, 3 * k); ++i) {
    	int wt = let[i].F, x = let[i].S.F;
    	int y = let[i].S.S;
    	// cout << x << ' ' << y << '\n';
    	v[x].pb({y, wt});
    	v[y].pb({x, wt});
    	if (!vis[x]) {
    		fin.pb(x);
    	}
    	if (!vis[y]) {
    		fin.pb(y);
    	}
    	vis[x] = 1;
    	vis[y] = 1;
    }
   sort(all(fin));
    for (int i = 0; i < sz(fin); ++i) {
    	for (auto j : fin) {
    		dist[j] = 1e18;
    		vis[j] = 0;
    	}
    	Dijkstra(fin[i]);    	
    }
    for (auto i : mp)
    	ans.pb(i.S);
    sort(all(ans));
    /*cout << "in \n";
    for (auto i : ans) {
    	cout << i << ' ';
    }*/
    // cout << sz(ans);E;
    assert(k <= sz(ans));
    cout << ans[k-1];
}
 
signed main() {
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  int t = 1;
  //cin >> t; while(t--)
   solve();
  return 0;
}