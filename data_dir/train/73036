#include <cstdio>

#include <vector>
#include <algorithm>

using namespace std;

typedef pair<int,int> II;
typedef long long llong;

// Factorization
void factorization(int n, vector<II>& fv) {
   fv.clear();
   for (int d = 2; ; ++d) {
      if (d*1LL*d > n) break;
      int cnt = 0;
      for (; (n % d) == 0; n /= d)
         ++cnt;
      if (cnt)
         fv.push_back(II(d, cnt));
   }
   if (n > 1)
      fv.push_back(II(n, 1));
}

int N, K;
int A[100004];

vector<int> have[100004];

bool check(vector<int>& needed, vector<int>& has) {
   const int M = (int) needed.size();
   for (int j = 0; j < M; ++j) {
      if (has[j] < needed[j])
        return false;
   }
   return true;
}

llong solve() {
   vector<II> fv;
   factorization(K, fv);

   const int M = fv.size();
   vector<int> needed(M);
   for (int j = 0; j < M; ++j) {
   //   fprintf(stderr, "%d %d\n", fv[j].first, fv[j].second);
      needed[j] = fv[j].second;
   }

   for (int i = 1; i <= N; ++i) {
      have[i] = vector<int>(M);
      for (int j = 0; j < M; ++j) {
         int d = fv[j].first;
         int cnt = 0;
         for (int x = A[i]; (x % d) == 0; x /= d)
            ++cnt;
         have[i][j] = cnt;
      }
   }

   llong res = 0;
   vector<int> cur( M );
   for (int R = N, L = N+1; L > 0; --R) {
      while (L > R || !check(needed, cur)) {
         --L;
         if (L == 0) break;
         for (int j = 0; j < M; ++j)
            cur[j] += have[L][j];
      }
   // fprintf(stderr, "L = %d  R = %d\n", L, R);
      if (L <= 0) break;
      res += L;
      for (int j = 0; j < M; ++j)
         cur[j] -= have[R][j];
   }
   return res;
}

int main() {
   scanf("%d %d", &N, &K);
   for (int i = 1; i <= N; ++i)
      scanf("%d", A+i);
   llong res = solve();
   printf("%lld\n", res);
   return 0;
}
