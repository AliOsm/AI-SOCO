#include<bits/stdc++.h>
using namespace std;

#define ll       long long
#define ull      unsigned ll
#define pii      pair<int, int>
#define pll      pair<ll, ll>
#define mp       make_pair
#define ff       first
#define ss       second
#define sz(x)    (int) x.size()
#define all(v)   v.begin(), v.end()

template <typename T> inline void smin(T &a, T b) {a = a < b ? a : b;}
template <typename T> inline void smax(T &a, T b) {a = a > b ? a : b;}

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {cout << endl;}
template<typename T, typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << ", ";
	err(++it, args...);
}

template <typename T> inline void Int(T &n) {
	n = 0; int f = 1; register int ch = getchar();
	for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
	for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
	n = n * f;
}

template <typename T, typename TT> inline void Int(T &n, TT &m) { Int(n); Int(m); }
template <typename T, typename TT, typename TTT> inline void Int(T &n, TT &m, TTT &l) { Int(n, m); Int(l); }

const int mod = (int) 1e9 + 7;

inline int add(int a, int b) {a += b; return a >= mod ? a - mod : a;}
inline int sub(int a, int b) {a -= b; return a < 0 ? a + mod : a;}
inline int mul(int a, int b) {return (ll) a * b % mod;}

const int inf = (int) 2e9 + 5;
const ll  Inf = (ll) 2e18 + 5;
const int N   = (int) 2e5 + 5;

std::vector<pii> g[N];
int sz[N];
std::vector<pair<ll, int>> tem;
int ans[N];
int n;

ll mx = 0;
int s, t, idx;

void dfs(int u, int p = -1) {
	sz[u] = 1;
	for (auto x : g[u]) {
		int v = x.ff, id = x.ss;
		if (p != v) {
			dfs(v, u);
			sz[u] += sz[v];
			ll cur = 1LL * sz[v] * (n - sz[v]);
			if (cur > mx) mx = cur, s = u, t = v, idx = id;
		}
	}
}

int dp[N];

void dfs_two(vector<pii>& tem, int u, int p) {
	dp[u] = 0;
	for (auto x : g[u]) {
		int v = x.ff, id = x.ss;
		if (p != v) {
			dfs_two(tem, v, u);
			smax(dp[u], dp[v] + 1);
			tem.push_back({dp[v], id});
		}
	}
}

int solve() {
	Int(n);
	for (int i = 1; i < n; i++) {
		int u, v; Int(u, v);
		g[u].push_back({v, i});
		g[v].push_back({u, i});
	}
	dfs(1);
	ans[idx] = 0;
	vector<pii> tem1, tem2;
	dfs_two(tem1, s, t);
	dfs_two(tem2, t, s);
	sort(all(tem1));
	sort(all(tem2));
	int cnt = 0, cnt2 = 0;
	for (auto x : tem1) {
		
		if (x.ff == 0) cnt++;
	}
	for (auto x : tem2) {
		
		if (x.ff == 0) cnt2++;
	}
	if (cnt2 > cnt) swap(tem1, tem2);
	int cur = 0;
	for (auto x : tem1) {
		ans[x.ss] = ++cur;
	}
	for (auto x : tem2) {
		ans[x.ss] = ++cur;
	}
	for (int i = 1; i <= n - 1; i++) {
		printf("%d\n", ans[i]);
	}

	return 0;
}

int main() {
	//ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	int test = 1, tc = 0;
	//Int(test);
	//cin >> test;
	while (test--) {
		//printf("Case %d: ", ++tc);
		solve();
	}
	return 0;
}
