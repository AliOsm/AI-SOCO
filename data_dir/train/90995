#include <bits/stdc++.h>
using namespace std;

int n, m, u, v;
vector<int> edges[(int)1e5 + 1] = {};
long long mx = 0;
long long mxDist[(int)1e5+1] = {};
long long dfs(int u){
    if(mxDist[u] != -1) return mxDist[u];
    mxDist[u] = 1;
    for(int v : edges[u])
        if(v < u) mxDist[u] = max(mxDist[u], dfs(v) + 1);
    return mxDist[u];
}

int main(){
    memset(mxDist, -1, sizeof mxDist);
    cin >> n >> m;
    for(int x = 0; x < m; x++)
        cin >> u >> v, edges[u].push_back(v), edges[v].push_back(u);
    for(int x = 1; x <= n; x++)
        if(mxDist[x] == -1) dfs(x);
    for(int x = 1; x <= n; x++)
        mx = max(mx, mxDist[x] * ((long long) edges[x].size()));
    cout << mx << endl;
}