#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

struct Team
{
    int in, out, pts, played;
    string name;

    Team()
    {
        in = out = pts = 0;
    }
    friend bool operator < (Team t1, Team t2)
    {
        if(t1.pts != t2.pts) return t1.pts > t2.pts;
        if(t1.in - t1.out != t2.in - t2.out) return t1.in - t1.out > t2.in - t2.out;
        if(t1.in != t2.in) return t1.in > t2.in;
        return t1.name < t2.name;
    }
};

map<string,int> M;
vector<Team> T(4);

int main()
{
    int teams = 0;
    f(i,1,5)
    {
        int g1, g2, t1, t2;
        string s1, s2, score;
        cin >> s1 >> s2 >> score;
        if(M.find(s1) == M.end()) M[s1] = teams++;
        if(M.find(s2) == M.end()) M[s2] = teams++;
        t1 = M[s1], t2 = M[s2];
        g1 = score[0] - '0';
        g2 = score[2] - '0';
        T[t1].in += g1, T[t1].out += g2;
        T[t2].in += g2, T[t2].out += g1;
        T[t1].played++, T[t2].played++;
        if(g1 > g2) T[t1].pts += 3;
        else if(g2 > g1) T[t2].pts += 3;
        else T[t1].pts++, T[t2].pts++;
    }
    for(pair<string,int> p : M) T[p.second].name = p.first;
    sort(all(T));
    int ber = 0, other = 1;
    f(i,0,3) if(T[i].name == "BERLAND") ber = i; else if(T[i].played == 2) other = i;
    f(d,1,100) f(x,d,100)
    {
        int y = x-d;
        if(y < 0) continue;
        Team temp = T[ber];
        Team temp2 = T[other];
        temp.pts += 3;
        temp.in += x;
        temp.out += y;
        temp2.in += y, temp2.out += x;
        int pos = 4;
        f(i,0,3) if(i != ber && i != other && temp < T[i]) pos--;
        if(temp < temp2) pos--;
        if(pos < 3)
        {
            cout << x << ":" << y << "\n";
            return 0;
        }
    }
    cout << "IMPOSSIBLE";
}
