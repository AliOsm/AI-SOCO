#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define N 300300

int n;
int a[N];
int L[N];
int R[N];
int idx[N];
stack<int> st;

void eraseStack(){
	while (!st.empty()) st.pop();
}

void precalc(){
	for (int inc = -1; inc < 2; inc += 2){
		eraseStack();
		for (int i = (inc == -1) ? n - 1 : 0; i < n && i >= 0; i += inc){
			while (!st.empty() && st.top() < a[i]) st.pop();
			if (st.empty()){
				if (inc == 1) L[i] = 0;
				else R[i] = n - 1;
			}
			else{
				if (inc == 1) L[i] = idx[st.top()] + 1;
				else R[i] = idx[st.top()] - 1;
			}
			st.push(a[i]);
		}
	}
}

int main() {
//	freopen("in.in", "r", stdin);
//	freopen("out.out", "w", stdout);
	ios::sync_with_stdio(0); cin.tie(); cout.tie();

	cin >> n;
	memset(idx, -1, sizeof idx);
	for (int i = 0; i < n; i++) cin >> a[i], idx[a[i]] = i;
	precalc();
	ll ans = 0;
	for (int i = 0; i < n; i++){
		int lSize = i - L[i], rSize = R[i] - i;
		int inc;
		if (lSize < rSize){
			for (int j = L[i]; j < i; j++){
				int need = a[i] - a[j];
				if (idx[need] > i && idx[need] <= R[i]) ans++;
			}
		}
		else{
			for (int j = i + 1; j <= R[i]; j++){
				int need = a[i] - a[j];
				if (idx[need] >= L[i] && idx[need] < i) ans++;
			}
		}
	}
	cout << ans << endl;

	return 0;
}