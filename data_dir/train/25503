#include <bits/stdc++.h>
typedef long long ll ;
using namespace std;

const ll inf = (1LL << 60);
const int N = 1e6 + 1 ;

ll n , a , b ;
vector < ll > ve ;
int p ;
ll memo[N][3][2];

ll solve(int i , int flag , bool ok) {

    if(i == n) return (ok ? 0 : inf);

    ll &ret = memo[i][flag][ok] ;
    if(ret != -1) return ret ;

    ret = inf ;

    if(flag == 2) {
        if(ve[i] % p == 0) ret = solve(i + 1 , flag , true);
        else if((ve[i] - 1) % p == 0 || (ve[i] + 1) % p == 0) ret = b + solve(i + 1 , flag , true);
    }

    if(flag == 1) {
        ret = a + solve(i + 1 , 1 , ok);
        if(ve[i] % p == 0) ret = min(ret , solve(i + 1 , 2 , true));
        else if((ve[i] - 1) % p == 0 || (ve[i] + 1) % p == 0) ret = min(ret , b + solve(i + 1 , 2 , true));
    }

    if(flag == 0) {
        ret = a + solve(i + 1 , 1 , ok);
        if(ve[i] % p == 0) ret = min(ret , solve(i + 1 , flag , true));
        else if((ve[i] - 1) % p == 0 || (ve[i] + 1) % p == 0) ret = min(ret , b + solve(i + 1 , flag , true));
    }

    return ret ;
}

bitset < N > isprime ;
vector < int > primes ;

void sieve() {
    isprime.set();
    primes.push_back(2);
    for(int i = 3 ; i * i <= N ; i += 2) {
        for(int j = i * 2 ; j <= N ; j += i) isprime[j] = 0 ;
    }
    for(int i = 3 ; i <= N ; i += 2) if(isprime[i]) primes.push_back(i);
}

set < int > se ;
void fact(int n) {
    int PF_idx = 0 , PF = primes[PF_idx];
    while(PF * PF <= n) {
        if(n % PF == 0) {
            se.insert(PF);
            while(n % PF == 0) n /= PF ;
        }
        PF = primes[++PF_idx];
    }
    if(n > 1) se.insert(n);
}

int main() {
    ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0) ;

    sieve();

    cin >> n >> a >> b ;

    for(int i = 0 ; i < n ; i++) {
        ll x ;
        cin >> x ;
        ve.push_back(x);
        if(i == 0 || i == n - 1) {
            fact(x);
            fact(x - 1);
            fact(x + 1);
        }
    }

    ll ret = inf ;
    for(auto i : se) {
        p = i  ;
        memset(memo , -1 , sizeof memo);
        ret = min(ret , solve(0 , 0 , 0));
    }

    cout << ret << endl ;

    return 0;
}
