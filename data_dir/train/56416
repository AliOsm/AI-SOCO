#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_set>
using namespace std;
long long int dp[2002];
int n;
int k;
long long int a[2002];
bool ok(long long int aa){
    dp[0] = 0;
    if (aa == 0LL){
        map<int, int> mp;
        mp.clear();
        for (int i = 0; i < n; i++){
            mp[a[i]]++;
        }
        int maxt = 0;
        map<int, int>::iterator ite;
        for (ite = mp.begin(); ite != mp.end(); ite++){
            maxt = max(maxt, (*ite).second);
        }
        maxt = n - maxt;
        return maxt <= k;
    }
    for (int i = 1; i < n; i++){
        dp[i] = i;
        for (int j = i - 1; j >= 0; j--){
            int kyo = i - j-1;
            if (kyo == 0LL){
                if (abs(a[i - 1] - a[i]) <= aa){
                    dp[i] = min(dp[i], dp[j]+kyo);
                }
            }
            long long int sa = abs(a[j] - a[i]);
            sa += (long long int)aa - 1LL;
            sa /= (long long int)aa;
            if (sa <= (long long int)(kyo+1LL)){
                dp[i] = min(dp[i], dp[j] + kyo);
            }
            if (i == n - 1){
                dp[i] = min(dp[i], dp[j] + kyo + 1LL);
            }
        }
    }
    return dp[n - 1] <= (long long int)k;
}
int main(){
    scanf("%d%d", &n, &k);
    long long int mintt = LLONG_MAX;
    long long int maxtt = LLONG_MIN;
    for (int i = 0; i < n; i++){
        scanf("%lld", &a[i]);
        mintt = min(mintt, a[i]);
        maxtt = max(maxtt, a[i]);
    }
    long long int mint = 0LL;
    long long int maxt = maxtt-mintt;
    while (mint + 1LL < maxt){
        long long int mid = (mint + maxt) >> 1LL;
        if (ok(mid)){
            maxt = mid;
        }
        else{
            mint = mid;
        }
    }
    if (mint != maxt){
        if (ok(mint)){
            maxt = mint;
        }
        else{
            mint = maxt;
        }
    }
    printf("%lld\n", mint);
    return 0;
}