/**
 *    Author:  "Ashutosh Kaushik" !!
 *    ashutoshkaushik     (CodeForces)
**/
/* I will write this code as clear as i can
        so that anyone can understand it 
            just read the comments properly  */
#include<bits/stdc++.h>
using namespace std;
#define MOD 998244353
#define PI 3.1415926535897932384626
typedef long long int ll;
#define all(x) (x).begin() , (x).end()
#define fi first
#define se second
#define pq priority_queue
#define pb push_back
#define IOS ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
#define maX(a,b) ((a) > (b) ? (a) : (b))
#define miN(a,b) ((a) < (b) ? (a) : (b))
#define endl '\n'
template<typename T> T trace2(T a,T b){cerr <<a << " " << b << endl; }
template<typename T> T trace3(T a,T b,T c){cerr <<a << " " << b <<" " << c << endl; }
template<typename T> T trace4(T a,T b,T c,T d){cerr <<a << " " << b <<" " << c <<" " << d << endl; }
template<typename T> T trace5(T a,T b,T c,T d,T e){cerr <<a << " " << b <<" " << c <<" "<<d << " "<< e <<endl; }
template<typename T> T trace6(T a,T b,T c,T d,T e,T f){cerr <<a << " " << b <<" " << c << " " << d << " "<<e << " "<< f << endl; } 

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
    cerr << *it << " = " << a << endl;
    err(++it, args...);
}
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
template<typename T> T pow(T a,T b, ll m){T ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
/*******************************Template ends**************************************/
int main()
{ 
    IOS;
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output1.txt", "w", stdout);
    #endif 
    int n,m;
    cin >> n >> m;
    std::vector<pair< ll , pair < ll, ll  > > > v;
    std::vector<pair < ll, ll > > in;
    std::map<pair<ll,ll > , ll >  map;
    for(int i = 0 ; i < n ; i++)
    {
        ll x,y;
        cin >> x >> y;
        in.pb({x,y});
        v.pb({(x-y),{x,y}}); // vector to sort element according to the difference
        map[{x,y}] = i+1; // mapping the input position of the pair
    }
    std::vector<ll> adj[n+1];
    rep(i,0,m)
    {
        ll x,y;
        cin >> x >> y;
        adj[x].pb(y); // connecting those using graph and we will exclude them later 
        adj[y].pb(x);
    }
    sort(v.begin(),v.end());
    std::vector<ll> x,y;
    rep(i,0,n)
    {
        x.pb(v[i].se.fi); // recording the postion of those elements after sorting and then we will calculate
        y.pb(v[i].se.se); // prefix and suffix sum of x and y
    }
    for(int i = 1 ; i < n ; i++)
    {
        x[i] += x[i-1]; // calculating the prefix sum
    }
    for(int i = n-2 ; i >= 0 ; i--)
    {
        y[i] += y[i+1]; // calculating the suffix sum
    }
    rep(i,0,n)
    {

        ll ans = 0;
        if((i-1)>= 0)
        {
            ans += x[i-1];
        }
        else
            ans += 0;
        if((i+1) <  n)
        {
            ans += y[i+1];
        }
        else
            ans += 0;
        ll pos = i+1;
        ans += (pos-1)*v[i].se.se;
        ans += (n-pos)*(v[i].se.fi); // what i did here is just the pure logic if you got the point
        //cout << ans << endl;
        ll sub = 0;
        for(auto j:adj[map[v[i].se]])
        {
            ll x = v[i].se.fi;
            ll y = v[i].se.se;
            ll xx = in[j-1].fi;
            ll yy = in[j-1].se;
            //cout << xx << " " << yy << " " <<v[i].se.fi << " " << v[i].se.se <<  endl;
            sub += miN(x+yy,xx+y); //  subtratcing all of the scores which are not allowed
        }
        //cout << sub << endl;
        map[{v[i].se.fi,v[i].se.se}] = (ans - sub);
    }
    for(auto i:in)
    {
        cout << map[i] << " ";
    }
    return 0;
}