#include<bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pii pair<int,int>
#define piii pair<ll,pair<int,int>>
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define SIZE 10000002
#define MOD 1000000007
#define LD long double
using namespace std;

inline ll getnum()
{
    char c = getchar();
    ll num,sign=1;
    for(;c<'0'||c>'9';c=getchar())if(c=='-')sign=-1;
    for(num=0;c>='0'&&c<='9';)
    {
        c-='0';
        num = num*10+c;
        c=getchar();
    }
    return num*sign;
}

int P[200005][22],L[200005];
int Pow[22];
vector<int> V[200003];

void DFS(int n)
{
    for(int i=1;Pow[i]<=L[n];i++)P[n][i]=P[P[n][i-1]][i-1];
    for(int i=0;i<V[n].size();i++)
    {
        int x = V[n][i];
        if(L[x]!=0)continue;
        P[x][0]=n;
        L[x]=L[n]+1;
        DFS(x);
    }
}

int Ancestor(int n,int l)
{
    if(l<=0)return n;
    for(int i=0;Pow[i]<=l;i++)
    {
        if(l&Pow[i])n=P[n][i];
    }
    return n;
}

int LCA(int l,int r)
{
    if(l==r)return r;
    for(int i=20;i>=0;i--)
    {
        if(P[l][i]!=P[r][i])l=P[l][i],r=P[r][i];
    }
	return P[l][0];
}

int main()
{
    Pow[0]=1; 
    for(int i=1;i<=20;i++)Pow[i]=2*Pow[i-1];

    int n=getnum(),q=getnum();

    for(int i=2;i<=n;i++)
    {
        int x=getnum();
        V[x].pb(i);
        V[i].pb(x);
    }

    L[1]=1;
    DFS(1);

    while(q--)
    {
        int a=getnum(),b=getnum(),c=getnum(),ans;

        int ab=LCA(Ancestor(a,L[a]-L[b]),Ancestor(b,L[b]-L[a]));
        int bc=LCA(Ancestor(b,L[b]-L[c]),Ancestor(c,L[c]-L[b]));
        int ac=LCA(Ancestor(a,L[a]-L[c]),Ancestor(c,L[c]-L[a]));

        if(ab==ac)
        {
            ans=max(L[b]-L[bc]+1,L[c]-L[bc]+1);
            ans=max(ans,L[bc]-L[ab]+L[a]-L[ab]+1);
        }
        if(ab==bc)
        {
            ans=max(L[a]-L[ac]+1,L[c]-L[ac]+1);
            ans=max(ans,L[ac]-L[ab]+L[b]-L[ab]+1);
        }
        if(ac==bc)
        {
            ans=max(L[a]-L[ab]+1,L[b]-L[ab]+1);
            ans=max(ans,L[ab]-L[bc]+L[c]-L[bc]+1);
        }

        printf("%d\n",ans);
    }
}