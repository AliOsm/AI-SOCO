#pragma comment(linker, "/STACK:640000000")
#include<iostream>
#include<cstdio>
#include<cassert>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<bitset>
#include<algorithm>

#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define ll long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)

using namespace std;

typedef pair<int, int> pii;

const double eps = 1e-9;
const double pi = acos(-1.0);

const int maxn = (int)2e5 + 10;

int x[maxn];
int p[maxn];
int id[maxn];
int n;

bool cmp(int i, int j) {
    return x[i] < x[j];
}

void solve() {
    int pos,len; 
    scanf("%d%d",&pos,&len);
    pos = id[pos];
    int dir = 1;
    bool first = true;
    while(true) {
        bool L = pos == 1 || (x[pos] - x[pos - 1] > len);
        bool R = pos == n || (x[pos + 1] - x[pos] > len);
        if (L && R) break;
        if (dir == 1) {
            if (R) {
                dir ^= 1;
                continue;
            }
            int l = pos + 1;
            int r = n + 1;
            while(l < r - 1) {
                int m = (l + r) >> 1;
                if (x[m] - x[pos] <= len) {
                    l = m;
                } else {
                    r = m;
                }
            }
            int cur = x[l] - x[pos];
            if (first) {
                len -= cur;
                pos = l;
                dir ^= 1;
                first = false;
                continue;
            }
            len %= 2 * cur;
            if (len >= cur) {
                len -= cur;
                pos = l;
                dir ^= 1;               
            }
        } else {
            if (L) {
                dir ^= 1;
                continue;
            }
            int l = 0;
            int r = pos - 1;
            while(l < r - 1) {
                int m = (l + r) >> 1;
                if (x[pos] - x[m] <= len) {
                    r = m;
                } else {
                    l = m;
                }
            }
            int cur = x[pos] - x[r];
            len %= 2 * cur;
            if (len >= cur) {
                len -= cur;
                pos = r;
                dir ^= 1;
            }
        }
    }
    printf("%d\n",p[pos]);
}

int main() {
    #ifdef LOCAL
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif

    int m; cin >> n >> m;

    for (int i = 1; i <= n; i++) {
        scanf("%d",&x[i]);
        p[i] = i;
    }

    sort(p + 1,p + n + 1,cmp);

    for (int i = 1; i <= n; i++) {
        id[p[i]] = i;
    }

    sort(x + 1,x + n + 1);

    while(m--) {
        solve();
    }

    return 0;
}
