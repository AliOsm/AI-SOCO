#include<bits/stdc++.h>
using namespace std;
#define int long long int
#define double long double
#define pb push_back
#define endl '\n'
#define all(x) (x).begin(),(x).end()
#define F first
#define S second
#define sz(a) (int)((a).size())
#define fuck() cout<<"--------"<<endl
#define see(x) cout<<#x<<" = "<<x<<endl
#define see2(x,y) cout<<#x<<" = "<<x<<"::"<<#y<<" = "<<y<<endl 
const int mod=1000000007;
typedef pair<int,int> pii;
const int inf=1e17;
const int N=2e5+5;
int n;
int cost[N],room[N];
vector<int> g[N], ng[N], rg[N], todo,store[N];
int comp[N], outdeg[N]; 
bool vis[N];
vector<int> gr[N];
int grp,mn;
void dfs(int k)
{
	vis[k]=1;
	for(auto it:g[k])
	{
		if(!vis[it])
			dfs(it);
	}
	todo.push_back(k);
}

void dfs2(int k, int val)
{
	comp[k]=val;
	store[val].pb(k);
	for(auto it:rg[k])
	{
		if(comp[it]==-1)
			dfs2(it, val);
	}
}

void sccAddEdge(int from, int to)
{
	g[from].push_back(to);
	rg[to].push_back(from);
}

void scc()
{
	for(int i=1;i<=n;i++)
		comp[i]=-1;

	for(int i=1;i<=n;i++)
	{
		if(!vis[i])
			dfs(i);
	}

	reverse(todo.begin(), todo.end());

	for(auto it:todo)
	{
		if(comp[it]==-1)
		{
			dfs2(it, ++grp);
		}
	}
}
void ndfs(int v){
	vis[v]=true;
	mn=min(mn,store[v][0]);
	for(auto to:ng[v]){
		if(vis[to])continue;
		ndfs(to);
	}
}
void __solve(){
	cin>>n;
	for(int i=1;i<=n;i++){
		cin>>cost[i];
	}
	for(int i=1;i<=n;i++){
		cin>>room[i];
		sccAddEdge(i,room[i]);
	}
	scc();
	int ans=0;
	for(int i=1;i<=n;i++){
		for(auto it:g[i]){
			if(comp[i]!=comp[it]){
				outdeg[comp[i]]++;
			}
		}
	}
	for(int i=1;i<=grp;i++){
		if(!outdeg[i]){
			int mn=inf;
			for(auto to:store[i]){
				mn=min(mn,cost[to]);
			}
			ans+=mn;
		}
	}
	cout<<ans;
}
int32_t main()
{
	ios_base::sync_with_stdio(0); cin.tie(0);cout.tie(0);
	int T=1;
	//cin>>T;
	while(T--){
		__solve();
		cout<<endl;
	}
}