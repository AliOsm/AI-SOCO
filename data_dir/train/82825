// In the name of Allah
#include <bits/stdc++.h>

using namespace std;

typedef long double LD;
typedef long long int LL;
typedef pair <int,int> pii;

#define L first
#define R second

const int maxn = 6e5;
bool mark[2][maxn];
LL a[2][maxn], par2[maxn], par3[maxn], sum2[maxn], sum3[maxn];

LL get2(LL l,LL r) {
    //cerr << l << ' ' << r << endl;
    if (l == 0)
        return par2[r];
    return (par2[r] - par2[l - 1]) + (l - 1) * (sum2[r] - sum2[l - 1]);
}

LL get3(LL l,LL r) {
    //cerr << l << ' ' << r << endl;
    if (l == 0)
        return par3[r];
    return (par3[r] - par3[l - 1]) + (l - 1) * (sum3[r] - sum3[l - 1]);
}

int main() {
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    for (int j = 0; j < 2; j++)
        for (int i = 0; i < n; i++)
            cin >> a[j][i];

    vector <pii> v1;
    for (int i = 0; i < n; i++)
        if (i % 2 == 0) {
            v1.push_back(make_pair(0, i));
            v1.push_back(make_pair(1, i));
        }
        else {
            v1.push_back(make_pair(1, i));
            v1.push_back(make_pair(0, i));
        }
    vector <pii> v2;
    for (int i = 0; i < n; i++)
        v2.push_back(make_pair(0, i));
    for (int i = n - 1; i >= 0; i--)
        v2.push_back(make_pair(1, i));

    vector <pii> v3;
    for (int i = 0; i < n; i++)
        v3.push_back(make_pair(1, i));
    for (int i = n - 1; i >= 0; i--)
        v3.push_back(make_pair(0, i));

    par2[0] = a[v2[0].L][v2[0].R];
    for (LL i = 1; i < v2.size(); i++) {
        int x = v2[i].L, y = v2[i].R;
        par2[i] = par2[i - 1] + i * a[x][y];
    }

    par3[0] = a[v3[0].L][v3[0].R];
    for (LL i = 1; i < v3.size(); i++) {
        int x = v3[i].L, y = v3[i].R;
        par3[i] = par3[i - 1] + i * a[x][y];
    }

    sum2[0] = a[v2[0].L][v2[0].R];
    for (int i = 1; i < v2.size(); i++) {
        int x = v2[i].L, y = v2[i].R;
        sum2[i] = sum2[i - 1] + a[x][y];
    }

    sum3[0] = a[v3[0].L][v3[0].R];
    for (int i = 1; i < v3.size(); i++) {
        int x = v3[i].L, y = v3[i].R;
        sum3[i] = sum3[i - 1] + a[x][y];
    }

    LL ans = 0, now = 0, Time = 0;
    for (int i = 0; i < v1.size(); i++) {
        int x = v1[i].L, y = v1[i].R;
        mark[x][y] = true;
        now += a[x][y] * Time;
        //cerr << "#" << x << ' ' << y << ' ';
        if (x == 0) {
            if (mark[x + 1][y])
                ans = max(ans, now + get2(y + 1, v2.size() - 2 - y));
            else
                ans = max(ans, now + get2(y + 1, v2.size() - 1 - y));
        }
        if (x == 1) {
            if (mark[x - 1][y])
                ans = max(ans, now + get3(y + 1, v3.size() - 2 - y));
            else
                ans = max(ans, now + get3(y + 1, v3.size() - 1 - y));
        }
        Time++;
    }
    ans = max(ans, now);
    cout << ans << endl;
    return 0;
}

