#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOR(i, a, b) for (int i = a; i < int(b); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

const int MAX = 100100;
ll dp[MAX][200];
bool visited[MAX][200];

int n, k, p;
const ll INF = 1e15;

struct str{
	ll a;
	ll s[10];
};

str Mdata[MAX];

ll solve(int pos, int bt) {
	if(!visited[pos][bt]) {
		visited[pos][bt] = true;
		int b = __builtin_popcount(bt);
		int left = n - pos;
		if(left < b) dp[pos][bt] = -INF;
		else if(pos == n) dp[pos][bt] = 0;
		else {
			dp[pos][bt] = solve(pos + 1, bt) + ( left - b <= k ?  Mdata[pos].a : 0);
			REP(i, p) {
				if(((1 << i) & bt) != 0 ) {
					dp[pos][bt] = max(dp[pos][bt], solve(pos + 1, bt - (1 << i)) + Mdata[pos].s[i]);
				}
			}
		}

	}
	return dp[pos][bt];
}

bool compare(const str& a, const str& b) {
	return a.a < b.a;
}

int idx[MAX];

int main() {
	scanf("%d %d %d", &n, &p, &k);
	REP(i, n) scanf("%lld", &Mdata[i].a);
	REP(i, n) REP(j, p) scanf("%lld", &Mdata[i].s[j]);
	sort(Mdata, Mdata + n, compare);
	int bt = (1 << p) - 1;
	printf("%lld\n", solve(0, bt));
}