// In the name of God
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <assert.h>
#include <bitset>
#define sqr(a) ((a)*(a))
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
    
const long long INF = (long long)1e18 + 227 + 1;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)2e5 + 227 + 1; 
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;
 
long long bin_pow(long long a, long long b, long long MOD) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2, MOD);
    ans = ans * ans % MOD;
    if(b % 2) ans = ans * a % MOD;
    return ans;
}

int main() {
    // freopen(".in", "r", stdin);

    long long n, m, k; cin >> n >> m >> k;
    long long x, s; cin >> x >> s;

    vector<pair<long long, long long> > a(m), b(k);

    for(int i = 0; i < m; i++)
        a[i].first = next_int<long long>();
    for(int i = 0; i < m; i++)
        a[i].second = next_int<long long>();

    for(int i = 0; i < k; i++)
        b[i].second = next_int<long long>();
    for(int i = 0; i < k; i++)
        b[i].first = next_int<long long>();

    multiset<pair<long long, long long> > c;
    for(int i = 0; i < k; i++)
        c.insert(b[i]);

    sort(all(a));

    long long ans = n * x;

    for(int i = 0; i < k; i++) {
        if(b[i].first <= s) ans = min(ans, max(0, (int)n - (int)b[i].second) * 1LL * x);
    }

    for(int i = 0; i < m; i++) {
        multiset<pair<long long, long long > > :: iterator j = c.lower_bound(make_pair(s - a[i].second + 1, -1));
        if(a[i].second <= s)ans = min(ans, n * a[i].first);
        if(j == c.begin()) continue;
        j--;

        ans = min(ans, max(0, (int)n - (int)(*j).second) * 1LL * a[i].first);
    }

    cout << ans << "\n";
}
