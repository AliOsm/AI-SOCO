#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
using namespace std;

vector <int> g[500010];
int vis[500010],pos[500010],L[500010],R[500010],fa[500010],w[500010];
struct Tree
{
    int l,r,mx1,mx2,add;
};
Tree seg[2000010];

int Now=0;

void dfs(int x,int px)
{
    fa[x]=px;
    Now++;
    pos[x]=Now;
    L[x]=Now;
    for (int i=0;i<g[x].size();i++)
    {
        int v=g[x][i];
        if (v==px) continue;
        dfs(v,x);
    }
    R[x]=Now;
}

void build(int id,int L,int R)
{
    seg[id].l=L;
    seg[id].r=R;
    seg[id].mx1=seg[id].mx2=0;
    int mid=(L+R)/2;
    if (L!=R)
    {
        build(id*2,L,mid);
        build(id*2+1,mid+1,R);
    }
}

void update(int id,int l,int r,int val,int ope)
{
    if (seg[id].l>r||seg[id].r<l) return;
    if (seg[id].l>=l&&seg[id].r<=r)
    {
        if (ope==0)
        {
            seg[id].mx1=val;
            seg[id].add=val;
        }
        else seg[id].mx2=val;
        return;
    }
    seg[id*2].mx1=max(seg[id*2].mx1,seg[id].add);
    seg[id*2].add=max(seg[id*2].add,seg[id].add);
    seg[id*2+1].mx1=max(seg[id*2+1].mx1,seg[id].add);
    seg[id*2+1].add=max(seg[id*2+1].add,seg[id].add);

    update(id*2,l,r,val,ope);
    update(id*2+1,l,r,val,ope);

    seg[id].mx1=max(seg[id*2].mx1,seg[id*2+1].mx1);
    seg[id].mx2=max(seg[id*2].mx2,seg[id*2+1].mx2);
}


int query(int id,int L,int R,int ope)
{

    if (seg[id].r<L||seg[id].l>R) return -1;
    if (seg[id].l>=L&&seg[id].r<=R)
    {
        if (ope==0) return seg[id].mx1;
        return seg[id].mx2;
    }
    seg[id*2].mx1=max(seg[id*2].mx1,seg[id].add);
    seg[id*2].add=max(seg[id*2].add,seg[id].add);
    seg[id*2+1].mx1=max(seg[id*2+1].mx1,seg[id].add);
    seg[id*2+1].add=max(seg[id*2+1].add,seg[id].add);

    return max(query(id*2,L,R,ope),query(id*2+1,L,R,ope));
}

int main()
{
    int n;
    scanf("%d",&n);
    for (int i=0;i<n-1;i++)
    {
        int u,v;
        scanf("%d%d",&u,&v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1,-1);
    build(1,1,Now);
    int q;
    scanf("%d",&q);
    for (int i=1;i<=q;i++)
    {
        int ope,x;
        scanf("%d%d",&ope,&x);
        if (ope==1)
        {
            update(1,L[x],R[x],i,0);
        }
        else if (ope==2)
        {
            update(1,pos[x],pos[x],i,1);
        }
        else
        {
            int tt=query(1,pos[x],pos[x],0);
            int maxe=query(1,L[x],R[x],1);
            if (tt==0||tt<maxe) puts("0");
            else puts("1");
        }
    }
    return 0;
}
