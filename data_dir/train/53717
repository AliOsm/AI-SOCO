#include <iostream>
#include <cstdio>
#include <cmath>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <ctime>
#include <memory.h>
#include <assert.h>
#include <complex>
#include <ctime>  
#include <cstdlib>
using namespace std;

#pragma comment(linker, "/STACK:100000000")

#define mp make_pair
#define pb push_back
#define sz(x) (int)(x).size()
#define ll long long
#define ull unsigned long long

int deg[25];
vector<pair<int, int> > v;

int matrix[25][25];

int main() {
    //freopen("input.txt", "rt", stdin);
    //freopen("kebab.in", "rt", stdin);
    //freopen("kebab.out", "wt", stdout);
	
	int t;
	scanf("%d", &t);

	for(int test = 0; test < t; test++) {
		v.clear();
		memset(deg, 0, sizeof(deg));
		memset(matrix, 0, sizeof(matrix));
		int n, p;
		scanf("%d %d", &n, &p);
		int cnt = 2 * n + p;
		while(cnt > 0) { // найти две вершины с минимальным количество соседей, между которыми еще нет ребра
			int X = 0, Y = 0;
			for(int i = 0; i < n; i++) {
				for(int j = 0; j < n; j++) {
					if(i == j) continue;
					if(!matrix[i][j] && X == 0 && Y == 0) X = i, Y = j;
					if(!matrix[i][j] && deg[i] + deg[j] < deg[X] + deg[Y]) {
						X = i;
						Y = j;
					}
				}
			}
			matrix[X][Y] = 1;
			matrix[Y][X] = 1;
			deg[X]++;
			deg[Y]++;
			v.pb(mp(X+1, Y+1));
			cnt--;
		}
		for(int i = 0; i < 2 * n + p; i++) printf("%d %d\n", v[i].first, v[i].second);
	}

    return 0;
}