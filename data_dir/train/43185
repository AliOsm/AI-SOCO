#include <bits/stdc++.h>
#define ll long long
using namespace std;
ll inv(int m, ll mask) {
	ll ret = 0;
	for (int i = 0; i < m; i++) {
		if (mask & (1ll << i)) continue;
		ret += 1ll << i;
	}
	return ret;
}
const int N = (1 << 20) + 5;
int dp[N][22];
int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n, m;
	cin >> n >> m;
	map<string, int> mp;
	vector<int> v;
	int indx = 0;
	for (int i = 0; i < n; i++) {
		int t;
		cin >> t;
		if (t == 1) {
			if (!v.size() || v.back() != -1) v.push_back(-1);
		} else {
			string s;
			cin >> s;
			if (mp.find(s) == mp.end()) mp[s] = indx++;
			v.push_back(mp[s]);
		}
	}

	vector<ll> can(m, (1ll << m) - 1);
	for (int i = 0; i < v.size(); i++) {
		if (v[i] == -1) continue;
		int j = i;
		ll mask = 0;
		while (j < v.size() && v[j] != -1)
			mask |= 1ll << v[j], j++;
		ll mask2 = inv(m, mask);
		for (int k = 0; k < m; k++) {
			if (!(mask & (1ll << k))) continue;
			can[k] &= (mask2 | (1ll << k));
		}
		i = j;
	}
	for (int i = 0; i < (1 << (m / 2)); i++) {
		ll mask = (1ll << m) - 1, cnt = 0;
		for (int j = 0; j < m / 2; j++)
			if (i & (1 << j)) mask &= can[j], cnt++;

		if ((mask & i) == i) dp[i][0] = cnt;
	}
	for (int i = 0; i < N; i++) {
		for (int j = 1; j <= 21; j++) {
			if (i & (1 << (j - 1))) dp[i][j] = max(dp[i][j - 1], dp[i ^ (1 << (j - 1))][j - 1]);
			else dp[i][j] = dp[i][j - 1];
		}
	}

	int ans = 0;
	int X = m / 2 + (m & 1);
	for (ll i = 0; i < (1 << X); i++) {
		ll mask = (1ll << m) - 1;
		int cnt = 0;
		for (int j = 0; j < X; j++)
			if (i & (1ll << j)) mask &= can[j + (m / 2)], cnt++;
		if ((mask & (i << (m / 2))) == (i << (m / 2))) {
			ans = max(ans, dp[mask & ((1 << (m / 2)) - 1)][21] + cnt);
		}
	}

	cout << ans << endl;
	return 0;
}
