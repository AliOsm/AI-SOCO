#include <bits/stdc++.h>

using namespace std;
typedef  long long ll;
typedef unsigned long long ull;
int inf_int=2e9;
ll inf_ll=1e17;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
#define pb push_back
const double pi=3.1415926535898;
#define dout if(debug) cout
#define fi first
#define se second
#define sp setprecision
#define siz(a) a.size()
#define next asdfafgasgasg
#define left asfafgasgasgasgalhs
#define right afszfpfzzk
#define free asfasfasfasafg

const int mod = 1e9 + 7;
const int MAXN = 3e5+100;
bool debug = false;

typedef long double dbl;


int dp[MAXN];
char pr[MAXN];
ll bin_pow(ll a,int n){
    if(n==0){
        return 1;
    } else if(n%2==0){
        ll x = bin_pow(a,n/2);
        return (x*x)%mod;
    } else {
        ll x = bin_pow(a,n-1);
        return (x*a)%mod;
    }
}
void solve()
{
    int n;
    vector<int> prost;
    cin >> n;
    for(int i=2;i<=1e5+5;++i){
        if(!pr[i]){
            prost.pb(i);
            if(1ll *i * i <=1e5+5)
                for(int e=i*i;e<=1e5;e=e+i){
                    pr[e]=true;
                }
        }
    }
    ll ans = (bin_pow(2,n)-1 + mod)%mod;
    for(int e=1;e<=1e5+5;++e){
        dp[e] = 1;
    }
    for(int i=1;i<=n;++i){
        int x;
        cin >> x;
        for(ll e=2;e*e<=x;++e){
            if(x%e==0){
                if(x/e==e){
                    dp[e] +=dp[e];
                    if(dp[e]>mod)
                        dp[e]-=mod;
                } else {
                    dp[e] +=dp[e];
                    if(dp[e]>mod)
                        dp[e]-=mod;
                    dp[x/e] +=dp[x/e];
                    if(dp[x/e]>mod)
                        dp[x/e]-=mod;
                }
            }

        }
        dp[x]+=dp[x];
        if(dp[x]>mod)
            dp[x]-=mod;
    }

    for(int e=1;e<=1e5;++e){
        dp[e]--;
        if(dp[e]<0)
            dp[e]+=mod;
    }
    for(int i=1e5;i>=1;--i){
        for(int e=2*i;e<=1e5;e=e+i){
            dp[i] = dp[i] - dp[e];
            if(dp[i]<0)
                dp[i]+=mod;
        }
    }
    ll res = 0;
    for(int i=2;i<=1e5;++i){
        res += dp[i];
        if(res>mod)
            res-=mod;
    }
    cout << (ans-res + mod)%mod;
}


#define FILE "close-vertices"
int main()
{
        #ifdef zxc
            freopen("input.txt","r",stdin);
         // freopen("output.txt","w",stdout);
        #else
        #endif // zxc


         ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);



        int t=1;
        while(t--)
           solve();
        return 0;
}
