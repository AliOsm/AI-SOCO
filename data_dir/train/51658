// I can't tell you what it really is,
// I can only tell you what it feels like.
#include "bits/stdc++.h"
using namespace std;

const int N = 4e5 + 2;

char s[20][105];
const int inf = 500000;

int dp[20][3], n, m;

int go(int id, bool f) {
	if (n == id) return 0;
	int ans = inf;
	if (f == true) {
		int ind = -1;
		for (int i = m+1; i >= 0; --i) {
			if (s[id][i] == '1') ind = i;
		}
		if (ind == -1) return (id!=n-1)+go(id+1,f);
		if (id != n-1) {
			ans = 1+min(2*(m+1-ind)+go(id+1,1), m+1+go(id+1, 0));
		}
		else {
			ans = m+1-ind;
		}
	} 
	else {
		int ind = -1;
		for (int i = 0; i <= m+1; ++i) {
			if (s[id][i] == '1') ind = i;
		}
		if (ind == -1) return (id!=n-1)+go(id+1,f);
		if (id != n-1) {
			ans = 1+min(2*(ind)+go(id+1,0), m+1+go(id+1, 1));
		}
		else {
			ans = ind;
		}
	}	
	// cout << id << ' ' << f << ' ' << ans << '\n';
	return ans;
}

signed main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	memset(dp, -1, sizeof dp);
	cin >> n >> m;
	for (int i = 0; i < n; ++i) {
		cin >> s[i];
	}
	int i = 0, j = n -1;
	while (i < j) swap(s[i++], s[j--]);	
	for (int i = n - 1; i >= 0; --i)
		if (!count(s[i],s[i]+m+2,'1')) {
			--n;			
		}
		else {
			break;
		}
	// cout << n << '\n';
	cout << go(0,0);
  return 0;
}
// 1). Try forming/rearranging the equations if any
// 2). If problem asks to count, try counting in reverse(it can be easier sometimes)