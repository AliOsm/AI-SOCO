#include <bits/stdc++.h>

using namespace std;

int n ;
vector < vector < int > > V ;
int sp[100010][20] ;
int h[100010] ;
int sz[100010] ;
int dfs(int idx, int de, int pa)
{
    h[idx] = de ;
    sp[idx][0] = pa ;
    for ( int i = 1 ; i < 20 ; i++ )
        sp[idx][i] = sp[sp[idx][i-1]][i-1] ;
    sz[idx] = 1 ;
    for ( int u : V[idx] )
        if ( pa-u )
            sz[idx] += dfs(u,de+1,idx) ;
    return sz[idx] ;
}

int LCA(int a , int b)
{
    if ( h[a] < h[b] )
        swap(a,b) ;
    for ( int i = 19 ; i >= 0 ; i-- )
        if ( sp[a][i] && h[sp[a][i]] >= h[b] )
            a = sp[a][i] ;
    if ( a == b ) return a ;
    for ( int i = 19 ; i >= 0 ; i-- )
        if ( sp[a][i] - sp[b][i] )
            a = sp[a][i], b = sp[b][i] ;
    return sp[a][0] ;
}

int fp(int idx, int d)
{
    for ( int i = 19 ; i >= 0 ; i-- )
        if ( sp[idx][i] && (1<<i) <= d )
            d-=(1<<i),
            idx = sp[idx][i] ;
    return idx ;
}
int main()
{
    ios_base::sync_with_stdio(0) ;
    cin.tie(0) ;

    cin >> n ;
    V.resize(n+1) ;
    int x ,y ;
    for ( int i = 1 ; i < n ; i++ )
        cin >> x >> y ,
        V[x].push_back(y) ,
        V[y].push_back(x) ;
    dfs(1,0,0) ;
    int q ;
    cin >> q;
    int a ,b , l , d , aa, bb;
    while ( q-- )
    {
        cin >> a >> b ;
        l = LCA(a,b) ;
        if ( a == b )
            cout << n << "\n" ;
        else
        {
            if ( a == l )
                d = h[b] - h[l] ;
            else if ( b == l )
                d = h[a] - h[l] ;
            else
                d = h[a] + h[b] - 2*h[l] ;
            if ( d & 1 )
                cout << 0 << "\n" ;
            else
            {
                if ( h[l]-h[b] == h[l]-h[a] )
                {
                    for ( int i= 19 ; i >=0 ; i-- )
                    {
                        d = LCA(sp[a][i],l) ;
                        if ( d == l && sp[a][i] != l )
                            a = sp[a][i] ;
                    }
                    for ( int i = 19 ; i >=0 ; i-- )
                    {
                        d = LCA(sp[b][i],l) ;
                        if ( d == l && sp[b][i] != l )
                            b = sp[b][i] ;
                    }
                    cout << n-sz[a]-sz[b] << "\n" ;
                }
                else
                {
                    d /= 2 ;
                    if ( h[b] > h[a] ) swap(a,b) ;
                    aa = sz[fp(a,d)] ;
                    bb = sz[fp(a,d-1)] ;
                    cout << aa-bb << "\n" ;
                }
            }
        }
    }
    return 0 ;
}
