#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

const int maxn = 3003000;
int n, x, y;
int a[500500];
int cnt[maxn];
int prime[maxn];
ll sum[maxn];
ll ans = inf * 1ll * inf;

pair<ll, int> get(int L, int R) {
    if (L > R) return mp(0ll, 0);
    ll s = sum[R];
    if (L) s -= sum[L - 1];
    int c = cnt[R];
    if (L) c -= cnt[L - 1];
    return mp(s, c);
}

void check(int d) {
    int upgraded = 0;
    int k = x / y;
    ll cur = 0;
    for (int z = d; z < maxn; z += d) {
        int R = z;
        int L = R - k;
        L = max(L, 1);
        L = max(L, z - d + 1);
        pair<ll, int> p = get(L, R);
        // c * x - sum
        cur += (p.s * 1ll * z - p.f) * 1ll * y;
        upgraded += p.s;
    }
    cur += x * 1ll * (n - upgraded);
    if (cur < ans) {
        ans = cur;
    }
}

int main(){

    scanf("%d%d%d", &n, &x, &y);
    for (int i = 0; i < n; i++) scanf("%d", a + i);

    for (int i = 0; i < n; i++) {
        cnt[a[i]]++;
        sum[a[i]] += a[i];
    }
    for (int i = 1; i < maxn; i++) {
        cnt[i] += cnt[i - 1];
        sum[i] += sum[i - 1];
    }

    for (int d = 2; d < maxn; d++) {
        if (prime[d] == 0) {
            check(d);
            for (int i = d; i < maxn; i += d) prime[i] = 1;
        }
    }

    printf("%lld\n", ans);

    return 0;
}
