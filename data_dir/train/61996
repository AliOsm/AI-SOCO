//IOI 2021
 
#include <bits/stdc++.h>
using namespace std;
 
#define pb push_back
#define ff first
#define ss second
 
typedef long long ll;
typedef pair<int, int> pii;
 
const int MAXN = 15 * 100 + 17;
 
int n, a[MAXN];
map<ll, vector<pii>> mp;
map<ll, int> mp2;
ll mx;
 
int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 1; i <= n; i++) {
		ll sum = 0;
		for (int j = i; j <= n; j++)
			sum += a[j], mp[sum].pb({j, i});
	}
	for (auto i : mp) {
		vector<pii> v = i.ss;
		sort(v.begin(), v.end());
		int dp[v.size() + 10] = {};
		for (int i = 0; i < v.size(); i++) {
			dp[i] = max((i > 0? dp[i - 1]: 0), 1);
			int ind = lower_bound(v.begin(), v.end(), make_pair(v[i].ss, 0)) - v.begin();
			if (ind == 0)
				continue;
			else
				ind--;
			dp[i] = max(dp[i], dp[ind] + 1);
		}
		mp2[i.ff] = dp[v.size() - 1];
		if (mp2[i.ff] > mp2[mx])
			mx = i.ff;
	}
	//cerr << mx << endl;
	vector<pii> v = mp[mx];
	sort(v.begin(), v.end());
	int dp[v.size() + 10] = {}, p[v.size() + 10] = {};
	for (int i = 0; i < v.size(); i++) {
		if (i > 0)
			p[i] = -2, dp[i] = dp[i - 1];
		else
			p[i] = -1, dp[i] = 1;
		int ind = lower_bound(v.begin(), v.end(), make_pair(v[i].ss, 0)) - v.begin();
		if (ind == 0)
			continue;
		else
			ind--;
		if (dp[i] < dp[ind] + 1) {
			dp[i] = dp[ind] + 1;
			p[i] = ind;
		}
	}
	cout << dp[v.size() - 1] << endl;
	int k = dp[v.size() - 1], t = v.size() - 1;
	while (k > 0) {
		if (p[t] == -2)
			t--;
		else if (p[t] == -1) {
			cout << v[t].ss << " " << v[t].ff << endl;
			k--;
			break;
		}
		else {
			cout << v[t].ss << " " << v[t].ff << endl;
			t = p[t];
			k--;
		}
	}
	return 0;
}