#include <bits/stdc++.h>

using namespace std;

#define rfile freopen("parties.in", "r", stdin)
#define wfile freopen("parties.out", "w", stdout)
#define files rfile; wfile
#define pb push_back

typedef long long ll;
typedef long double ld;
typedef vector< int > vi;
typedef vector< char > vc;
typedef vector< vc > vvc;
typedef vector< vi > vvi;
typedef map< int, int > mapT;
typedef pair< int, int > pairT;
typedef pair< char, char > pairC;

const int inf = (int)1e9;
const int N = (int)5e5 + 111;

bool cycle = false, ok = false;
stack< int > st;
int n, m, k, s;
vector< vector< vc > > us;
vvi g, p;

void dfs(int v, int par, int pos, int cur)
{
	st.push(v);
	if (ok)
		return;
	if (par != -1)
		us[par][pos][cur] = 1;
	if ((int)g[v].size() == 0 && cur == 0)
	{
		ok = true;
		printf("Win\n");
		vi ans;
		while (!st.empty())
		{
			ans.pb(st.top() + 1);
			st.pop();
		}
		reverse(ans.begin(), ans.end());
		for (int i = 0; i < (int)ans.size(); i++)
			printf("%d ", ans[i]);
		return;
	}
	cur = 1 - cur;
	for (int i = 0; i < (int)g[v].size(); i++)
	{
		int to = g[v][i];
		if (us[v][i][cur] == 0)
		{
			p[to][cur] = v;
			dfs(to, v, i, cur);
			if (ok == true)
				return;
		}
		else
			if (us[v][i][cur] == 1)
				cycle = true;
	}
	st.pop();
	if (par != -1)
		us[par][pos][1 - cur] = 2;
}

int main()
{
	int n, m, k, s;
	scanf("%d %d", &n, &m);
	g.resize(n);
	us.resize(n);
	p.resize(n, vi(2));
	for (int i = 0; i < n; i++)
	{
		scanf("%d", &k);
		g[i].resize(k);
		us[i].resize(k, vc(2, 0));
		for (int j = 0; j < k; j++)
		{
			scanf("%d", &g[i][j]);
			g[i][j]--;
		}
	}
	scanf("%d", &s);
	s--;
	p[s][0] = p[s][1] = -1;
	dfs(s, -1, -1, 1);
	if (!ok)
	{
		if (cycle)
			printf("Draw");
		else
			printf("Lose");
	}
	return 0;
}