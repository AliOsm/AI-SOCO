#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>     // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef complex<double> point;
#define F first
#define S second

typedef tree<pair<int, int>, null_type, less<pair<int, int>>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;


int main()
{
	#ifdef DGC
		freopen("a.txt", "r", stdin);
		//freopen("b.txt", "w", stdout);
	#endif

	ios_base::sync_with_stdio(0), cin.tie(0);

	int n, x;
	cin >> n >> x;
	vector<int> a(n);
	for (auto &i : a) cin >> i;

	vector<pair<int, int>> temp;
	for (auto &i : a)
		temp.push_back({ &i-&a[0], i });

	sort(temp.begin(), temp.end(), [](const pair<int, int> &x, const pair<int, int> &y) { return x.S < y.S; });

	vector<int> left(x+1);

	int pt = 0;
	bool ok = true;
	set<pair<int, int>> s;
	for (int i = 1; i <= x; ++i)
	{
		while (pt < n && temp[pt].S < i)
		{
			auto it = s.insert(temp[pt]).F;
			++pt;

			if (it != s.begin() && prev(it)->S > it->S)
				ok = false;
			if (*it != *s.rbegin() && it->S > next(it)->S)
				ok = false;

			if (!ok) break;
		}

		if (!ok)
		{
			for (; i <= x; ++i)
				left[i] = -2;
			break;
		}

		left[i] = s.empty() ? -1 : s.rbegin()->F;
	}

	vector<int> right(x+1);

	pt = n-1;
	ok = true;
	s.clear();
	for (int i = x; i >= 1; --i)
	{
		while (pt >= 0 && temp[pt].S > i)
		{
			auto it = s.insert(temp[pt]).F;
			--pt;

			if (it != s.begin() && prev(it)->S > it->S)
				ok = false;
			if (*it != *s.rbegin() && it->S > next(it)->S)
				ok = false;

			if (!ok) break;
		}

		if (!ok)
		{
			for (; i >= 1; --i)
				right[i] = -2;
			break;
		}

		right[i] = s.empty() ? (1<<30) : s.begin()->F;
	}

	ll ans = 0;
	ordered_set X;
	for (int i = x; i >= 1; --i)
	{
		if (right[i] != -2)
			X.insert({ right[i], i });

		if (left[i] != -2)
			ans += X.size() - X.order_of_key({ left[i]+1, 0});
	}

	cout << ans << "\n";

	return 0;
}
