#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;
const int MAXN = 2e5 + 7;
int n;
int fen[MAXN];
ll ans[MAXN];
pair<int,int> p[MAXN];
pair< pair<int,int>,int > que[MAXN];
vector< pair<int,int> > a;
void add(int p, int val)
{
	for (int i = p; i <= n; i += (i & -i))
		fen[i] += val;
}
int sum(int p)
{
	int ans = 0;
	for (int i = p; i > 0; i -= (i & -i))
		ans += fen[i];
	return ans;
}
int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	int m;
	cin >> n >> m;
	for (int i = 1; i <= n; ++i)
	{
		cin >> p[i].first;
		p[i].second = i;
	}
	sort(p + 1, p + 1 + n);
	for (int i = 1; i <= m; ++i)
	{
		cin >> que[i].first.first >> que[i].first.second;
		que[i].second = i;
	}
	sort(que + 1, que + 1 + m);
	for (int i = 1; i <= n; ++i)
		for (int j = i; j <= n; j += i)
		{
			add(max(p[i].second, p[j].second), 1);
			a.push_back({min(p[i].second, p[j].second), max(p[i].second, p[j].second)});
		}
	sort(a.begin(), a.end(), greater< pair<int,int> >());
	for (int i = 1; i <= m; ++i)
	{
		while (a.back().first < que[i].first.first)
		{
			add(a.back().second, -1);
			a.pop_back();
		}
		ans[que[i].second] = sum(que[i].first.second);
	}
	for (int i = 1; i <= m; ++i)
		cout << ans[i] << "\n";
	return 0;
}
