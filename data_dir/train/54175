#pragma comment(linker, "/STACK:256000000")
 
#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <time.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <unordered_map>
#include <unordered_set>
#include <complex>
using namespace std;
 
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef complex < double > base;
const int INF = (int)(1e9);
const int64 LINF = (int64)(1e18);
const double EPS = 1e-5;
#define sq(x) ((x)*(x))
#define FAIL() ((*(int*)(0))++)
const int MAXN = 2000100;
const int BUBEN = 600000;

int ta[MAXN], tb[MAXN];
int64  n, p;
int check(long double t)
{
	long double rem = 0;
	for(int i = 0; i < n; ++i)
	{
		rem += max((long double)0.0, ta[i] * t - tb[i]);
	}
	if (rem < p * t)
		return 1;
	else
		return 0;
}

void solve()
{
	
	cin >> n >> p;
	int64 a = 0, b = 0;
	for(int i = 0; i < n; ++i)
	{
		cin >> ta[i] >> tb[i];
		a += ta[i];
	}
	if (p >= a)
	{
		cout << -1;
		return;
	}
	cout.precision(10);
	long double l = 0, r = 1e15, mid, ans;
	
	for(int i = 0; i < 700; ++i)
	{
		mid = (l + r) / 2;
		if (check(mid))
			l = mid;
		else
			r = mid;
	}
	cout << fixed << (l + r) / 2.0; 
}

int main()
{
	cin.tie(0); ios_base::sync_with_stdio(false);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
#endif
    srand(88);
	
	solve();
		
    return 0;
}