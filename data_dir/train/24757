#include <cstdio>
#include <cassert>
#include <stack>
#include <cstdlib>
#include <iostream>
#include <cassert>
#include <vector>
#include <algorithm>
#include <map>
#include <cmath>
#include <set>
#include <queue>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

const double EPS=1e-7;

typedef long long ll;

const int MAXM=100000;

map<int,set<int> > s;

void print_set(set<int> s)
{
	for(set<int>::iterator it=s.begin();it!=s.end();it++)
	{
		cout<<*it<<" ";
	}
	cout<<endl;
}

void print_set(set<pair<int,int> > s)
{
	for(set<pair<int,int> >::iterator it=s.begin();it!=s.end();it++)
	{
		cout<<"{"<<it->first<<" "<<it->second<<"} ";
	}
	cout<<endl;
}

int px[MAXM];
int py[MAXM];

int main()
{
//	freopen("/home/knightl/input","r",stdin);
	int n,m;
	scanf("%d%d",&n,&m);
	{
		REP(i,m)
		{
			int x,y;
			scanf("%d%d",&x,&y);
			s[x-1].insert(y-1);
			s[x];
		}
		s[0];
		s[n-1];
		set<pair<int,int> > cur[2];
		int t=0;
		bool ok=true;
		cur[t].insert(make_pair(0,0));
		for(map<int,set<int> >::iterator iit=s.begin();iit!=s.end();t=1-t,iit++)
		{
			if(iit->first==n) break;
			int i=iit->first;
			if(cur[t].empty())
			{
				ok=false;
				break;
			}
//			print_set(s[i]);
//			print_set(cur[t]);
			cur[1-t].clear();
			set<pair<int,int> >::iterator it;
			set<int>::iterator jt;
			bool done=false;
			it=cur[t].begin();
			jt=s[i].begin();
			pair<int,int> c_segment=*it++;
			for(;jt!=s[i].end();)
			{
				assert(c_segment.first<=c_segment.second);
				if(*jt<c_segment.first)
				{jt++;}
				else if(*jt==c_segment.first)
				{
					c_segment.first++;
					if(c_segment.first>c_segment.second)
					{
						if(it==cur[t].end())
						{
							done=true;
							break;
						}
						else
							c_segment=*it++;
					}
					jt++;
				}
				else if(c_segment.first<*jt && *jt<c_segment.second)
				{
					cur[1-t].insert(make_pair(c_segment.first,*jt-1));
					c_segment.first=*jt+1;
					jt++;
				}
				else if(*jt==c_segment.second)
				{
					c_segment.second--;
					cur[1-t].insert(c_segment);
					if(it==cur[t].end())
					{
						done=true;
						break;
					}
					else
						c_segment=*it++;
					jt++;
				}
				else
				{
					c_segment.second=*jt-1;
					while(it!=cur[t].end() && it->first<*jt)
					{
						c_segment.second=max(c_segment.second,it->second);
						it++;
					}
					if(c_segment.second<=*jt)
					{
						if(c_segment.second==*jt) c_segment.second--;
						cur[1-t].insert(c_segment);
						if(it==cur[t].end())
						{
							done=true;
							break;
						}
							c_segment=*it++;
					}
					else
					{
						cur[1-t].insert(make_pair(c_segment.first,*jt-1));
						c_segment.first=*jt+1;
						jt++;
					}
				}
			}
			if(!done)
			{
				c_segment.second=n-1;
				cur[1-t].insert(c_segment);
			}
		}
		if(ok)
		{
			if(cur[t].empty() || cur[t].rbegin()->second!=n-1)
				ok=false;
		}
		printf("%d\n",ok?2*n-2:-1);
	}
	return 0;
}
