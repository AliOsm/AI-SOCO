#include<bits/stdc++.h>
using namespace std;
//#define int                 long long
#define ll                  long long
#define ld                  long double
#define rep(i,n)            for(int i=0;i<n;i++)
#define hell                1000000007
#define inf                 (ll)1e15
#define vi                  vector<int>
#define vii                 vector< vi >
#define pb                  push_back
#define mp                  make_pair
#define fi                  first
#define se                  second
#define pii                 pair<int,int>
#define all(c)              c.begin(),c.end()
#define sz(c)               (int)c.size()
#define hash1               105727LL
#define hash2               hell
#define eps                 1e-10
#define pi                  3.141592653589793238462643383279502884197
ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
ll power(ll x, ll y,ll p)
{
    ll res=1;
    x=x%p;
    while(y>0)
    {
        if(y&1)
            res=((res%p)*(x%p))%p;
        y=y>>1;
        x=((x%p)*(x%p))%p;
    }
    return res;
}
ll raichu(ll x,ll y)
{
    ll res=1;
    while(y>0)
    {
        if(y&1)
            res=((res)*(x));
        y=y>>1;
        x=((x)*(x));
    }
    return res;
}
bool isprime(ll n)
{
    if(n<2) return false;
    else if(n==2) return true;
    else if(n%2==0) return false;
    else
    {
        ll z=sqrt(n);
        rep(i,z-1) if(n%(i+2)==0) return false;
        return true;
    }
}
vi p(100005,0);
vector<bool> chk(100005,false);
vi dp(100005,0);
vii below(100005);
int dfs1(int cur,int par,vii &g,int d)
{
    int dist=-1;
    if(p[cur]==1) dist=0;
    for(auto i:g[cur])
    {
        if(i!=par)
        {
            int cnt=dfs1(i,cur,g,d);
            dist=max(dist==-1?-1:dist,cnt==-1?-1:cnt+1);
            below[cur].pb(cnt==-1?-1:cnt+1);
        }
    }
    if(dist<=d) chk[cur]=true;
    dp[cur]=dist;
    return dist;
}
void dfs2(int cur,int par,vii &g,int d,int pd)
{
    multiset<int> s;
    for(auto i:below[cur]) s.insert(i);
    int in=0; 
    if(p[cur]==1 && pd==-1) pd=0;
    for(auto i:g[cur])
    {
        if(i!=par)
        {
            s.erase(s.find(below[cur][in]));
            if(!s.empty()) dfs2(i,cur,g,d,max(pd==-1?-1:pd+1,*s.rbegin()==-1?-1:*s.rbegin()+1));
            else dfs2(i,cur,g,d,pd==-1?-1:pd+1);
            s.insert(below[cur][in]);
            in++;
        }
    }
    if(pd<=d) chk[cur]=chk[cur]&true;
    else chk[cur]=false;
    return;
}
int32_t main()
{
    //freopen("p099_base_exp.txt","r",stdin);
    //freopen("out1.txt","w",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t=1,T;
    //cin>>t;
    T=t;
    while(t--)
    {
        int n,m,d;
        cin>>n>>m>>d;
        vi P(m);
        rep(i,m) cin>>P[i];
        rep(i,m) P[i]--;
        rep(i,m) p[P[i]]=1;
        vii g(n);
        rep(i,n-1)
        {
            int u,v;
            cin>>u>>v;
            g[--u].pb(--v);
            g[v].pb(u);
        }
        int z=dfs1(0,0,g,d);
        dfs2(0,0,g,d,-1);
        int ans=0;
        rep(i,n) if(chk[i]==true) ans++;
        cout<<ans;
    }
    return 0;
}