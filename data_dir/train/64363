#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/STACK:16777216")
#include <bits/stdc++.h>

using namespace std;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

const ll mod = 1e9 + 7;
const int MAXN = 1e5 + 100;
ll a[MAXN];

matrix operator *(matrix a, matrix b) {
    matrix res(a.size(), vector<long long>(b[0].size()));
    for (int k = 0; k < b.size(); ++k) {
        for (int i = 0; i < a.size(); ++i) {
            for (int j = 0; j < b[0].size(); ++j) {
                res[i][j] = (res[i][j] + a[i][k] * b[k][j]) % mod;
            }
        }
    }
    return res;
}

matrix binpow(matrix a, ll n) {
    matrix res(a.size(), vector<long long>(a.size()));
    for (int i = 0; i < a.size(); ++i) {
        res[i][i] = 1;
    }
    while (n) {
        if (n & 1) {
            res = res * a;
        }
        a = a * a;
        n >>= 1;
    }
    return res;
}

signed main() {
    FAST_IO();
    int n;
    cin >> n;
    ll pw = 1;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        a[i] %= mod - 1;
        pw = (pw * a[i]) % (mod - 1);
    }
    pw--;
    if (pw < 0) {
        pw += mod - 1;
    }
    matrix m = {{1, 0, 2, 0},
                {0, 2, 0, 0},
                {1, 0, 0, 0},
                {0, 1, 0, 0}};
    m = binpow(m, pw);
    matrix f = {{1},
                {2},
                {0},
                {1}};
    f = m * f;
    cout << f[2][0] << '/' << f[3][0];
}
