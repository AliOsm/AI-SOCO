/*input
10 5
2 2 4 4 3 1 1 2 3 2
9 6 6 4 1

*/
 
/*
                                                    ______________
                                                          |       )
                                                          |   )   /
                                                          |______/
                                                    |     |      \
                                                    |     |   )   \
                                                    |_____|_______)
 
*/
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <ctime>
#include <cassert>
#include <complex>
#include <string>
#include <cstring>
#include <chrono>
#include <random>
#include <queue>
#include <bitset>
#include <iomanip>
#include <fstream>
#include <stack>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
 
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;
 
#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
int mod = 1000000007;
const int inf = 1034567891;
const ll LL_INF = 1234567890123456789ll;
#define PI 3.14159265
#define endl '\n'
#define F first
#define S second
#define debug(x) cout << #x << " = " << x << endl;
#define TRACE
 
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
 
#define out(container) for (auto it : container) cout << it << " "; cout << endl;
 
 
template < typename T > T GCD(T a, T b)            { ll t; while(a) { t = a; a = b % a; b = t; } return b; }
template < typename T > string toString(T a)       { return to_string(a); }
template < typename T > void toInt(string s, T &x) { stringstream str(s); str >> x;}
inline int add(int x, int y){ x += y; if(x >= mod) x -= mod; return x;}
inline int sub(int x, int y){ x -= y; if(x < 0) x += mod; return x;}
inline int mul(int x, int y){ return (x * 1ll * y) % mod;}
inline int powr(int a, ll b){
  int x = 1 % mod;
  while(b){
    if(b & 1) x = mul(x, a);
    a = mul(a, a);
    b >>= 1;
  }
  return x;
}
inline int inv(int a){ return powr(a, mod - 2);}

const int N = 2e5 + 5;
int arr[N], can[N];
int n, k;
vector<int> vec[N], res[N];
 
typedef
tree<
  PII,
  null_type,
  less<PII>,
  rb_tree_tag,
  tree_order_statistics_node_update>
ordered_set;

ordered_set s[N];

bool check(int test) {
  for (int i = 0; i < test; i++)
    vec[i].clear(), s[i].clear();
  int ind = 0, idx = 0;
  while (ind < n) {
    s[idx].insert({arr[ind], ind});
    vec[idx].pb(arr[ind]);
    int cnt = vec[idx].size() - s[idx].order_of_key({arr[ind], 0});
    if (cnt > can[arr[ind] - 1])
      return false;
    idx = (idx + 1) % test;
    ind++;
  }
  for (int i = 0; i < test; i++) {
    reverse(all(vec[i]));
    res[i] = vec[i];
  }
  return true;
}

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  cin >> n >> k;
  for (int i = 0; i < n; i++)
    cin >> arr[i];
  for (int i = 0; i < k; i++)
    cin >> can[i];
  sort(arr, arr + n, greater<int>());
  int low = 1, high = n, mid, ans = n;
  while (low <= high) {
    mid = (low + high) >> 1;
    if (check(mid)) {
      ans = mid;
      high = mid - 1;
    } else {
      low = mid + 1;
    }
  }
  cout << ans << endl;
  for (int i = 0; i < ans; i++) {
    cout << res[i].size() << " ";
    out(res[i]);
  }

  return 0;
}