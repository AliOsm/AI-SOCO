#include<bits/stdc++.h>
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
#define pb push_back
#define ins(x) insert(x)
#define fi first
#define se second
#define ub upper_bound
#include<bits/stdc++.h>
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
#define pb push_back
#define ins(x) insert(x)
#define fi first
#define se second
#define ub upper_bound
#define all(v) v.begin(),v.end()
#define sz(v) ((ll)((v).size()))
#define reset(v,val) memset(v,val,sizeof(v))
#define erep(i, x, n) for ( i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for( i = x; i<(ll)(n); i++)
using namespace std;
typedef     int   ll;
long long int mod=1e9+7;
ll dx[]={0,0,1,-1};
ll dy[]={1,-1,0,0};
ll m=0,n,res=0,k,ans=0;
string s2="zero",ch="",s,t,s1="";
set< ll > st;
vector< pair<string,ll> >vm;
vector< pair< pair<ll,ll>,ll > > vvv;
vector<pair<ll,ll> >vv,vv1;
vector< ll > v[200005],v1[200005];
pair<ll,ll> a[1000005];

ll parent[500005],amount[500005],vis[200005];

void make_set(ll v) {
    parent[v] = v;
    amount[v] = 1;
    a[v]={v,v};
}

ll find_set(ll v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v]);
}

void union_sets(ll x, ll y) {
    x = find_set(x);
    y = find_set(y);
    if (x != y) {
        if (amount[x] < amount[y])
            swap(x, y);
        parent[y] = x;
        amount[x] += amount[y];
        a[x].first=min(a[x].first,a[y].first);
        a[x].second=max(a[x].second,a[y].second);
    }
}

void dfs(ll x){
    vis[x]=1;
    for(ll i=0;i<v[x].size();i++){
        ll y=v[x][i];
        if(!vis[y]){
            union_sets(x,y);
            dfs(y);
        }
    }
    if(st.count(x))st.erase(x);

}

int main(){
                                        In_the_name_of_allah_the_merciful


    ll i=0,x,z,y,j=0,q,mm=0,mx=0,idx=0,ok=0,l=0,r=0,negatif=0,positif=0,l1,r1,d;
    set< ll > ::iterator it,it1;
   // freopen("a.txt","r",stdin);
    cin>>n>>m;
    for(i=1;i<=m;i++){
        cin>>x>>y;
        v[x].pb(y);
        v[y].pb(x);
    }
    for(i=1;i<=n;i++){
        st.insert(i);
        make_set(i);
        vis[i]=0;
    }
    res=0;
    for(i=1;i<=n;i++){
        if(!vis[i]){
            dfs(i);
            while(true){
                if(!st.size())break;
                x=find_set(i);
                it=st.lower_bound(a[x].first);
                //cout<<i<<" "<<x<<" "<<a[x].first<<" "<<a[x].second<<endl;
                if(it==st.end())break;
                if((*it)>=a[x].first&&(*it)<=a[x].second){
                    res++;
                    union_sets(x,(*it));
                    dfs((*it));
                }
                else break;
            }
        }
    }
    cout<<res;


                                                Alhamdulillah
 }

