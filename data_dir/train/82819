#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N = 1e6 + 100, LOG = 22;
int nxt[N][LOG];

int main() {
//    freopen("in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);
    string s;
    cin >> s;
    int n = s.size();
    int q;
    cin >> q;
    while(q--) {
        int d, len;
        cin >> len >> d;
        vector <int> trans_perm;
        int cnt = 0;
        for(int i = 1; i <= d; i++) {
            for(int j = i; j <= len; j += d) {
                nxt[j][0] = (++cnt)-1;
            }
        }
        nxt[1][0] = -1;
        assert(len == cnt);
        for(int k = 1; k < LOG; k++) {
            for(int i = 1; i <= len; i++) {
                if(nxt[i][k-1] != -1) {
                    nxt[i][k] = nxt[nxt[i][k-1]][k-1];
                }
                else {
                    nxt[i][k] = -1;
                }
            }
        }
        string res(n, '&');
        for(int i = 1; i <= n; i++) {
            int start, pos, times;
            if(i <= len) {
                start = 1, pos = i;
                times = n-len+1;
            }
            else {
                start = i-len+1, pos = len;
                times = n-i+1;
            }
            for(int k = LOG-1; k >= 0; k--) {
                if(times >= (1<<k) && nxt[pos][k] != -1) {
                    times -= (1<<k);
                    pos = nxt[pos][k];
                    start += (1<<k);
                }
            }
            res[start+pos-2] = s[i-1];
        }
        s = res;
        cout << s << "\n";
    }
    return 0;
}

