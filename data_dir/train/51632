#include<bits/stdc++.h>
using namespace std;

#define SQR(n) (n*n)
#define NL printf("\n")
#define PI 2.0*acos(0.0)
typedef long long LL ;
typedef unsigned long long ULL ;

//#define sz size()
#define PB push_back
#define MP make_pair
#define all(a) a.begin(),a.end()

#define InpOut freopen("in.txt","r",stdin),freopen("out.txt","w",stdout)
#define _cin ios_base::sync_with_stdio(0); cin.tie(0)
#define DBG printf("***** here here here here *****\n");


#define S1(a) a=in<int>()
#define SL1(a) a=in<LL>()
#define S2(a,b) a=in<int>(),b=in<int>()
#define SL2(a,b) a=in<LL>(),b=in<LL>()
#define S3(a,b,c) a=in<int>(),b=in<int>(),c=in<int>()
#define SL3(a,b,c) a=in<LL>(),b=in<LL>(),c=in<LL>()
#define Rep(i,a,b) for(i=a;i<=b; i++)
#define Rev(i,a,b) for(i=a;i>=b; i--)


#define Max(a,b) ((a>b)?a:b)
#define Min(a,b) ((a<b)?a:b)

#define _Max(a,b,c) Max(a,Max(b,c))
#define _Min(a,b,c) Min(a,Min(b,c))

#define BitCnt(a) __builtin_popcountll(a)
#define MEM(a,val) memset(a,val,sizeof(a))

int dx4[] = { 0 , 0 , -1 , 1 } ;
int dy4[] = { -1 , 1 , 0 , 0 } ;

int dx8[] = { 0 , 0 , -1 , 1 , -1 , -1 , 1 , 1 } ;
int dy8[] = { -1 , 1 , 0 , 0 , -1 , 1 , -1 , 1 } ;

int knightx[] = { -1 , 1 , -2 , 2 , -2 , 2 , -1 , 1 } ;
int knighty[] = { -2 , -2 , -1 , -1 , 1 , 1 , 2 , 2 } ;

template <typename T> T in(){char ch;T n = 0;bool ng = false;while (1){ch = getchar();if (ch == '-'){ng = true;ch = getchar();break;}if (ch>='0' && ch<='9')break;}while (1){if (ch<'0' || ch>'9')break;n = n*10 + (ch - '0');ch = getchar();}return (ng?-n:n);}
template<typename T>inline T POW(T B,T P){ if(P==0) return 1; if(P&1) return B*POW(B,P-1);  else return SQR(POW(B,P/2));}
template<typename T>inline T Gcd(T a,T b){if(a<0)return Gcd(-a,b);if(b<0)return Gcd(a,-b);return (b==0)?a:Gcd(b,a%b);}
template<typename T>inline T Lcm(T a,T b) {if(a<0)return Lcm(-a,b);if(b<0)return Lcm(a,-b);return a*(b/Gcd(a,b));}
template <typename T> T Bigmod(T base, T power, T MOD){T ret=T(1)%MOD;while(power){if(power & 1)ret=(ret*base)%MOD;base=(base*base)%MOD;power>>=1;}return ret;}
bool isVowel(char ch){ ch=toupper(ch); if(ch=='A'||ch=='U'||ch=='I'||ch=='O'||ch=='E') return true; return false;}
template <typename T> LL isLeft(T a,T b,T c) {return(a.x-b.x)*(b.y-c.y)-(b.x-c.x)*(a.y-b.y);}
template <typename T> T ModInverse(T number, T MOD){return Bigmod(number, MOD-T(2), MOD);}
bool isConst(char ch){if (isalpha(ch) && !isVowel(ch)) return true; return false;}
int toInt(string s)  { int sm; stringstream ss(s); ss>>sm; return sm; }
bool isPrime( LL val ) { if( val == 2 ) return true ; if( val % 2 == 0 || val == 1 ) return false ; LL sqrt_N = (LL) ( ( double ) sqrt( val ) ) ; for( LL i = 3 ; i <= sqrt_N ; i += 2 ) { if( val % i == 0 ) return false ; } return true ; }
template<class T> string convert(T _input) { stringstream blah; blah << _input; return blah.str(); }

bool valid( int r , int c , int x , int y ){
    if( x >= 1 && x <= r && y >= 1 && y <= c ) return 1 ; return 0 ;
}

#define MX 200005
#define MOD 1000000007
#define INF 2000000000000000LL
#define EPS 1e-7

// Month
map<string , LL>month ;
void Month() { month["January"] = 1 , month["February"] = 2 , month["March"] = 3 , month["April"] = 4 , month["May"] = 5 , month["June"] = 6 ; month["July"] = 7 , month["August"] = 8 , month["September"] = 9 , month["October"] = 10 , month["November"] = 11 , month["December"] = 12 ; }


/*
// Ordered set
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template<typename T> using orderset = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
//orderset<int> s ; //orderset<int>::iterator it ;
//orderset<int> X; //X.insert(1); //X.insert(2); //X.insert(4); //X.insert(8); //X.insert(16);
//cout<<*X.find_by_order(1)<<endl; // 2 //cout<<*X.find_by_order(2)<<endl; // 4 //cout<<*X.find_by_order(4)<<endl; // 16 //cout<<(end(X)==X.find_by_order(6))<<endl; // true
//cout<<X.order_of_key(-5)<<endl;  // 0 //cout<<X.order_of_key(1)<<endl;   // 0 //cout<<X.order_of_key(3)<<endl;   // 2 //cout<<X.order_of_key(4)<<endl;   // 2 //cout<<X.order_of_key(400)<<endl; // 5
*/


/**.................................... Code starts Here .......................................**/

bool Check( int val , int pos ){
    return bool ( val & ( 1 << pos ) ) ;
}

int Set( int val , int pos ){
    return val | ( 1 << pos ) ;
}
int Reset( int val , int pos ){
    return val & ( ~ ( 1 << pos ) ) ;
}
int Flip( int val , int pos ){
    return val ^ ( 1 << pos ) ;
}

const LL maxn = 1e5 + 5 ;

LL n , m , t , caseno ;

struct info{
    LL pos , id , r ;
    info(){}
    info( LL pos , LL id , LL r ): pos(pos) , id(id) , r(r) {}
    bool operator < ( const info &p ) const{
        if( pos == p.pos ) return id < p.id ;
        return pos < p.pos ;
    }
};

struct point{
    LL x , y ;
}a[5],b[5],c[5];

//LL a[100005] ;

bool Ckc( ){
    LL tot = 0 ;
    if( c[1].x >= b[1].x && c[1].y >= b[1].y && c[1].x <= b[3].x && c[1].y <= b[3].y ) tot++ ;
    if( c[1].x >= a[1].x && c[1].y >= a[1].y && c[1].x <= a[3].x && c[1].y <= a[3].y ) tot++ ;
    if( tot == 2 ) return 1 ;
    return 0 ;
}

int main()
{
    LL i , j , k , q ;

    SL1( t ) ;
    Rep( caseno , 1 , t ){
        SL2( m , n ) ;
        LL tot = n * m ;
        LL tot_w = tot / 2 ;
        LL tot_b = tot / 2 ;
        if( tot % 2 ) tot_w ++ ;

        //cout<< tot_w << "..." << tot_b ;NL;
        SL2( a[1].x , a[1].y ) ; SL2( a[3].x , a[3].y ) ;
        SL2( b[1].x , b[1].y ) ; SL2( b[3].x , b[3].y ) ;


        LL x = abs( a[3].x - a[1].x ) + 1 ;
        LL y = abs( a[3].y - a[1].y ) + 1 ;
        LL tot_a = x * y ;
        //cout<< tot_a ; NL ;
        LL tot_a_w = 0 , tot_a_b = 0 ;
        if( tot_a == 1 )
        {
            if( ( a[1].x + a[1].y ) % 2 == 1 )
            {
                tot_a_w = 0 ;
                tot_a_b = 1 ;
            }
            else{
                tot_a_w = 1 ;
                tot_a_b = 0 ;
            }
        }
        else
        {
            LL ww = tot_a / 2 ;
            LL bb = tot_a / 2 ;
            if( ( a[1].x + a[1].y ) % 2 == 0 ){
                if( tot_a % 2 ) ww ++ ;
            }
            else{
                if( tot_a % 2 ) bb ++ ;
            }
            tot_a_w = ww ;
            tot_a_b = bb ;
        }

        //printf("%lld %lld\n",tot_a_w,tot_a_b) ;

        x = abs( b[3].x - b[1].x ) + 1 ;
        y = abs( b[3].y - b[1].y ) + 1 ;
        LL tot_bb = x * y ;
        LL tot_b_w = 0 , tot_b_b = 0 ;
        LL tot_c_w = 0 , tot_c_b = 0 ;
        if( tot_bb == 1 )
        {
            if( ( b[1].x + b[1].y ) % 2 == 0 )
            {
                tot_b_w = 1 ;
                tot_b_b = 0 ;
            }
            else{
                tot_b_w = 0 ;
                tot_b_b = 1 ;
            }
        }
        else
        {
            LL ww = tot_bb / 2 ;
            LL bb = tot_bb / 2 ;
            if( ( b[1].x + b[1].y ) % 2 == 0 ){
                if( tot_bb % 2 ) ww ++ ;
            }
            else{
                if( tot_bb % 2 ) bb ++ ;
            }
            tot_b_w = ww ;
            tot_b_b = bb ;
        }

        //printf("%lld %lld\n",tot_a_w,tot_a_b) ;


        c[1].x = max( a[1].x, b[1].x ) ;
        c[1].y = max( a[1].y, b[1].y ) ;
        c[3].x = min( a[3].x, b[3].x ) ;
        c[3].y = min( a[3].y, b[3].y ) ;
        //printf("%lld %lld\n",c[3].x,c[3].y) ;
        if( Ckc( ) )
        {

            //puts("ok..") ;
            LL c_x = abs( c[3].x - c[1].x ) + 1 ;
            LL c_y = abs( c[3].y - c[1].y ) + 1 ;
            LL tot_c = c_x * c_y ;
            //printf("%lld\n",tot_c) ;
            LL ww = tot_c / 2 ;
            LL bb = tot_c / 2 ;
            if( ( c[1].x + c[1].y ) % 2 == 0 )
            {
                if( tot_c % 2 )
                    ww ++ ;
            }
            else
            {
                if( tot_c % 2 )
                    bb ++ ;
            }

            tot_c_w = ww ;
            tot_c_b = bb ;
        }

        LL tot_e1_b = tot_a_b - tot_c_b ;
        LL tot_e2_w = tot_b_w - tot_c_w ;

        tot_b += tot_c_w ;
        tot_w -= tot_c_w ;

        tot_w += tot_e1_b ;
        tot_b -= tot_e1_b ;

        tot_b += tot_e2_w ;
        tot_w -= tot_e2_w ;

        printf("%lld %lld\n",tot_w,tot_b) ;

    }

    return 0 ;
}


/*

1
4 4
1 1 4 2
1 3 4 4

*/
