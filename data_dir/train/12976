
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int N;
ll A[100100];

int nextNode[4001001][2];
int z = 1;
int add(ll mask)
{
  int node = 1;
  for (int i = 0; i < 40; i++)
  {
    int which = nextNode[node][(mask>>(39-i))&1];
    if (which == 0)
    {
      z++;
      nextNode[node][(mask>>(39-i))&1] = z;
      which = z;
    }
    node = which;
  }
  return 0;
}

int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N;
  rep1(i,N) cin >> A[i];
  ll suff = 0;
  ll pref = 0;
  ll tot = 0;
  rep1(i,N) pref ^= A[i];
  tot = pref;
  ll ans = tot;
  add(0);
  for (int i = N; i >= 0; i--)
  {
    ll cur = pref;
    // find the best mask in trie
    // that is as close as ~cur
    int node = 1;
    ll res = 0;
    for (int ii = 0; ii < 40; ii++)
    {
      int bit = (pref>>(39-ii))&1;
//      cout << bit;
      int which = nextNode[node][1-bit];
      if (which == 0)
      {
        which = nextNode[node][bit];
        cur &= (~(1ll<<(39-ii)));
        res = (res<<1)|bit;
      }
      else
      {
        res = (res<<1)|(1^bit);
      }
      node = which;
    }
//    cout << endl << endl;
//    db(cur);
    ans = max(res ^ pref, ans);
    pref ^= A[i];
    suff ^= A[i];
    add(suff);
  }
  cout << ans << endl;
}
