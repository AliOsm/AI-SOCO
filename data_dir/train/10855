#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, greater<>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = /*1'000'000'007;*/998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 500'000;
const int LOGN = 19;

int n, m, k, R;
vector<pair<int, int>> a;
int t[4 * N];

int64 vec(int64 x1, int64 y1, int64 x2, int64 y2)
{
  return x1 * y2 - x2 * y1;
}

struct cmp
{
  cmp(int d) : d(d) {}

  bool operator()(int i, int j)
  {
    return vec(a[i].first - d, a[i].second, a[j].first - d, a[j].second) < 0;
  }

  int d;
};

void add(int v, int l, int r, int p, int val)
{
  if (r - l == 1) {
    t[v] = val;
    return;
  }
  int mid = (l + r) / 2;
  if (p < mid)
    add(v * 2 + 1, l, mid, p, val);
  else
    add(v * 2 + 2, mid, r, p, val);
  t[v] = max(t[v * 2 + 1], t[v * 2 + 2]);
}

int get(int v, int l, int r, int ql, int qr)
{
  if (l == ql && r == qr) {
    return t[v];
  }
  int mid = (l + r) / 2;
  if (qr <= mid)
    return get(v * 2 + 1, l, mid, ql, qr);
  if (ql >= mid)
    return get(v * 2 + 2, mid, r, ql, qr);
  return max(get(v * 2 + 1, l, mid, ql, mid),
             get(v * 2 + 2, mid, r, mid, qr));
}

int64 scalar(int64 x1, int64 y1, int64 x2, int64 y2, int64 x3, int64 y3, int64 x4, int64 y4)
{
  return (x2 - x1) * (x4 - x3) + (y2 - y1) * (y4 - y3);
}

void solve(int test)
{
  cin >> R >> n;
  vector<pair<int, int>> q;
  vector<int> ao, bo;
  ao.reserve(n / 2);
  bo.reserve(n / 2);
  int id = 0;
  for (int i = 0; i < n; ++i) {
    int type, x, y;
    cin >> type;
    if (type == 1) {
      cin >> x >> y;
      ao.push_back(id);
      bo.push_back(id);
      a.emplace_back(x, y);
      q.emplace_back(id++, -1);
    }
    else if (type == 2) {
      cin >> x;
      q.emplace_back(x - 1, -2);
    }
    else {
      cin >> x >> y;
      q.emplace_back(x - 1, y - 1);
    }
  }
  sort(ao.begin(), ao.end(), cmp(-R));
  sort(bo.begin(), bo.end(), cmp(R));
  n = (int)ao.size();
  vector<int> ra(n), rb(n);
  for (int i = 0; i < n; ++i) {
    ra[ao[i]] = i;
    rb[bo[i]] = lower_bound(begin(bo), end(bo), bo[i], cmp(R)) - begin(bo);
  }
  memset(t, -1, sizeof(t));
  for (auto& pr : q) {
    if (pr.second == -1) {
      add(0, 0, n, ra[pr.first], rb[pr.first]);
    }
    else if (pr.second == -2) {
      add(0, 0, n, ra[pr.first], -1);
    }
    else {
      auto&[x, y] = pr;
      if (ra[x] > ra[y])
        swap(x, y);
      add(0, 0, n, ra[x], -1);
      add(0, 0, n, ra[y], -1);
      size_t off = upper_bound(begin(ao) + ra[y], end(ao), ao[ra[y]], cmp(-R)) - begin(ao);
      int b_max = get(0, 0, n, 0, off);
      int xb = rb[x] < rb[y] ? x : y;
      add(0, 0, n, ra[x], rb[x]);
      add(0, 0, n, ra[y], rb[y]);
      if (b_max < rb[xb] && scalar(-R, 0, a[y].first, a[y].second,
                                   R, 0, a[xb].first, a[xb].second) >= 0)
        cout << "YES\n";
      else
        cout << "NO\n";
    }
  }
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i)
    solve(i);
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
