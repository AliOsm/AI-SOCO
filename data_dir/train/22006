#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

#define FOR(i,f,t) for(int i=f; i<t; i++)
#define FORr(i,f,t) for(int i=f; i>t; i--)
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define pb push_back
#define ri(x) scanf("%d",&x)
#define rii(x,y) ri(x), ri(y)

typedef long long ll;
const int MAXN = 2e5+5;
const int INF = 0x3f3f3f3f;

int N, K, d[MAXN], C, sz[MAXN];
bool a[MAXN];
vector<int> G[MAXN];

void dfs1(int u, int p=-1){
	sz[u] = a[u];
	FOR(i,0,G[u].size()){
		int v=G[u][i];
		if(v==p) continue;
		dfs1(v, u);
		sz[u] += sz[v];
	}
}

int dfsc(int u, int p=-1){
	FOR(i,0,G[u].size()){
		int v=G[u][i];
		if(v == p) continue;
		if(sz[v] > K/2) return dfsc(v, u);
	}
	return u;
}

int main(){
	rii(N, K); K*=2;
	FOR(i,0,K){
		int u; ri(u); u--;
		a[u] = true;
	}
	FOR(i,0,N-1){
		int u, v; rii(u,v); u--; v--;
		G[u].pb(v);
		G[v].pb(u);
	}
	dfs1(0);
	C = dfsc(0);
	ms(d, INF);
	d[C] = 0;
	queue<int> q;
	q.push(C);
	ll ans = 0;
	while(!q.empty()){
		int u=q.front(); q.pop();
		if(a[u]) ans+=d[u];
		FOR(i,0,G[u].size()){
			int v=G[u][i];
			if(d[v] == INF){
				d[v] = d[u]+1;
				q.push(v);
			}
		}
	}
	printf("%lld\n",ans);
}
