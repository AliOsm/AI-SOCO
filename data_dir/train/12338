/*
Till the roof comes off, till the lights go out
Till my legs give out, canâ€™t shut my mouth.
Till the smoke clears out. Am I high? Perhaps
I'ma rip this shit till my bones collapse.
*/
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <stack>
#include <string.h>
#include <map>
#include <vector>
#include <queue>
#include <math.h>
#include <stack>
#include <complex>

#define pb push_back
#define f first
#define s second
#define ll long long
#define sz(v)      ((int)((v).size()))
#define X real()
#define Y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define len(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)
#define M_PI  acos(-1)

using namespace std;

typedef pair<ll,ll>ii;
typedef pair<ii,int>node;
typedef complex<double>point;

const int N=200005;
const int NIL=500005;
const double EPS = 1e-9;
const int INF =1e9;

ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a,ll b){return a*b/gcd(a,b);}
//double getDist(pnt a,pnt b){return sqrt((a.f-b.f)*(a.f-b.f)+(a.s-b.s)*(a.s-b.s));}
int dcmp(double x, double y) {return fabs(x - y) <= EPS ? 0 : x < y ? -1 : 1;}

ll mod=1000000007;
ll mod2=1000000009;
ll power(ll base,int p){if(!p)return 1;ll ret=power(base,p/2);ret*=ret;ret%=mod;if(p&1)ret*=base,ret%=mod;return ret;}
ll modInverse(int a){return power(a,mod-2);}


int tree[N*4];
int get(int p,int s,int e,int val){
 if(s==e)return s;
 if(tree[p*2]<val)return get(p*2,s,(s+e)/2,val);
 return get(p*2+1,(s+e)/2+1,e,val);
}
void update(int p,int s,int e,int idx,int val){
  if(idx<s||e<idx)return;
  if(s==e){
    tree[p]=val;
    return;
  }
  update(p*2,s,(s+e)/2,idx,val);
  update(p*2+1,(s+e)/2+1,e,idx,val);
  tree[p]=min(tree[p*2],tree[p*2+1]);
}
vector<int>v[N];
int main()
{

    //  freopen("test.in","r",stdin);
    // freopen("test.out","w",stdout);
    int n;
    cin>>n;
    for(int i=0;i<n;i++){
        int a;
        scanf("%d",&a);
        int idx=get(1,0,n,a);
        update(1,0,n,idx,a);
        v[idx].pb(a);
    }
    for(int i=0;i<n;i++){
        if(!sz(v[i]))break;
        for(int j=0;j<sz(v[i]);j++)printf("%d ",v[i][j]);
        printf("\n");
    }
  return 0;
}

/*
100% reason to Remember THE NAME
*/
