#include<bits/stdc++.h>

#define ssync ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define F first
#define S second
#define mp make_pair
#define pb push_back

using namespace std;

typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef vector<vs> vvs;
typedef vector<ll> vll;
typedef vector<vll> vvl;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,ll> pll;
const ll MOD = 1e9+7;
const long double PI = 3.14159265;

ll powerWithMod(ll base, ll exponent, ll modulus = LLONG_MAX)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if(exponent % 2 == 1)
			result =(result * base) % modulus;
		exponent >>= 1;
		base =(base * base) % modulus;
	}
	return result;
}

ll modInverse(ll a, ll m = MOD)
{
	return powerWithMod(a, m-2, m);
}

int n, k;
long long int cnt = 0;
vector<vector<int> > adj(50001);

deque<int> operator+ (const deque<int> &a, const deque<int> &b) {	
	deque<int> c;
	int i = 0;
	for (i=0; i<min(a.size(), b.size());i++) {
		c.push_back(a[i] + b[i]);
	}
	while (i < a.size()) {
		c.push_back(a[i]);
		i++;
	}
	while (i < b.size()) {
		c.push_back(b[i]);
		i++;
	}
	return c;
}

deque<int> operator- (const deque<int> &a, const deque<int> &b) {	
	deque<int> c;
	int i = 0;
	for (i=0; i<min(a.size(), b.size());i++) {
		c.push_back(a[i] - b[i]);
	}
	while (i < a.size()) {
		c.push_back(a[i]);
		i++;
	}
	while (i < b.size()) {
		c.push_back(-b[i]);
		i++;
	}
	return c;
}

deque<int> dfs (int u, int p) {
	if (adj[u].size() == 1 && adj[u][0] == p) {
		deque<int> x({1});
		return x;
	} else {
		vector <deque<int> > chld;
		for (auto x : adj[u]) {
			if (x != p) {
				deque<int> temp = dfs(x, u);
				temp.push_front(0);
				chld.push_back(temp);
			}
		}
		deque<int> res = chld[0];
		for (int i=1; i< chld.size();i++) {
			res = res + chld[i];
		}
		res[0] = 1;
		if (res.size() > k) {
			cnt += res[k];
		}
		deque<int> res2(res);
		for (int curr=0; curr<chld.size()-1; curr++) {
		    auto x = chld[curr];
			res = res - x;
			for (int q = 1 ;q < min((int)x.size(), k); q++) {
				int p = k-q;
				if(p < res.size()) {
				    cnt += x[q] * res[p];
				}
				    
				
			}
		}
		if(res2.size() > k+1)
			res2.pop_back();
		return res2;
	}
}

int main()
{
	ssync;
	cin >> n >> k;
	int u, v;
	for (int i=0;i<n-1;i++) {
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs(1, -1);
	cout << cnt << "\n";
	return 0;
}
