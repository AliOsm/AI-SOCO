//Be Name Khoda
//Ahay! Hormat ha hefz she baradare man ... 
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)2e3 + 7;
const int infint = (int)2e9;
const ll inf = (ll)1e18;
int dp[MAXN][MAXN], five[MAXN][MAXN], sec[MAXN][MAXN], dp2[MAXN][MAXN];
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	int x = -1, y = -1;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
			int a;
			cin >> a;
			if(a == 0)
			{
				five[i][j] = 1, sec[i][j] = 1, x = i, y = j;
				continue;
			}
			int fv = 0, sc = 0;
			while(a % 5 == 0)
				a /= 5, fv++;
			while(a % 2 == 0)
				a /= 2, sc++;
			five[i][j] = fv, sec[i][j] = sc;
		}
	//path with minimum sec
	dp[0][0] = sec[0][0];
	for (int i = 1; i < n; i++)
		dp[0][i] = dp[0][i - 1] + sec[0][i];
	for (int i = 1; i < n; i++)
		dp[i][0] = dp[i - 1][0] + sec[i][0];
	
	for (int i = 1; i < n; i++)
		for (int j = 1; j < n; j++)
			dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + sec[i][j];
	//path with minimum five
	dp2[0][0] = five[0][0];
	for (int i = 1; i < n; i++)
		dp2[0][i] = dp2[0][i - 1] + five[0][i];
	for (int i = 1; i < n; i++)
		dp2[i][0] = dp2[i - 1][0] + five[i][0];
	
	for (int i = 1; i < n; i++)
		for (int j = 1; j < n; j++)
			dp2[i][j] = min(dp2[i - 1][j], dp2[i][j - 1]) + five[i][j];
	
	if(min(dp2[n - 1][n - 1], dp[n - 1][n - 1]) > 1 and x != -1)
	{
		cout << 1 << "\n";
		for (int i = 0; i < x; i++)
			cout << "D";
		for (int i = 0; i < y; i++)
			cout << "R";
		
		for (int i = 0; i < n - x - 1; i++)
			cout << "D";
		for (int i = 0; i < n - y - 1; i++)
			cout << "R";
		
		return 0;
	}
	cout << min(dp[n - 1][n - 1], dp2[n - 1][n - 1]) << "\n";
	if(dp[n - 1][n - 1] <= dp2[n - 1][n - 1])
	{
		vector<char> dir;
		int curx = n - 1, cury = n - 1;
		while(curx != 0 or cury != 0)
		{
			if(curx != 0 and dp[curx][cury] == dp[curx - 1][cury] + sec[curx][cury])
			{
				dir.push_back('D');
				curx--;
			}
			else
			{
				dir.push_back('R');
				cury--;
			}
		}
		for (int i = dir.size() - 1; i >= 0; i--)
			cout << dir[i];
		return 0;
	}
	else
	{
		vector<char> dir;
		int curx = n - 1, cury = n - 1;
		while(curx != 0 or cury != 0)
		{
			if(curx != 0 and dp2[curx][cury] == dp2[curx - 1][cury] + five[curx][cury])
			{
				dir.push_back('D');
				curx--;
			}
			else
			{
				dir.push_back('R');
				cury--;
			}
		}
		for (int i = dir.size() - 1; i >= 0; i--)
			cout << dir[i];
		return 0;
	}	
}
