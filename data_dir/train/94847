#include <vector>
#include <iostream>
#include <algorithm>
#include <set>
using namespace std;

#define pii pair<int, int>
const int MX = 200005;
int n, m;
int p[MX], s[MX], matched_socket[MX], b[MX], a[MX];
set<pii> av_computers;

int main() {
	ios_base::sync_with_stdio (false);
	cin>>n>>m;
	int max_socket = 0;
	for (int i=0; i<n; i++) {
		cin>>p[i]; // power of computers
		av_computers.insert (make_pair(p[i], i));
	}
	for (int j=0; j<m; j++) {
		cin>>s[j]; // power of sockets
		max_socket = max (max_socket, s[j]);
	}

	int max_computers = 0;
	int min_adapters = 0;
	int itr = 0;

	while (max_socket > 0 && itr < 40) {
		max_socket = 0;
		for (int j=0; j<m; j++) {
			if (!matched_socket[j]) { // this socket was not matched yet
				// find a matching computer
				auto it = av_computers.lower_bound (make_pair (s[j], 0));
				if (it != av_computers.end()) {
					if (it->first == s[j]) { // match with this computer
						b[it->second] = j+1;
						matched_socket [j] = 1;
						av_computers.erase (make_pair(it->first, it->second));
						max_computers++;
						min_adapters += itr;
						a[j] = itr;
					}
					else s[j] = s[j]/2 + s[j]%2;
				}
				else {
					s[j] = s[j]/2 + s[j]%2;
				}
				max_socket = max (max_socket, s[j]);
			}
		}
		itr++;
	}

	cout<<max_computers<<" "<<min_adapters<<endl;
	for (int i=0; i<m; i++) cout<<a[i]<<" ";
	cout<<endl;
	for (int i=0; i<n; i++) cout<<b[i]<<" ";
	cout<<endl;
	return 0;
}