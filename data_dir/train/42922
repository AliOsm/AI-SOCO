#include <bits/stdc++.h>
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

const int mxN = 150010;

long long res[mxN];
int N,M;
long long D;

struct F {
	int a;
	long long b,t;
	bool operator<(const F & o) const {
		if(t != o.t)
			return t < o.t;
		return a > o.a;
	}
};

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	cin>>N>>M>>D;
	vector<F> fs(M);
	vector<long long> ts(M);
	for(int i = 0;i < M;i++) {
		cin>>fs[i].a>>fs[i].b>>fs[i].t;
		ts[i] = fs[i].t;
	}

	sort(fs.rbegin(),fs.rend());
	auto it = unique(ts.begin(),ts.end());
	ts.erase(it,ts.end());
	reverse(ts.begin(),ts.end());

	long long out = LLONG_MIN;
	for(int i = 0,j = 0;i < (int)ts.size();i++) {
		vector<int> as;
		vector<long long> sum;
		long long all = 0;
		while(j < (int)fs.size() && fs[j].t == ts[i])
			all += fs[j].b,as.push_back(fs[j++].a),sum.push_back((sum.empty()?0:sum.back())+as.back());

		deque<pair<long long,long long> > mono;
		long long l,r;
		if(i) {
			l = -D*(ts[i-1]-ts[i]),r = D*(ts[i-1]-ts[i]);
			for(int k = 1;k <= N && k <= r;k++) {
				while(!mono.empty() && mono.back().first <= res[k])
					mono.pop_back();
				mono.push_back({res[k],k});
			}
		}
		for(long long k = 1,z = 0;k <= N;k++) {
			if(i) {
				l++,r++;
				while(!mono.empty() && mono.front().second < l)
					mono.pop_front();
				if(r <= N) {
					while(!mono.empty() && mono.back().first <= res[r])
						mono.pop_back();
					mono.push_back({res[r],r});
				}
			}

			while(z < (int)as.size() && as[z] <= k)
				z++;

			res[k] = all - (z?k*z-sum[z-1]:0) - (z<(int)as.size()?sum.back()-k*(as.size()-z)-(z?sum[z-1]:0):0);

			if(i) {
				assert(!mono.empty());
				res[k] += mono.front().first;
			}
			if(i + 1 == (int)ts.size())
				out = max(out,res[k]);
		}
	}
	cout<<out<<'\n';
	return 0;
}
