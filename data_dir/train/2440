#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define fi first
#define se second
#define SZ(x) ((ll)(x).size())
using namespace std;
using namespace __gnu_pbds;
using ll = int64_t;
using ld = long double;
using ull = uint64_t;
using pl = pair<ll, ll>;
using vl = vector<ll>;
using vll = vector<vector<ll>>;
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

ll n;
ll a, b;
vll g;
vector<bool> used;
vector<bool> hasOddPath;
vector<bool> hasEvenPath;

bool leaf(ll v) {
  return g[v].size() == 1;
}

ll smallanw = 1;

ll godown(ll v) {
  ll anw = 0;
  used[v] = true;
  ll hasleaf = 0;
  for (auto u: g[v]) {
    if (used[u]) continue;
    if (leaf(u)) {
      hasleaf = 1;
      hasOddPath[v] = true;
    } else {
      anw += godown(u)+1;
      if(hasOddPath[u]) hasEvenPath[v] = true;
      if(hasEvenPath[u]) hasOddPath[v] = true;
    }
  }
  if (hasOddPath[v] && hasEvenPath[v]) smallanw = 3;
  //cerr << "go down " << v << " = " << anw + hasleaf << endl;
  //cerr << "it has odd " << hasOddPath[v] << " | even " << hasEvenPath[v] << endl;
  return anw + hasleaf;
}

int main() {
  ios::sync_with_stdio(0);
  cout.precision(10);

  cin >> n;
  g.resize(n+1);
  hasEvenPath.resize(n+1);
  hasOddPath.resize(n+1);
  used.resize(n+1);

  for (int i = 0; i < n-1; i++) {
    cin >> a >> b;
    g[a].push_back(b);
    g[b].push_back(a);
  }

  ll s = 0;
  for (int i = 1; i <= n; i++) {
    if (!leaf(i)) {
      s = i;
      break;
    }
  }

  //cerr << "we start with " << s << endl;

  ll biganw = godown(s);

  cout << smallanw << ' ' << biganw << endl;

}
