#include<bits/stdc++.h>
#define pb push_back
#define ff first
#define ss second
#define mp make_pair
 
#define deb(x) cout<<#x<<" : "<<x<<endl;
#define deb2(x,y) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<endl;
#define deb3(x,y,z) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<"\t"<<#z<<" : "<<z<<endl;
#define inf 1000000000000000 
 
#define FIO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define endl '\n'
typedef long long ll;
#define ld long double
 

// #include <ext/pb_ds/assoc_container.hpp> 
// #include <ext/pb_ds/tree_policy.hpp> 
// using namespace __gnu_pbds; 
  
// #define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 

 
using namespace std;
 
 
long long modulo(long long base,long long exponent,long long modulus);
long long choose(ll n,ll k);
ll inverse(ll a,ll m);
void build();
void fileio();
ll ncr(ll n,ll r);
 
const int nax=1e6+10;
const int LG=log2(nax)+1;
vector<ll> fact(nax);
vector<ll> invfact(nax);
 
ll mod=1000000007; 


struct monst {
    ll x,y,z;
};

bool comp(monst &a,monst &b)
{
    return a.x<b.x;
}

vector<ll> tree1(4*nax);
vector<ll> lazy(4*nax);


void update(ll node,ll nl,ll nr,ll l,ll r,ll ele,vector<ll> &tree,vector<ll> &lazy)
{
    if(lazy[node]!=0)
    {
        tree[node]+=lazy[node];
        if(nl!=nr)
        {
            lazy[2*node+1]+=lazy[node];
            lazy[2*node+2]+=lazy[node];
        }
        lazy[node]=0;
    }

    if(nl>nr || l>r || nl>r || l>nr)
        return;

    if(l<=nl && nr<=r)
    {
        tree[node]+=ele;

        if(nl!=nr)
        {
            lazy[2*node+1]+=ele;
            lazy[2*node+2]+=ele;
        }
        return;
    }
    ll mid=(nl+nr)/2;
    update(2*node+1,nl,mid,l,r,ele,tree,lazy);
    update(2*node+2,mid+1,nr,l,r,ele,tree,lazy);
    tree[node]=max(tree[2*node+1],tree[2*node+2]);
}

ll querry(ll node,ll nl,ll nr,ll l,ll r,vector<ll> &tree,vector<ll> &lazy)
{
    if(lazy[node]!=0)
    {
        tree[node]+=lazy[node];
        if(nl!=nr)
        {
            lazy[2*node+1]+=lazy[node];
            lazy[2*node+2]+=lazy[node];
        }
        lazy[node]=0;
    }

    if(nl>nr || l>r || nl>r || l>nr)
        return INT_MIN;

    if(l<=nl && nr<=r)
        return tree[node];

    ll mid=(nl+nr)/2;
    ll p1=querry(2*node+1,nl,mid,l,r,tree,lazy);
    ll p2=querry(2*node+2,mid+1,nr,l,r,tree,lazy);
    return max(p1,p2);
}

set< pair<ll,ll> > s;
 

// ll check(ll x)
// {
//     // deb("hii");
//     set< pair<ll,ll> > :: iterator it = s.lower_bound(mp(x,-1));
//     if(it==s.end())
//         return INT_MIN;

//     ll ans = querry(0,0,nax-1,0,x-1);
//     deb(ans);
//     deb(it->ss);
//     // deb("hii");
//     ans-=(it->ss);
//     return ans;
// } 

#define mp make_pair
int32_t main() {
 
    FIO
    //fileio();
    build();

    ll n,m,p;
    cin>>n>>m>>p;

    vector< pair<ll,ll> > a(n);
    for(int i=0;i<n;i++)
        cin>>a[i].ff>>a[i].ss;

    vector< pair<ll,ll> > b(m);
    for(int i=0;i<m;i++)
        cin>>b[i].ff>>b[i].ss;

    vector< monst > c(p);
    for(int i=0;i<p;i++)
        cin>>c[i].x>>c[i].y>>c[i].z;
    
    sort(c.begin(),c.end(),comp);
    sort(a.begin(),a.end());
    sort(b.begin(),b.end());

    vector<ll> suffixmin(m);
    suffixmin[m-1] = b[m-1].ss;
    for(int i=m-2;i>=0;i--)
    {
        suffixmin[i] = min(suffixmin[i+1],b[i].ss);
        // deb(suffixmin[i]);
    }
    // for(int i=0;i<m;i++)
    //     s.insert(mp(b[i].ff,suffixmin[i]) );

    ll last=0;
    for(int i=0;i<m;i++)
    {
        for(int j=last;j<=b[i].ff;j++)
            update(0,0,nax-1,j,j,-suffixmin[i],tree1,lazy);
        last = b[i].ff+1;
    }
    for(int j=last;j<nax;j++)
        update(0,0,nax-1,j,j,INT_MIN,tree1,lazy);

    // deb(tree1[0]);

    ll j=0;
    ll f=INT_MIN;
    ll maxi=0;
    for(int i=0;i<n;i++)
    {
        //add monsters;
        while(j<p && c[j].x<a[i].ff)
        {
            update(0,0,nax-1,c[j].y+1,nax-1,c[j].z,tree1,lazy);
            j++;
        }    
        f = max(f,tree1[0]-a[i].ss);
        // deb(f);
    }
    cout<<f<<endl;





    
    return 0;
}
 
ll ncr(ll n,ll r)
{
    if(r>n || r<0 || n<0)
        return 0;
    ll ans=fact[n];
    ll temp=(invfact[n-r]*invfact[r])%mod;
    ans=(ans*temp)%mod;
    return ans;
}
 
void fileio()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
} 
void build()
{
    fact[0]=1;
    invfact[0]=inverse(1,mod);
    for(ll i=1;i<nax;i++)
    {
        fact[i]=(fact[i-1]*i)%mod;
        invfact[i] = inverse(fact[i],mod);   
    }
}
 
long long modulo(long long base,long long exponent,long long modulus)
{
    if(modulus ==1)
        return 0;
 
    long long result=1;
    base=base % modulus;
    while(exponent>0)
    {
        if(exponent%2==1)
        {
            result=(result*base) % modulus;
 
        }
        exponent=exponent>>1;
        base = (base*base) % modulus;
    }
    return result;
}
 
long long choose(ll n,ll k)
{
    if(k==0)  return 1;
    return (n* choose(n-1,k-1))/k;
}
 
void EE(ll a,ll b,ll &co1,ll &co2)
{
    if(a%b==0)
    {
        co1=0;
        co2=1;
        return;
    }
    EE(b,a%b,co1,co2);
    ll temp=co1;
    co1=co2;
    co2=temp-co2*(a/b);
}
 
ll inverse(ll a,ll m)
{
    ll x,y;
    EE(a,m,x,y);
    if(x<0) x+=m;
    return x;
}