#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int) 1.01e9;
const ld EPS = 1e-9;

void precalc() {
}

const int k = 3;
const int maxn = 25;
int a[maxn][k];
int n;

bool read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < k; ++j) {
      scanf("%d", a[i] + j);
    }
  }
  return 1;
}

struct Triple {
  pair<long long, long long> diff;
  long long a;
  
  Triple() {}
  Triple(long long _a, long long _b, long long _c) {
    diff = mp(_b - _a, _c - _a);
    a = _a;
  }

  void operator += (const Triple &t) {
    diff.first += t.diff.first;
    diff.second += t.diff.second;
    a += t.a;
  }

  inline bool operator < (const Triple &t) const {
    if (diff != t.diff) {
      return diff < t.diff;
    }
    return a > t.a;
  }
};

Triple del[maxn][3];

void gen(int iter, int cnt, Triple res, int id, vector<pair<Triple, int> > &ans) {
  if (iter == cnt) {
    ans.pb(mp(res, id));
    //eprintf("((%lld,%lld, %lld), %d)\n", res.diff.first, res.diff.second, res.a, id);
    return;
  }
  for (int j = 0; j < k; ++j) {
    Triple nres = res;
    nres += del[iter][j];
    int nid = id * k + j;
    gen(iter + 1, cnt, nres, nid, ans);
  }
}

void gen(int shift, int cnt, vector<pair<Triple, int> > &ans) {
  ans.clear();
  for (int i = 0; i < cnt; ++i) {
    int *b = a[i + shift];
    for (int j = 0; j < k; ++j) {
      int tmp = b[j];
      b[j] = 0;
      del[i][j] = Triple(b[0], b[1], b[2]);
      b[j] = tmp;
    }
  }
  gen(0, cnt, Triple(0, 0, 0), 0, ans);
}
vector<pair<Triple, int> > got[2];

void printId(int id, int cnt) {
  vector<int> ans;
  for (int i = 0; i < cnt; ++i) {
    ans.pb(id % k);
    id /= k;
  }
  reverse(ans.begin(), ans.end());
  for (int i = 0; i < sz(ans); ++i) {
    printf(ans[i] == 0 ? "MW\n" : (ans[i] == 1 ? "LW\n" : "LM\n"));
  }
}

void solve() {
  int ns[2] = {n / 2, (n + 1) / 2};
  gen(0, ns[0], got[0]);
  gen(ns[0], ns[1], got[1]);
  for (int i = 0; i < sz(got[0]); ++i) {
    Triple &cur = got[0][i].first;
    cur.diff.first = -cur.diff.first;
    cur.diff.second = -cur.diff.second;
  }
  sort(got[0].begin(), got[0].end());
  sort(got[1].begin(), got[1].end());


  long long res = -(long long) 1e18;
  int id1 = -1, id2 = -1;
  for (int i = 0, j = 0; i < sz(got[0]); ++i) {
    while (j < sz(got[1]) && got[1][j].first.diff < got[0][i].first.diff) {
      ++j;
    }
    if (j < sz(got[1]) && got[1][j].first.diff == got[0][i].first.diff) {
      //eprintf("(%lld %lld  %lld) %d\n", got[0][i].first.diff.first, got[0][i].first.diff.second, got[0][i].first.a, got[0][i].second);
      long long value = got[0][i].first.a + got[1][j].first.a;
      if (res < value) {
        //eprintf("update %lld\n", value);
        res = value;
        id1 = got[0][i].second;
        id2 = got[1][j].second;
      }
    }
  }
  if (id1 == -1) {
    printf("Impossible\n");
  } else {
    printId(id1, ns[0]);
    printId(id2, ns[1]);
  }
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time: %.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
