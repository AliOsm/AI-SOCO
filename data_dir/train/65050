#include <bits/stdc++.h>
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

#define pb push_back
#define mp make_pair
#define fir first
#define sec second
#define ll long long
#define ull unsigned long long

typedef tree<
        int,
        null_type,
        less<int>,
        rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;

ll MOD=1e9+7;
ll mod=998244353;
int INF=1e9+7;

ll binpow (ll a, ll n) {
	if (n == 0)
		return 1;
	if (n % 2 == 1)
		return (binpow (a, n-1) * a) % MOD;
	else {
		int b = binpow (a, n/2)% MOD;
		return (b * b) % MOD;
	}
}

pair<int,ll> rev(pair<ll,int> x)
{
    return mp(x.sec,x.fir);
}

int lis(vector<int> &a)
{
    int n=a.size();
    vector<int> d(n+1,1e9+7);
    d[0]=0;
    for (int i=0;i<n;i++)
    {
        int j=(int)(upper_bound(d.begin(),d.end(),a[i])-d.begin());
        //if (d[j-1]<a[i]&&a[i]<d[j])
        {
            d[j]=a[i];
            //cout<<i;
        }
    }
    for (int i=n;i>=0;i--)
        if (d[i]<1e9+7) return i;
}

bool is_prime(int x)
{
    if (x==2) return 1;
    for (int i=2;i*i<=x;i++)
        if (x%i==0) return 0;
    return 1;
}

ll divider(ll a, ll b)
{
	ll x=mod-2;
	while(x)
	{
		if (x&1)
			a=(a*b)%mod;
		b=(b*b)%mod;
		x>>=1;
	}
	return a;
}

 bool check(vector<int> sa,vector<int> ea,vector<int> sb,vector<int> eb)
 {
     vector<pair<pair<int,int>,pair<int,int>>> x;
     for (int i=0;i<sa.size();i++)
     {
         x.pb(mp(mp(sa[i],1),mp(sb[i],eb[i])));
         x.pb(mp(mp(ea[i]+1,-1),mp(sb[i],eb[i])));
     }
     //return 0;
     sort(x.begin(),x.end());
     multiset<int> s,e;
     //return 0;
     for (int i=0;i<x.size();i++)
     {
         //cout<<x[i].fir.fir<<" "<<x[i].fir.sec<<endl;;
         if (x[i].fir.sec==1)
         {
             if (!s.empty())
             {
                 if (x[i].sec.sec<*s.rbegin()||x[i].sec.fir>*e.begin())
                 {
                     //cout<<*s.rbegin()<<endl;
                     return 0;
                 }
             }
             s.insert(x[i].sec.fir);
             e.insert(x[i].sec.sec);
         }
         else
         {
             //cout<<*s.begin();
             s.erase(s.find(x[i].sec.fir));
             e.erase(e.find(x[i].sec.sec));
         }
     }
     return 1;
 }

int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n;
    cin>>n;
    vector<int> sa,sb,ea,eb;
    for (int i=0;i<n;i++)
    {
        int sa1,ea1,sb1,eb1;
        cin>>sa1>>ea1>>sb1>>eb1;
        sa.pb(sa1); ea.pb(ea1);
        sb.pb(sb1); eb.pb(eb1);
    }
    if (check(sa,ea,sb,eb)&&check(sb,eb,sa,ea)) cout<<"YES";
    else cout<<"NO";
    return 0;
}
/*
0 0 0
0 0 1
0 1 0
1 0 0
*/
//6 19 3 4 4 2 6 7 8
//2 3 4 4 6 6 7 8 19
