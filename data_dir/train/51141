#include<bits/stdc++.h> 

#define ssync ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define F first
#define S second
#define mp make_pair
#define pb push_back
#define iofiles freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);

using namespace std;

typedef long long int ll;
typedef unsigned long long int ull;
typedef long double ld;

const ll MOD = 1e9+7;
const ld PI = 3.14159265;

ll powerWithMod(ll base, ll exponent, ll modulus = LLONG_MAX)
{
    ll result = 1;
    base %= modulus;
    while(exponent > 0)
    {
        if(exponent % 2 == 1)
            result = (result * base) % modulus;
        exponent >>= 1;
        base = (base * base) % modulus;
    }
    return result;
}

ll modInverse(ll a, ll m = MOD)
{
    return powerWithMod(a, m-2, m);
}

template<typename T>
void term(T x)
{
    cout << x << "\n";
    exit(0);
}

int n, a[123];
pair<int, int> st, en;
vector<vector<int>> dis;

int main()
{
    ssync;
    iofiles;
    cin >> n;
    dis.resize(n);
    for(int i = 0; i < n; i++)
    {
        cin >> a[i];
        dis[i].resize(a[i] + 1, -1);
    }
    cin >> st.F >> st.S >> en.F >> en.S;
    st.F--;st.S--;en.F--;en.S--;
    queue<decltype(st)> node;
    dis[st.F][st.S] = 0;
    node.push(st);
    while(dis[en.F][en.S] == -1)
    {
        auto c = node.front();
        pair<int, int> x;
        if(c.F > 0)
        {
            if(a[c.F - 1] >= c.S)
                x = {c.F - 1, c.S};
            else
                x = {c.F - 1, a[c.F - 1]};
            if(dis[x.F][x.S] == -1)
            {
                dis[x.F][x.S] = dis[c.F][c.S] + 1;
                node.push(x);
            }
        }
        if(c.F < n - 1)
        {
            if(a[c.F + 1] >= c.S)
                x = {c.F + 1, c.S};
            else
                x = {c.F + 1, a[c.F + 1]};
            if(dis[x.F][x.S] == -1)
            {
                dis[x.F][x.S] = dis[c.F][c.S] + 1;
                node.push(x);
            }
        }
        if(c.S <= a[c.F])
        {   
            x = {c.F, c.S + 1};
            if(dis[x.F][x.S] == -1)
            {
                dis[x.F][x.S] = dis[c.F][c.S] + 1;
                node.push(x);
            }
        }
        if(c.S > 0)
        {
            x = {c.F, c.S - 1};
            if(dis[x.F][x.S] == -1)
            {
                dis[x.F][x.S] = dis[c.F][c.S] + 1;
                node.push(x);
            }
        }
        node.pop();
    }
    term(dis[en.F][en.S]);
    return 0;
}
