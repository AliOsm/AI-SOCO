/*input
7 1
1 2 3 6 7 4 5
3 2 5 4
3 2 4 6
3 6 7 7
1 1 4 4
2 2 7 6
1 2 6 2
1 2 6 7

4 2
1 3 2 4
4 1 4 4
1 1 2 3
*/
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define int long long
#define N 200005
#define bit(x,y) ((x>>y)&1LL)
#define show(x) cout << (#x) << ": " << x << endl;
#define ii pair<int,int>
ostream& operator << (ostream &os, vector<int>&x) {
	for (int i = 0; i < x.size(); i++) os << x[i] << sp;
	return os;
}
ostream& operator << (ostream &os, pair<int, int> x) {
	cout << x.fi << sp << x.se << sp;
	return os;
}
ostream& operator << (ostream &os, vector<pair<int, int> >&x) {
	for (int i = 0; i < x.size(); i++) os << x[i] << endl;
	return os;
}
struct data {
	int p, l, r, id, type;
	data(int _p, int _l, int _r, int _id, int _type): p(_p), l(_l), r(_r), id(_id), type(_type) {};
};
bool cmp(data x, data y) {
	if (x.p != y.p) return x.p < y.p;
	return x.id < y.id;
}

int n, q;
int in[N];
vector<data> query;
int tree[N];
int partAns[N][10];
int Ans[N];

void update(int i, int val) {
	for (; i <= N - 5; i += i & -i) tree[i] += val;
}

int get(int i) {
	int ret = 0;
	for (; i; i -= i & -i) ret += tree[i];
	return ret;
}

void print(vector<int> a) {
	cout << a << endl;
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cin >> n >> q;
	for (int i = 1; i <= n; i++) {
		int t; cin >> t;
		t = n + 1 - t;
		in[t] = i;
	}
	for (int i = 1; i <= q; i++) {
		int x, y, z, t;
		cin >> x >> y >> z >> t;
		y = n + 1 - y; t = n + 1 - t;
		swap(y, x); swap(z, t);
		swap(x, z);
		// print({x, y, z, t});
		query.push_back(data(x - 1, 1, y - 1, i, 1));
		query.push_back(data(x - 1, y, t, i, 2));
		query.push_back(data(x - 1, t + 1, n, i, 3));
		query.push_back(data(z, 1, y - 1, i, 4));
		query.push_back(data(z, y, t, i, 5));
		query.push_back(data(z, t + 1, n, i, 6));
		query.push_back(data(n, 1, y - 1, i, 7));
		query.push_back(data(n, y, t, i, 8));
		query.push_back(data(n, t + 1, n, i, 9));
	}
	sort(query.begin(), query.end(), cmp);
	int it = 0;
	for (int i = 0; i < query.size(); i++) {
		int p = query[i].p;
		while (it < p) {
			it++; update(in[it], 1);
		}
		int l = query[i].l; int r = query[i].r; int id = query[i].id; int type = query[i].type;
		partAns[id][type] = get(r) - get(l - 1);
	}
	for (int i = 1; i <= q; i++) {
		for (int j = 9; j >= 4; j--) partAns[i][j] -= partAns[i][j - 3];
	}
	// for (int i = 1; i <= 9; i++) cout << partAns[1][i] << sp;
	// cout << endl;
	for (int i = 1; i <= q; i++) {
#define dp partAns[i]
		int ret = dp[9] * (dp[1] + dp[2] + dp[4] + dp[5]) + dp[6] * (dp[1] + dp[2] + dp[4] + dp[5] + dp[7] + dp[8]) + dp[3] * (dp[4] + dp[5] + dp[7] + dp[8]) + dp[8] * (dp[1] + dp[4] + dp[2] + dp[5]) + dp[5] * (dp[4] + dp[1] + dp[2] + dp[7]) + dp[2] * (dp[4] + dp[7]);
		Ans[i] = ret + dp[5] * (dp[5] - 1) / 2;
	}
	for (int i = 1; i <= q; i++) cout << Ans[i] << endl;
}