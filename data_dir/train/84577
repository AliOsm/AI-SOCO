#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"

#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0);}

int const mod = 1e9+7;

inline int safe_mul(const int x, const int y)
{
    return x * 1LL * y % mod;
}

inline void safe_add(int& x, const int y)
{
    x += y;
    if (x >= mod)
        x -= mod;
}

int const maxn = 1000005;
int pow2[maxn];
int cnt[maxn];
int f[maxn];

inline int binpow(int x, int y)
{
    int ans = 1;
    while (y)
    {
        if (y & 1)
            ans = safe_mul(ans, x);
        x = safe_mul(x ,x);
        y >>= 1;
    }
    return ans;
}

int main()
{
//    freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    ios_base::sync_with_stdio(false);

    pow2[0] = 1;
    for(int i = 1; i < maxn; ++i)
    {
        pow2[i] = pow2[i - 1];
        safe_add(pow2[i], pow2[i]);
    }

    int n;
    cin >> n;

    while (n--)
    {
        int cur;
        cin >> cur;
        ++cnt[cur];
    }

    for(int i = 2; i < maxn; ++i)
        for(int j = i + i; j < maxn; j += i)
            cnt[i] += cnt[j];

    int ans = 0;
    for(int i = maxn - 1; i >= 2; --i)
    {
        for(int j = i + i; j < maxn; j += i)
        {
            if (f[j])
                safe_add(f[i], mod - safe_mul(f[j], binpow(j / i, mod - 2)));
        }
        if (cnt[i])
        {
            safe_add(f[i], safe_mul(i, safe_mul(cnt[i], pow2[cnt[i] - 1])));
            safe_add(ans, f[i]);
        }
    }

    cout << ans << endl;
}
