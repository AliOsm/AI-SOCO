#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#define pb(a) push_back(a)
using namespace std;
typedef long long LL;
const int N = 1000005;
struct Node{
    int left , right;
    vector<int>v;
}L[N << 2];
int n , a[N] , b[N] , p[N] , c[N];
#define lson step << 1
#define rson step << 1 | 1
void bulid (int step , int l , int r) {
    L[step].left = l;
    L[step].right = r;
    if (l == r) {
        L[step].v.pb(c[l]);
        return ;
    }
    L[step].v.resize(r - l + 1);
    int m = (l + r) >> 1;
    bulid (lson , l , m);
    bulid (rson , m + 1 , r);
    #define ALL(v) v.begin(),v.end()
    merge (ALL(L[lson].v) , ALL(L[rson].v) , L[step].v.begin());
}
int query (int step , int l , int r , int x , int y) {
    #define ALL(v) v.begin(),v.end()
    if (L[step].left == l && r == L[step].right) {
        return upper_bound (ALL(L[step].v) , y) - lower_bound (ALL(L[step].v) , x);
    }
    int m = (L[step].left + L[step].right) >> 1;
    if (r <= m) return query (lson , l , r , x , y);
    else if (l > m) return query (rson , l , r , x , y);
    else return query (lson , l , m , x , y) + query (rson , m + 1 , r , x , y);
}
int main () {
    #ifndef ONLINE_JUDGE
         freopen("input.txt","r",stdin);
    #endif
    scanf ("%d" , &n);
    for (int i = 0 ; i < n ; i ++) {
        scanf ("%d" , &a[i]);
        a[i] --;
    }
    for (int i = 0 ; i < n ; i ++) {
        scanf ("%d" , &b[i]);
        b[i] --;
        p[b[i]] = i;
    }
    for (int i = 0 ; i < n ; i ++) {
        c[i] = p[a[i]];
    }
    bulid (1 , 0 , n - 1);
    int q , x = 0;
    scanf ("%d" , &q);
    while (q --) {
        #define f(z) ((z - 1 + x) % n)
        int a , b , c , d;
        scanf ("%d %d %d %d" , &a , &b , &c , &d);
        int l1 = min(f(a) , f(b)) , r1 = max(f(a) , f(b));
        int l2 = min(f(c) , f(d)) , r2 = max(f(c) , f(d));
        x = query (1 , l1 , r1 , l2 , r2);
        printf ("%d\n" , x);
        x ++;
    }
    return 0;
}