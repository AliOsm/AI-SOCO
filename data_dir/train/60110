#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long ll;

const int MAXN = 100100;
const ll INFTY = 1LL<<61;
int N;
ll B[MAXN];
ll A[MAXN];
vector<pair<int, ll> > adj[MAXN];
ll dp[MAXN];

bool dfs(int cur)
{
    dp[cur] = B[cur] - A[cur];
    for (int i = 0; i < adj[cur].size(); i++)
    {
        int next = adj[cur][i].first;
        ll w = adj[cur][i].second;
        if (!dfs(next))
            return false;
        if (dp[next] < 0)
        {
            if (dp[next] < -INFTY/w)
                return false;
            dp[cur] += w*dp[next];
            if (dp[cur] < -INFTY)
                return false;
        }
        else
            dp[cur] += dp[next];
    }

    if (cur == 1)
        return dp[cur] >= 0;
    return true;
}

int main()
{
    ios::sync_with_stdio(0);

    cin >> N;
    for (int i = 1; i <= N; i++)
        cin >> B[i];
    for (int i = 1; i <= N; i++)
        cin >> A[i];
    for (int i = 2, x, k; i <= N; i++)
    {
        cin >> x >> k;
        adj[x].push_back(make_pair(i, k));
    }

    if (dfs(1))
        cout << "YES\n";
    else
        cout << "NO\n";

    return 0;
}
