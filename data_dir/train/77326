//~In The Name Of Allah~//
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <iomanip>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <cmath>
#include <string.h>
#include <sstream>
#include <cstring>
#include <fstream>
#include <functional>
#include <cstdio>
#include <stack>
#include <utility> 
#include <set>
#include <list>
#include <queue>
#include <bitset>
#include <time.h>
using namespace std;

#define all(S) S.begin(), S.end()
#define rall(S) S.rbegin(), S.rend()
#define sp(N) setprecision(N)<<fixed
#define siz(S) (int)S.size()
#define rep(i, j) for (ll i = 0; i < (ll)j; i++)
#define Rep(i, j, k) for (ll i = (ll)j; i < (ll)k; i++)
#define srep(S) for (auto it:S)
#define mem(U, V) memset(U, V, sizeof U)
#define getdis(xa, ya, xb, yb) hypot(xa-xb, ya-yb)
#define slope(xa, ya, xb, yb) ((yb-ya)/(xb-xa))

#define Read() freopen("in.txt", "r", stdin)
#define Write() freopen("out.txt", "w", stdout)

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<ll> vll;
typedef vector<string> vs;

const double PI = 2.0 * acos(0.0);
const double EX = 2.7182818284;
const int MOD = 1e9 + 7;
const int oo = 2e9 + 1e8;

int di[] = { 0, 1, 0, -1, 1, 1, -1, -1 };
int dj[] = { 1, 0, -1, 0, 1, -1, -1, 1 };
int dik[] = { -1, -1, 1, 1, -2, -2, 2, 2 };
int djk[] = { 2, -2, 2, -2, 1, -1, 1, -1 };

ll gcd(ll x, ll y) { return !y ? x : gcd(y, x%y); }

ll getInt() {
    ll ret;
    char tmpc;
    bool sign = 0;
    while (tmpc = getchar()) {
        if (tmpc<'0' || tmpc>'9') sign = (tmpc == '-');
        else break;
    }
    ret = tmpc - '0';
    while (tmpc = getchar(), tmpc >= '0' && tmpc <= '9')
        ret = ret * 10 + tmpc - '0';
    if (sign) ret *= -1;
    return ret;
}

bool did[(int)1e5 + 10];

int main() {
    int n, p, ans = 0, l, r;
    l = r = -1;
    string str;
    cin >> n >> p >> str;
    rep(i, n >> 1) {
        if (str[i] != str[n - i - 1])
            did[i] = 1;
        ans += min(abs(str[i] - str[n - i - 1]), 26 - abs(str[i] - str[n - i - 1]));
    }
    if (p > n / 2)
        p = n - p + 1;
    p--;
    rep(i, n >> 1) if (did[i]) {
        if (l == -1) l = r = i;
        else r = i;
    }
    if (l != -1) {
        if (l < p && r < p) ans += (p - l);
        else if (l > p && r > p) ans += (r - p);
        else ans += min(p - l, r - p) * 2 + max(p - l, r - p);
    }
    cout << ans << endl;
    return 0;
}