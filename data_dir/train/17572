#include <bits/stdc++.h>

// pbds
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
// gp_hash_table<int, int> table;

using namespace std;

#define vec vector
#define ALL(x) begin(x), end(x)

typedef unsigned long long ull;
typedef unsigned int ui;
typedef long long ll;
typedef long double ld;
typedef pair< int, int > pii;
typedef pair< long long, long long > pll;

const int inf = 1000 * 1000 * 1000;
const ll inf64 = 1e18;

const int N = 2e5 + 5;

int n;
int a[N];

void swap_bits(int &x, int &y, int i) {
    int xi = (x >> i) & 1;
    int yi = (y >> i) & 1;
    x ^= (xi << i);
    y ^= (yi << i);
    x ^= (yi << i);
    y ^= (xi << i);
}

void is_ind(vector< int > &basis, int v) {

    basis.push_back(v);
    int m = (int)basis.size();
    int n = 31;

    int rk = 0;

    for(int i = 0, j = 0;j < n;j++) {
        int q = i;
        while(q < m && !((1 << j) & basis[q])) q++;
        if(q == m) continue;
        swap(basis[q], basis[i]);
        for(q = i + 1;q < m;q++) {
            if(!((1 << j) & basis[q])) continue;
            basis[q] ^= basis[i];
        }
        rk++;
        i++;
    }
    if(rk < (int)basis.size()) basis.pop_back();
}

int main() {

#ifdef debug
    freopen("input.txt", "r", stdin);
#endif

    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> n;

    for(int i = 1;i <= n;i++) {
        cin >> a[i];
//        scanf("%d", &a[i]);
        a[i] ^= a[i - 1];
//        cout << a[i] << " ";
    }
//    cout << " \n ? \n";

    if(!a[n]) {
//        puts("-1");
        cout << "-1\n";
        return 0;
    }

    vector< int > basis;
    basis.push_back(a[1]);

    for(int i = 2;i <= n;i++) {
        is_ind(basis, a[i]);;
    }

    cout << (int)basis.size() << "\n";

//    for(int x : basis) {
//        cout << x << " ";
//    }

//    cout << "\n";

    return 0;
}
