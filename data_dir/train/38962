#include <bits/stdc++.h>
using namespace std;

const int N = 205;
vector<int> adj[N];
int vis[N], component[N], a[N * N], b[N * N], c[N * N];
int compVal[N], nodeVal[N];
vector<int> top;
int n, m, cc, visid;

inline void add_edge(int a, int b) {
	adj[a].push_back(b);
}

inline int NOT(int a) {
	return a > n ? a - n : a + n;
}

inline void OR(int a, int b) {
	add_edge(NOT(a), b);
	add_edge(NOT(b), a);
}

void dfs(int u, int flag) {
	vis[u] = visid;
	for (int nxt : adj[u]) {
		if (vis[nxt] != visid)
			dfs(nxt, flag);
	}

	if (flag) {
		component[u] = cc;
		if (nodeVal[u] != -1) {
			compVal[cc] = nodeVal[u];
		}
	} else {
		top.push_back(u);
	}
}

int main() {

	memset(compVal, -1, sizeof compVal);
	memset(nodeVal, -1, sizeof nodeVal);
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++) {
		scanf("%d%d%d", &a[i], &b[i], &c[i]);
		if (c[i] == 0) {
			OR(a[i], b[i]);
			OR(NOT(a[i]), NOT(b[i]));
		} else {
			OR(a[i], NOT(b[i]));
			OR(b[i], NOT(a[i]));
		}
	}

	visid++;
	for (int i = 1; i <= n + n; i++) {
		if (vis[i] != visid) {
			dfs(i, 0);
		}
	}

	visid++;
	for (int u : top) {
		if (vis[u] != visid) {
			cc++;
			dfs(u, 1);
			if (compVal[cc] == -1) {
				compVal[cc] = 1;
				nodeVal[u] = 1;
				nodeVal[NOT(u)] = 0;
			}
		}
	}

	vector<int> ans;

	for (int i = 1; i <= n; i++) {
		if (component[i] == component[NOT(i)]) {
			puts("Impossible");
			return 0;
		}

		if (compVal[component[i]]) {
			ans.push_back(i);
		}
	}

	printf("%d\n", ans.size());
	for (int a : ans) {
		printf("%d ", a);
	}
	puts("");

	return 0;
}
