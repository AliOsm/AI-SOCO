/*
author: orthodoxparadox
02-Jan-2019
12:26:21
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define fup(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define fnu for(ll i = 0; i < n; i++)
#define rev(Y) reverse(all(Y))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb emplace_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("O2")
#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef __APPLE__
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...)
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int mod = 1e9 + 7;

int takemod(int a){return ((a%mod)+mod)%mod;}

int fast_exp(int base, int expo) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a){return takemod(fast_exp(takemod(a), mod-2));}

const int N = 5e5 + 10;
int a[N];
int n;

inline int check(int x)
{
	vector<int> occ(n + 1, 0);
	for(int i = 0; i < n; i++)
	{
		occ[a[i]]++;
	}
	occ[x]++;
	int i = 0;
	//check ErdÃ¶s-Gallai
	int lhs = 0, rhs = 0, pf = 0;
	for(int k = 0; k < n + 1; k++)
	{
		int cur = 0;
		if(i == k)
		{
			if(i == n or a[i] < x) {
				cur = x;
			}
			else {
				cur = a[i];
				i++;
			}
		}
		else 
		{
			cur = a[i];
			i++;
		}
		lhs += cur;
		rhs -= min(cur, k);
		occ[cur]--;
		pf += occ[k];
		rhs += n-k-pf;
		if(lhs > rhs + k*(k+1))
		{
			// dbg(i, k);
			if(i == k){
				return 1;
			}
			else return -1;
		}
	}
	return 0;
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef __APPLE__
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	time_t t1, t2;
	t1 = clock();

	cin >> n;
	int sum = 0;
	for(int i = 0; i < n; i++)
	{
		cin >> a[i]; sum += a[i];
	}
	sort(a, a+n, greater<int>());
	int p = sum & 1;
	int s = 0, e = (n-p)/2;
	int low_bound = -1, high_bound = -1;
	// dbg(p);
	while(s <= e)
	{
		int mid = (s + e)/2;
		int x = check(2*mid + p);
		dbg(mid, x);
		if(x == -1)
		{
			//go up
			s = mid + 1;
		}
		else
		{
			e = mid - 1;
			low_bound = mid;
		}
	}
	s = low_bound, e = (n-p)/2;
	while(s <= e)
	{
		int mid = (s + e)/2;
		int x = check(2*mid + p);
		if(x == 1)
		{
			//go down
			e = mid - 1;
		}
		else
		{
			s = mid + 1;
			high_bound = mid;
		}
	}
	dbg(low_bound, high_bound);
	if(low_bound == -1 or high_bound == -1 or low_bound > high_bound)
	{
		cout << -1;
		return 0;
	}
	for(int i = low_bound; i <= high_bound; i++){
		cout << 2*i + p << " ";
	}
	t2 = clock(); cerr << "time taken: " << t2-t1;
	return 0;
}