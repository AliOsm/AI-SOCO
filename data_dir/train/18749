#include <bits/stdc++.h>
using namespace std;

#define N 1000010
int n, a[N], b[N]; 
int l[N], r[N];
// 0 1 digit
// 2 AND
// 3 OR
// 4 XOR 
// 5 NOT
int res;
int ans[N]; 

int DFS(int u)
{
	if (a[u] < 2) return b[u] = a[u];
	if (a[u] == 2) return b[u] = DFS(l[u]) & DFS(r[u]);
	if (a[u] == 3) return b[u] = DFS(l[u]) | DFS(r[u]);
	if (a[u] == 4) return b[u] = DFS(l[u]) ^ DFS(r[u]);
	if (a[u] == 5) return b[u] = !DFS(l[u]);
	return 0;
}

void DFS2(int u, int vis)
{
	if (a[u] < 2) 
	{
		ans[u] = res ^ vis;
		return;
	}	
	else
	{
		if (a[u] == 2)
		{
			if (b[l[u]] == 1 && b[r[u]] == 1)
			{
				DFS2(l[u], vis & 1);
				DFS2(r[u], vis & 1);
			}
			else if (b[l[u]] == 1)
			{
				DFS2(l[u], 0);
				DFS2(r[u], vis & 1);
			}
			else if (b[r[u]] == 1)
			{
				DFS2(l[u], vis & 1);
				DFS2(r[u], 0);
			}
			else
			{
				DFS2(l[u], 0);
				DFS2(r[u], 0);
			}
		}
		else if (a[u] == 3)
		{
			if (b[l[u]] == 0 && b[r[u]] == 0)
			{
				DFS2(l[u], vis & 1);
				DFS2(r[u], vis & 1);
			}	
			else if (b[l[u]] == 0 && b[r[u]] == 1) 
			{
				DFS2(l[u], 0);
				DFS2(r[u], vis & 1);
			}
			else if (b[l[u]] == 1 && b[r[u]] == 0)
			{
				DFS2(l[u], vis & 1);
				DFS2(r[u], 0);
			}
			else
			{
				DFS2(l[u], 0);
				DFS2(r[u], 0);
			}
		}
		else if (a[u] == 4)
		{
			DFS2(l[u], vis & 1);
			DFS2(r[u], vis & 1);
		}
		else
			DFS2(l[u], vis & 1);
	}
}

int main()
{
	while (scanf("%d", &n) != EOF)
	{
		char op[10]; int u, v;
		for (int i = 1; i <= n; ++i)
		{
			scanf("%s", op);
			if (op[0] == 'I')
			{
				scanf("%d", &u);
				a[i] = u;
			}
			else if (op[0] != 'N')
			{
				scanf("%d%d", &u, &v);
				l[i] = u, r[i] = v; 
				if (op[0] == 'A') a[i] = 2;
				else if (op[0] == 'O') a[i] = 3;
				else if (op[0] == 'X') a[i] = 4;
				else if (op[0] == 'N') a[i] = 5;
			}
			else
			{
				scanf("%d", &u);
				l[i] = u;
				a[i] = 5;
			}
		}
		res = DFS(1);
		DFS2(1, 1);
		for (int i = 1; i <= n; ++i)
			if (a[i] < 2) printf("%d", ans[i]);
		puts("");
	}
	return 0;
}
