#include<bits/stdc++.h>
using namespace std;
#define ll long long 
#define bs(x) (bitset<20>(x)).to_string()
#define sep ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

string board[4][99]; // 4 board in the input 
vector<int> str; // select the order of board from str
vector<int> v0(4); // board[i] how many need recolore, if start with 0   010
vector<int> v1(4); // board[i] how many need recolore, if start with 1   101

int n, res = INT_MAX;

void check() {
	
	set <int> s;
	for (auto &it:str)
		s.insert(it);
	if (s.size() != 4)
		return;
	int _0, _1, ans;
	// start with 0
	_0 = v0[str[0]] + v0[str[3]] + v1[str[1]] + v1[str[2]];
	// start with 1
	_1 = v1[str[0]] + v1[str[3]] + v0[str[1]] + v0[str[2]];
	ans = min(_0, _1);
	res = min(res, ans);
	//cout << res << "  ";*/
	/*for (auto &it:str)
		cout << it;
	cout << "\n";*/

}

void dfs() {
	if (str.size() == 4) {
		check();
		return;
	}
	str.push_back(0);
	dfs();
	str.pop_back();

	str.push_back(1);
	dfs();
	str.pop_back();

	str.push_back(2);
	dfs();
	str.pop_back();

	str.push_back(3);
	dfs();
	str.pop_back();
}

int main()
{
	sep;
	cin >> n;
	
	for (int i = 0; i < 4; ++i) {
		for(int j = 0; j < n; ++j) {
			cin >> board[i][j];
		}
	};
	
	for (int i = 0; i < 4; ++i) {
		for(int j = 0; j < n; ++j) {
			for (int k = 0; k < n; ++k) {
				if ((j + k) % 2 == 0 && board[i][j][k] == '1')
					++v0[i];
				if ((j + k) % 2 == 1 && board[i][j][k] == '0')
					++v0[i];

				if ((j + k) % 2 == 0 && board[i][j][k] == '0')
					++v1[i];
				if ((j + k) % 2 == 1 && board[i][j][k] == '1')
					++v1[i];				
			}		
		}
	};

	dfs();
	cout << res << "\n";
	return 0;    
}
