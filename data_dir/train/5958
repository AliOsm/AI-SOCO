#include<bits/stdc++.h>
#define god dimasi5eks
#pragma GCC optimize("O3")
#define fi first
#define se second
#define pb push_back
#define pf push_front

// #define fisier 1

using namespace std;

typedef long long ll;

const int mod = 1000000007;
const double dancila = 3.14159265359; // PI 
const double eps = 1e-9;

int n, m, a, b, c;
int dist[3][200002], p[200002];
ll ps[200002];
vector<int> v[200002];

void bfs(int pos, int stpoint)
{
	deque<int> d;
	dist[pos][stpoint] = 1;
	d.pb(stpoint);
	while(!d.empty())
	{
		int node = d[0];
		d.pop_front();
		for(int i = 0; i < v[node].size(); ++i)
		{
			int nxt = v[node][i];
			if(!dist[pos][nxt])
			{
				dist[pos][nxt] = dist[pos][node] + 1;
				d.pb(nxt);
			}
		}
	}
	for(int i = 1; i <= n; ++i)
		dist[pos][i]--;
}
int main()
{

    #ifdef fisier
        ifstream f("input.in");
        ofstream g("output.out");
    #endif

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

	int t;
	cin >> t;
	for(; t; --t)
	{
		cin >> n >> m >> a >> b >> c;
		for(int i = 1; i <= m; ++i)
			cin >> p[i];
		sort(p+1, p+m+1);
		for(int i = 1; i <= m; ++i)
			ps[i] = ps[i-1] + p[i];
		for(int i = 1; i <= m; ++i)
		{
			int a, b;
			cin >> a >> b;
			v[a].pb(b);
			v[b].pb(a);
		}
		bfs(0, a);
		bfs(1, b);
		bfs(2, c);
		ll ans = (1LL<<60);
		if(dist[0][b] + dist[1][c] <= m)
		{
			ans = 0;
			for(int i = 1; i <= dist[0][b] + dist[1][c]; ++i)
				ans += p[i];
		}
		for(int i = 1; i <= n; ++i)
		{
			if(dist[1][i] + dist[0][i] + dist[2][i] > m)
				continue;
			ll posans = 0;
			int totdis = dist[1][i] + dist[0][i] + dist[2][i];
			int dx = dist[1][i];
			posans += 2 * ps[dx];
			posans += ps[totdis] - ps[dx]; 
			// cout << i << " " << totdis << " " << ds << " " << posans << '\n';
			ans = min(ans, posans);
		}
		cout << ans << '\n';
		for(int i = 0; i <= m; ++i)
			ps[i] = 0;
		for(int i = 0; i <= 2; ++i)
			for(int j = 0; j <= n; ++j)
				dist[i][j] = 0;
		for(int i = 1; i <= n; ++i)
			v[i].clear();
	}
    return 0;
}
