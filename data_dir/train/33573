#include <bits/stdc++.h>
using namespace std ;
const int N = 3e5 + 5 ;
const long long INF = 1e16 ;

vector <int> G[N] , C[N] , g[N] ;

struct edge {
    int u , v ;
    long long w ;
}E[N];

bool cmp (int i , int j) {
    return E[i].w <= E[j].w ;
}


long long dist[N] ;

int par[N] ;

int parent (int u) {
    if (par[u] == u) return u ;
    return par[u] = parent(par[u]) ;
}



int main () {

    //freopen ("in.txt" , "r" , stdin) ;
    int n , m ;
    scanf("%d %d" , &n,&m);
    for (int i = 1 ; i <= m ; i++) {
        scanf("%d %d %lld" , &E[i].u,&E[i].v,&E[i].w) ;
        G[E[i].u].push_back(E[i].v) ;
        G[E[i].v].push_back(E[i].u) ;
        C[E[i].u].push_back(E[i].w) ;
        C[E[i].v].push_back(E[i].w) ;
    }
    int src ; scanf("%d",&src) ;
    for (int i = 1 ; i <= n ; i++) dist[i] = INF ;
    dist[src] = 0 ;
    priority_queue < pair <long long,int> > pq ;
    pq.push({0,src}) ;
    while(pq.size()) {
        int u = pq.top().second ; pq.pop() ;
        for (int i = 0 ; i < G[u].size() ; i++) {
            int v = G[u][i] ;
            long long w = C[u][i] ;
            if (dist[v] > dist[u] + w) {
                dist[v] = dist[u] + w ;
                pq.push({-dist[v],v}) ;
            }
        }
    }

    vector <int> dagEdge ;
    for (int i = 1 ; i <= m ; i++) {
        if (dist[E[i].u] + E[i].w == dist[E[i].v]) {
            g[E[i].v].push_back(i) ;
        }
        else if (dist[E[i].v] + E[i].w == dist[E[i].u]) {
            g[E[i].u].push_back(i) ;
        }
    }
    long long ans = 0 ;
    vector <int> res ;
    for (int i = 1 ; i <= n ; i++) {
        if (i == src) continue ;
        long long w = 1e16 , idx = -1 ;
        for (int j = 0 ; j < g[i].size() ; j++) {
            if (E[g[i][j]].w < w) {
                w = E[g[i][j]].w ;
                idx = g[i][j] ;
            }
        }
        res.push_back(idx) ;
        ans += w ;
    }


    cout << ans << endl ;
    for (auto x : res) {
        printf ("%d " , x) ;
    }
}
