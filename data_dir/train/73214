#include <bits/stdc++.h>
#include <ext/hash_map>

using namespace std;
using namespace __gnu_cxx;

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define REV(i,b,a) for(int i=(a);i>=(b);i--)
#define mp make_pair
#define pb push_back
#define oo (1<<30)
#define sz(v) (int)v.size()
#define all(c) (c).begin(),(c).end()
#define rall(c) (c).rbegin(),(c).rend()
#define mem(s,v) memset(s,v,sizeof(s))
#define ppc(x) __builtin_popcount((x))
#define iter(it,s) for(__typeof(s.begin())it = s.begin();it!=s.end();it++)

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<double> vd;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<pi> vpi;

int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1, 0, 0 };

struct _hash {
  int operator () (const pair <ll, bool> &val) const {
    int res = val.first;
    res *= 10000;
    res += val.second;
    return res;
  }
};

hash_map <pair <ll, bool>, bool, _hash> memo;

bool rec (ll x, bool cur) {
  if (memo.count(mp(x, cur)))
    return memo[mp(x, cur)];
  bool ok1 = 1;
  ll s = sqrt (x);
  for (ll i = 2; i <= s; i ++) {
    if (x % i == 0) {
      ok1 = 0;
      bool r = rec (i, !cur);
      if (r == cur ) 
        return memo[mp(x, cur)] = cur;
      r = rec (x / i, !cur);
      if (r == cur ) 
        return memo[mp(x, cur)] = cur;
    }
  }
  if (ok1)
    return memo[mp(x, cur)] = cur;
  else
    return memo[mp(x, cur)] = !cur;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("test.in", "rt", stdin);
//	freopen("o.txt", "wt", stdout);
#endif
	ios::sync_with_stdio(0);
	ll n;
	cin >> n;
	int res = rec (n, 0) + 1;
	cout << res << endl;
	if (res == 1) {
	  ll s = sqrt (n);
	  for (ll i = 2; i <= s; i ++) {
	    if (n % i == 0) {
	      bool r = rec (i, 1);
	      if (!r) {
	        cout << i << endl;
	        return 0;
	      }
	      r = rec (n / i, 1);
        if (!r) {
          cout << n / i << endl;
          return 0;
        }
	    }
	  }
	  cout << 0 << endl;
	}
	return 0;
}