#pragma comment(linker, "/STACK:167177216")

#include <stdio.h>
#include <stack>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string.h>
#include <string>
#include <memory.h>
#include <vector>
#include <map>
#include <queue>
#include <set>
#include <time.h>
#include <cassert>
#include <cstring>
//#include <unordered_set>

using namespace std;

#define mp make_pair
#define pb push_back
#define pii pair<int, int>
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef unsigned long long uli;

const int INF = 1e9;
const ld eps = 1e-9;
const li MOD = (li)(4e6 + 37);
const li INF64 = (li)(INF) * (li)(INF);

const int ddx[] = {-1, 1, 1, -1};
const int ddy[] = {1, 1, -1, -1};
const int dx[] = {-1, -1, 0, 1, 1, 1, 0, -1};
const int dy[] = {0, 1, 1, 1, 0, -1, -1, -1};
const int dx4[] = {-1, 0, 1, 0};
const int dy4[] = {0, 1, 0, -1};
const int dxh[] = {-1, -1, -1, 1, 1, 1, 1, -1};
const int dyh[] = {1, -1, -1, -1, -1, 1, 1, 1};
const string dirs[] = {"RIGHT", "UP", "LEFT", "DOWN"};

li a[111111], b[111111];
int n, m;

li f(li mid)
{
    li res = 0LL;
    for(int i = 1; i <= n; i++)
        if(a[i] < mid)
            res += mid - a[i];
    for(int i = 1; i <= m; i++)
        if(b[i] > mid)
            res += b[i] - mid;

    return res;
}

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //freopen("errors.txt", "w", stderr);
    //ios_base::sync_with_stdio(false);
    scanf("%d %d", &n, &m);
    forn(i, n)
        scanf("%I64d", &a[i + 1]);
    forn(i, m)
        scanf("%I64d", &b[i + 1]);

    li lf = 0, rg = 10LL * INF;

    while(rg - lf > 3LL)
    {
        li mid1 = lf + (rg - lf) / 3;
        li mid2 = rg - (rg - lf) / 3;
        if(f(mid1) < f(mid2))
            rg = mid2;
        else
            lf = mid1;
    }

    li ans = INF64;
    for(li i = max(0LL, lf - 10); i <= rg + 10; i++)
        ans = min(ans, f(i));

    printf("%I64d\n", ans);
    return 0;
}