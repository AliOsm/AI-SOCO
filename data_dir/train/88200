#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma comment(linker, "/stack:200000000")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;     
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;

template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
}

const ll INF = 1e9 + 7;
const int MAXN = 1e5 + 100;
vector<int> g[MAXN];
ll s[MAXN], mx[MAXN];
int par[MAXN];
ll ans = 0;

void dfs1(int u) {
    if (s[u] != -1) {
        if (par[u] == -1) {
            // do nothing
        }
        else {
            ll prv = s[par[par[u]]];
            if (prv > s[u]) {
                cout << -1;
                exit(0);
            }
            mx[par[u]] = min(mx[par[u]], s[u] - prv);
        }
    }
    for (int to : g[u]) {
        dfs1(to);
    }
}

void dfs2(int u) {
    if (s[u] != -1) {
        if (par[u] == -1) {
            ans += s[u];
        }
        else {
            ans += s[u] - s[par[par[u]]] - mx[par[u]];
        }
    }
    else {
        ans += (mx[u] == INF ? 0 : mx[u]);
    }
    for (int to : g[u]) {
        dfs2(to);
    }
}

signed main() {
    FAST_IO();
    fill(mx, mx + MAXN, INF);
    int n;
    cin >> n;
    par[0] = -1;
    for (int i = 1; i < n; ++i) {
        cin >> par[i];
        par[i]--;
        g[par[i]].push_back(i);
    }
    for (int i = 0; i < n; ++i) {
        cin >> s[i];
    }
    dfs1(0);
    dfs2(0);
    cout << ans;
    return 0;
}