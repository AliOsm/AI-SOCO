
// In the name of God
// Code by: mrMaster

#include <bits/stdc++.h>

using namespace std;

inline int in() {int x; scanf("%d",&x); return x;}
#define debug(x) cerr << #x << '=' << (x) << endl
#define FOR(i,j,k) for(int i=j;i<k;++i)
#define bpc __builtin_popcount
#define blz __builtin_clz
#define btz __builtin_ctz
#define Size(x) ((int)(x).size())
#define endl '\n'
#define boost ios_base :: sync_with_stdio(false) , cin.tie(0) , cout.tie(0)
#define pb push_back
#define X first
#define Y second

typedef long long ll;
typedef long double ld;
typedef pair<int,int>pii;

const int INF = 1e9 + 10;
const ll LINF = 1000ll*1000*1000*1000*1000*1000 + 100;
const int MN = 1e6 + 10;

int n,q,sz;
int arr[MN];
int seg[4*MN];
bool mk[MN];
vector<int>v;

void input()
{
	cin >> q >> n;
	for(int i=0;i<n;++i) cin >> arr[i];
}

void build(int segnum ,int left , int right)
{
	seg[segnum] = right-left+1;
	if(left == right) return;
	int mid = (left+right)/2;
	build(2*segnum , left , mid);
	build(2*segnum+1 , mid+1 , right);
}

int get(int segnum , int left , int right ,int val)
{
	if(left == right) return left;
	int mid = (left+right)/2;
	if(seg[2*segnum] >= val) return get(2*segnum , left , mid , val);
	else return get(2*segnum+1 , mid+1 , right , val-seg[2*segnum]);
}

void upd(int segnum , int left , int right , int place)
{
	seg[segnum]--;
	if(left == right) return;
	int mid = (left+right)/2;
	if(place <= mid) upd(2*segnum , left , mid , place);
	else upd(2*segnum+1 , mid+1 , right , place);
}

void solve()
{
	build(1 , 0 , q-1);
	vector<int>tmp;
	for(int i=0;i<q;++i){
		int tp;
		cin >> tp;
		if(tp == -1){
			int ind = upper_bound(arr , arr+n , sz) - arr;
			sz -= ind;
			tmp.clear();
			for(int i=0;i<ind;++i){
			//	cout << arr[ind] << endl;
				int place = get(1 , 0 , q-1 , arr[i]);
			//	cout << arr[i] << ':' << place<< ' ';
				tmp.pb(place);
			}
			for(int i=0;i<Size(tmp);++i){
				upd(1 , 0 , q-1 , tmp[i]);
				mk[tmp[i]] = true;
			}
			tmp.clear();
		}else ++sz, v.pb(tp);
	}
	if(!sz){
		cout << "Poor stack!\n";
		return;
	}
	for(int i=0;i<Size(v);++i)
		if(!mk[i]) cout << v[i];
	cout << endl;
}

int main()
{
	boost;
	input();
	solve();
	return 0;
}


