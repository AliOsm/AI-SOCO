#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
#include <intrin.h>
using namespace std;
typedef long long ll;
typedef long double ld;

const ll INF = 1000000000000000000LL;
const int MAX_N = 2005;

int n;
ll pX[MAX_N], pY[MAX_N];
ll c[MAX_N];
ll k[MAX_N];
vector<tuple<ll, int, int>> edges;
int p[MAX_N];
int compSz[MAX_N];

int leader(int u)
{
	return p[u] == u ? u : p[u] = leader(p[u]);
}

inline void unite(int u, int v)
{
	if (compSz[u] < compSz[v])
		swap(u, v);
	p[v] = u;
	compSz[u] += compSz[v];
}

int32_t main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> pX[i] >> pY[i];
	for (int i = 0; i < n; i++)
		cin >> c[i];
	for (int i = 0; i < n; i++)
		cin >> k[i];

	for (int i = 0; i <= n; i++)
	{
		p[i] = i;
		compSz[i] = 1;
	}

	edges.reserve(n + n * (n - 1) / 2);
	for (int i = 0; i < n; i++)
		edges.emplace_back(c[i], i, n);
	for (int i = 0; i < n; i++)
		for (int j = i + 1; j < n; j++)
		{
			ll edgeCost = (k[i] + k[j]) * (abs(pX[i] - pX[j]) + abs(pY[i] - pY[j]));
			edges.emplace_back(edgeCost, i, j);
		}
	sort(edges.begin(), edges.end());

	ll result = 0;
	vector<int> stations;
	vector<pair<int, int>> resultEdges;
	for (int i = 0; i < (int)edges.size(); i++)
	{
		ll edgeCost; int u, v;
		tie(edgeCost, u, v) = edges[i];
		int lU = leader(u), lV = leader(v);
		if (lU != lV)
		{
			result += edgeCost;
			if (v == n)
				stations.push_back(u);
			else
				resultEdges.emplace_back(u, v);

			unite(lU, lV);
			if (compSz[leader(lU)] == n + 1)
				break;
		}
	}

	cout << result << '\n';
	cout << stations.size() << '\n';
	for (int x : stations)
		cout << (x + 1) << ' ';
	cout << '\n';
	cout << resultEdges.size() << '\n';
	for (const auto& p : resultEdges)
		cout << (p.first + 1) << ' ' << (p.second + 1) << '\n';
	
	return 0;
}