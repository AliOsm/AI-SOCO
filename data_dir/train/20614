#include <bits/stdc++.h>

#define SZ(x) (((int)x.size()))

using namespace std;

const int maxn = 200*1000+10;
int n, u, v, h[maxn];
bool c[maxn], mark[maxn];
vector<int> tmp[maxn], vec[maxn];

void dfs1(int x, int p)
{
	mark[x] = 1;
	if (h[x] > u)
	{
		u = h[x];
		v = x;
	}
	for (auto w : tmp[x])
	{
		if (!mark[w])
		{
			if (c[w] == c[p])
				dfs1(w, p);
			else
			{
				h[w] = h[p] + 1;
				vec[p].push_back(w);
				vec[w].push_back(p);
				dfs1(w, w);
			}
		}
	}
}

void dfs2(int x)
{
	mark[x] = 1;
	u = max(u, h[x]);
	for (auto w : vec[x])
	{
		if (!mark[w])
		{
			h[w] = h[x] + 1;
			dfs2(w);
		}
	}
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> c[i];
	for (int i = 0; i < n - 1; i++)
	{
		cin >> u >> v;
		u--;
		v--;
		tmp[u].push_back(v);
		tmp[v].push_back(u);
	}
	u = -1;
	dfs1(0, 0);
	h[v] = 0;
	memset(mark, 0, sizeof mark);
	u = -1;
	dfs2(v);
	cout << (u + 1) / 2;
	return 0;
}
