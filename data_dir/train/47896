#include <bits/stdc++.h>
using namespace std;

using ll = long long;
using K = long double;

#define REP(i, n) for (int i = 0; i < (n); ++i)
#define SIZE(a) ((int)(a).size())

const int N = 705;
const int D = 15;

const int mod = 1000*1000*1000 + 7;

void add(int &x, int y) {
	x += y;
	if (x >= mod) x -= mod;
}

int n, f[N][N][2];
string s;

int result = 0;

int pw[N];

int solve(int d) {
	memset(f, 0, sizeof f);
	pw[0] = 1;
	for (int i = 1; i <= n; ++i) {
		pw[i] = (10LL*pw[i-1]) % mod;
	}
	f[0][0][0] = 1;
	REP(i, n) REP(j, n) REP(x, 2) if (f[i][j][x]) {
		REP(dig, 10) {
			if (!x && dig > s[i]-'0') break;
			// cout << dig << endl;
			add(f[i+1][j+(dig>=d)][x|(dig<s[i]-'0')], f[i][j][x]);
		}
	}
	int result = 0;
	for (int j = 1; j <= n; ++j) REP(x, 2) {
		REP(y, j) add(result, 1LL*pw[y]*f[n][j][x]%mod);
	}
	// cout << result << endl;
	return result;
}

int brute() {
	int n = 0;
	for (auto& c : s) {
		n = n*10 + (c-'0');
	}
	int result = 0;
	for (int i = 1; i <= n; ++i) {
		int x = i;
		vector<int> a;
		while (x > 0) {
			a.push_back(x % 10);
			x /=  10;
		}
		sort(a.begin(), a.end());
		int cur = 0;
		for (auto& c : a) {
			cur = cur*10 + c;
		}
		result += cur;
	}
	return result;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	cin >> s;
	n = SIZE(s);

	REP(d, 9) add(result, solve(d+1));

	cout << result << '\n';

	// cout << brute() << endl;

	return 0;
}