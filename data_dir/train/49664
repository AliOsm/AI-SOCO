#include <bits/stdc++.h>
using namespace std;

//.define
//#define FILE_IN_OUT
#define RET(_x)                       return std::cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define sz(_obj)                      static_cast<int>((_obj).size())
#define debug(_x)                     std::cerr << (#_x) << " = " << (_x) << '\n';
#define endl                          "\n"
template<typename Tp>
inline void outarr(Tp _array, const std::size_t _N, const char* _delim = " ") {
    Tp end = std::next(_array, _N);
    for (Tp current = _array; current != end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = int64_t;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
vector<int> factors;

inline void findFactors(int x) {
    int num = 1;
    while (!(x & 1)) {
        x >>= 1;
        num <<= 1;
    }
    if (num > 1) {
        factors.push_back(num);
    }
    for (int i = 3; i * i <= x; i += 2) {
        num = 1;
        while (x % i == 0) {
            num *= i;
            x /= i;
        }
        if (num > 1) {
            factors.push_back(num);
        }
    }
    if (x > 1) {
        factors.push_back(x);
    }
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int l, r, x, y;
    cin >> l >> r >> x >> y;
    if (y % x) {
        RET(0);
    }
    findFactors(y / x);
    int ans = 0;
    for (int mask = 0; mask < (1 << factors.size()); ++mask) {
        int first = x, second = x;
        loop(sz(factors)) {
            if (mask & (1 << i)) {
                first *= factors[i];
            } else {
                second *= factors[i];
            }
        }
        if (l <= first && first <= r &&
            l <= second && second <= r)
        {
            ++ans;
        }
    }
    cout << ans << endl;

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}