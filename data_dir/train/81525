#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b>a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b<a)a = b; }
const int N = 0, M = 0, Z = 1e9 + 7, ms63 = 0x3f3f3f3f;
const int G = 100;
struct MX
{
	int v[G][G];
	void O() { MS(v, 0); }
	void E() { MS(v, 0); for (int i = 0; i<G; i++)v[i][i] = 1; }
	MX operator * (const MX &b) const
	{
		MX c; c.O();
		for (int i = 0; i<G; i++)
		{
			for (int j = 0; j<G; j++)
			{
				for (int k = 0; k<G; k++)
				{
					c.v[i][j] = (c.v[i][j] + (LL)v[i][k] * b.v[k][j]) % Z;
				}
			}
		}
		return c;
	}
	MX operator + (const MX &b) const
	{
		MX c; c.O();
		for (int i = 0; i<G; i++)
		{
			for (int j = 0; j<G; j++)
			{
				c.v[i][j] = (v[i][j] + b.v[i][j]) % Z;
			}
		}
		return c;
	}
	MX operator ^ (LL p) const
	{
		MX y; y.E();
		MX x; MC(x.v, v);
		while (p)
		{
			if (p & 1)y = y*x;
			x = x*x;
			p >>= 1;
		}
		return y;
	}
}a,b,c;
int n;
LL K;
LL v[105];
bool triple(LL x)
{
	int sum = 0;
	while (x)sum += x & 1, x >>= 1;
	return sum % 3 == 0;
}
void DP()
{
	LL f[100][100]; MS(f, 0);
	for (int j = 0; j < n; ++j)f[1][j] = 1;
	LL sum = 0;
	for (int i = 2; i <= K; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			for (int k = 0; k < n; ++k)if (b.v[k][j])
			{
				f[i][j] += f[i - 1][k];
			}
			if (i == K)sum += f[i][j];
		}
	}
	printf("%lld\n", sum);
}
int main()
{
	while (~scanf("%d%lld", &n, &K))
	{
		b.O();
		for (int i = 0; i < n; ++i)scanf("%lld", &v[i]);
		for (int i = 0; i < n; ++i)
		{
			for (int j = 0; j < n; ++j)
			{
				b.v[i][j] = (triple(v[i] ^ v[j]));
			}
		}
		//DP();
		a.O();
		for (int i = 0; i < n; ++i)a.v[0][i] = 1;
		c = a*(b^(K-1));
		LL ans = 0;
		for (int i = 0; i < n; ++i)ans = (ans + c.v[0][i]) % Z;
		printf("%lld\n", ans);
	}
	return 0;
}
/*
【trick&&吐槽】


【题意】
f[i][j]表示当前长度为i，最后一个数字为j，之前都合法的方案数。
那么显然——
f[i][j]+=f[i - 1][k] * ok(k,j)
i的尺度非常之大，于是我们考虑矩阵快速幂。

【类型】


【分析】


【时间复杂度&&优化】


【数据】
5 4
0 0 0 0 0

*/