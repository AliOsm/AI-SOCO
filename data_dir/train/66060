#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
#define YESNO(cond) cout << ((cond) ? "Yes" : "No") << endl;
#define UMAX(left, right) left = max(left, right);
#define UMIN(left, right) left = min(left, right);
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void yes() { cout << "Yes" << endl;}
void no() { cout << "No" << endl;}
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

vector<int> go(const vector<LL> &cntdiv_old, const vector<int> &cnt)
{
    int n = cnt.size();
    vector<int> res = cnt;
    vector<LL> cntdiv(n);
    FOR (i, 1, n) {
        for (int j = i; j < n; j += i) {
            cntdiv[i] += cnt[j];
        }
        cntdiv[i] = cntdiv[i] * cntdiv_old[i];
    }
    vector<LL> realdiv(n);
    FORR (i, n - 1, 0) {
        realdiv[i] = cntdiv[i];
        for (int j = 2 * i; j < n; j += i) {
            realdiv[i] -= realdiv[j];
        }
    }
    FOR (i, 0, n) {
        assert(realdiv[i] >= 0);
        res[i] |= realdiv[i] > 0;
    }
    return res;
}

int main()
{
    int n;
    cin >> n;
    vector<int> v(n);
    GET(v, n);
    int N = 300'013;
    vector<int> cnt(N);
    FOR (i, 0, n) {
        cnt[v[i]] = 1;
    }
    vector<LL> cntdiv(N);
    FOR (i, 1, N) {
        for (int j = i; j < N; j += i) {
            cntdiv[i] += cnt[j];
        }
    }

    FOR (i, 0, 21) {
        if (cnt[1] == 1) {
            cout << i + 1;
            return 0;
        }
        cnt = go(cntdiv, cnt);
    }
    cout << -1;
}

