#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>

using namespace std;

typedef size_t index_t;
typedef vector< index_t > index_vector;

typedef vector< char > bool_vector;

typedef int mask_t;
typedef int digit_t;

#define safe_forin(i,n) for (int (i) = 0, __size = (n); (i) < __size; ++(i))
#define forin(i,n) for (index_t (i) = 0, __size = (n); (i) < __size; ++(i))
#define forstep(i,n,step) for (index_t (i) = 0, __size = (n); (i) < __size; i += (step))
#define all(x) (x).begin(), (x).end()

#define zero_bit(x) ((x) & 1)
#define is_even(x) (zero_bit(x) == 0)
#define is_odd(x) (zero_bit(x) == 1)

#define digit(s,i) (s[i] - '0')

#define space ' '
#define nl '\n'
#define newline cout << nl;
	
int read_int()
{
	int value;
	cin >> value;
	
	return value;
}

string read_string()
{
	string s;
	cin >> s;
	
	return s;
}

template < class T > 
void println(const T & value)
{
	cout << value << nl;
}

template < class T >
void print_vector(const vector< T > & values)
{
	forin(i, values.size())
		cout << values[i] << space;
		
	newline;
}

void print_indexes(const index_vector & indexes)
{
	forin(i, indexes.size())
		cout << indexes[i] + 1 << space;
	
	newline;
}

bool check_index(const index_t index, const size_t size)
{
	return (0 <= index && index < size);
}

bool check_indexes(
	const index_t x, const size_t x_size, 
	const index_t y, const size_t y_size)
{
	return check_index(x, x_size) && check_index(y, y_size);
}

template< int binary_value >
struct binary
{
	static const int decimal_value = 
		(binary_value % 10) 
		+ (binary< binary_value / 10> :: decimal_value << 1);
};

template< >
struct binary< 2 >
{
	static const int decimal_value = 0;
};

#define bin(x) (binary<x> :: decimal_value)

bool get_bit(const mask_t & mask, const index_t bit_index)
{
	return (mask & (1 << bit_index)) != 0;
}

mask_t set_bit(mask_t & mask, const index_t bit_index)
{
	return mask = (mask | (1 << bit_index));
}

typedef long long count_t;

count_t length(int value)
{
	if (value == 0) return 1;
	
	count_t length = 0;
	while (value > 0)
	{
		++length;
		value /= 10;
	}
	
	return length;
}

const int MAX_N = 1000 * 1000 * 1000;
const count_t MAX_LENGTH = length(MAX_N);

int main()
{
	cin.sync_with_stdio(0);
	cin.tie(0);
	
	cout.precision(15);

	count_t length_digit_counts[MAX_LENGTH + 1];
	count_t less_counts[MAX_LENGTH + 1];
	
	length_digit_counts[0] = 0;
	less_counts[0] = 0;
	
	count_t ten_pow = 1;
	forin (i, MAX_LENGTH)
	{
		length_digit_counts[i + 1] = length_digit_counts[i] + (i + 1) * 9 * ten_pow;
		less_counts[i + 1] = ten_pow - 1;
		
		ten_pow *= 10;
	}
	
	int n = read_int();
	count_t n_length = length(n);
	
	count_t ans = length_digit_counts[n_length - 1] + n_length * (n - less_counts[n_length]);
	println(ans);
	
	return 0;
}