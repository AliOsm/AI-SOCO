#include <bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n'
typedef long long ll;

const ll inf = 1e18;

struct Node {
    ll mn = 0;
    int posMn = -1;
};

struct SegmentTree {
    vector<Node> tree;
    int n, size;

    /*implement these*/
    const Node zero = {inf, -1};
    Node combine(const Node &L, const Node &R) {
        Node par;
        if(L.mn < R.mn) {
            par.posMn = L.posMn;
        } else {
            par.posMn = R.posMn;
        }
        par.mn = min(L.mn, R.mn);
        return par;
    }

    SegmentTree(const vector<ll> &arr) : n((int)arr.size()) {
        size = 1;
        while(size < n) size<<=1;
        size<<=1;
        tree.resize(size);
        build(arr, 1, 0, n-1);
    }
    void build(const vector<ll> &arr, int node, int start, int end) {
        if(start == end) {
            tree[node].mn = arr[start];
            tree[node].posMn = start;
        } else {
            int mid = (start+end)/2;
            build(arr, 2*node, start, mid);
            build(arr, 2*node+1, mid+1, end);
            tree[node] = combine(tree[2*node], tree[2*node+1]);
        }
    }
    void update(int pos, ll diff) {update(1, 0, n-1, pos, diff);}
    void update(int node, int start, int end, int pos, ll diff) {
        if(start > end || start > pos || end < pos) return;
        if(start >= pos && end <= pos) {
            tree[node].mn = diff;
            tree[node].posMn = start;
            return;
        }
        int mid = (start + end) / 2;
        update(2*node, start, mid, pos, diff);
        update(2*node+1, mid+1, end, pos, diff);
        tree[node] = combine(tree[2*node], tree[2*node+1]);
    }
    Node query(int l, int r) {return query(1, 0, n-1, l, r);}
    Node query(int node, int start, int end, int l, int r) {
        if(r < start || end < l) return zero;
        if(l <= start && end <= r) return tree[node];
        int mid = (start+end)/2;
        return combine(query(2*node, start, mid, l, r),
                       query(2*node+1, mid+1, end, l, r));
    }
};

const int N = 5e5 + 5;
int arr[N], res[N];
vector<int> Index[N];
vector<pair<int,int>> queries[N];//L, i

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin >> n;
    for(int i = 1; i <= n; ++i) {
        cin >> arr[i];
        Index[arr[i]].push_back(i);
    }
    int q;
    cin >> q;
    for(int i = 0; i < q; ++i) {
        int l,r;
        cin >> l >> r;
        queries[r].push_back({l,i});
    }
    vector<int> temp(n+2,inf);
    SegmentTree st(temp);
    for(int r = 1; r <= n; ++r) {
        const vector<int> &v = Index[arr[r]];
        int pos = (lower_bound(v.begin(), v.end(), r) - v.begin());

        if(pos) {
            st.update(v[pos-1], inf);
        }

        st.update(v[pos], (pos ? v[pos-1] : -1));

        for(auto &p : queries[r]) {
            const int L = p.first;
            const int i = p.second;
            Node curr = st.query(L,r);
            if(curr.mn >= L) {
                //cout << "case1\n";
                res[i] = 0;
            } else {
                //cout << "case2\n";
                //cout << "mn: " << curr.mn << endl;
                //cout << "posMn: " << curr.posMn << endl;
                res[i] = arr[curr.posMn];
            }
        }
    }
    for(int i = 0; i < q; ++i) {
        cout << res[i] << endl;
    }
}
