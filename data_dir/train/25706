#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>

//#include <cstdint>
//#include <cstdlib>
#include <cassert>
//#include <cctype>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-9;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 1 && x <= n && y >= 1 && y <= m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

const int dx8[8] = { -1, -1, 0, +1, +1, +1, 0, -1 };
const int dy8[8] = { 0, +1, +1, +1, 0, -1, -1, -1 };

const int N = int(1e6) + 555;

int n, a[N];
vector<int> g[N];
int degIn[N];
int root = 0;

inline void gen() {
	return;
}

inline bool read() {
	if (scanf("%d", &n) != 1) return false;
	forn(i, n) {
		int p, x;
		assert(scanf("%d %d", &p, &x) == 2);
		if (p != 0) {
			p--;
			g[p].push_back(i);
		}
		else root = i;

		a[i] = x;
	}
	return true;
}

int sum[N];

void dfsSum(int v) {
	sum[v] = a[v];
	forn(i, sz(g[v])) {
		int to = g[v][i];
		dfsSum(to);
		sum[v] += sum[to];
	}
}

int v13[N];
int v23[N];

int dfs(int v, int need, int * vv) {
	vv[v] = -1;
	if (sum[v] == need) vv[v] = v;
	forn(i, sz(g[v])) {
		int to = g[v][i];
		int res = dfs(to, need, vv);
		if (res != -1) vv[v] = res;
	}

	return vv[v];
}

void dfsAns(int v) {
	int v1 = -1, v2 = -1;
	forn(i, sz(g[v])) {
		int to = g[v][i];
		if (v13[to] != -1) {
			if (v1 == -1) v1 = v13[to];
			else if (v2 == -1) v2 = v13[to];
		}

		if (v1 != -1 && v2 != -1) {
			cout << v1 + 1 << ' ' << v2 + 1 << endl;
			exit(0);
		}
	}

	forn(i, sz(g[v])) {
		int to = g[v][i];
		dfsAns(to);
	}
}

int ss;

void dfs2(int v) {
	if (sum[v] == ss && v != root) {
		forn(i, sz(g[v])) {
			int to = g[v][i];
			if (v13[to] != -1) {
				cout << v + 1 << ' ' << v13[to] + 1 << endl;
				exit(0);
			}
		}
	}

	forn(i, sz(g[v])) {
		int to = g[v][i];
		dfs2(to);
	}
}

inline void solve() {
	dfsSum(root);
	int all = 0;
	forn(i, n) all += a[i];
	cerr << all << endl;
	if (all % 3 != 0) {
		puts("-1");
		return;
	}

	int need = all / 3;
	//cerr << all << ' ' << need << endl;
	//forn(i, n) cerr << sum[i] << ' '; cerr << endl;
	dfs(root, need, v13);

	//cerr << "vv == " << endl;
	//forn(i, n) cerr << v13[i] << ' '; cerr << endl;
	//dfs(root, all * 2 / 3, v23);

	dfsAns(root);

	ss = all * 2 / 3;
	dfs2(root);
	puts("-1");
	return;
}

int main() {
#ifdef _DEBUG
	assert(freopen("input.txt", "rt", stdin));
	assert(freopen("output.txt", "wt", stdout));
#endif

	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;

	srand(int(time(NULL)));

	int T = 1;
	//#define MULTITEST
#ifdef MULTITEST
	assert(scanf("%d", &T) == 1);
#endif

	forn(i, T) {
#ifdef _DEBUG
		cerr << "TEST == " << i << endl;
#endif
		assert(read());
		//cout << "Case #" << i + 1 << ": ";
		solve();
		//cerr << "curTime == " << clock() << " ms" << endl;
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif
	return 0;
}