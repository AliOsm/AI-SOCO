#include<bits/stdc++.h>
#define mid ((l + r) >> 1)
#define lc (o << 1)
#define rc (o << 1 | 1)
using namespace std;

const int maxn = 600009;
int T[maxn<<2], lazy[maxn<<2], l[maxn], r[maxn], op[maxn];
int n, Q, cnt, xx[maxn];

int del(int x[], int n) {
int cnt = 1;
for (int i=2; i<=n; i++)
if (x[i] != x[cnt]) x[++cnt] = x[i];
return cnt;
}

void pushdown(int o, int l, int r) {
if (lazy[o] == -1) return;
T[lc] = lazy[o] * (xx[mid+1] - xx[l]); 
lazy[lc] = lazy[o];
T[rc] = lazy[o] * (xx[r+1] - xx[mid+1]); 
lazy[rc] = lazy[o];
lazy[o] = -1;
}

void update(int o, int l, int r, int x, int y, int z) {
if (l == x && y == r) {
T[o] = z * (xx[r+1] - xx[l]);
lazy[o] = z;
return;
}
pushdown(o, l, r);
if (y <= mid) update(lc, l, mid, x, y, z);
else if (mid+1 <= x) update(rc, mid+1, r, x, y, z);
else {
update(lc, l, mid, x, mid, z);
update(rc, mid+1, r, mid+1, y, z);
}
T[o] = T[lc] + T[rc];
}

int main() {
scanf("%d%d", &n, &Q);
for (int i=1; i<=Q; i++) {
scanf("%d%d%d", &l[i], &r[i], &op[i]);
r[i]++; xx[++cnt] = l[i]; xx[++cnt] = r[i];
}
xx[++cnt] = 1; xx[++cnt] = n+1;
sort(xx+1, xx+cnt+1); cnt = del(xx, cnt);
memset(lazy, -1, sizeof lazy);
T[1] = n; lazy[1] = 1;
for (int i=1; i<=Q; i++) {
l[i] = lower_bound(xx+1, xx+cnt+1, l[i]) - xx;
r[i] = lower_bound(xx+1, xx+cnt+1, r[i]) - xx;
update(1, 1, cnt-1, l[i], r[i]-1, op[i]-1);
printf("%d\n", T[1]);
}
return 0;
}
