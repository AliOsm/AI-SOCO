#include <bits/stdc++.h>
#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define F first
#define S second

using namespace std;

typedef pair<int, int> ii;
typedef vector<int> vi;
typedef long long  ll;
typedef vector<ll> vll;


const double pi = acos(-1);
int dx[] = {0 , 0 , 1 , -1 , 1 , 1 , -1 , -1};
int dy[] = {1 ,-1 , 0 , 0 , -1 , 1 ,  1 , -1};
const int N = 2e5 + 5;
bool vis[N];
priority_queue<int , vi , greater<int> > leftR , rightR , leftD , rightD;

int getNextR(){
    int ret;
    if(rightR.empty()){
        ret = leftR.top();
        leftR.pop();
    }
    else{
        ret = rightR.top();
        rightR.pop();
    }
    return ret;
}

int getNextD(){
    int ret;
    if(rightD.empty()){
        ret = leftD.top();
        leftD.pop();
    }
    else{
        ret = rightD.top();
        rightD.pop();
    }
    return ret;
}

int main(){
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
#endif

    int n;
    scanf("%d" , &n);

    string s;
    cin >> s;

    for(int i = 0 ; i < n ; ++i){
        if(s[i] == 'R')rightR.push(i);
        else if(s[i] == 'D')rightD.push(i);
    }

    bool con = false;
    while(true){
        leftD = leftR = rightD = rightR = priority_queue<int , vi , greater<int> >();

        for(int i = 0 ; i < n ; ++i){
            if(s[i] == 'R' && !vis[i])rightR.push(i);
            else if(s[i] == 'D' && !vis[i])rightD.push(i);
        }

        for(int i = 0 ; i < n ; ++i){

            if(!vis[i]){
                if(s[i] == 'R'){
                    if(leftD.empty() && rightD.empty()){
                        con = true;
                        break;
                    }
                    int a = getNextD();
                    vis[a] = true;
                    if(rightR.top() == i && !rightR.empty())rightR.pop();
                    leftR.push(i);
                }
                else {
                    if(leftR.empty() && rightR.empty()){
                        con = true;
                        break;
                    }
                    int a = getNextR();
                    vis[a] = true;
                    if(rightD.top() == i && !rightD.empty())rightD.pop();
                    leftD.push(i);
                }
            }
        }
        if(con)break;
    }

    cout << ((leftR.size() || rightR.size()) ? 'R' : 'D') << '\n' ;

}
