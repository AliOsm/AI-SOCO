#include<bits/stdc++.h>

using namespace std;

const int N = 4007;
const int mod = 998244353;

int n;
char s[N];
int fa[N], sz[N], w[N];

int getRoot(int x) {
    if(x == fa[x]) return x;
    int pre_fa = fa[x];
    fa[x] = getRoot(fa[x]);
    w[x] ^= w[pre_fa];
    return fa[x];
}

bool unite(int u, int v, int a) {
    int x = getRoot(u);
    int y = getRoot(v);
    if(x == y) {
        return !(w[u] ^ w[v] ^ a);
    }
    if(sz[x] < sz[y]) swap(x, y), swap(u, v);
    w[y] = w[u] ^ w[v] ^ a;
    sz[x] += sz[y];
    fa[y] = x;
    return true;
}

int solve(int m) {
    for(int i = 0; i <= n * 2 + 1; i++) {
        fa[i] = i;
        w[i] = 0;
        sz[i] = 1;
    }
    for(int i = 1; i <= n; i++) {
        if(s[i] == '?') continue;
        if(s[i] == '0') {
            if(!unite(i << 1, i << 1 | 1, 0)) return 0;
        }
        else {
            if(!unite(i << 1, i << 1 | 1, 1)) return 0;
        }
    }
    for(int i = 1, j = n; i < j; i++, j--) {
        if(!unite(i << 1, j << 1, 0)) return 0;
    }
    for(int i = m, j = n; i < j; i++, j--) {
        if(!unite(i << 1 | 1, j << 1 | 1, 0)) return 0;
    }
    for(int i = 2; i < m; i++) {
        if(!unite(i - 1 << 1 | 1, i << 1 | 1, 0)) return 0;
    }
    if(!unite(m - 1 << 1 | 1, m << 1 | 1, 1)) return 0;
    for(int i = 1; i < m; i++) {
        unite(i << 1 | 1, 0, 0);
    }
    unite(1 << 1, 1, 0);
    unite(m << 1 | 1, 1, 0);
    int cnt = 0;
    for(int i = 2; i <= n * 2 + 1; i++) {
        if(getRoot(i) != i) continue;
        if(getRoot(i) == getRoot(0)) continue;
        if(getRoot(i) == getRoot(1)) continue;
        cnt++;
    }
    int ans = 1;
    for(int i = 1; i <= cnt; i++) {
        ans = 1LL * ans * 2 % mod;
    }
    return ans;
}

int main() {
    scanf("%s", s + 1);
    n = strlen(s + 1);
    int ans = 0;
    for(int i = 2; i <= n; i++) {
        ans = (ans + solve(i)) % mod;
    }
    printf("%d\n", ans);
    return 0;
}

/*
*/
