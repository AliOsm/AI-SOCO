# include <iostream>
# include <sstream>
# include <cstdio>
# include <cstdlib>
# include <algorithm>
# include <string>
# include <cstring>
# include <cmath>
# include <stack>
# include <queue>
# include <vector>
# include <list>
# include <map>
# include <set>
# include <deque>
# include <iterator>
# include <functional>
# include <bitset>
# include <climits>
# include <ctime>
#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define odd(x) (x&1)
typedef long long ll;
typedef long double ld;
const ll oo = /*2 * 1000 * 1000 * 1000*/0x3f3f3f3f;
const int _cnt = 1000 * 1000;
const int _p = 1000 * 1000 * 1000 + 7;
//const int _p = 1007;
ll o(ll x) { return x%_p; }
int gcd(int a, int b) { return b ? gcd(b, a%b) : a; }
//ll gcd(ll a, ll b) { return b ? gcd(b, a%b) : a; }
int lcm(int a, int b) { return a / gcd(a, b)*b; }
using namespace std;

void file_put() {
    freopen("filename.in", "r", stdin);
    freopen("filename.out", "w", stdout);
}

int n,m,d[200005],cnt=0;
vector <int> V[200005];
ll ans=0;
bool t=false;
int v[200005],x,y,Y[2];

void dfs(int k,int step){
    v[k]=step;
    ans+=Y[step&1];
    Y[step&1]++;
    for (int i=0; i<V[k].size(); i++) {
        if (v[V[k][i]]){
            t|=!odd(step-v[V[k][i]]);
            continue;
        }
        dfs(V[k][i],step+1);
    }
}

bool check(){
    for (int i=1; i<=n; i++)
        if (d[i]>=2)
            return true;
    return false;
}

int main() {
    //file_put();

    scanf("%d%d",&n,&m);
    if (m==0) return 0*printf("%d %I64d\n",3,(ll)n*(n-1)*(n-2)/6);
    for (int i=1; i<=m; i++){
        scanf("%d%d",&x,&y);
        d[x]++;
        d[y]++;
        V[x].push_back(y);
        V[y].push_back(x);
    }
    for (int i=1; i<=n; i++) {
        if (v[i]) continue;
        Y[0]=Y[1]=0;
        dfs(i,1);
    }
    if (t) return 0*printf("%d %d\n",0,1);
    if (!check()) return 0*printf("%d %I64d\n",2,(ll)m*(n-2));
    printf("%d %I64d\n",1,ans);

    return 0;
}
