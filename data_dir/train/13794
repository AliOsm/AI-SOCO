#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pi;
typedef pair<ll, ll> pl;
typedef vector<pi> vpi;
typedef vector<pl> vpl;

#define read freopen("in.c", "r", stdin)
#define write freopen("out.c", "w", stdout)
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define ff first
#define ss second
#define left(x) ((x) << 1)
#define right(x) (((x) << 1) + 1)
#define bit(x) (1LL << (x))
#define SZ(a) (ll)((a).size())
#define pb push_back
#define pp pop_back
#define eps 1e-15
#define inf (1000000000)
#define infl (1000000000000000000ll)
#define cs(p) printf("Case %d:", (p)++)
#define nl puts("")
#define sp printf(" ")
#define out(a) printf("%lld", (ll)(a))
#define SET(a) memset((a), -1, sizeof(a))
#define CLR(a) memset((a), 0, sizeof(a))
#define dbg(x) cout << #x << " = " << x << endl

ll bgm(ll a, ll b, ll m) {
    a %= m;
    ll rem = 1;
    while(b) {
        if(b&1)
            rem = (rem * a) % m;
        a = (a * a)%m;
        b >>= 1;
    }
    return rem;
}

ll inv(ll a, ll mod) {
    return bgm(a, mod - 2, mod);
}

ll in() {
    ll a;
    assert(scanf("%lld", &a) != EOF);
    return a;
}

double dl() {
    double a;
    assert(scanf("%lf", &a) != EOF);
    return a;
}

const int MAX = 300005;
const int LEN = 13;
const ll MOD = 1000000007;

double ttm;

int n, m;
int l, r, x;

int lazy[MAX * 4];
int ara[MAX];

void prop(int i, int l, int r) {
    if(l == r) {
        if(ara[l] == 0)
            ara[l] = lazy[i];
        if(ara[l] == l)
            ara[l] = 0;
    }
    else {
        if(lazy[left(i)] == 0)
            lazy[left(i)] = lazy[i];

        if(lazy[right(i)] == 0)
            lazy[right(i)] = lazy[i];
    }

    lazy[i] = 0;
}

void update(int i, int l, int r, int a, int b, int x) {
    if(a > b)
        return ;

    if(lazy[i] != 0)
        prop(i, l, r);

    if(a > r or l > b)
        return ;

    if(a <= l and r <= b) {
        lazy[i] = x;
        prop(i, l, r);
        return ;
    }

    int mid = (l + r)/2;

    update(left(i), l, mid, a, b, x);
    update(right(i), mid + 1, r, a, b, x);
}

int get(int i, int l, int r, int a) {
    if(lazy[i] != 0)
        prop(i, l, r);

    if(a < l or a > r)
        return 0;
    if(l == r) {
        return ara[l];
    }

    int mid = (l + r)/2;

    return get(left(i), l, mid, a) + get(right(i), mid + 1, r, a);
}

int main() {
    #ifndef ONLINE_JUDGE
    read, write;
    ttm = clock();
    #endif

    n = in(), m = in();
    for(int i = 0; i < m; i++) {
        l = in(), r = in(), x = in();
        update(1, 1, n, l, x - 1, x);
        update(1, 1, n, x + 1, r, x);
    }
    
    for(int i = 1; i <= n; i++) {
        x = get(1, 1, n, i);
        if(x == i)
            x = 0;
        out(x), sp;
    }
    nl;

    #ifndef ONLINE_JUDGE
    printf("Runtime = %lf seconds\n", (clock() - ttm)/1000.0);
    #endif

    return 0;
}