#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()

typedef tree<pair<ll,ll> ,null_type,less<pair<ll,ll> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth smallest: " << *A.find_by_order(k-1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

const ll MAXN = 300005, NINF = -1e18;

ll n, w[MAXN], dp[MAXN], visited[MAXN], ans = 0;
vector<pair<ll,ll> >adj[MAXN];
pair<ll,ll> values[MAXN];

void dfs(ll node, ll parent)
{
	visited[node] = 1;
	for(auto it:adj[node])
	{
		if(!visited[it.second])
			dfs(it.second, node);
	}
	vector<ll>kl;
	for(auto it:adj[node])
	{
		if(it.second != parent)
		{
			kl.pb(values[it.second].first - it.first + w[node]);
		}
	}
	if(sz(kl) == 0)
	{
		values[node] = mp(w[node], NINF);
		return;
	}
	sort(kl.begin(), kl.end(), greater<ll>());
	if(sz(kl) == 1)
	{
		if(kl[0] > w[node])
		{
			values[node] = mp(kl[0], w[node]);
		}
		else
		{
			values[node] = mp(w[node], max(0ll, kl[0]));
		}
		return;
	}
	if(sz(kl) > 1)
	{
		if(kl[0] < w[node])
		{
			values[node] = mp(w[node], max(0ll, kl[0]));
		}
		else
		{
			values[node] = mp(kl[0], max(w[node], kl[1]));
		}
	}
	kl.clear();
}

int main()
{
	std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;
    for(int i=0;i<n;i++) cin >> w[i], ans = max(ans, w[i]);
    for(int i=0;i<n-1;i++)
    {
    	ll u, v, c;
    	cin >> u >> v >> c;
    	adj[u-1].pb(mp(c, v-1));
    	adj[v-1].pb(mp(c, u-1));
    }	
    dfs(0, -1);
    for(int i=0;i<n;i++)
    {
    	ans = max(ans, values[i].first + values[i].second - w[i]);
    }	
    cout << ans << endl;
    return 0;
}  