#include <bits/stdc++.h>
using namespace std;
const int N = 500 + 10;
int n, m, k, pre[N][N], sum, dp[N][N], cnt[N];
string s[N];
pair<int, pair<int, int> > mx;
int main() {
	ios_base::sync_with_stdio (false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> k;
	memset(pre, 1, sizeof(pre));
//	cout << pre[0][0] << endl;
	vector<int> v;
	for (int i = 0; i < n; i++) {
		cin >> s[i];
		for (int j = 0; j < m; j++) {
			if (s[i][j] == '1')
				v.push_back(j);
		}
		sum += v.size(), cnt[i + 1] += v.size();
		for (int j = 1; j <= v.size(); j++)
			for (int k = 0; k + j - 1 < v.size(); k++)
				pre[i + 1][(int) v.size() - j] = min(pre[i + 1][(int) v.size() - j], v[k + j - 1] - v[k] + 1);
		pre[i + 1][(int) v.size()] = 0;
		v.clear();
	}
/*	for (int i = 1; i <= n; i++) {
		cout << "i = " << i << " : " << cnt[i] << " : ";
		for (int j = 0; j <= cnt[i]; j++)
			cout << pre[i][j] << " ";
		cout << endl;
	}
	cout << endl;*/
	if (k >= sum) {
		cout << 0;
		return 0;
	}
	memset(dp, 1, sizeof(dp));
	for (int i = 0; i < m; i++)
		dp[0][i] = 0;
	for (int i = 1; i <= n; i++) {
		for (int j = 0; j <= k; j++) {
			for (int kk = 0; kk <= min(cnt[i], j); kk++) {
				dp[i][j] = min(dp[i][j], dp[i - 1][j - kk] + pre[i][kk]);
			}
//			cout << "i = " << i << " j = " << j << " : " << dp[i][j] << endl;
		}
	}
	cout << dp[n][k];
	return 0;
}
