#include<algorithm>
#include<iostream>
#include<cstring>
#include<stdio.h>
#include<math.h>
#include<cstring>
#include<cstdio>
#include<vector>
#include<bitset>
#include<string>
#include<cmath>
#include<queue>
#include<tuple>
#include<stack>
#include<map>
#include<set>

#define tp tuple<int , int, int>
#define pii pair<int, int>
#define mt make_tuple
#define mk make_pair
#define pb push_back

#define MOD 1000000007
#define INF 10000000
#define MAX 500005

#define white 0
#define grey 1
#define black 2

typedef long double ld;
typedef long long ll;

const long double eps = 1e-13;
const long double pi = 3.141;

using namespace std;
char temp[MAX];
int ar[] = {0, 0, -1, 1, 1, 1, -1, -1};
int ac[] = {-1, 1, 0, 0, 1, -1, -1, 1};

struct Node{
    int ptr[2] = {0} , cnt = 0 , par;
};

vector <Node> Trie;

void add(long long x){
    int cur = 0;
    for(int i=63; i>=0; i--){
        bool b=x & 1LL << i;
        if(!Trie[cur].ptr[b]){
            Trie[cur].ptr[b] = Trie.size();
            Trie.pb(Node());
        }
        ll pcur = cur;
        cur = Trie[cur].ptr[b];
        Trie[cur].par = pcur;
    }
    Trie[cur] .cnt++;
}

long long query(long long x){
    ll cur = 0; long long res = 0;
    for(int i=63; i>=0; i--){
        bool b = x & 1LL << i;
        if(Trie[cur].ptr[!b] ){
            res += 1LL << i;
            b = !b;
        }
        cur = Trie[cur].ptr[b];
    }
    return res;
}

int main() {
#ifndef ONLINE_JUDGE
freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
#endif // ONLINE_JUDGE
ios_base::sync_with_stdio(false);

    Trie.pb(Node());
    int n; cin >> n;
    vector<ll> ve;

    ll sum = 0;
    for(int i=0; i<n; i++) {
        ll x; cin >> x;
        ve.pb(x);
        sum ^= x;
    }

    ll mx = 0, res = 0;
    add(0);

    for(auto x : ve) {
        res ^= x;
        add(res);
        mx = max(mx, query(res ^ sum));
    }

    cout << mx << "\n";

    return 0;
}













