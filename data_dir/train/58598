#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>
#include <time.h>
#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <cassert>
#include <climits>
#define sz(x) int((x).size())
#define FOR(i,a,b) for(ll(i) = (a); (i) <= (b); ++(i))
#define ROF(i,a,b) for(ll(i) = (a); (i) >= (b); --(i))
#define rep(i,n) for (int(i) = 0; (i) < (n); ++(i))
#define fe(i,a) for (ll(i) = 0; (i) < int((a).size()); ++(i))
#define C(a) memset((a),0,sizeof(a))
#define pb push_back
#define ppb pop_back
#define all(c) (c).begin(), (c).end()
#define sqr(a) (a)*(a)
#define mp(a,b) make_pair((a), (b))
#define X first
#define Y second
#define file freopen("input.txt","r",stdin)
#define file2 freopen("output.txt", "w",stdout)
using namespace std;
typedef vector<int> vint;
typedef long long ll;
typedef pair<int, int> pii;
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <string>
#include <vector>
#include <climits>
#include <cassert>
#define y1 vamdlsfmvldfm
using namespace std;
#define inf 1e9
const int mod = 1000000007;
const int INF = 1000000000;
const int N = 100005;
int a[26];
string s;
int n;
int eq(int l, int r){
    if(r > n) return 1;
    else{
        return s[l - 1] == s[r - 1];
    }
}
int main()
{
    cin >> s;
    n = s.size();
    int k;
    cin >> k;
    int ans = 0;
    for(int l = 1; l <= n + k; ++l){
        for(int r = l; r <= n + k; ++r){
            if(((r - l + 1) % 2) == 0){
                int flag = 0;
                for(int q = l; q < l + (r - l + 1) / 2; ++q)
                    if(eq(q, q + (r - l + 1) / 2) == 0) flag = 1;
                if(!flag) ans = max(ans, r - l + 1);
            }
        }
    }
    cout << ans << endl;
    return 0;
}