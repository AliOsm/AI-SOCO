#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 1;
const ll N = 2e5 + 1;
ll n, sum, cur;

struct Dsu {
    ll par[N];
    ll cnt[N];
} dsu;

struct Edge {
    ll u, v, w, i;
};

vec <Edge> edge;
vec <ll> pos;
vec <ll> leaf;

struct Graph {
    ll key[N];
    ll par[N];
    ll lef[N];
    ll rig[N];
    vec <ll> adj[N];
} graph;

ll root(ll u) {
    return (dsu.par[u] == u? u: dsu.par[u] = root(dsu.par[u]));
}

void unite(ll u, ll v) {
    u = root(u);
    v = root(v);
    if(dsu.cnt[u] < dsu.cnt[v]) {
        swap(u, v);
    }
    dsu.cnt[u] += dsu.cnt[v];
    dsu.par[v] = u;
}

void dfs(ll u) {
    bool flag = 0;
    graph.lef[u] = cur;
    for(ll v: graph.adj[u]) {
        if(graph.par[u] == v) {
            continue;
        }
        graph.par[v] = u;
        flag = 1;
        dfs(v);
    }
    if(!flag) {
        leaf.pb(u);
        cur++;
    }
    graph.rig[u] = cur;
    edge.pb({graph.lef[u], graph.rig[u], graph.key[u], u});
}

void input() {
    cin >> n;
    leaf.pb(0), cur++;
    for(ll i = 1; i <= n; ++i) {
        cin >> graph.key[i];
        dsu.cnt[i] = 1;
        dsu.par[i] = i;
    }
    for(ll i = 1; i < n; ++i) {
        ll u; cin >> u;
        ll v; cin >> v;
        graph.adj[u].pb(v);
        graph.adj[v].pb(u);
    }
}

void solve() {
    dfs(1);
    sort(all(edge), [](Edge x, Edge y) {
        return x.w < y.w;
    });
    for(ll i = 0; i < len(edge); ) {
        ll j = i;
        while(j < len(edge) && edge[i].w == edge[j].w) {
            ll u = edge[j].u;
            ll v = edge[j].v;
            if(root(u) != root(v)) {
                pos.pb(edge[j].i);
            }
            j++;
        }
        while(i < j) {
            ll u = edge[i].u;
            ll v = edge[i].v;
            if(root(u) != root(v)) {
                unite(u, v);
                sum += edge[i].w;
            }
            i++;
        }
    }
    cout << sum << " " << len(pos) << "\n";
    sort(all(pos));
    for(ll e: pos) {
        cout << e << " ";
    }
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
