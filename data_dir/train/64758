#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define ll long long
#define maxn 300005
#define fr(i,j,k) for(int i=j;i<k;i++)
#define f(n) fr(i,0,n)
#define f1(n) fr(i,1,n+1)
#define ms(i) memset(i,0,sizeof(i));
#define ms1(i) memset(i,-1,sizeof(i));
#define bg begin()
#define ed end()
#define pii pair<int,int>
const ll mod = 1e9+7;
int gl[maxn];
struct seg
{
	int v;
}tree[maxn << 2];
void pushup(int idx){
	tree[idx].v = min(tree[idx<<1].v,tree[idx<<1|1].v);
}
void build(int idx,int l,int r){
	if(l==r){
		tree[idx].v = gl[l];
		return;
	}
	int mid = (l+r) >> 1;
	build(idx << 1 , l , mid);
	build(idx << 1 | 1, mid+1 ,r);
	pushup(idx);
}
int query(int idx,int l,int r,int ql,int qr){
	if(ql <= l && qr >= r){
		return tree[idx].v;
	}
	int mid = (l+r) >> 1;
	int ret = maxn;
	if(ql <= mid){
		ret = min(ret,query(idx<<1,l,mid,ql,qr));
	}
	if(qr > mid){
		ret = min(ret,query(idx<<1|1,mid+1,r,ql,qr));
	}
	return ret;
}
int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n, m, q;
	while(cin >> n >> m >> q){
		int cont[n+5] = {};
		int cont2[m+5] = {};
		int nxt[n+5] = {};
		int jp[m+5][25] = {};
		
		set<int>st[n+5] = {};
		f1(n){
			cin >> cont[i];
		}
		f1(n-1){
			nxt[cont[i]] = cont[i+1];
		}
		nxt[cont[n]] = cont[1];
		f1(m){
			cin >> cont2[i];
			st[cont2[i]].insert(i);
		}
		f1(n)st[i].insert(m+1);
		f1(m){
			int nt = nxt[cont2[i]];
			jp[i][0] = *(st[nt].lower_bound(i));
		}
		jp[m+1][0] = m+1;
		for(int i=1;i<=20;i++){
			for(int j=1;j<=m+1;j++){
				jp[j][i] = jp[jp[j][i-1]][i-1];
			}
		}
		for(int i=1;i<=m;i++){
			int now = i;
			int nd = n-1;
			for(int j=20;j>=0;j--){
				if(nd >= 1<<j ){
					now = jp[now][j];
					nd -= 1<<j;
				}
			}
			gl[i] = now;
		}
		build(1,1,m);
		while(q--){
			int l,r;
			cin >> l >> r;
			int ret = query(1,1,m,l,r);
			if(ret <= r){
				cout<<1;
			}
			else{
				cout<<0;
			}
		}
		cout << endl;
	}
}