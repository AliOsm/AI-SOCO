/*bismillah ->                                                                                                         << Suirkhanov Meyirlan >>
  GL HF


                                                                                                                      42

    bless my code =)
                                                                                                            NEVER FOLLOW YOUR RULES :D HAHAHAHA
*/


///scanf ("%d%d", &x, &y);
///printf("%d", &a)

#include <bits/stdc++.h>

#define fast ios_base::sync_with_stdio();   cin.tie(0);   cout.tie(0);
#define randoperation srand(time(0));
#define pii pair < int , int >
#define pll pair < ll, ll >
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define fast ios_base::sync_with_stdio();   cin.tie(0);   cout.tie(0);
#define randoperation srand(time(0));
#define eb emplace_back

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const ll N = 2 * 1e5 + 7;
const ld pi = 3.14159265359;
const int INF = 1e20 + 7;
const double eps = 1e-9;

const int xi[4] = {-1, 0, +1, 0};
const int yj[4] = {0, +1, 0, -1};
const int xxi[4] = {+1, 0, -1, 0};
const int yyj[4] = {0, -1, 0, +1};

int n, a[N], k, ans[N];

int main(){

  //freopen("bridge.in", "r", stdin);
  //freopen("bridge.out", "w", stdout);

  fast
  randoperation;

  ///           ||
  ///start here \/

  cin >> n >> k;

  for(int i = 1; i <= n; i++){
    cin >> a[i];
  }

  if(k == 2){

    ans[n] = a[n];

    for(int i = n - 1; i >= 1; i--){
      ans[i] = min(a[i], ans[i + 1]);
    }

    int prmn = a[1];
    int res = max(prmn, ans[2]);

    for(int i = 1; i <= n - 1; i++){
      prmn = min(prmn, a[i]);
      res = max(res, max(ans[i + 1], prmn));
    }

    cout << res;
    return 0;
  }

  if(k == 1){
    cout << *min_element(a + 1, a + 1 + n);
    return 0;
  }
  else{
    cout << *max_element(a + 1, a + 1 + n);
    return 0;
  }
}
