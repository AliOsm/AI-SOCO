#include <bits/stdc++.h>
  
using namespace std;
  
template<class T> void ckmin(T &a, T b) { a = min(a, b); }
template<class T> void ckmax(T &a, T b) { a = max(a, b); }
  
#define pb push_back
#define mp make_pair
#define cotu cout
#define itn int
#define Red ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define F first
#define S second
#define sz(x) (int)x.size()
#define all(x) (x).begin(), (x).end()
#define rep(i, n) for(int i = 0; i < n; ++i)
#define repr(i,n) for(int i = n - 1; i >= 0; --i)
#define Rep(i, a, n) for(int i = (a); i <=(n); ++i)
#define repst(i, n) for(auto it = n.begin(); it != n.end(); ++it)
#define Repr(i, a, n) for(int i = (n); i >= (a); --i)
  
#define ordered_set tree<int , null_type,less<int >, rb_tree_tag,tree_order_statistics_node_update> 
  
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
  
const int inf = int(1e9);
const int mod = inf + 7;
const int N = 1e6 + 555; // TL MB
const double PI = acos(-1.0);
 
void mul(ll &x, ll y){
	x *= y;
	if(x >= mod) x %= mod;
}
 
void add(ll &x, ll y){
	x += y;
	if(x >= mod) x -= mod;
	if(x < 0) x += mod;
}
ll bp(ll a, ll n){
	ll r = 1;
	while(n){
		if(n & 1) mul(r, a);
		mul(a, a);
		n >>= 1;
	}
	return r;
}
pii p[1001][1001];
void invalid(){
	cout << "INVALID";
	exit(0);
}
int used[1001][1001];
int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0}; 
void solve()
{
	int n;
	cin >> n;
	char c[n][n];
	for(int i = 0; i < n; ++i){
		for(int j = 0; j < n; ++j){
			cin >> p[i][j].F >> p[i][j].S;
		}
	}
	for(int i = 0; i < n; ++i){
		for(int j = 0; j < n; ++j){
			if(p[i][j].F == -1){
				used[i][j] = 1;
				if(i && p[i - 1][j] == p[i][j]){
					c[i][j] = 'U';
				}
				else if(j && p[i][j - 1] == p[i][j]){
					c[i][j] = 'L';
				}
				else if(j + 1 < n && p[i][j + 1] == p[i][j]){
					c[i][j] = 'R';
				}
				else if(i + 1 < n && p[i + 1][j] == p[i][j]){
					c[i][j] = 'D';
				}
				else{
					invalid();		
				}
			}
		}
		
	}
	for(int i = 0; i < n; ++i){
		for(int j = 0; j < n; ++j){
			if(p[i][j].F == i + 1 && p[i][j].S == j + 1){
				used[i][j] = 1;
				c[i][j] = 'X';
				queue<pii> q;
				q.push({i, j});
				while(!q.empty()){
					pii cur = q.front();
					q.pop();
					for(int k = 0; k < 4; ++k){
						int xx = cur.F + dx[k];
						int yy = cur.S + dy[k];
						if(xx >= 0 && xx < n && yy >= 0 && yy < n
						&& !used[xx][yy] && p[xx][yy] == p[i][j]){
							char take;
							if(!k){
								take = 'L';
							}
							else if(k == 1){
								take = 'R';
							}
							else if(k == 2){
								take = 'U';
							}
							else {
								take = 'D';
							}
							c[xx][yy] = take;
							q.push({xx, yy});
							used[xx][yy] = 1;
						}
					}
				}
			}
		}
	}
	for(int i = 0; i < n; ++i){
		for(int j = 0; j < n; ++j){
			if(!used[i][j]){
				invalid();
			}
		}
	}
	cout << "VALID" << endl;
	for(int i = 0; i < n; ++i){
		for(int j = 0; j < n; ++j){
			cout << c[i][j];
		}
		cout << endl;
	}
}


 
 
int main()
{
    Red;
//  int T; cin >> T; while(T--)
    solve();
    return 0;
}