/*
Anton Gulikov
*/
#include <iostream>
#include <fstream>
#include <stack>
#include <cstdlib>
#include <cmath>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cassert>
#include <stdio.h>
#include <queue>

#define mp make_pair
#define pb push_back
#define foru(i,n) for(int i = 0; i < n; i++)
#define ford(i,n) for(int i = n - 1; i >= 0; i++)
#define forab(i,l,r) for(int i = l; i <= r; i++)
#define forabd(i,r,l) for(inr i = r; i >= l; i--)
#define sqr(x) ((x) * (x))

const long long base = 1000000000 + 7;
typedef long long ll;

using namespace std;

ll a, k;

ll divs[20005];

int dcnt;


vector<ll> cur;

int limit = (int)1e5;
void get_seq(int num, ll step)
{
 //  cout << "get(" << divs[num] << ", " << step << ", " << cur.size() << ")" << endl;
   if (limit == 0) return;
   if (num == 0 || step == 0)
   {
      cur.pb(divs[num]);
      return;
   }
   
   for (int i = 0; i <= num && limit > cur.size(); i++) 
   {
      if (divs[num] % divs[i] == 0)
      {
         get_seq(i, step - 1);
         //for (int i = 0; i < (int)add.size(); i++) cur.pb(add[i]);
      }
   }
}

void solve(){
   
   cin >> a >> k;
   if (a == 1)
   {
      cout << 1 << endl;
      return;
   }
   if (k > (ll)1e5)
   {               
      for (int i = 0; i < (int)1e5; i++) cout << 1 << " \n"[i==(int)(1e5)-1];
      return;
   }  
   dcnt = 0;
   for (ll i = 1; i*i <= a; i++)
   {
      if (a % i != 0) continue;
      divs[dcnt++] = i;
      if (i * i != a) divs[dcnt++] = a / i;
   }

   sort(divs, divs + dcnt);                      
   vector<ll> seq;
   cur.clear();
   get_seq(dcnt-1, k);
   seq = cur;
   for (int i = 0; i < (int)seq.size(); i++) cout << seq[i] << " \n"[i+1==(int)seq.size()];
}

int main(){
	ios_base :: sync_with_stdio(false);
	int test = 1;
	while (test--){
		solve();
	}
	return 0;
}