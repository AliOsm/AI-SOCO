#include<bits/stdc++.h>
#include<ext/numeric>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define WHITE -1
#define GREY   0
#define BLACK  1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)
#define MP make_pair

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef unsigned int ui;

typedef complex<double> point;
//#define X real()
//#define Y imag()
#define vec(a,b) ((b)-(a))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define colliner pointOnLine

const double PI = acos(-1.0);

int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

const int MAX = 2e5 + 5, MOD = 1e9 + 9, oo = (1 << 30);
const ll OO = 1ll << 60;
const double EPS = 1e-9;

ll n, k, x, a[MAX];
set<pair<ll, ll> > pos, neg, zero;

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
#endif
	scanf("%lld%lld%lld", &n, &k, &x);
	for (ll i = 0; i < n; ++i) {
		scanf("%lld", &a[i]);
		if (a[i] == 0)
			zero.insert(MP(0ll, i));
		else if (a[i] < 0)
			neg.insert(MP((ll) a[i], i));
		else
			pos.insert(MP((ll) a[i], i));
	}
	ll numNeg = sz(neg);
	if (!(numNeg & 1) && !zero.empty()) {
		auto it = zero.begin();
		--k;
		neg.insert(MP(-x * 1ll, it->second));
		++numNeg;
		zero.erase(it);
	}
	while (k > 0 && !zero.empty()) {
		pos.insert(MP(x * 1ll, zero.begin()->second));
		zero.erase(zero.begin());
		--k;
	}
	if (!(numNeg & 1) && (!neg.empty() || !pos.empty())) {
		ll negBig = -OO, posSml = OO;
		if (!neg.empty()) {
			auto it = neg.end();
			--it;
			negBig = it->first;
		}
		if (!pos.empty())
			posSml = pos.begin()->first;
		if (abs(negBig) < posSml) {
			ll z = (-negBig + x) / x;
			z = min(z, k);
			negBig += (z * 1ll * x);
			k -= z;
			if (negBig > 0) {
				auto it = neg.end();
				--it;
				pos.insert(MP(negBig, it->second));
				neg.erase(it);
			} else if (negBig == 0) {
				auto it = neg.end();
				--it;
				zero.insert(MP(0ll, it->second));
				neg.erase(it);
			} else {
				auto it = neg.end();
				--it;
				ll id = it->second;
				neg.erase(it);
				neg.insert(MP(negBig, id));
			}
		} else {
			ll z = (posSml + x) / x;
			z = min(z, k);
			posSml -= (z * 1ll * x);
			k -= z;
			if (posSml > 0) {
				ll id = pos.begin()->second;
				pos.erase(pos.begin());
				pos.insert(MP(posSml, id));
			} else if (posSml == 0) {
				zero.insert(MP(0ll, pos.begin()->second));
				pos.erase(pos.begin());
			} else {
				neg.insert(MP(posSml, pos.begin()->second));
				pos.erase(pos.begin());
			}
		}
	}
	while (k > 0) {
		--k;
		auto it = neg.end();
		--it;
		ll nn = it->first;
		ll pn = OO;
		if (!pos.empty())
			pn = pos.begin()->first;
		if (abs(nn) < pn) {
			nn -= x;
			ll id = it->second;
			neg.erase(it);
			neg.insert(MP(nn, id));
		} else {
			pn += x;
			ll id = pos.begin()->second;
			pos.erase(pos.begin());
			pos.insert(MP(pn, id));
		}
	}
	while (!pos.empty()) {
		a[pos.begin()->second] = pos.begin()->first;
		pos.erase(pos.begin());
	}
	while (!neg.empty()) {
		a[neg.begin()->second] = neg.begin()->first;
		neg.erase(neg.begin());
	}
	while (!zero.empty()) {
		a[zero.begin()->second] = zero.begin()->first;
		zero.erase(zero.begin());
	}
	for (ll i = 0; i < n; ++i)
		printf("%lld ", a[i]);
}

