//ll _(){
//	ll n,k;
//	cin >> n >> k;
//	vl arr(n);
//	cin >> arr;
//	ll m = min(arr);
//	if(m == max(arr))
//		return 0;
//	for(ll &x : arr)
//		x -= m;
//	sort(all(arr));
//	int lo = 0;
//	vl cnt;
//	ll last = 0;
//	for(int h = 0; h < 3e5; ++h){
//		last = lo;
//		while(lo < n && arr[lo] <= h)
//			++lo;
//		cnt.pb(n-lo);
//	}
//	//print(max(cnt));
//	//print(arr);
//	ll sum = 0;
//	ll ans = 1;
//	for(ll x : cnt){
//		sum += x;
//		//watch(x);
//		//watch(sum);
//		if(sum > k){
//			++ans;
//			sum = x;
//			//print("add");
//		}
//	}
//	return ans;
//}
//
//
// ================================================ 
// ^^^	ABOVE is what I wrote in my editor	^^^
// ------------------------------------------------ 
// vvv	BELOW is automatically generated 	vvv
// ================================================ 
#include <set>
#include <iomanip>
#include <algorithm> 
#include <cassert>
#include <vector>
#include <iostream>
#include <string>
#define pb push_back 
#define all(v) (v).begin(),(v).end()
#define sz(v) int(v.size())
#define watch(x) cout << (#x) << " = " << x << '\n'
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
template<typename IT>
ostream &print(IT b, IT e, string sep = " ", ostream &stream = cout){
    for(IT it = b; it != e; ++it){
        stream << *it;
        if(it+1 != e) stream << sep;
    } 
    return stream;
}
template<typename IT> istream &read(IT b, IT e, istream &stream = cin){
    for(IT it = b; it != e; ++it)
        stream >> *it; 
    return stream;
}
template<typename T> ostream &operator<<(ostream &stream, vector<T> &t){
    return print(all(t)," ",stream);
}
template<typename T> ostream &operator<<(ostream &stream, vector<T> &&t){
    return print(all(t)," ",stream);
}
template<typename T> istream &operator>>(istream &stream, vector<T> &t){
    return read(all(t),stream);
}
template <typename T> 
void print(T x, string end = "\n"){
    cout << x << end;
}
template <typename t> 
void print(vector<t> arr,string sep=" "){
    if(arr.empty()){
        return;
    }
    print(arr.begin(),arr.end(),sep);
    cout << '\n';
}
template <typename T> 
void print(vector<vector<T> > arr){
    for(int i = 0; i < sz(arr); ++i){
        cout << "[" << arr[i] << "]";
        if(i+1 < sz(arr))
            cout << ", ";
    }
    cout << '\n';
}
template<typename T>
T _();
const ll MOD = 1e9+7;
template<typename T>
vector<T> operator+(const vector<T> &lhs, const vector<T> &rhs){
    vector<T> ans(lhs);
    assert(ans.size() == rhs.size());
    for(int i = 0; i < rhs.size(); ++i)
        ans[i] += rhs[i];
    return ans;
}
template<typename T>
vector<T> operator+=(vector<T> &lhs, const vector<T> &rhs){
    return lhs = lhs+rhs;
}
template<typename T>
vector<T> operator-(const vector<T> lhs, const vector<T> rhs){
    vector<T> ans(all(lhs));
    assert(ans.size() == rhs.size());
    for(int i = 0; i < rhs.size(); ++i)
        ans[i] -= rhs[i];
    return ans;
}
template<typename T>
vector<T> operator-=(vector<T> &lhs, const vector<T> &rhs){
    return lhs = lhs-rhs;
}
template<typename T>
vector<T> append(vector<T> &lhs, const vector<T> rhs){
    lhs.insert(lhs.end(),all(rhs));
    return lhs;
}
template<typename T>
T max(const vector<T> arr){
    assert(!arr.empty());
    T ans = arr[0];
    for(auto &cur : arr)
        ans = max(ans,cur);
    return ans;
}
template<typename T>
T min(const vector<T> arr){
    assert(!arr.empty());
    T ans = arr[0];
    for(auto &cur : arr)
        ans = min(ans,cur);
    return ans;
}
template<typename T>
T max(const set<T> s){
    assert(!s.empty());
    return *--s.end();
}
template<typename T>
T min(const set<T> s){
    assert(!s.empty());
    return *s.begin();
}
template<typename T, typename G>
vector<T> set_max(vector<T> &base, const vector<G> &comp){
    assert(base.size() == comp.size());
    for(int i = 0; i < (int)comp.size(); ++i)
        base[i] = max(base[i],comp[i]);
    return base;
}
ll _(){
	ll n,k;
	cin >> n >> k;
	vl arr(n);
	cin >> arr;
	ll m = min(arr);
	if(m == max(arr))
		return 0;
	for(ll &x : arr)
		x -= m;
	sort(all(arr));
	int lo = 0;
	vl cnt;
	ll last = 0;
	for(int h = 0; h < 3e5; ++h){
		last = lo;
		while(lo < n && arr[lo] <= h)
			++lo;
		cnt.pb(n-lo);
	}
	//print(max(cnt));
	//print(arr);
	ll sum = 0;
	ll ans = 1;
	for(ll x : cnt){
		sum += x;
		//watch(x);
		//watch(sum);
		if(sum > k){
			++ans;
			sum = x;
			//print("add");
		}
	}
	return ans;
}

int main(){
    ios_base::sync_with_stdio(false); cin.tie(0);
    cout << fixed << setprecision(15);
    cout << _() << '\n';
}
