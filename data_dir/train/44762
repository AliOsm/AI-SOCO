#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <iostream>
#include <cmath>
#include <iomanip>
#include <string>
#include <cstring>
#include <cstdio>
#include <math.h>
#include <algorithm>
#include <stdio.h>
#include <climits>
#include <stack>
#include <queue>
#include <vector>
#include <set>
#include <sstream>
#include <map>
#include <ctime>
#include <cstdlib>
#include <list>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;

int dx[] = { 1, 0, -1, 0 };
int dy[] = { 0, 1, 0, -1 };

// start + (end - start) / 2;
/*
long long power(long long b, long long Pow){
if (b == 0) return 0;
else if (Pow == 1) return b;
else if (Pow % 2  == 0.0) return power(b*b, Pow / 2);
else return b*power(b*b, Pow / 2);
}*/
/*
int gcd(int a, int b){
if (b == 0)
return a;
return gcd(b, a % b);
}
*/

int main() {
    cin.tie(0);
    std::ios::sync_with_stdio(false);
    int n, m;
    cin >> n >> m;
    vector<int>vec;
    vec.push_back(((m - 1) / 2) + 1);
    int c = 1;
    for (int i = 0; i < m / 2; i++){
        if (m % 2){
            if (vec[0] - c > 0)
                vec.push_back(vec[0] - c);
            if (vec[0] - c <= m)
                vec.push_back(vec[0] + c);
        }
        else {
            if (vec[0] - c <= m)
                vec.push_back(vec[0] + c);
            if (vec[0] - c > 0)
                vec.push_back(vec[0] - c);
        }
        c++;
    }
    for (int i = 0; i < n; i++){
        cout << vec[i % m] << "\n";
    }
}