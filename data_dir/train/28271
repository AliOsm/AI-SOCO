#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <complex>
#include <tuple>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
const int INF = (int) (1e9 + 1e5);
const int64 LINF = (int64) (1e18);
const int64 BASE = 1003;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL(what) {throw logic_error(string(what));}
#define ASSERT(exp) {if (!(exp)) {FAIL("");}}
#define ASSERTC(exp, what) {if (!(exp)) {FAIL(what);}}
#define y1 fjgjf
//typedef complex<double> comp;
const int MOD = 1000000007;

int tnum;

const int MAXN = 200500;

int n, m, k;
vector<int> order;
vector<vector<pii>> g;
vector<int> was;
vector<int> color;
vector<int> num;

void dfs(int v) {
    was[v] = 1;
    for (const auto [to, idx] : g[v]) {
        if (!was[to]) {
            dfs(to);
        }
    }
    order.push_back(v);
}

void init() {
    cin >> n >> m;
    g.resize(n);
    for (int i = 0; i < m; ++i) {
        int v, u;
        cin >> v >> u;
        --v;
        --u;
        g[v].push_back({u, i});
    }
}

void solve() {
    was.resize(n, 0);
    color.resize(m);
    num.resize(n);
    for (int i = 0; i < n; ++i) {
        if (!was[i]) {
            dfs(i);
        }
    }
    reverse(order.begin(), order.end());
    for (int i = 0; i < n; ++i) {
        num[order[i]] = i;
    }
    k = 1;
    for (int v = 0; v < n; ++v) {
        for (const auto [u, idx] : g[v]) {
            if (num[v] < num[u]) {
                color[idx] = 1;
            } else {
                color[idx] = 2;
                k = 2;
            }
        }
    }
}

void print_answer() {
    cout << k << endl;
    for (int i = 0; i < m; ++i) {
        cout << color[i] << " ";
    }
    cout << endl;
}

void precalc() {
}

void run() {
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
#else
    //freopen(getenv("OUTPUT_PATH"), "wt", stdout);
#endif // _MY_DEBUG
    precalc();
    int t = 1; //cin >> t;
    for (tnum = 1; tnum <= t; ++tnum) {
        init();
        solve();
        print_answer();
    }
}

signed main() {
    srand(90);
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    run();
    return 0;
}