#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <string.h>
#include <vector>
#include <map>
#include <set>
#include <list>
#include <deque>
#include <queue>
#include <sstream>

using namespace std;

#define fi first
#define se second
#define mp make_pair
#define pb push_back

typedef long long ll;
const int INF = (int)1.2e9;
#define task "a"

ll l, r, k;

ll f (vector<ll> cur) {
    ll res = 0;
    for (int i = 0; i < (int)cur.size(); i++) {
        res ^= cur[i];
    }
    return res;
}

vector<ll> ans;
ll ansf;
void updAns (vector<ll> cur) {
    if (cur.size() > k) {
        return;
    }
    sort(cur.begin(), cur.end());
    for (int i = 0; i < (int)cur.size(); i++) {
        if (!(l <= cur[i] && cur[i] <= r)) {
            return;
        }
    }

    for (int i = 1; i < (int)cur.size(); i++) {
        if (cur[i] == cur[i - 1]) {
            return;
        }
    }

    if (f(cur) < ansf) {
        ans = cur;
        ansf = f(ans);
    }
}


int main() {
    //freopen(task".in", "r", stdin); freopen(task".out", "w", stdout);
    cin >> l >> r >> k;

    ansf = (ll)1e18;
    vector<ll> cur;

    cur.clear();
    cur.push_back(l);
    updAns(cur);

    if (r - l + 1 <= 10) {
        int n = r - l + 1;
        cur.clear();
        for (int mask = 1; mask < (1 << n); mask++) {
            ll f = 0;
            for (int i = 0; i < n; i++) {
                if ((1 << i) & mask) {
                    cur.push_back(l + i);
                }
            }
            updAns(cur);
        }
    }

    cur.clear();
    ll p = (-l) & 1;
    for (int i = 0; i < 4; i++) {
        cur.push_back(p + i + l);
    }
    updAns(cur);

    cur.clear();
    p = (-l) & 1;
    for (int i = 0; i < 2; i++) {
        cur.push_back(p + i + l);
    }
    updAns(cur);

    for (int i = 50; i >= 0; i--) {
        ll p = (1ll << i);
        cur.clear();
        cur.push_back(p * 2 - 1);
        cur.push_back(p * 3 - 1);
        cur.push_back(p * 3);
        updAns(cur);
    }

    cout << ansf << endl;
    cout << ans.size() << endl;
    for (int i = 0; i < (int)ans.size(); i++) {
        cout << ans[i] << " ";
    }
    cout << endl;
    return 0;
}
