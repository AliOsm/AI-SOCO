//#define _USE_MATH_DEFINES
//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }
inline int safe_mul(const int x, const int y) __attribute__ ((warn_unused_result));


int main()
{
//    freopen("in.txt","r", stdin);
//    freopen("out.txt", "w", stdout);
//    cin.tie(0);
//    cout << fixed << setprecision(20);
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int64_t m,a,b;
    cin >> m >> a >> b;

    vector<int64_t> ter(a, m + 1);
    vector<int64_t> itr(a, m + 1);

    int64_t idx = 0;
    int64_t val = 0;
    for(;ter[idx % a] > val;) {
        ter[idx % a] = val;
        itr[idx % a] = idx;
        int64_t l = -1;
        int64_t r = 1000000;
        while (r - l > 1) {
            auto mid = (l + r) >> 1;
            if (idx - b + mid * a >= 0)
                r = mid;
            else
                l = mid;
        }
        val = max(val, idx + r * a);
        idx += r * a - b;
    }

    int64_t ans = 0;
    for (int64_t i = 0; i < a; ++i) {
        if (ter[i] <= m) {
            int64_t il = (ter[i] - itr[i]) / a + 1;
            ans += (m - ter[i] + 1) * il;
            int64_t cnt = (m - itr[i]) / a + 1;
            if (cnt > il) {
                int64_t fst = itr[i] + a * il;
                int64_t lst = itr[i] + a * (cnt - 1);
                int64_t pos = (cnt - il) * (m + 1);
                int64_t neg = (fst + lst) * (cnt - il) / 2;
                ans += pos - neg;
            }
        }
    }
    cout << ans << endl;
}
