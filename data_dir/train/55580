////////////////////////////////////////////    _LeMur_
//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 255;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

int n , k;

int dp[N][N];
int pw1[N] , pw2[N];

int c[N][N];

int rec(int n,int m){
    if(n == 0){
        if(m == 0)return 1;
        return 0;
    }
    if(dp[n][m] != 0)return dp[n][m];
    int used = ::n - m;
    for(int j=1;j<=m;j++){
        int s = c[m][j] * 1ll * pw1[m - j] % mod;
        s = s * 1ll * pw2[used] % mod;
        dp[n][m] += s * 1ll * rec(n - 1 , m - j) % mod;
        dp[n][m] %= mod;
    }
    int s = (pw2[used] - pw1[used] + mod) % mod;
    s = s * 1ll * pw1[m] % mod;
    dp[n][m] += s * 1ll * rec(n - 1 , m) % mod;
    dp[n][m] %= mod;
    return dp[n][m];
}

int main(){
	mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());
    cin >> n >> k;
    c[0][0] = 1;
    for(int i=1;i<=n;i++){
        for(int j=0;j<=i;j++){
            c[i][j] = (j == 0) ? 1 : (c[i - 1][j] + c[i - 1][j - 1]);
            c[i][j] %= mod;
        }
    }
    pw1[0] = 1;
    pw2[0] = 1;
    for(int i=1;i<=n;i++){
        pw1[i] = pw1[i - 1] * 1ll * (k - 1) % mod;
        pw2[i] = pw2[i - 1] * 1ll * k % mod;
    }
    rec(n , n);
    cout << dp[n][n] << endl;
    return 0;
}
