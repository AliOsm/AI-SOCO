#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define Foreach(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define For(i,a,b) for(int (i)=(a);(i) < (b); ++(i))
#define rof(i,a,b) for(int (i)=(a);(i) > (b); --(i))
#define rep(i, c) for(auto &(i) : (c))
#define x first
#define y second
#define pb push_back
#define PB pop_back()
#define iOS ios_base::sync_with_stdio(false)
#define sqr(a) (((a) * (a)))
#define all(a) a.begin() , a.end()
#define error(x) cerr << #x << " = " << (x) <<endl
#define Error(a,b) cerr<<"( "<<#a<<" , "<<#b<<" ) = ( "<<(a)<<" , "<<(b)<<" )\n";
#define errop(a) cerr<<#a<<" = ( "<<((a).x)<<" , "<<((a).y)<<" )\n";
#define coud(a,b) cout<<fixed << setprecision((b)) << (a)
#define L(x) ((x)<<1)
#define R(x) (((x)<<1)+1)
#define umap unordered_map
#define double long double
typedef long long ll;
typedef pair<int,int>pii;
typedef vector<int> vi;
typedef complex<double> point;
template <typename T> using os = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <class T> inline void smax(T &x,T y){ x = max((x), (y));}
template <class T> inline void smin(T &x,T y){ x = min((x), (y));}
const int maxn = 2e5 + 100, maxl = 20;
int par[maxn][maxl], h[maxn];
inline void add(int v = 0, int p = -1){
	par[v][0] = p;
	if(~p)	h[v] = h[p] + 1;
	For(i,1,maxl)	if(~par[v][i-1])
		par[v][i] = par[par[v][i-1]][i-1];
}
inline int lca(int v, int u){
	if(h[v] < h[u])	swap(v, u);
	rof(i,maxl-1,-1)	if(~par[v][i] && h[par[v][i]] >= h[u])	v = par[v][i];
	if(v == u)	return v;
	rof(i,maxl-1,-1)	if(par[v][i] - par[u][i])
		v = par[v][i], u = par[u][i];
	return par[v][0];
}
inline int dis(int v, int u){
	return h[v] + h[u] - 2 * h[lca(v, u)];
}
int main(){
	memset(par, -1, sizeof par);
	int n, m;
	scanf("%d", &n);
	int v = 0, u = 0, d = 0;
	For(i,1,n){
		int p;
		scanf("%d", &p);
		-- p;
		add(i, p);
		int c = dis(v, i);
		if(d < c)
			d = c, u = i;
		c = dis(u, i);
		if(d < c)
			d = c, v = i;
		printf("%d ", d);
	}
	puts("");
	return 0;
}
