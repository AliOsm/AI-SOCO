#include <iostream>
#include <vector>

using namespace std;

typedef long long int ll;

const ll modulo=1e9+7;

const int limite=5000000;

ll expo[limite];
int n,q;
int a[limite];
vector<int> quien[limite];
int ql[limite];
int qx[limite];
int sol[limite];

int nbase;
int base[limite];

int bombardea(int x)
{
  int b=19;
  for (int ibase=0;ibase<nbase;ibase++) {
    int B=base[ibase];
    while ((B&(1<<b))==0) b--;
    if (x&(1<<b)) x^=B;
  }
  return x;
}

int main()
{
  ios::sync_with_stdio(false);
  expo[0]=1;
  for (int i=1;i<limite;i++)
    expo[i]=expo[i-1]*2%modulo;
  cin>>n>>q;
  for (int i=1;i<=n;i++)
    cin>>a[i];
  for (int i=0;i<q;i++) {
    cin>>ql[i]>>qx[i];
    quien[ql[i]].push_back(i);
  }
  for (int i=1;i<=n;i++) {
    {
      int x=bombardea(a[i]);
      if (x) {
	base[nbase++]=x;
	for (int i=nbase-1;i>0;i--) {
	  if (base[i]>base[i-1]) swap(base[i],base[i-1]);
	  else break;
	}
      }
    }
    vector<int> lista=quien[i];
    for (int ilista=0;ilista<int(lista.size());ilista++) {
      int iq=lista[ilista];
      int y=bombardea(qx[iq]);
      if (y==0) sol[iq]=expo[i-nbase];
    }
  }
  for (int i=0;i<q;i++)
    cout<<sol[i]<<endl;
}
