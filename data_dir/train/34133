#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define ull unsigned ll
#define F first                                                                                         
#define S second
#define mp make_pair
#define pb push_back
#define y1 variable
#define matrix vector<vector<double> > 

using namespace std;

const int MIN = 1e3 + 2;                                                                                                                                  
const int MXN = 2e6 + 3;
const int INF = 1e9 + 7;                                                                                                       
const int base = 1e9;
const ll LINF = 1e18 + 15;
const double EPS = 1e-9;                                                                                                                 

int n;
pair <string, int> a[MIN];
vector <pair <string, int> > d[MIN];
int b[MIN];
map <pair <string, int>, int> c;
vector <int> g[MIN];
map <string, bool> used;            
bool was[MIN], was2[MIN];
vector <pair <string, int> > ans;
vector <int> lvl[MIN];

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);             
	cout.tie(0);
    #ifdef Pissoir              	
		//freopen("input.txt", "r", stdin);                                                                                                              
		//freopen("output.txt", "w", stdout);                       
	#else                                                                                           
		//freopen("typing.in", "r", stdin);
  		//freopen("typing.out", "w", stdout);			
    #endif
	cin >> n;
	for (int i = 1; i <= n; ++i){
		cin >> a[i].F >> a[i].S >> b[i];
		c[mp(a[i].F, a[i].S)] = i;
		for (int j = 1; j <= b[i]; ++j){
			string F;
			int FF;
			cin >> F >> FF;
			d[i].pb(mp(F, FF));			
		}		
	}
	for (int i = 1; i <= n; ++i){
		for (int j = 0; j < b[i]; ++j){
			g[i].pb(c[mp(d[i][j].F, d[i][j].S)]);
		}
	}
	lvl[0].pb(1);
	was[1] = 1;
	used[a[1].F] = 1;
	for (int i = 0; i < n; ++i){
		map <string, int> go;
		for (int j = 0; j < lvl[i].size(); ++j){
			for (int k = 0; k < g[lvl[i][j]].size(); ++k){
     			int to = g[lvl[i][j]][k];			
     			if (!was[to] && !used[a[to].F]){
     				go[a[to].F] = max(go[a[to].F], a[to].S);				
     			}
			}
		}
		for (int j = 0; j < lvl[i].size(); ++j){
			for (int k = 0; k < g[lvl[i][j]].size(); ++k){
     			int to = g[lvl[i][j]][k];			
     			if (!was[to] && !used[a[to].F]){
     				was[to] = 1;
     				if (go[a[to].F] == a[to].S){
     					used[a[to].F] = 1;
     					ans.pb(mp(a[to].F, a[to].S));
     					lvl[i + 1].pb(to);
     				}
     			}
			}
		}	
	}
	sort (ans.begin(), ans.end());
	cout << ans.size() << "\n";
	for (int i = 0; i < ans.size(); ++i){
		cout << ans[i].F << " " << ans[i].S << "\n";
	}		
	return 0;	
}