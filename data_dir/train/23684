#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int64, int64> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

int main() {
  int n;
  int64 m;
  scanf("%d%lld", &n, &m);
  vector<ii> a(n);
  for (int i = 0; i < n; ++i) {
    scanf("%lld", &a[i].first);
    a[i].second = 1;
  }
  sort(a.begin(), a.end());
  int i = 0, j = n - 1;
  while (i < j && m) {
    // trace(a[i].first, a[j].first, i, j, m);
    if (a[i].second < a[j].second) {
      int64 step = min(a[i + 1].first - a[i].first, m / a[i].second);
      m -= step * a[i].second;
      a[i].first += step;
      if (a[i].first == a[i + 1].first) {
        a[i + 1].second += a[i].second;
        ++i;
      } else if (step == 0) {
        break;
      }
    } else {
      int64 step = min(a[j].first - a[j - 1].first, m / a[j].second);
      m -= step * a[j].second;
      a[j].first -= step;
      if (a[j].first == a[j - 1].first) {
        a[j - 1].second += a[j].second;
        --j;
      } else if (step == 0) {
        break;
      }
    }
  }
  printf("%lld\n", a[j].first - a[i].first);
  return 0;
}
