#include <bits/stdc++.h>
typedef long long LL;

const int N = 200000 + 5;
int X,Y;
std::vector<int> edges[N];
int n;
int chain;

int dfs(int u,int fa) {
    int child = 0;
    for (int v : edges[u]) {
        if (v == fa) continue;
        if (dfs(v,u)) child ++;
    }
    int ret = 1;
    if (child >= 2) {
        ret = 0;
        chain += child - 1;
    }
    return ret;
}

int dis[N],que[N],parent[N];

void bfs(int source) {
    int qf = 0,qe = 0;
    que[qe++] = source;
    dis[source] = 0;
    parent[source] = -1;
    while (qf != qe) {
        int u = que[qf++];
        for (int v : edges[u]) {
            if (v == parent[u]) continue;
            dis[v] = dis[u] + 1;
            parent[v] = u;
            que[qe++] = v;
        }
    }
}

LL work() {
    if (X <= Y) {
        if (dfs(0,-1)) chain ++;
        return (chain - 1) * 1ll * Y + (n - chain) * 1ll * X;
    }

    // X > Y
    if (n == 2) {
        return X;
    }
    bfs(0);
    bfs(que[n - 1]);
    if (dis[que[n - 1]] > 2) {
        return Y * 1ll * (n - 1);
    }
    return X + (n - 2) * 1ll * Y;
}

int main() {
    scanf("%d%d%d",&n,&X,&Y);
    for (int i = 0; i < n - 1; ++ i) {
        int a,b;
        scanf("%d%d",&a,&b); a --; b --;
        edges[a].push_back(b);
        edges[b].push_back(a);
    }
    printf("%I64d\n",work());
}
