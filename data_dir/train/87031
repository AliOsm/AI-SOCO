#include <bits/stdc++.h>
 
using namespace std;
 
#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<pii, int> para;
const int inf = 1e9 + 7;
const int maxN = 200 + 5;
 
int n;
vector<ll> arr;
vi graph[maxN];
queue<int> Q;
bool visited[maxN];
int dist[maxN], parent[maxN];
int bits[100];
 
int BFS(int start) {
	RI(i, n) {
		visited[i] = false;
		dist[i] = maxN;
		parent[i] = -1;
	}
	dist[start] = 0;
	parent[start] = -1;
	Q.push(start);
	int ans = maxN;
	while (!Q.empty()) {
		int u = Q.front(); Q.pop();
		// cout << u << " " << dist[u] << endl;
		visited[u] = true;
		for (auto v: graph[u]) {
			if (v != parent[u]) {
				if (!visited[v]) {
					visited[v] = true;
					parent[v] = u;
					dist[v] = dist[u] + 1;
					Q.push(v);
				} else {
					ans = min(ans, dist[u] + dist[v] + 1);
				}
			}
		}
	}
	return ans;
}
 
int main() {
	ios_base::sync_with_stdio(0);
	cin >> n;
	arr.push_back(0);
	RI(i, n) {
		ll a;
		cin >> a;
		ll x = a;
		int cnt = 0;
		if (a != 0) {
			while(x != 0) {
				bits[cnt] += x % 2;
				if (bits[cnt] > 2) {
					cout << "3\n";
					return 0;
				}
				cnt++;
				x /= 2;
			}
			arr.push_back(a);
		}
	}
	n = arr.size() - 1;
	//assert(n < 100);
	RI(i, n) {
		RI(j, n) {
			if (i != j) {
				//cout << arr[i] << endl;
				if ((arr[i] & arr[j]) != 0) {
					graph[i].pb(j);
				}
			}
		}
	}
	int ans = maxN;
	RI(i, n) {
		ans = min(ans, BFS(i));
	}
	if (ans == maxN) cout << "-1"; else cout << ans << endl;
	return 0;
}
