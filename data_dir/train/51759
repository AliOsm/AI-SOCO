#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>

#define N 200005

using namespace std;

typedef long long ll;
typedef pair<int, int> pt;

ll ans;
vector<int> ls[N], f;
vector<pt> cc;

int dfs(int u, int p, int lv) {
    int cnt = 1;
    for (int i = 0; i < ls[u].size(); i++) {
        int v = ls[u][i];
        if (v == p)
            continue;
        cnt += dfs(v, u, lv+1);
    }
    cc.push_back(make_pair(cnt-lv, u));
    return cnt;
}

void dfs2(int u, int p, int lv) {
    if (f[u] == 0)
        ans += lv;
    for (int i = 0; i < ls[u].size(); i++) {
        int v = ls[u][i];
        if (v == p)
            continue;
        dfs2(v, u, lv+f[u]);
    }
}

int main() {
    int n, k, u, v;
    
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> n >> k;
    for (int i = 1; i < n; i++) {
        cin >> u >> v;
        ls[u].push_back(v);
        ls[v].push_back(u);
    }
    
    f.resize(n+1);
    dfs(1, -1, 0);
    
    sort(cc.begin(), cc.end());
    for (int i = k; i < cc.size(); i++)
        f[cc[i].second] = 1;
    
    ans = 0;
    dfs2(1, -1, 0);
    cout << ans << endl;
    
    return 0;
}
