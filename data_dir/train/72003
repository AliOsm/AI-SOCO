//BUGSBUNNY
//IIT ROORKEE
#include<bits/stdc++.h>
using namespace std;
#define int long long
#define ll long long
#define double long double
#define ld long double
#define endl '\n'
#define vi vector<int>
#define vvi vector<vi>
#define vs vector<string>
#define vl vector<long long>
#define vpii vector<pii>
#define vpipii vector<pipii>
#define vb vector<bool>
#define pb push_back
#define pob pop_back
#define mp make_pair
#define pii pair<int,int>
#define pipii pair<int,pii>
#define piipi pair<pii,int>
#define pld pair<long double,long double>
#define mod 1000000007
// #define mod 163577857 
// #define mod 998244353
#define rep(i,n) for (ll i = 0; i < n; i++)
#define repp(i,a,b) for(ll i = a ; i<b ; i++)
#define reppr(i,a,b) for(ll i = a-1 ; i>=b ; i--)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define ff first
#define ss second
#define pc putchar_unlocked
#define gc getchar_unlocked
#define inf 9223372036854775807
#define infn -9223372036854775807
#define pi 3.14159265358979323846
#define eps 0.0000000001
#define sp << " " <<
#define setprec(x) cout << fixed << setprecision(x);
#define REVERSE(a) reverse(all(a));
#define SORT(a) sort(all(a));
#define all(n) n.begin(),n.end()
 
//GCD and LCM
    int gcd (int a, int b) { return b ? gcd (b, a % b) : a; }
    int lcm (int a, int b) { return a / gcd(a, b) * b; }
 
//Modular Exponentiation
    int powmod(int x,int y) 
    { 
        if (y == 0) return 1; 
        int p = powmod(x, y/2) % mod; 
        p = (p * p) % mod;   
        return (y%2 == 0)? p : (x * p) % mod; 
    }
 
//Modular Inverse
    int inverse(int a) 
    { 
       return powmod(a,mod-2); 
    }


void solve();
signed main()
{
    //-------------------------------------------------------------------------------   
        ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
        clock_t clk = clock();
    //-------------------------------------------------------------------------------   
        #ifndef ONLINE_JUDGE
            // for getting input from input.txt
            freopen("input.txt", "r", stdin);
            // for writing output to output.txt
            freopen("output.txt", "w", stdout);
            // for writing errors to error.txt
            freopen("error.txt", "w", stderr);
        #endif
    //-------------------------------------------------------------------------------
        int t = 1;
        cin >> t;       
        rep(i,t)
            solve();
    //-------------------------------------------------------------------------------
        clk = clock() - clk;
        cerr << fixed << setprecision(12) << "Time: " << ((double)clk)/CLOCKS_PER_SEC;
    //-------------------------------------------------------------------------------
}

void solve()
{
    int n , k;
    cin >> n >> k;
    string s;
    cin >> s;
    SORT(s);
    if(k==1)
    {
        cout << s << endl;
        return;
    }
    if(s[k-1]!=s[k-2])
    {
        cout << s[k-1] << endl;
        return; 
    }
    int sm = 0;
    int j = k-1;
    while(j>=0 && s[j]==s[k-1])
        sm++ , j--;
    if(sm!=k)
    {
        cout << s[k-1] << endl;
        return;
    }
    set<char> ss;
    string nn = "";
    repp(i,k,s.length())
        nn += s[i] , ss.insert(s[i]);
    if(ss.size()==1)
    {
        int tba = (nn.length()+k-1)/k;
        cout << s[k-1] <<  string(tba,nn[0]) << endl;
        return;
    }
    else
        cout << s[k-1] << nn << endl;
}   