#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>	
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound          	
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcount                                                                                        
#define sqr(x) ((x) * (x))
#define al 0x3F3F3F3F
#define sz(x) x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;                                  
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;
                                       
const double pi = acos(-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};   																																					
const int dy[] = {0, 1, 0, -1, 0};  

int n, B, a[N], ans;
bool used[N];

inline void boost () {
	ios_base :: sync_with_stdio (NULL);
	cin.tie (NULL), cout.tie (NULL);
}

inline void Solve () {  
	boost (); 
	cin >> n >> B;
	for (int i = 1; i <= n; i ++) cin >> a[i];
	used[n] = 1;
	while (1) {
	   int mini = mod, pos = 0, odd = 0, even = 0;
		for (int i = 1; i < n; i ++) {
			if (a[i] & 1) odd ++;
			else even ++;
			if (!used[i] && odd == even && mini > abs (a[i] - a[i + 1])) {
				mini = abs (a[i] - a[i + 1]);
				pos = i;
			}
			if (used[i]) {
				odd = 0, even = 0;
			}
		}
		if (mini <= B) {
			B -= mini;
			used[pos] = 1;
			ans ++;
		}              
		else break;
	}
	cout << ans;

}                                           
                  
main () {                                       
//	freopen ("ormax.in", "r", stdin);    
//	freopen ("ormax.out", "w", stdout); 	          
	int tt = 1;
//	cin >> tt;   
	while (tt --) {
		Solve ();
	}        
	return 0;      
} 