//  Copyright Â© 2019 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 500005
#define INF 1e9
#define pii pair < int , int >
#define fi first
#define se second
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

struct val {
    int v, id;
    bool operator < ( const val & a ) const {
        if( v == a.v )
            return id < a.id;
        return v > a.v;
    }
};

// CHECK INF

int N, Q, vals[MAX];
int tree[MAX*8];
vector < val > vec;
int ans[MAX];

void upd( int x , int l , int r , int q , int v )
{
    if( l > q or r < q )
        return;
    if( l == r )
    {
        tree[x] = v;
        return;
    }
    
    int mid = ( l + r ) / 2;
    upd( 2*x+1 , l , mid , q , v );
    upd( 2*x+2 , mid+1 , r , q , v );
    tree[x] = tree[2*x+1] + tree[2*x+2];
}

int leftmost( int x , int l , int r , int v ) {
    if( l == r )
        return vals[l];
    
    int mid = ( l + r ) / 2;
    if( v - tree[2*x+1] > 0 )
        return leftmost( 2*x+2 , mid+1 , r , v - tree[2*x+1] );
    return leftmost( 2*x+1 , l , mid , v );
}


vector < pii > queries[MAX];

int main()
{
    optimiza_io
    cin >> N;
    for( int i = 1; i <= N; i ++ ) {
        cin >> vals[i];
        vec.push_back( { vals[i] , i } );
    }
    
    sort( vec.begin() , vec.end() );
    
    cin >> Q;
    for( int i = 1; i <= Q; i ++ ) {
        int k, pos;
        cin >> k >> pos;
        queries[k].push_back( { pos , i } );
    }
    
    for( int i = 1; i <= N; i ++ ) {
        upd( 0 , 1 , N , vec[i - 1].id , 1 );
        for( auto x : queries[i] ) {
            ans[x.se] = leftmost( 0 , 1 , N , x.fi );
        }
    }
    
    for( int i = 1; i <= Q; i ++ )
        cout << ans[i] << "\n";
    return 0;
}