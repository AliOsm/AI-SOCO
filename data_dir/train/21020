#ifndef _USE_MATH_DEFINES
#define _USE_MATH_DEFINES
#include <cmath>
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>

#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;

//#include <queue>
//#include <stack>
//#include <set>

#define unlli unsigned long long int

#define FOR(i,a,b) for(int i=a;i<b;i++)
#define FOR1(i,a,b) for(int i=a;i>=b;i--)

#define sc(n) scanf("%d",&n)
#define sc2(n,m) scanf("%d %d",&n,&m)
#define sc3(n,m,k) scanf("%d %d %d",&n,&m,&k)
#define scp() scanf("\n")

#define P(x) printf("%d",x)
#define P2(x,y) printf("%d %d",x,y)
#define MOD 1000000007

class name 
{
public:
    void resh();
private:
    unlli gcd(unlli x,unlli y);
    unlli kd(unlli x);
};

unlli name::gcd(unlli x,unlli y)
{
    return (y==0)?x:gcd(y,x%y);
}
unlli name::kd(unlli x)
{
    unlli k=2,q=sqrt((double)x);

    for(unlli i=2;i<q+1;i++)
        if(x%i==0)k+=2;
    if(q*q==x)k--;
    return k;
}

int main()
{   
    name A;
    A.resh();
    return 0;
}

void name::resh()
{
    
    int n,v;
    sc2(n,v);

    multimap<int,int> m;
    pair<int,int> p;

    multimap<int,int>::iterator Im;

    FOR(i,0,n)
    {   
        sc2(p.first,p.second);

        Im=m.find(p.first);
        if(Im==m.end()) m.insert(p);
        else Im->second+=p.second;
    }

    int sum=0,x=0,v1;

    multimap<int,int>::iterator im,jm;

    int flag=0;
    for(multimap<int,int>::iterator im=m.begin();im!=m.end();im++)
    {
    
        if(!flag)
        {
            sum+=min(im->second,v);
            x=im->second-min(im->second,v);
            flag=1;
        }
        else
            if(im->first==jm->first+1)
            {   
                v1=v;
                sum+=min(x,v1);v1-=min(x,v1);
                sum+=min(im->second,v1);
                x=im->second-min(im->second,v1);
            }
            else
                if(im->first>jm->first+1)
                {
                    sum+=min(im->second,v)+min(x,v);
                    x=im->second-min(im->second,v);
                }

        jm=im;
    }

    sum+=min(x,v);  
    P(sum);

}