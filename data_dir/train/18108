#include <bits/stdc++.h>
#define ll long long
#define X first
#define Y second
#define pb push_back
#define Scan(a) scanf("%I64d", &a)
#define CLR(a) memset(a,0,sizeof(a))
#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORE(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)

using namespace std;

typedef pair<int, int> II;
typedef vector<II> vi;

string s, t1, t2;
int b1[2010], b2[2010], res1[2010], res2[2010];
set<int> res[2010];

void KMPpre(string t, int b[])
{
    b[0] = 0;
    FOR(i,1,t.length()-1) {
        int k = b[i-1];
        while (k > 0 && t[i] != t[k]) k = b[k-1];
        if (t[i] == t[k]) b[i] = k+1;
        else b[i] = 0;
    }
}

void KMPsearch(string t, int b[], int res[])
{
    int j = 0;
    FOR(i,0,s.length()-1) {
        while (j > 0 && s[i] != t[j]) j = b[j-1];
        if (s[i] == t[j]) j++;
        else j = 0;
        if (j == t.length()) {
            res[i-t.length()+1] = 1;
            j = b[j-1];
        }
    }
}

struct HashModule {
    ll mod;
    vector<ll> pw, h;
    void init(string s, ll base, ll p) {
        mod = p;
        pw.resize(s.length()+1);
        h.resize(s.length());
        pw[0] = 1;
        FOR(i,1,s.length()) pw[i] = (pw[i-1] * base) % mod;
        h[0] = s[0];
        FOR(i,1,s.length()-1) h[i] = (h[i-1]*base + s[i]) % mod;
    }
    int query(int l, int r) {
		if (!l) return h[r];
		return int((h[r] - h[l-1] * pw[r-l+1] + mod*mod) % mod);
	}
};

struct DoubleHash {
    HashModule hm1, hm2;
    void init(string s, ll base1, ll mod1) {
        hm1.init(s, base1, mod1);
    }
    int query(int l,int r) {
        return (hm1.query(l,r));
    }
} dhashs;

int main()
{
    ios::sync_with_stdio(0);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> s >> t1 >> t2;
    dhashs.init(s, 2311LL, (ll) 1e9 + 7);
    KMPpre(t1, b1);
    KMPpre(t2, b2);
    KMPsearch(t1, b1, res1);
    KMPsearch(t2, b2, res2);
    FOR(i,0,s.length()-1)
        if (res1[i])
            FOR(j,i,s.length()-1)
                if (res2[j] && i+t1.length()-1 <= j+t2.length()-1) res[j+t2.length()-i].insert(dhashs.query(i, j+t2.length()-1));
    int kq = 0;
    FOR(i,1,s.length()) kq += res[i].size();
    cout << kq;
    return 0;
}
