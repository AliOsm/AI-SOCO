#include <bits/stdc++.h>
#define F first
#define S second
#define all(a) a.begin(),a.end()
#define setDP(arr) memset(arr,-1,sizeof arr)
#define Clear(arr) memset(arr,0,sizeof arr)
#define oo 1000000000
#define inf 1000000000000000000
#define M 998244353
using namespace std;
typedef long long ll;
const int N = 2e5+300;
const int SQRTN = 320;
const int LOGN = 20;
const double PI = acos(-1);
const double TAU = 2*PI;

int n , k;
vector<vector<int> > g;
int leafs[N];
vector<int> v;
int dfs(int node , int prt , int d=0){
    if(g[node].size()==1&&node!=1){
        leafs[node]=1;
        v.push_back(d);
        return 1;
    }
    for(int i = 0 ; i < g[node].size() ; i++){
        if(g[node][i]==prt)continue;
        leafs[node]+=dfs(g[node][i],node,d+1);
    }
    
    int ret = leafs[node]+1;
    v.push_back(d-leafs[node]);
    leafs[node]++;
    return ret;
}

inline void solve(){
    cin >> n >> k;
    g.resize(n+2);
    for(int i = 1 ,a,b ; i<n ; i++){
        scanf("%d%d",&a,&b);
        g[a].push_back(b);
        g[b].push_back(a);
    }
    dfs(1,0);
    ll ans=0;
    sort(all(v));
    reverse(all(v));
    for(int i = 0 ; i < k ;i++){
        ans+=v[i];
    }
    cout << ans << endl;
}

signed main() {
    int t=1;
    //cin>>t;
    while(t--){
        solve();
    }
    return 0;
}