#include <bits/stdc++.h>
  
using namespace std;
  
template<class T> void ckmin(T &a, T b) { a = min(a, b); }
template<class T> void ckmax(T &a, T b) { a = max(a, b); }
  
#define pb push_back
#define mp make_pair
#define cotu cout
#define itn int
#define Red ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define F first
#define S second
#define sz(x) (int)x.size()
#define all(x) (x).begin(), (x).end()
#define rep(i, n) for(int i = 0; i < n; ++i)
#define repr(i,n) for(int i = n - 1; i >= 0; --i)
#define Rep(i, a, n) for(int i = (a); i <=(n); ++i)
#define repst(i, n) for(auto it = n.begin(); it != n.end(); ++it)
#define Repr(i, a, n) for(int i = (n); i >= (a); --i)
  
#define ordered_set tree<int , null_type,less<int >, rb_tree_tag,tree_order_statistics_node_update> 
  
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
  
const int inf = int(1e9);
const int mod = inf + 7;
const int N = 1e6 + 555; // TL MB
const double PI = acos(-1.0);
int t[N];
vector<pii> w;
set<int> st;
bool cmp(pii a, pii b){
	return a.S < b.S;
}
void build(int v, int tl, int tr){
	if(tl == tr) t[v] = w[tl].F; 
	else{
		int tm = tl + tr >> 1;
		build(2 * v, tl, tm);
		build(2 * v + 1, tm + 1, tr);
		t[v] = max(t[v * 2], t[v * 2 + 1]);
	}
}
int gm(int v, int tl, int tr, int l, int r){
	if(r < tl || tr < l){
		return 0;
	}
	 if(l <= tl && tr <= r){
		return t[v];
	}
	else{
		int tm = tl + tr >> 1;
		return max(gm(2 * v, tl, tm, l, r), gm(2 * v + 1, tm + 1, tr, l, r));
	}
}
map<int, int> pos;
void solve()
{
	int n;
	cin >> n;
	for(int i = 0; i <= 4 * n; ++i){
		t[i] = 0;
	}
	pos.clear();
	w.clear();
	st.clear();
	int a[n];
	int mx = 0;
	for(int i = 0; i < n; ++i){
		cin >> a[i];
		mx = max(mx, a[i]);
	}
	int q;
	cin >> q;
	int tx = 0;
	while(q--){
		int x, y;
		cin >> x >> y;
		st.insert(y);
		tx = max(tx, x);
		w.pb({x, y});
	}
	sort(all(w), cmp);
	build(1, 0, sz(w) - 1);
	for(int i = 0; i < sz(w); ++i){
		if(pos[w[i].S] == 0){
			pos[w[i].S] = i + 1;
		}
	}
	if(tx < mx){
		cout << -1 << endl;
		return;
	}
	int cnt = 0, res = 0, sum = 0;
	for(int i = 0; i < n; ++i){
		sum = max(a[i], sum);
		cnt++;
		auto it = st.lower_bound(cnt);
		if(it == st.end()){
			sum = a[i];
			cnt = 1;
			res++;
		}
		else{
			mx = gm(1, 0, sz(w) - 1, pos[*it] - 1, sz(w) - 1);
			if(mx >= sum){
				continue;
			}
			else{
				sum = a[i];
				cnt = 1;
				res++;
			}
		}
	}
	res++;
	cout << res <<  endl;

}
int main()
{
    Red;
    int T;
    cin >> T;
    while(T--)
    solve();
    return 0;
}