#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>

using namespace std;
void Emsawy(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}
#define V vector
#define MP make_pair
#define all(v)  ((v).begin()), ((v).end())
#define allr(v) ((v).rbegin()), ((v).rend())
#define clr(v, d) memset(v, d, sizeof(v))
#define sf(x) scanf("%d", &x)
#define sf2(x, y) scanf("%d %d", &x, &y)
#define sf3(x, y, z) scanf("%d %d %d", &x, &y, &z)
#define sfll(x) scanf("%I64d", &x)
#define sfll2(x, y) scanf("%I64d %I64d", &x, &y)
#define sfll3(x, y, z) scanf("%I64d %I64d %I64d", &x, &y, &z)
typedef long long ll;
int dx[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy[]{0, 0, 1, -1, 1, -1, -1, 1};
ll suf(ll x) { return (x * (x + 1)) / 2; }
V<V< int > > adj;
const ll mod = 1e9 + 7, oo = 1e9, M = 10000;
int n, m, k, gv[M] , x , y , vs[M] , cur = 0;
ll edges = 0;
int getedges(int nd){
	if (vs[nd] == cur) return 0;
	vs[nd] = cur;

	for (int i = 0; i < adj[nd].size(); i++){
		int ch = adj[nd][i];
		if (vs[ch] != cur) edges++;
	}
	int ret = 0;
	for (int i = 0; i < adj[nd].size(); i++){
		int ch = adj[nd][i];
		ret += getedges(ch);
	}
	return ret + 1;
}
int main()
{
	Emsawy();
	//string s;
	while (cin >> n >> m >> k){
		for (int i = 0; i < k; i++)
			sf(gv[i]);
		adj.clear();
		adj.resize(n + 1);
		for (int i = 0; i < m; i++){
			sf2(x, y);
			adj[x].push_back(y);
			adj[y].push_back(x);
		}
		ll ans = 0 , mx = 0;
		for (int i = 0; i < k; i++){
			edges = 0;
			cur++;
			ll ret = getedges(gv[i]);
			mx = max(mx, ret);
			ans += (suf(ret - 1) - edges);
		}
		ll remedge = 0 ,remnd = 0;
		for (int i = 1; i <= n; i++){
			if (vs[i] == 0){
				edges = 0;
				cur++;
				ll ret = getedges(i);
				remedge += edges;
				remnd += ret;
			}
		}
		ans += (suf(remnd - 1) - remedge);
		ans += (mx * remnd);
		cout << ans << endl;
		clr(vs, 0);
		cur = 0;
	}
	return 0;
}