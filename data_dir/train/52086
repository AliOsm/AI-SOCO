#include<bits/stdc++.h>
using namespace std;
const int dir[8][2]={{1,0},{1,1},{0,1},{-1,1},{-1,0},{-1,-1},{0,-1},{1,-1}};
bool vis[310][310][31][8],flag[310][310];
int n,t[35],ans=0;
void bfs()
{
    queue<pair<pair<int,int>,pair<int,int> > > q;
    q.push(make_pair(make_pair(150,150),make_pair(1,0)));
    vis[150][150][1][0]=1;
    // flag[151][151]=1;
    while(!q.empty())
    {
        pair<pair<int,int>,pair<int,int> > fr=q.front();q.pop();
        int nx=fr.first.first,ny=fr.first.second,layer=fr.second.first,pos=fr.second.second;
        // printf("%d %d %d\n",nx,ny,pos);
        for(int i=1;i<=t[layer];i++)
        {
             nx+=dir[pos][0];
             ny+=dir[pos][1];
             flag[nx][ny]=1;
        }
        if(layer==n)continue;
        int l=(pos+7)%8,r=(pos+1)%8;
        if(!vis[nx][ny][layer+1][l])
        {
            vis[nx][ny][layer+1][l]=1;
            q.push(make_pair(make_pair(nx,ny),make_pair(layer+1,l)));
        }
        if(!vis[nx][ny][layer+1][r])
        {
            vis[nx][ny][layer+1][r]=1;
            q.push(make_pair(make_pair(nx,ny),make_pair(layer+1,r)));
        }
    }
}
int main()
{
    scanf("%d",&n);
    for(int i=1;i<=n;i++)scanf("%d",&t[i]);
    bfs();
    for(int i=1;i<=309;i++)
    {
        for(int j=1;j<=309;j++)
        {
            ans+=flag[i][j];
        }
    }
    printf("%d\n",ans);
    return 0;
}