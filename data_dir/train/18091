#include <bits/stdc++.h>
#define PI 3.1415926535897932384626
using namespace std;

struct vec
{
    long double x,y;
    bool operator ==(const vec &a) const{
        return x==a.x&&y==a.y;
    }
    bool operator <(const vec &a) const{
        if(a.x!=x) return x<a.x;
        return y<a.y;
    }
    vec operator +(const vec &a) const{
        return {x+a.x,y+a.y};
    }
    vec operator *(const long double &a) const{
        return {x*a,y*a};
    }
    vec operator -(const vec &a) const{
        return {x-a.x,y-a.y};
    }
    vec operator /(const long double &a) const{
        return {x/a,y/a};
    }
    long double len() const{
        return sqrt(x*x+y*y);
    }
    long double dot(const vec &a) const{
        return x*a.x+y*a.y;
    }
    long double crs(const vec &a) const{
        return x*a.y-y*a.x;
    }
    vec proj(const vec &a) const{
        return (a/a.len())*(*this).dot(a)/a.len();
    }
};

struct P
{
    int x,y;
    bool operator <(const P &a) const{

        return y>a.y;
    }
};

bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}

long long x,y,z,mod=998244853;
vector<int> v;
int i,n,m,k,a,d,b,c,dx[10]={1,0,-1,0},dy[10]={0,1,0,-1};
int e;
int o[1];
int l[1];
int j[1];


stack<int> s;
//set<int> s;
queue<int> q;
P u[1];
char r[111];
//string r,r1;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
map<int,int> p;
//v.resize(unique(v.begin(),v.end())-v.begin());

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//rng();


int main()
{
    scanf("%d",&a);
    for(int t=1;t<=a;t++)
    {
        int k=0;
        scanf("%d %d %d",&b,&c,&d);
        for(int i=1;i<=max(b,c);i*=2)
        {
            if((b&i)&&(c&i))
            {
                if(d%3<2) k+=i;
            }
            if((b&i)==0&&(c&i))
            {
                if(d%3) k+=i;
            }
            if((b&i)&&(c&i)==0)
            {
                if(d%3!=1) k+=i;
            }
        }
        if(d>1)
        printf("%d\n",k);
        else if(d==0) printf("%d\n",b);
        else if(d==1) printf("%d\n",c);
    }
}
