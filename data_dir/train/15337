#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int mod = 1e9 + 7;
const int N = 1e5 + 1;
const int D = 130;
int ans;
int n;

int p[D][N];
int a[N];

vec <int> divi[N];

void input() {
    cin >> n;
    for(int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    for(int i = 1; i < N; ++i) {
        for(int j = i; j < N; j += i) {
            divi[j].pb(i);
        }
    }
    for(int i = 1; i < D; ++i) {
        p[i][0] = 1;
        for(int j = 1; j < N; ++j) {
            p[i][j] = 1ll * p[i][j - 1] * i % mod;
        }
    }
}

void solve() {
    sort(a, a + n);
    for(int i = 1; i <= a[n - 1]; ++i) {
        int res = 1;
        int lst = 0;
        for(int j = 1; j < len(divi[i]); ++j) {
            int d = lb(a, a + n, divi[i][j]) - a;
            int k = d - lst;
            res = 1ll * res * p[j][k] % mod;
            lst = d;
        }
        int k = n - lst;
        res = 1ll * res * (p[len(divi[i])][k] - p[len(divi[i]) - 1][k]) % mod;
        ans += res;
        ans %= mod;
    }
    cout << (ans + mod) % mod << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
