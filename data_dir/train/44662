#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define all(x) x.begin(),x.end()

int const N = 200001;
int n, v[N], q; 

class sg{
    private: vector<ll> seg, V, lazy;
    int n; 
    int left(int p){return p << 1;}
    int right(int p){return (p << 1)+1;}

    void bld(int p, int l, int r){
        if(l == r){seg[p] = V[l]; return;}
        bld(left(p), l, (l+r)/2);
        bld(right(p), (l+r)/2+1, r);
        seg[p] = min(seg[p*2], seg[p*2+1]);
    }
      
    inline void fix(int u, int s, int e){
        seg[u] += lazy[u];
        if(s != e){
             lazy[u*2] += lazy[u];
             lazy[u*2+1] += lazy[u];
        }
        lazy[u] = 0;
    }

    ll q(int p, int s, int e, int l, int r){
        fix(p,s,e);
        if(s > r || e < l)return INT_MAX; 
        if(s >= l && e <= r)return seg[p];
        return min(q(left(p), s, (s+e)/2,l , r) , q(right(p), (s+e)/2+1, e, l, r));
    }  
    
    void ad(int p, int s, int e, int l, int r, int k){
         fix(p, s, e);
         if(s > r || e < l)return; 
         if(s >= l && e <= r){
             lazy[p] += k;
             fix(p, s, e);
             return ;
         }
         ad(left(p), s, (s+e)/2,l , r, k);
         ad(right(p), (s+e)/2+1, e, l, r, k);
         seg[p] = min(seg[p*2], seg[p*2+1]);
    }

public:
    sg(const vector<ll> &_v){
      V = _v; 
      n = (int)V.size();
      seg.assign(4*n+1, 0);
      lazy.assign(4*n+1, 0);
      bld(1, 0, n-1);
    }
    ll q(int l, int r){return q(1, 0, n-1, l, r);}
    void ad(int l, int r, int k){ad(1, 0, n-1, l, r, k);}
};

int main(){
    #ifndef ONLINE_JUDGE
    freopen("read.txt","r",stdin);
    #endif
    scanf("%d", &n);
    for(int i = 0; i<n; ++i)scanf("%d", v+i);
    vector<ll> V(v, v+n);
    sg seg(V);
    scanf("%d", &q);
    char gl[1000];
    gets(gl);
    for(int i = 0; i<q; ++i){
        int l, r, k; 
        gets(gl);
        if(sscanf(gl,"%d%d%d", &l, &r, &k) == 3){
            if(l <= r)seg.ad(l,r,k);
            else {
                seg.ad(l,n-1,k);
                seg.ad(0,r,k);
            }
        }
        else {
            if(l <= r)
            printf("%lld\n", seg.q(l,r));
            else {
                 ll an = seg.q(l,n-1);
                 an = min(an, seg.q(0,r));
                 printf("%lld\n",an);
            }
        }
    }
}