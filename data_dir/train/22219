#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <bitset>
#define f first
#define s second
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define vi vector <int>
#define ld long double
#define pii pair<int, int>
#define y1 sda
using namespace std;    
const int N = int(5e5) + 10, M = int(5e5) + 10, mod = int(1e9)  + 7; 

int n, a[M],lx[M],rx[M], q, lp[N + 2], last[N];

vector <pair<int,pair<int,int> > > t[4*M];
vector <pair <int,int> > mx[4*M];

void build(int v,int tl,int tr){
	if(tl == tr){
		t[v].pb(mp(lx[tl],mp(rx[tl], tl)));
		mx[v].pb(mp(rx[tl], tl));
		return;
	}
	int tm = (tl + tr) >> 1;
	build(v + v, tl, tm);
	build(v + v + 1, tm + 1, tr);
	t[v].resize(tr - tl + 1);
	merge(t[v + v].begin(), t[v + v].end(), t[v + v + 1].begin(), t[v + v + 1].end(), t[v].begin());
	mx[v].pb(t[v][0].s);
	for(int i = 1; i < t[v].size(); i++){
		mx[v].pb(t[v][i].s);
		mx[v][i] = max(mx[v][i], mx[v][i - 1]);
	}
}

int get(int v,int tl,int tr,int l,int r){
	if(l > tr || tl > r) return -1;
	if(l <= tl && tr <= r){
		int lx = -1, rx = int(t[v].size());
		while(rx - lx > 1){
			int mid = (lx + rx) >> 1;
			if(t[v][mid].f <= l) lx = mid;
			else rx = mid;
		}	
		if(lx == -1 || mx[v][lx].f < r) return -1;
		return mx[v][lx].s;
	}
	int tm = (tl + tr) >> 1;
	int res = get(v + v, tl, tm, l, r);
	if(res != -1) return res;
	return get(v + v + 1, tm + 1, tr, l, r);
}

int main () {
	scanf("%d", &n);
	for(int i = 1; i <= n; i++){
		scanf("%d", &a[i]);
	}
	for(int i = 1; i <= n; i++){
		lx[i] = last[a[i]] + 1;
		last[a[i]] = i;
	}

	for(int i = 1; i < N; i++){
		last[i] = n + 1;
	}

	for(int i = n; i > 0; i--){
		rx[i] = last[a[i]] - 1;
		last[a[i]] = i;
	}
	build(1,1,n);
	scanf("%d", &q);
	int lst = -1;
	for(int i = 1,l,r; i <= q; i++){
		scanf("%d%d", &l, &r);
		lst = get(1,1,n,l,r);
		if(lst == -1) lst = 0;
		printf("%d\n", a[lst]);
	}


return 0;
}