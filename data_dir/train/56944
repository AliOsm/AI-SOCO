//==========================================================================
//
//                   Bismillahir-Rahmanir-Rahim
//
// ==========================================================================
#include <bits/stdc++.h>
#define        ll                              long long
#define        f(x,y,z)                        for(int x=y;x<z;x++)
#define        pii                             pair<int,int>
#define        pll                             pair<ll,ll>
#define        CLR(a)                          memset(a,0,sizeof(a))
#define        SET(a)                          memset(a,-1,sizeof(a))
#define        N                               100010
#define        M                               1000000007
#define        pi                              acos(-1.0)
#define        ff                              first
#define        ss                              second
#define        pb                              push_back
#define        inf                             (int)1e9
using namespace std;
int dx[]={0,0,1,-1,-1,-1,1,1};
int dy[]={1,-1,0,0,-1,1,1,-1};
template < class T> inline T biton(T n,T pos){return n |((T)1<<pos);}
template < class T> inline T bitoff(T n,T pos){return n & ~((T)1<<pos);}
template < class T> inline T on(T n,T pos){return (bool)(n & ((T)1<<pos));}
template < class T> inline T gcd(T a, T b){while(b){a%=b;swap(a,b);}return a;}
template <typename T> string NumberToString ( T Number ) { ostringstream ss; ss << Number; return ss.str(); }
inline int nxt(){int aaa;scanf("%d",&aaa);return aaa;}
template <class T> inline T bigmod(T p,T e,T m){T ret = 1;
for(; e > 0; e >>= 1){
    if(e & 1) ret = (ret * p) % m;p = (p * p) % m;
} return (T)ret;}
#define sayed
#ifdef sayed
     #define debug(args...) {cerr<<"Debug: "; dbg,args; cerr<<endl;}
#else
    #define debug(args...)  // Just strip off all debug tokens
#endif
struct debugger{
    template<typename T> debugger& operator , (const T& v){
        cerr<<v<<" ";
        return *this;
    }
}dbg;
///******************************************START******************************************
vector<int> adj[N];
int color[N];
int bfs(int s){
   color[s]=0;
   queue<int> q;
   q.push(s);
   while(!q.empty()){
       s=q.front();
       q.pop();
      for(int i=0;i<adj[s].size();i++){
           int t=adj[s][i];
           if(color[t]==-1){
              color[t]=color[s]^1;
               q.push(t);
               //cout<<t<<"    "<<color[t]<<endl;
           } else if(color[s]==color[t]) return -1;

      }
    }


   return 0;

}
int main(){
     // freopen("out.txt","w",stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n;
    int m;
    cin>>n>>m;
    while(m--){

        int a,b;
       cin>>a>>b;
        adj[a].pb(b);
        adj[b].pb(a);
    }
    for(int i=1;i<=n;i++) color[i]=-1;
    int flag=0;
    for(int i=1;i<=n;i++){
       if(color[i]==-1&&adj[i].size()){
           flag=bfs(i);
           if(flag==-1) break;
       }
    }
    if(flag==-1){
        puts("-1");
        return 0;
    }
    vector<int> pari,arya;
    for(int i=1;i<=n;i++){
        if(color[i]==0) pari.pb(i);
        if(color[i]==1) arya.pb(i);
    }
    cout<<pari.size()<<endl;
    f(i,0,pari.size()) cout<<pari[i]<<" ";
    cout<<endl;
    cout<<arya.size()<<endl;
    f(i,0,arya.size()) cout<<arya[i]<<" ";
    cout<<endl;
return 0;
}
