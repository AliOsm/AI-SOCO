#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
#include <bitset>
#include <complex>
#include <random>
#include <chrono>
#include <functional>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf 1000000
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pli pair<ll, int>
#define pil pair<int, ll>
#pragma GCC optimize ("O3")
//#define x first
//#define y second
const int mod = (1e9) + 7, mod2 = 998244353;
const double eps = 1e-10;
const int siz = 3e5 + 5, siz2 = 19, lg = 31, block = 317, block2 = 1000, mxv = 5e5;

int n, m;
int nodenh[1505][1505], nodenv[1505][1505];

char grid[1505][1505];
bool vis[1505][1505];

bool can;

pii d[4] = { {-1,0}, {0, -1}, {1, 0}, {0, 1} };

int adjust(int &nk, int nd, int lim) {
	if (nk < 0) {
		nd--;
		nk = lim - 1;
	}
	if (nk == lim) {
		nd++;
		nk = 0;
	}
	return nd;
}

void dfs(int i, int j, int nh, int nv) {
	if (vis[i][j]) {
		if (nh != nodenh[i][j] || nv != nodenv[i][j]) {
			can = true;
		}
		return;
	}
	vis[i][j] = true;
	nodenh[i][j] = nh;
	nodenv[i][j] = nv;
	for (int k = 0; k < 4; k++) {
		int ni = i + d[k].first, nj = j + d[k].second;
		int nnv = adjust(ni, nv, n);
		int nnh = adjust(nj, nh, m);
		if (grid[ni][nj] != '#') {
			dfs(ni, nj, nnh, nnv);
		}
	}
}
int main()
{
	scanf("%d%d", &n, &m);
	pii start = {-1, -1};
	for (int i = 0; i < n; i++) {
		scanf("%s", grid[i]);
		if (start.first == -1) {
			for (int j = 0; j < m; j++) {
				if (grid[i][j] == 'S') {
					start = { i, j };
					break;
				}
			}
		}
	}
	dfs(start.first, start.second, 0, 0);
	printf("%s\n", (can?"Yes":"No"));
  	return 0;
}