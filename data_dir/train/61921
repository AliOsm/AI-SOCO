#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int x[3], y[3];
int ans = 0, sz;

bool ok(vector <pii> v) {
    for (int i = 0; i < v.size(); i++) {
        if (v[i].s != sz) return false;
    }
    int cur = 0;
    for (int i = 0; i < v.size(); i++) {
        cur += v[i].f;
    }
    return cur == sz;
}

void fill(vector <pair<pii, int> > v) {
    printf("%d\n", sz);
    for (int i = 0; i < sz; i++) {
        int ind = -1;
        if (i < v[0].f.f) ind = 0;
        else if (i < v[0].f.f + v[1].f.f) ind = 1;
        else ind = 2;
        char c = (char)('A' + v[ind].s);
        for (int j = 0; j < sz; j++) printf("%c", c);
        printf("\n");
    }
}

bool ok1(vector <pii> v) {
    bool ans = (v[0].f == v[1].f);
    ans &= (v[0].f + v[2].f == sz);
    ans &= (v[2].s == sz);
    ans &= (v[0].s + v[1].s == sz);
    return ans;
}

void fill1(vector <pair<pii, int> > v) {
    printf("%d\n", sz);
    for (int i = 0; i < v[0].f.f; i++) {
        for (int j = 0; j < sz; j++) {
            int ind = 0;
            if (j >= v[0].f.s) ind = 1;
            char c = (char)('A' + v[ind].s);
            printf("%c", c);
        }
        printf("\n");
    }
    for (int i = v[0].f.f; i < sz; i++) {
        for (int j = 0; j < sz; j++) {
            char c = (char)('A' + v[2].s);
            printf("%c", c);
        }
        printf("\n");
    }
}

int main(){
    
    for (int i = 0; i < 3; i++) {
        scanf("%d%d", x + i, y + i);
        ans += x[i] * y[i];
    }
    
    sz = 0;
    
    while (sz * sz < ans) sz++;
    
    if (sz * sz != ans) {
        printf("-1\n");
        return 0;
    }
    
    for (int i = 0; i < 3; i++) {
        if (x[i] > sz || y[i] > sz) {
            printf("-1\n");
            return 0;
        }
    }
    
    int ind[3] = {0, 1, 2};
    
    do {
        for (int mask = 0; mask < (1 << 3); mask++) {
            vector <pair<pii, int> > vv;
            vector <pii> v;
            for (int i = 0; i < 3; i++) {
                if ((1 << i)&mask) {
                    vv.pb(mp(mp(y[ind[i]], x[ind[i]]), ind[i]));
                    v.pb(mp(y[ind[i]], x[ind[i]]));
                } else {
                    vv.pb(mp(mp(x[ind[i]], y[ind[i]]), ind[i]));
                    v.pb(mp(x[ind[i]], y[ind[i]]));
                }
            }
            if (ok(v)) {
                fill(vv);
                return 0;
            }
            if (ok1(v)) {
                fill1(vv);
                return 0;
            }
        }
    } while (next_permutation(ind, ind + 3));
    
    cout << -1 << endl;
        
    return 0;
}