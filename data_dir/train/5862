#include <bits/stdc++.h>
#define MAXLEN 27
using namespace std;

struct trie {
    trie* ch[2];
    int cnt;
    bool isLeaf;

    trie() {
        memset(ch,0,sizeof ch);
        cnt = 0;
        isLeaf = false;
    }

    void insert(int pos,string s) {
        cnt++;
        if(pos == s.length())
            return;
        int cur = s[pos]-'0';
        if(ch[cur] == 0)
            ch[cur] = new trie();
        ch[cur]->insert(pos+1,s);
    }

    void remove(int pos,string s) {
        cnt--;
        if(pos==s.length())
            return;
        int cur = s[pos]-'0';
        ch[cur]->remove(pos+1,s);
        if(ch[cur]->cnt == 0)
            ch[cur] = 0;
    }

    int search(int pos,string s,string req,bool less) {
        if(less)
            return cnt;
        if(pos == s.length())
            return 0;
        int ret = 0;
        if(req[pos] == '0') {
            for(int i = 0;i<2;i++) {
                if(i == s[pos]-'0' && ch[i] != 0)
                    ret += ch[i]->search(pos+1,s,req,false);
            }
        } else {
            for(int i = 0;i<2;i++) {
                if(ch[i] != 0)
                    if(i == s[pos]-'0')
                        ret += ch[i]->search(pos+1,s,req,true);
                    else
                        ret += ch[i]->search(pos+1,s,req,false);
            }
        }
        return ret;
    }
};


string toBinary(int x) {
    string ret = "";
    while(x) {
        if(x%2)
            ret += "1";
        else
            ret += "0";
        x/= 2;
    }
    while(ret.length() < MAXLEN)
        ret += "0";
    reverse(ret.begin(),ret.end());
    return ret;
}


int main()
{
    int q;
    scanf("%d",&q);
    trie *solver = new trie();
    while(q--) {
        int t,x,y;
        string temp,temp2;
        scanf("%d",&t);
        if(t == 1) {
            scanf("%d",&x);
            temp = toBinary(x);
            solver->insert(0,temp);
        } else if (t == 2) {
            scanf("%d",&x);
            temp = toBinary(x);
            solver->remove(0,temp);
        } else {
            scanf("%d %d",&x,&y);
            temp = toBinary(x),temp2 = toBinary(y);
            printf("%d\n",solver->search(0,temp,temp2,false));
        }
    }
    return 0;
}
