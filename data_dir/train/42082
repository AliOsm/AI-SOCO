/*
 * Author    : raj1307 - Raj Singh
 * Date      : 20.04.2020
 */
 
#pragma GCC optimize("Ofast")
// #pragma GCC optimize("unroll-loops")
// #define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
using namespace std;
 
//#define DEBUG
#ifdef DEBUG
#define deb(...) cerr<<"Line:"<<__LINE__<<" "; __f(#__VA_ARGS__, __VA_ARGS__)
#define debarr(a,n) cerr<<#a<<" : ";for(int i=0;i<n;i++) cerr<<a[i]<<" "; cerr<<endl;
#define print(arr) for (auto it = arr.begin(); it != arr.end(); ++it) cerr << *it << " "; cerr << endl;
#define debmat(mat,row,col) cerr<<#mat<<" :\n";for(int i=0;i<row;i++) {for(int j=0;j<col;j++) cerr<<mat[i][j]<<" ";cerr<<endl;}
template<typename Arg1>
void __f(const char *name, Arg1 &&arg1) {
	cerr<<name<<" : "<<arg1<<endl;
}
template<typename Arg1, typename ... Args>
void __f(const char *names, Arg1 &&arg1, Args &&... args) {
	const char *comma=strchr(names+1,',');
	cerr.write(names,comma-names)<<" : "<<arg1<<" | ";
	__f(comma+1,args...);
}
 
#else
#define deb(...) {}
#define debarr(a,n) {}
#define debmat(mat,row,col) {}
#define debarr(a,n) {}
#endif
 
#define fio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define fr(i, a, b) for(int i = (a); i < (b); ++i)
#define fb(i, b, a) for(int i = (b); i > (a); --i)
#define fill(x,y) memset(x,y,sizeof(x))
#define rr return 
#define mp make_pair
#define pb push_back
#define sz(x) ((int)x.size())
#define int long long
#define ll long long
//#define ld long double
#define endl "\n"
#define Endl "\n"
#define all(v) (v).begin(), (v).end()
typedef pair<int, int> ii;;
int max(int a,int b){if(a>b) return a; else return b;}
int min(int a,int b){if(a>b) return b; else return a;}
int gcd(int a,int b){ return (b == 0) ? a : gcd(b, a % b);}
inline int lcm(int a,int b){ return a / gcd(a, b) * b;}
inline int normalize(int x,int mod){ x %= mod; if (x < 0) x += mod; return x;}
 
int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};
string abc="abcdefghijklmnopqrstuvwxyz";
const double PI=acosl(-1);
//const int mod = 1000*1000*1000+7;
const int mod = 998244353;
const int inf = 1e18 +5;
 
//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }
 
int floor1(int n,int k){
    if(n%k == 0 || n >= 0)return n/k;
    return (n/k)-1;
}
 
int ceil1(int n,int k){
    return floor1(n+k-1,k);
}
 
int powm(int a, int b) {
	int res=1;
	while(b) {
		if(b&1)
			res=(res*a)%mod;
		a=(a*a)%mod;
		b>>=1;
	}
	return res;
}
 
 
const int N = 2e5 + 5;
 
 
int n;
int a[N];

struct data   // Segment Tree implementation taken from 
{             // https://github.com/Ashishgup1/Competitive-Coding/blob/master/Segment%20Tree.cpp
	//Use required attributes
	int mn;

	//Default Values
	data() : mn(0) {};
};

struct SegTree
{
	int N;
	vector<data> st;
	vector<bool> cLazy;
	vector<int> lazy;

	void init(int n)
	{
		N = n;
		st.resize(4 * N + 5);
		cLazy.assign(4 * N + 5, false);
		lazy.assign(4 * N + 5, 0);
	}

	//Write reqd merge functions
	void merge(data &cur, data &l, data &r) 
	{
		cur.mn = min(l.mn, r.mn);
	}
	
	//Handle lazy propagation appriopriately
	void propagate(int node, int L, int R)
	{
		if(L != R)
		{
			cLazy[node*2] = 1;
			cLazy[node*2 + 1] = 1;
			lazy[node*2] = lazy[node];
			lazy[node*2 + 1] = lazy[node]; 
		}
		st[node].mn = lazy[node];
		cLazy[node] = 0;
	}


	data Query(int node, int L, int R, int i, int j)
	{
		if(cLazy[node])
			propagate(node, L, R);
		if(j<L || i>R)
			return data();
		if(i<=L && R<=j)
			return st[node];
		int M = (L + R)/2;
		data left=Query(node*2, L, M, i, j);
		data right=Query(node*2 + 1, M + 1, R, i, j);
		data cur;
		merge(cur, left, right);
		return cur;
	}

	void Update(int node, int L, int R, int i, int j, int val)
	{
		if(cLazy[node])
			propagate(node, L, R);
		if(j<L || i>R)
			return;
		if(i<=L && R<=j)
		{
			cLazy[node] = 1;
			lazy[node] = val;
			propagate(node, L, R);
			return;
		}
		int M = (L + R)/2;
		Update(node*2, L, M, i, j, val);
		Update(node*2 + 1, M + 1, R, i, j, val);
		merge(st[node], st[node*2], st[node*2 + 1]);
	}

	data pQuery(int node, int L, int R, int pos)
	{
		if(cLazy[node])
			propagate(node, L, R);
		if(L == R)
			return st[node];
		int M = (L + R)/2;
		if(pos <= M)
			return pQuery(node*2, L, M, pos);
		else
			return pQuery(node*2 + 1, M + 1, R, pos);
	}

	data query(int pos)
	{
		return pQuery(1, 1, N, pos);
	}

	data query(int l, int r)
	{
		return Query(1, 1, N, l, r);
	}

	void update(int l, int r, int val)
	{
		Update(1, 1, N, l, r, val);
	}
};


SegTree s;
int q;
vector<int>g[N];

void solve(){   
        
	cin>>n>>q;
	s.init(N);
	fr(i,1,n+1) cin>>a[i];


	// int val=q;

	// int pos=-1;


	// fr(i,1,n+1){

	// 	if(a[i]==0){
	// 		if(i==1){
	// 			fr(j,2,n+1){
	// 				if(a[j]!=0){
	// 					val=a[j];
	// 					break;
	// 				}
	// 			}
	// 			if(sz(g[val])==0)
	// 				pos=i;
	// 			a[i]=val;
	// 		}
	// 		else{
	// 			a[i]=a[i-1];
	// 		}
	// 	}
	// }







	fr(i,1,n+1){
		g[a[i]].pb(i);
	}

	int flag=1,f2=1;
	int mx=0;

	int mark=0;

	fr(i,1,q+1){

		if(i==q and sz(g[i])==0){
			f2=0;
			mark=1;
			break;
		}
		if(sz(g[i])!=0){
			s.update(g[i][0],g[i][sz(g[i])-1],i);
			mx=max(mx,i);
		}

	}

	// fr(i,1,n+1){
	// 	cout<<s.query(i).mn<<" ";
	// }




	int l[N]={0};


	fr(i,1,n+1){
		l[i]=s.query(i).mn;
	}



	if(mark){


		int ff=0;
		fr(i,1,n+1){
			if(a[i]==0){
				l[i]=q;
				ff=1;
				break;
			}
		}
		if(ff==0){
			cout<<"NO";
			return;
		}
		fr(i,1,n+1){
			if(l[i]==0)
				l[i]=l[i-1];
		}
	}
	
	else{

		fr(i,1,n+1){
			int val=-1;
			if(l[i]==0){
				if(i==1){
					fr(j,2,n+1){
						if(l[j]!=0){
							val=l[j];
							break;
						}
					}
					if(val==-1){
						cout<<"NO";
						return;
					}
					l[i]=val;
				}
				else{
					l[i]=l[i-1];
				}
			}
		}
	}



	fr(i,1,n+1){
		if(a[i]==0)
			continue;
		if(a[i]!=l[i]){
			cout<<"NO";
			return;
		}
	}


	cout<<"YES"<<endl;
	fr(i,1,n+1) cout<<l[i]<<" ";










	// int cnt=0;

	// fr(i,1,n+1){

	// 	if(s.query(i).mn==0){
	// 		++cnt;
	// 	}	
	// 	if(s.query(i).mn==a[i] and a[i]==0){
	// 		continue;
	// 	}



	// 	if(s.query(i).mn!=a[i] and a[i]!=0){

	// 		if(b[i]==0)
	// 			a[i]


	// 		flag=0;
	// 		break;
	// 	}
	// }


	// // if(cnt<n-mx){
	// // 	cout<<"NO";
	// // 	return;
	// // }


	// int b[N]={0};


	// if(flag==0){
	// 	cout<<"NO";
	// 	return;
	// }
	// else{
	// 	// cout<<"YES"<<endl;
	// 	fr(i,1,n+1){
	// 		if(a[i]==0){
	// 			int val=q;
	// 			if(i==1){
	// 				fr(j,i+1,n+1){
	// 					if(a[j]!=0){
	// 						val=a[j];
	// 						break;
	// 					}
	// 				}
	// 				a[i]=val;
	// 				b[i]=a[i];
	// 			}
	// 			else{
	// 				a[i]=a[i-1];
	// 				b[i]=a[i];
	// 			}
				
	// 		}	
	// 		else{
	// 			b[i]=a[i];
	// 		}
	// 	}

	// }


	// flag=0;
	// fr(i,1,n+1){
	// 	if(b[i]==q) flag=1;
	// }

	// if(flag==1){
	// 	cout<<"YES"<<Endl;
	// 	fr(i,1,n+1) cout<<b[i]<<" ";

	// }
	// else{
	// 	cout<<"NO";
	// }











    
}
 
 
 
 
signed main() {
	fio;
	#ifndef ONLINE_JUDGE 
    	freopen("input.txt", "r", stdin); 
    	freopen("output.txt", "w", stdout); 
    	//freopen("error.txt", "w", stderr); 
	#endif 
	cout<<fixed<<setprecision(10);
	int t=1;
	//cin>>t;  // UNCOMMENT FOR TEST-CASES
	//precompute();
	while(t--) {
		solve();
	}	
	return 0;
}
 
 