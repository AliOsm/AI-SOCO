#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define cps CLOCKS_PER_SEC
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define eb emplace_back
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)), (v).erase(unique(all(v)), (v).end())
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define mt make_tuple
#define pqueue priority_queue
#define bitcount(x) __builtin_popcount(x)
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& p) { return os << '(' << p.fi << ", " << p.se << ')'; }

template<typename T>
void printv(const T& v) { for(auto i : v) cerr << i << ' '; cerr << '\n'; }

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
using namespace __gnu_pbds;
template<class key, class cmp = std::less<key>>
using ordered_set = tree<key, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar

template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;

//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

#define N 100005
#define int ll
// #define trace(...) 42

int power(int a, ll b, int p = mod)
{
    int res = 1;
    while(b > 0){
        if(b & 1) res = mul(res, a, p);
        a = mul(a, a, p);
        b >>= 1;
    }
    return res;
}

#define Matrix vector<vector<int>>

//Returns C = A x B
Matrix mul(const Matrix& A, const Matrix& B, int p = mod) {
    int n = A.size();
    Matrix C(n, vector<int>(n));
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            C[i][j] = 0;
            for(int k = 0; k < n; k++) {
                C[i][j] = add(C[i][j], mul(A[i][k], B[k][j], p), p);
            }
        }
    }
    return C;
}

//Returns A ** k
Matrix power(Matrix A, ll k, int p = mod) {
    int n = A.size();
    Matrix B(n, vector<int>(n));

    for(int i = 0; i < n; i++) B[i][i] = 1;

    while(k) {
        if(k & 1) {
            B = mul(B, A, p);
        }
        A = mul(A, A, p);
        k >>= 1;
    }
    return B;
}

void print(const Matrix& M) {
    int n = M.size();
    assert(M[0].size() == n);
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) cerr << M[i][j] << ' '; cout << '\n';
    }
}

Matrix A = {{1, 1, 1}, {1, 0, 0}, {0, 1, 0}}, B;

main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
     // freopen("/home/tarun/Desktop/output.txt", "w", stdout);
    #endif
    sync;
    clock_t clk = clock();
    cerr << "I will return...\n";

    int n, f[3], c;
    cin >> n >> f[0] >> f[1] >> f[2] >> c;

    --n;
    if(n < 3) {
        cout << f[n] << '\n'; return 0;
    }

    B = power(A, n-2, mod-1);
    // print(B);

    int ans = 1;
    ans = mul(ans, power(f[2], B[0][0]));
    ans = mul(ans, power(f[1], B[0][1]));
    ans = mul(ans, power(f[0], B[0][2]));


    A = {{1, 1, 1, 2, mod-5}, 
         {1, 0, 0, 0, 0}, 
         {0, 1, 0, 0, 0},
         {0, 0, 0, 1, 1}, 
         {0, 0, 0, 0, 1}
        };


    B = power(A, n-2, mod-1);
    // print(B);

    int k = 3*B[0][3] + B[0][4]; k %= mod-1;
    ans = mul(ans, power(c, k));

    cout << ans << '\n';

    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << (double)(clock() - clk) * 1000.0 / cps << '\n';
}

//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment


