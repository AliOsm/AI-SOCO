#include <bits/stdc++.h>
using namespace std;
#define finish(x) return cout << x << endl, 0;
#define ll long long

int n, m, k, x, cum[1000001], ans;

struct fenwick{
    ll sz, fen[1000001];
    void resize(int n){
        sz = n + 1;
        memset(fen, 0, sizeof(fen));
    }
    ll query(int ind){
        ll ans = 0;
        while(ind >= 1){
            ans += fen[ind];
            ind -= ind & -ind;
        }
        return ans;
    }
    void upd(int ind, ll val){
        while(ind <= sz){
            fen[ind] += val;
            ind += (ind & -ind);
        }
    }
    ll query(int l, int r){
        return query(r) - query(l-1);
    }
};

fenwick tree;

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    tree.resize(1000001);
    cin >> n >> m >> k;
    while(n-- && cin >> x) cum[x] = 1;
    int sum = 0;
    for(int i = 1 ; i <= m ; i++)
        sum += cum[i];
    int i = m, cur = 0;
    for(int i = m ; i >= 1 ; i--){
        if(sum < k) break;
        if(cum[i]){
            cum[i] = 0;
            sum--;
            cur++;
        }
    }
    for(int i = 1 ; i < 1000001 ; i++)
        cum[i] += cum[i-1];
    for(int i = m ; i <= 1000000 ; i++)
        if(cum[i]-cum[i-m]-tree.query(i-m+1, i) >= k){
            ans++;
            tree.upd(i, 1);
        }
    cout << ans+cur << endl;
    return 0;
}
