/*
 * WATCH THIS
 */
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include "bits/stdc++.h"

#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define F first
#define S second

using ll = long long;
using ii = pair<int, int>;
using db = long double;

template<class C> void amin(C &a4, C b4) {
	a4 = min(a4, b4);
}
template<class C> void amax(C &a4, C b4) {
	a4 = max(a4, b4);
}

template<class T> ostream &operator<<(ostream& os, vector<T> V) {
	os << "[";
	for (auto vv : V)
		os << vv << ",";
	return os << "]";
}
template<class L, class R> ostream &operator<<(ostream &os, pair<L, R> P) {
	return os << "(" << P.first << "," << P.second << ")";
}

const int N = 3e5 + 5;
const int MOD = 1e9 + 7;
bool C[2005], R[2005];
double dp[2005][2005];
bool vis[2005][2005];
int n, m;
double solve(int row, int col) {
	if (row == n && col == n)
		return 0.0;
	double &ret = dp[row][col];
	if (vis[row][col])
		return ret;
	vis[row][col] = true;
	int none = row * col;
	int rowOnly = (n - row) * col;
	int colOnly = row * (n - col);
	int rowAndCol = (n - row) * (n - col);
	ret = 0.0;
	if (rowOnly) {
		ret += (solve(row + 1, col) + 1) * (rowOnly * 1.0 / (n * n));
	}
	if (colOnly) {
		ret += (solve(row, col + 1) + 1) * (colOnly * 1.0 / (n * n));
	}
	if (rowAndCol) {
		ret += (solve(row + 1, col + 1) + 1) * (rowAndCol * 1.0 / (n * n));
	}
	if (none) {
		double p = none * 1.0 / (n * n);
		ret += p;
		ret /= (1 - p);
	}
	return ret;
}
int main() {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#endif

	cin >> n >> m;

	for (int i = 0; i < m; i++) {
		int r, c;
		cin >> r >> c;
		C[r] = R[c] = 1;
	}
	
	cout << fixed << setprecision(5)
			<< solve(accumulate(C + 1, C + n + 1, 0),
					accumulate(R + 1, R + n + 1, 0)) << '\n';

	return 0;
}
/*
 * GET LOST
 */
