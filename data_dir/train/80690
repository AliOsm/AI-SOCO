
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <array>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
#include <bitset>
#include <complex>
using namespace std;
#define rep(i, n) for (int (i) = 0; (i) < (n); (i) ++)
#define rep1(i, n) for (int (i) = 1; (i) <= (n); (i) ++)
#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout<<#a<<" :";FOR(i123,x,y)cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;


// It acts as if this was an array A of length N (index = 1, 2, ..., N) that supports
// 1) sum(i) returns A[1] + A[1] + ... + A[i]
// 2) add(i, x) => A[i] += x;
// Each operation takes O(log N)
struct BinaryIndexedTree{
  int N;
  vector<long long> v;
  BinaryIndexedTree(int N) : N(N), v(N + 1) {}

  long long sum(int i) {
    long long s = 0;
    for (;i > 0; s += v[i], i -= i & -i);
    return s;
  }
  void add(int i, long long x) {
    for (; i <= N; v[i] += x, i += i & -i);
  }
};

int N, M;
int A[300100];
int D[1001001];
int main() {
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N >> M;
  BinaryIndexedTree bit(N);
  D[1] = 1;
  D[2] = 2;
  set<int> s;
  for (int i = 1; i <= N; i++) {
    cin >> A[i];
    if (A[i] >= 3) {
      s.insert(i);
    }
    bit.add(i, A[i]);
    int cur = A[i];
    while (!D[cur]) {
      int& cnt = D[cur];
      for (int d = 1; d * d <= cur; d++) {
        if (cur % d == 0) {
          cnt++;
          if (d * d < cur) {
            cnt++;
          }
        }
      }
      if (D[cnt] == 0) {
        cur = cnt;
      } else {
        break;
      }
    }
  }
  for (int query = 1; query <= M; query++) {
    int t, l, r;
    cin >> t >> l >> r;
    if (t == 1) {
      // replace
      auto it = s.lower_bound(l);
      vector<int> rem;
      while (it != s.end() && *it <= r) {
        int i = *it;
        bit.add(i, D[A[i]] - A[i]);
        A[i] = D[A[i]];
        if (A[i] <= 2) {
          rem.push_back(i);
        }
        it++;
      }
      for (int x : rem) {
        s.erase(x);
      }
    } else {
      // sum
      cout << bit.sum(r) - bit.sum(l - 1) << endl;
    }
  }
}

