
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <random>
#include <iomanip>

#include <algorithm>
#include <vector>
#include <queue>
#include <string>
#include <stack>
#include <set>
#include <map>
#include <numeric>
#include <functional>
#include <deque>
#include <array>
#include <iterator>
#include <bitset>
#include <initializer_list>

using namespace std;

#include <ext/rope>

using namespace __gnu_cxx;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

#define int long long

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VPI;

//tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> tr;

#define add push_back
#define rem pop_back
#define ALL(x) x.begin(), x.end()
#define SORT(x) sort(ALL(x))
#define SIZE(x) int((x).size())
#define F first
#define S second
#define DEBUG(x) cout << #x << " " << x << endl;


const double EPS = 1e-9;
const double PI = acos(-1.);
const int MOD = 1e9 + 7;
const int MAXN = 500001;
int INF = __INT64_MAX__;
int MAX = -1e18;
int MIN = 1e18;
string YN[] = {"NO", "YES"};


#define fori(it, x) for(__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)
#define forn(i, a, b) for(int i = a; i <= b; i++)
#define forv(i, b, a) for(int i = b; i >= a; i--)


template<typename T1, typename T2> T2 max(T1 a, T2 b) { T2 max = a > b ? a : b; return max; }
template<typename T1, typename T2> T2 min(T1 a, T2 b) { T2 min = a < b ? a : b; return min; }

vector<int> vc, ans;

string s, t;

set<int> st;

map<int, int> mp;

static const int N = 1 << 20;
static const int M = 111111;

static int n, m, k, result, cnt;
static int A[N], B[N], used[MAXN];


void solution()
{
        cin >> n >> m;
        forn ( i, 1, n ){
                cin >> A[i];
        }
        sort ( A + 1, A + 1 + n );
        reverse ( A + 1, A + 1 + n );
        int id = 1e9;
        forn ( i, 2, n ){
                if ( A[i] < id ) id = A[i];
                while ( st.count( id ) ){
                        id--;
                        if ( id == 0 ) {
                                id = 1;
                                break;
                        }
                }
                st.insert( id );
                cnt += A[i] - 1;
        }
        cnt += A[1] - ( A[1] - st.size() ) ;
        if ( st.size() == A[1] ) cnt--;
        cout << cnt;

}
/**

*
*
***
*/

__INT16_C() main(__int32 argc, char * argv[])
{

        //freopen("input.txt", "r", stdin);
        //freopen("output.txt", "w", stdout);

        ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
        //cout.precision(15);

        int query = 1;
        // cin >> query;

        while(query--) solution();

}
