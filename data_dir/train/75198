// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define int long long

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = 103;

int q, n, m, t[N], l[N], h[N];
map<int, PII> prz;
set<int> tim;

void upd(int t, int l, int r) {
  if (prz.find(t) == prz.end()) {
    prz[t] = {l, r};
    return;
  }
  PII cur = prz[t];
  int lo = max(cur.ST, l);
  int up = min(cur.ND, r);
  prz[t] = {lo, up};
}

signed main() {
  init_ios();
  cin >> q;
  while (q--) {
    cin >> n >> m;
    tim.clear();
    prz.clear();
    for (int i = 1; i <= n; ++i) {
      cin >> t[i] >> l[i] >> h[i];
      tim.insert(t[i]);
      upd(t[i], l[i], h[i]);
    }
    bool flag = false;
    int czas = 0;
    PII cur = {m, m};
    for (int x: tim) {
      auto co = prz[x];
      if (co.ST > co.ND) {
        cout<<"NO\n";
        flag = true;
        break;
      }
      int mini = cur.ST-(x-czas);
      int maxi = cur.ND+(x-czas);
      int nowl = max(mini, co.ST);
      int nowr = min(maxi, co.ND);
      if (nowl > nowr) {
        cout<<"NO\n";
        flag = true;
        break;
      }
      czas = x;
      cur = {nowl, nowr};
    }
    if (!flag)
      cout<<"YES\n";
  }
}