#include<bits/stdc++.h>

#define F first
#define S second
#define int long long
#define ull unsigned long long
#define pb push_back

using namespace std;
int n, k;
pair < int, int > d[51][51][51][51][2];
const int mod = 1e9 + 7;
int ff[100][100];
struct state{
    int l1, l2, r1, r2, b;
};
state s;
inline int add(int &x ,int y)
{
    x += y;
    if (x >= mod) x -= mod;
}
main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    cin >> n >> k;
    k /= 50;
    for (int i = 0; i < n; i++){
        int x;
        cin >> x;
        if (x == 50) s.l1++;
        if (x == 100) s.l2++;
    }
    for (int i = 0; i < 100; i++) ff[i][0] = 1;
    for (int i = 1; i < 100; i++){
        for (int j = 1; j <= i; j++){
            ff[i][j] = (ff[i - 1][j - 1] + ff[i - 1][j]) % mod;
        }
    }
    queue < state > q;
    q.push(s);
    d[s.l1][s.l2][0][0][0] = {1, 1};
    while(!q.empty()){
        state cur = q.front();
        q.pop();
        int x, y, X, Y;
        int d0 = d[cur.l1][cur.l2][cur.r1][cur.r2][cur.b].F;
        if (cur.b == 1){
            x = cur.r1;
            y = cur.r2;
            X = cur.l1;
            Y = cur.l2;
        } else{
            x = cur.l1;
            y = cur.l2;
            X = cur.r1;
            Y = cur.r2;
        }
        for (int i = 0; i <= x; i++){
            for (int j = 0; j <= y; j++){
                if (i + j == 0) continue;
                if (i + j + j > k) break;
                if (cur.b == 1){
                    int nd = d[X + i][Y + j][x - i][y - j][0].F;
                    state f;
                    f.l1 = X + i;
                    f.l2 = Y + j;
                    f.r1 = x - i;
                    f.r2 = y - j;
                    f.b = 0;
                    if (nd == 0 || nd == d0 + 1){
                        if (nd == 0) q.push(f);
                        d[X + i][Y + j][x - i][y - j][0].F = d0 + 1;
                       // cout << ff[x][i] << " " << ff[y][j] <<  " " << d[cur.l1][cur.l2][cur.r1][cur.r2][cur.b].S << " " << nd << " " << d0 << " " << d[X + i][Y + j][x - i][y - j][0].F << endl;
                        add(d[X + i][Y + j][x - i][y - j][0].S, d[cur.l1][cur.l2][cur.r1][cur.r2][cur.b].S * ff[x][i] % mod * ff[y][j] % mod);
                    }
                } else{
                    int nd = d[x - i][y - j][X + i][Y + j][1].F;
                    state f;
                    f.r1 = X + i;
                    f.r2 = Y + j;
                    f.l1 = x - i;
                    f.l2 = y - j;
                    f.b = 1;
                    if (nd == 0 || nd == d0 + 1){
                        if (nd == 0) q.push(f);
                        d[x - i][y - j][X + i][Y + j][1].F = d0 + 1;
                      //  cout << ff[x][i] << " " << ff[y][j] <<  " " << d[cur.l1][cur.l2][cur.r1][cur.r2][cur.b].S << " " << nd << " " << d0 << " " << d[X + i][Y + j][x - i][y - j][0].F << endl;
                        add(d[x - i][y - j][X + i][Y + j][1].S, d[cur.l1][cur.l2][cur.r1][cur.r2][cur.b].S * ff[x][i] % mod * ff[y][j] % mod);
                    }
                }
            }
        }
    }
    if (d[0][0][s.l1][s.l2][1].F == 0){
        cout << -1 << endl;
        cout << 0;
    } else{
        auto ans = d[0][0][s.l1][s.l2][1];
        cout << ans.F - 1 << endl;
        cout << ans.S;
    }
}
