#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace std;
using namespace __gnu_pbds;
#define PI                      3.1415926535897932384626
#define MOD                     998244353
#define int                     long long int
#define fi                      first
#define se                      second
#define pq                      priority_queue
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define fill(x,y)               memset(x,y,sizeof(x));
#define rep(x,y,z)              for(int x = y; x < z; ++x)
#define repr(x,y,z)             for(int x = y; x > z; --x)
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define hash                    _H
#define lg                      long double         

typedef tree<pii,null_type,less<pii>,rb_tree_tag,
tree_order_statistics_node_update> ordered_set;

template<typename T> T pow(T a,T b, int m){T ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
template<typename T>T InverseMod(T a,int m){return pow(a,m-2,m);}
template<typename T>int SquareDist(T a,T b){int x = abs(a.fi - b.fi),y = abs(a.se - b.se); return x*x + y*y;}

std::vector<int> fib;

int good(lg d,int r,int r1,int R2)
{
    if(d + r <= r1) return 1;
    if(d >= R2 + r) return 1;
    if(d + R2 <= r) return 1;
    return 0;
}
void solve()
{
    std::vector<pii> a[2],b[2];
    int x[2],y[2],r[2],R[2];
    rep(i,0,2) cin >> x[i] >> y[i] >> r[i] >> R[i];
    lg d = sqrt(SquareDist(make_pair(x[0],y[0]),make_pair(x[1],y[1])));
    int ans = good(d,r[0],r[1],R[1]) + good(d,R[0],r[1],R[1]) +  good(d,r[1],r[0],R[0]) + good(d,R[1],r[0],R[0]);
    cout << ans << endl;
}   





signed main()
{
    fast;
    solve();
} 