#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <map>
#include <queue>
#include <set>
#include <iomanip>
#include <deque>
#include <cassert>
#include <ctime>
#include <cstring>
using namespace std;
#define INF 2001001001
#define MOD 1000000007
#define endl '\n'
typedef long long ll;
typedef long double ld;

int N,K;
int arr[35001];
int tree[51][200001],lazy[51][200001];
int PREV[35001];
int ans=0,dp[51][35001];
int temp;

void update(int flag,int node, int L, int R, int i, int j, int x){
  if (lazy[flag][node]!=0){
    tree[flag][node]+=lazy[flag][node];
    if (L!=R){
      lazy[flag][node*2]+=lazy[flag][node];
      lazy[flag][node*2+1]+=lazy[flag][node];
    }
    lazy[flag][node]=0;
  }
  if (L>R || L>j || R<i)
    return;
  if (L>=i && R<=j){
    tree[flag][node]+=x;
    if (L!=R){
      lazy[flag][node*2]+=x;
      lazy[flag][node*2+1]+=x;
    }
    return;
  }
  update(flag,node*2,L,(L+R)/2,i,j,x);
  update(flag,node*2+1,(L+R)/2+1,R,i,j,x);
  tree[flag][node]=max(tree[flag][node*2],tree[flag][node*2+1]);
}

int query(int flag,int node, int L, int R, int i,int j){
  if (L>R || L>j || R<i)
    return 0;
  if (lazy[flag][node]!=0){
    tree[flag][node]+=lazy[flag][node];
    if (L!=R){
      lazy[flag][node*2]+=lazy[flag][node];
      lazy[flag][node*2+1]+=lazy[flag][node];
    }
    lazy[flag][node]=0;
  }
  if (L>=i && R<=j)
    return tree[flag][node];
  int q1=query(flag,node*2,L,(L+R)/2,i,j);
  int q2=query(flag,node*2+1,(L+R)/2+1,R,i,j);
  return max(q1,q2);
}

int main()
{
  //ios_base::sync_with_stdio(0);cin.tie(0);
  cin>>N>>K;
  for (int i=1;i<=N;i++)
    cin>>arr[i];
  temp=N+1;
  while ((temp&(temp-1))!=0)
    temp++;
  for (int i=1;i<=N;i++)
    PREV[i]=0;
  for (int i=1;i<=N;i++){
    for (int j=1;j<=min(K,i);j++){
      //cout<<"UPDATE: "<<j-1<<' '<<PREV[arr[i]]<<' '<<i-1<<endl;
      update(j-1,1,0,temp-1,PREV[arr[i]],i-1,1);
      //cout<<"QUERY: "<<j-1<<' '<<0<<' '<<i-1<<endl;
      dp[j][i]=query(j-1,1,0,temp-1,0,i-1);
      //cout<<"DP["<<j<<"]["<<i<<"]: "<<dp[j][i]<<endl;
      ans=max(ans,dp[j][i]);
      //cout<<"UPDATE: "<<j<<' '<<i<<' '<<i<<endl;
      update(j,1,0,temp-1,i,i,dp[j][i]);
    }
    PREV[arr[i]]=i;
  }
  cout<<ans<<endl;
  return 0;
}
