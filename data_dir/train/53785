/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>



#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator {
public:
	using value_type = T;
	using difference_type = std::ptrdiff_t;
	using pointer = T*;
	using reference = T;
	using iterator_category = std::input_iterator_tag;

	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	using IteratorType = std::reverse_iterator<IntegerIterator<T>>;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}



#include <random>


namespace impl {
using Random = std::mt19937;
}  // namespace impl

inline impl::Random& randomEngine() {
	static std::random_device device;
	static impl::Random engine(device());
	return engine;
}

inline int randomInteger() {
	std::uniform_int_distribution<int> d;
	return d(randomEngine());
}

inline int randomInteger(int to) {
	SPCPPL_ASSERT(to > 0);
	std::uniform_int_distribution<int> d(0, to - 1);
	return d(randomEngine());
}

inline int randomInteger(int from, int to) {
	return from + randomInteger(to - from);
}


using int64 = int64_t;

using std::vector;
using std::set;
using std::map;
using std::string;
using std::pair;
using std::make_pair;

using std::sort;
using std::unique;
using std::swap;
using std::min;
using std::max;

using std::endl;




class CPetyaAndExam {
public:
	static void solveSlow(std::stringstream& in, std::ostream& out) {
		int tests; in >> tests;
		for (int test : range(tests)) {
			int n, t, a, b; in >> n >> t >> a >> b;
			vector<int> p_k(n); for (auto& val : p_k) in >> val;
			vector<int> mandatory(n); for (auto& val : mandatory) in >> val;
			int res = 0;
			for (int mask : range(1 << n)) {
				vector<bool> solved;
				for (int i : range(n)) {
					int bit = mask % 2;
					solved.push_back(bit);
					mask /= 2;
				}
				bool ok = true;
				int total_time = 0;
				for (int i : range(n)) {
					if (solved[i]) {
						if (p_k[i] == 0) {
							total_time += a;
						} else {
							total_time += b;
						}
					}
				}
				if (total_time > t) ok = false;
				for (int i : range(n)) {
					if (mandatory[i] <= total_time) {
						if (!solved[i]) {
							ok = false;
						}
					}
				}
				if (ok) {
					res = max(res, std::accumulate(solved.begin(), solved.end(), 0));
				}
			}
			out << res << endl;
		}
	}
	static constexpr int kStressIterations = 2000;
	static void generateTest(std::ostringstream& in, std::ostringstream& ___) {
		in << 1 << endl;
		int n = randomInteger(10) + 2;
		int t = randomInteger(100) + 1;
		int a = randomInteger(10) + 1;
		int b = randomInteger(10) + 1 + a;
		in << n << " " << t << " " << a << " " << b << endl;
		for (int i : range(n)) in << randomInteger(2) << " ";
		in << endl;
		for (int i : range(n)) in << randomInteger(t + 1) << " ";
		in << endl;

		auto _____ = std::stringstream(in.str());
		solveSlow(_____, ___);
	}

	static void solve(std::istream& in, std::ostream& out) {
		int tests; in >> tests;
		for (int test : range(tests)) {
			int64 n, t, a, b; in >> n >> t >> a >> b;
			vector<int64> p_k(n); for (auto& val : p_k) in >> val;
			vector<int64> mandatory(n); for (auto& val : mandatory) in >> val;

			struct Event {
				int64 type;
				int64 time;
			};
			auto work = [&] () -> int64 {
				int64 res = 0;
				vector<Event> events;
				vector<int64> type_counts = {0, 0};
				int64 time_used = 0;
				{
					int64 total_time = 0;
					for (int i : range(p_k.size())) {
						events.push_back({p_k[i], mandatory[i]});
						type_counts[p_k[i]]++;
						total_time += p_k[i] == 0 ? a : b;
					}
					if (total_time <= t) {
						return events.size();
					}
				}
				sort(events.begin(), events.end(), [] (const Event& left, const Event& right) {
					return left.time < right.time;
				});
				for (int dont_include : range(events.size())) {
					int64 time_have = min(t, events[dont_include].time - 1);
					int64 time_remaining = time_have - time_used;
					if (time_remaining >= 0) {
						int64 basic = dont_include;
						int64 get_zeros = min(type_counts[0], time_remaining / a);
						basic += get_zeros;
						time_remaining -= get_zeros * a;
						int64 get_ones = min(type_counts[1], time_remaining / b);
						basic += get_ones;
						res = max(res, basic);
					}
					type_counts[events[dont_include].type]--;
					time_used += events[dont_include].type == 0 ? a : b;
				}
				return res;
			};
			out << work() << endl;
		}
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	CPetyaAndExam solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	solver.solve(in, out);
	return 0;
}
