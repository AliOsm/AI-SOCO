///Bismillahir Rahmanir Rahim
#include<bits/stdc++.h>

#define                           int                         long long
#define                           fi                          first
#define                           si                          second
#define                           mp                          make_pair
#define                           pb                          push_back
#define                           meme(x)                     memset(x,0,sizeof(x));
#define                           pi                          pair<int,int>
#define                           f(i,l,r)                    for(int i=l;i<=r;i++)
#define                           rf(i,r,l)                   for(int i=r;i>=l;i--)
#define                           M                           200009
#define                           done(i)                     cout<<"done = "<<i<<endl;
#define                           fast                        ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);




using namespace std;

const int inf=1e18;
const int mod=1e9+7;

struct node
{
    int mn;
    int dg[10];
    node()
    {
        mn=inf;
        f(i,0,8)dg[i]=inf;
    }
};

node tre[4*M+2],dust;
int a[M+2],n,m;
node cool(int x)
{
    node ret;
    int val=x;
    f(i,0,8)
    {
        int d=x%10;
        if(d)ret.dg[i]=val;
        x=x/10;
    }
    return ret;
}
node mrg(node x,node y)
{
    node ret;
    ret.mn=min(x.mn,y.mn);
    f(i,0,8)
    {
        ret.dg[i]=min(x.dg[i],y.dg[i]);
        ret.mn=min(x.dg[i]+y.dg[i],ret.mn);
    }
    return ret;
}
void build(int pos,int l,int r)
{
    if(l==r)
    {
        tre[pos]=cool(a[l]);
        return ;
    }
    int mid=(l+r)>>1;
    build(pos<<1,l,mid);
    build(pos<<1|1,mid+1,r);
    tre[pos]=mrg(tre[pos<<1],tre[pos<<1|1]);
}
void update(int pos,int l,int r,int idx,int val)
{
    if(l==r)
    {
        tre[pos]=cool(val);
        return ;
    }
    int mid=(l+r)>>1;
    if(idx<=mid)update(pos<<1,l,mid,idx,val);
    else update(pos<<1|1,mid+1,r,idx,val);
    tre[pos]=mrg(tre[pos<<1],tre[pos<<1|1]);
}
node qry(int pos,int l,int r,int I,int J)
{
    if(l>J || r<I)return dust;
    if(I<=l && J>=r)
    {
        return tre[pos];
    }
    int mid=(l+r)>>1;
    node op1=qry(pos<<1,l,mid,I,J);
    node op2=qry(pos<<1|1,mid+1,r,I,J);
    return mrg(op1,op2);
}
 main()
{  fast
   cin>>n>>m;
   f(i,1,n)cin>>a[i];
   build(1,1,n);
   while(m--)
   {
       int typ;
       cin>>typ;
       if(typ==1)
       {
           int idx,val;
           cin>>idx>>val;
           update(1,1,n,idx,val);
       }
       else if(typ==2)
       {
           int lft,rgt;
           cin>>lft>>rgt;
           node ses=qry(1,1,n,lft,rgt);
           if(ses.mn==inf)cout<<"-1\n";
           else cout<<ses.mn<<"\n";
       }
   }
  return 0;

}


