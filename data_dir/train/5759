#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <map>
using namespace std;
long long dp[2100][2100];
int use[3010],id[100010];
long long fac[100010];
map <int,int> ss;
const long long MOD = 1000000007LL;
bool lucky(int num)
{
    while (num!=0)
    {
        if (num%10!=4&&num%10!=7) return false;
        num/=10;
    }
    return true;
}
long long exp(int a,int b)
{
    long long ans=1,num=a;
    while (b!=0)
    {
        if (b%2==1) ans=(ans*num)%MOD;
        num=(num*num)%MOD;
        b=b/2;
    }
    return ans;
}
long long c(int a,int b)
{
    if (a<b) return 0;
    long long ans=fac[a];
    ans=(ans*exp(fac[b],MOD-2))%MOD;
    ans=(ans*exp(fac[a-b],MOD-2))%MOD;
    return ans;
}
int a[100010];
int main()
{
    fac[0]=1;
    for (int i=1;i<=100000;i++)
    {
        fac[i]=(fac[i-1]*i)%MOD;
    }
    int n,k;
    while (scanf("%d%d",&n,&k)==2)
    {
        int cnt=0,others=0;
        ss.clear();
        memset(use,0,sizeof(use));
        for (int i=0;i<n;i++)
        {
            scanf("%d",&a[i]);
            if (lucky(a[i]))
            {
                if (ss.find(a[i])==ss.end())
                {
                    cnt++;
                    ss[a[i]]=cnt-1;
                    id[i]=cnt-1;
                    use[cnt-1]++;
                }
                else
                {
                    id[i]=ss[a[i]];
                    use[ss[a[i]]]++;
                }
            }
            else
                others++;
        }
        memset(dp,0,sizeof(dp));
        dp[0][0]=1;
        for (int i=1;i<=cnt;i++)
        {
            for (int j=0;j<=i;j++)
            {
                dp[i][j]=dp[i-1][j];
                if (j!=0) dp[i][j]+=(dp[i-1][j-1]*use[i-1])%MOD;
                dp[i][j]%=MOD;
            }
        }
        long long ans=0;
        for (int i=0;i<=k&&i<=cnt;i++)
        {
            long long tnum=dp[cnt][i];
            tnum=(tnum*c(others,k-i))%MOD;
            ans=(ans+tnum)%MOD;
        }
        printf("%I64d\n",ans);
    }
    return 0;
}
