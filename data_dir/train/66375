#include <iostream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <string>
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <bitset>
#include <deque>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
using namespace std;

typedef long long ll;

const int N = 1e6 + 1;
int n, cum[N][14];
char s[N];
vector<int> nxt[4];

int main(int argc, char **argv) {
//	freopen("in.txt", "r", stdin);
	scanf("%s", s);
	n = strlen(s);
	for (int i = 0; i < n; ++i) {
		if (isdigit(s[i])) {
			++cum[i][s[i] - '0'];
			nxt[0].push_back(i);
		}
		else if (s[i] == '.') {
			++cum[i][10];
			nxt[1].push_back(i);
		} else if (s[i] == '_') {
			++cum[i][11];
			nxt[2].push_back(i);
		} else if (s[i] == '@') {
			++cum[i][12];
			nxt[3].push_back(i);
		}
		if (i == 0)
			continue;
		for (int j = 0; j < 13; ++j)
			cum[i][j] += cum[i - 1][j];
	}
	ll res = 0;
	int last[] = { -1, -1, -1 };
	for (int i = 0; i < n; ++i) {
		if (s[i] == '.')
			last[0] = i;
		else if (s[i] == '_')
			last[1] = i;
		if (s[i] != '@')
			continue;
		int str = max(last[0], last[2]) + 1;
		last[2] = i;
		if (str == i)
			continue;
		int d = upper_bound(nxt[1].begin(), nxt[1].end(), i) - nxt[1].begin();
		int u = upper_bound(nxt[2].begin(), nxt[2].end(), i) - nxt[2].begin();
		int a = upper_bound(nxt[3].begin(), nxt[3].end(), i) - nxt[3].begin();
		if (d == nxt[1].size() || nxt[1][d] == i + 1)
			continue;
		if (u != nxt[2].size() && nxt[2][u] >= i && nxt[2][u] <= nxt[1][d])
			continue;
		if (a != nxt[3].size() && nxt[3][a] >= i && nxt[3][a] <= nxt[1][d])
			continue;
		int end = n - 1;
		for (int j = 0; j < 4; ++j) {
			int k = upper_bound(nxt[j].begin(), nxt[j].end(), nxt[1][d]) - nxt[j].begin();
			if (k != nxt[j].size())
				end = min(end, nxt[j][k] - 1);
		}
		if (end == i)
			continue;
		int can = i - str;
		for (int j = 0; j < 12; ++j)
			if (i != 10)
				can -= cum[i][j] - (str > 0 ? cum[str - 1][j] : 0);
		res += 1LL * can * (end - nxt[1][d]);
	}
	printf("%lld\n", res);
	return 0;
}