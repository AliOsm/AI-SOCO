//marico el que lo lea
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <stdlib.h>
#include <assert.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> ii;

void fastIO() {std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);}

#define pb push_back
#define all(obj) obj.begin(), obj.end()
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define ms2(obj, val, sz) memset(obj, val, sizeof(obj[0])*sz)

#define fst first
#define snd second

template<typename T, typename U> inline void mnze(T &x, U y) {if(y < x) x = y;}
template<typename T, typename U> inline void mxze(T &x, U y) {if(x < y) x = y;}

void _scan( int &x ) { scanf("%d",&x); }
void _scan( long long &x ) { scanf("%lld",&x); }
void _scan( double &x ) { scanf("%lf",&x); }
void _scan( char &x ) { scanf(" %c",&x); }
void _scan( char *x ) { scanf("%s",x); }
void scan() {}
template<typename T, typename... U>
void scan( T& head, U&... tail ) { _scan(head); scan(tail...);}

template<typename T> void _dbg(const char* sdbg, T h)
	{ cerr<<sdbg<<"="<<h<<"\n"; }
template<typename T, typename... U> void _dbg(const char* sdbg, T h, U... t) {
	while(*sdbg != ',')cerr<<*sdbg++;
	cerr<<"="<<h<<","; _dbg(sdbg+1, t...);
}

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#define debugv(x) {{cerr<<#x<<" = "; for(auto _i:x) cerr<<_i<<", ";cerr<<"\n";}}
#define debuga(x, sz) {{cerr<<#x<<" = ";for(int _i=0;_i<sz;_i++)cerr<<x[_i]<<", ";cerr<<"\n";}}
#else
#define debug(...) (__VA_ARGS__)
#define debugv(x)
#define debuga(x, sz)
#define cerr if(0)cout
#endif

ll MOD = 1e9+7;

inline ll Msum(ll x){return x;}
template<typename... Rest>
inline ll Msum(ll x, Rest... rest){ return (x + Msum(rest...)) % MOD; }

inline ll Mprod(ll x){return x;}
template<typename... Rest>
inline ll Mprod(ll x, Rest... rest){ return x * Mprod(rest...) % MOD; }

inline ll Mnorm(ll x){ return (x%MOD + MOD) %MOD; }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

struct stnode{
	int tot, mn, mx;
	void merge(stnode& L, stnode& R){
		tot = L.tot + R.tot;
		mn = min(L.mn, L.tot + R.mn);
		mx = max(L.mx, L.tot + R.mx);
	}
	void operator=(int x){
		tot = mn = mx = x;
	}
};
struct ST{
	vector<stnode> T;
	int N;
	void init(int n){
		T.resize(4*n + 4);
		N = n;
	}
	void build(){build(1,0,N);}
	void build(int id, int l, int r){
		if(r - l < 2){
			T[id] = 0;
			return;
		}
		int M = (l+r)>>1, L=id<<1, R=L|1;
		build(L, l, M); build(R, M, r);
		T[id].merge(T[L],T[R]);
	}

	stnode query(int x, int y){return query(x,y,1,0,N);}
	stnode query(int x, int y, int id, int l, int r){
		if(x == l && y == r)	return T[id];
		int M = (l+r)>>1, L=id<<1, R=L|1;
		if(x>=M)	return query(x,y,R,M,r);
		if(y<=M)	return query(x,y,L,l,M);
		stnode res,ln=query(x, M, L, l, M),rn=query(M, y, R, M, r);
		return res.merge(ln, rn), res;
	}

	void update(int p, int x){update(p, x, 1, 0, N);}
	void update(int p, int x, int id, int l, int r){
		if(r - l < 2){
			T[id]=x;
			return;
		}
		int M = (l+r)>>1, L=id<<1, R=L|1;
		if(p < M) update(p, x, L, l, M);
		else update(p, x, R, M, r);
		T[id].merge(T[L],T[R]);
	}
};

const int MAXN = 1e6+6;

int n;
char s[MAXN];

ST st;
int main(){
	scan(n, s);
	st.init(n);
	st.build();
	int pos = 0;
	for(int i=0; i<(int)n; i++){
		if(s[i] == 'R') pos++;
		else if(s[i] == 'L') pos = max(0, pos-1);
		else if(s[i] == '(') st.update(pos, 1);
		else if(s[i] == ')') st.update(pos, -1);
		else st.update(pos, 0);
		if(st.T[1].tot != 0 || st.T[1].mn < 0) printf("-1 ");
		else printf("%d ", st.T[1].mx);
		//printf("%d %d %d\n",st.T[1].tot, st.T[1].mx, st.T[1].mn);
	}
}
