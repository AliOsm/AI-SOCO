#include <iostream>
#include <cstdio>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <queue>

using namespace std;

#define next roman_kaban

const double eps = 1e-9;

double get_root(long long x)
{
    double l,r;
    double z = sqrt(double(x));
    if(z*z<=x) {l =z; r = 1.1*l;} else {r = z; l=0.9*r;}
    for(int i=0;i<100;i++)
    {
        z = (l+r)/2;
        if(z*z<=x) l=z; else r = z;
    }
    return l;
}

double get_angle(long long x,long long y)
{
    if(x==0 && y>=0) return M_PI/2;
    if(x==0) return 3*M_PI/2;
    double res = atan(double(y)/x);
    if(x<0) res+=M_PI;
    if(res<0) res+=2*M_PI;
    return res;
}

int main()
{
    //freopen("a.txt","r",stdin);
    int x0,y0;
    int v,t;
    scanf("%d%d",&x0,&y0);
    scanf("%d%d",&t,&v);
    unsigned long long l = t; l*=v;
    double l2 = l; l2*=l;
    unsigned long long l2_may_overflow = l; l2_may_overflow*=l;
    int n;
    scanf("%d",&n);
    vector<pair<double,double> >res;
    while(n--)
    {
        int tx,ty,tr;
        scanf("%d%d%d",&tx,&ty,&tr);
        long long x = tx-x0;
        long long y = ty-y0;
        long long r = tr;
        if(r==0) continue;
        long long dist2 = x*x+y*y;
        double dist = get_root(dist2);
        if(dist2<=r*r){cout <<"1.0000"<<endl; return 0;}
        if(l<3e9 && dist2>=(l+r)*(l+r)) continue;
        long long hypo2 = dist2-r*r;
        double hypo = get_root(hypo2);
        double beta;
        if(l2>8e18 + 5){beta = atan(r/hypo);} else
        if(hypo2<=l2_may_overflow){beta = atan(r/hypo);}else
        {
            beta = acos((l2_may_overflow + dist2 - r*r)/(2.0*l*dist));
        }
        double alfa = get_angle(x,y);//atan(double(y)/x);
        double z1 = alfa - beta;
        double z2 = alfa + beta;
        if(z1<0) {res.push_back(make_pair(z1+2*M_PI,2*M_PI)); z1 = 0;}
        if(z2> 2*M_PI){res.push_back(make_pair(0,z2 - 2*M_PI)); z2 = 2*M_PI;}
        res.push_back(make_pair(z1,z2));
    }
    if(l==0){cout <<"0.0000"<<endl; return 0;}
    sort(res.begin(),res.end());
    double sum = 0;
    double prev_st = 0;
    double prev_fi = 0;
    for(int i=0;i<res.size();i++)
    if(res[i].first<=prev_fi) prev_fi = max(prev_fi,res[i].second); else
    {
        sum+=prev_fi - prev_st;
        prev_st = res[i].first;
        prev_fi = res[i].second;
    }
    sum +=prev_fi - prev_st;
    printf("%.8f",sum/2/M_PI);
    return 0;
}
/*

0 0 148 148
3
1 1 1
-1 -1 1
-2 2 1

*/
