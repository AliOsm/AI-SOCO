// Separate what you do from who you are, that's what the guilt trap is all about!
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef long long int ll;
typedef vector< pair<int, int> > vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<long long int> vll;
typedef pair<int, int> pii;

const ll INF = 1e18;
const int inf = 1e9;
const int MOD = 1e9 + 7;
const int nax = 1000000 + 10;

int n, arr[nax], dpmin[nax], dpmax[nax], w[nax];
vi graph[nax];

void dfs1(int v, int par)
{
    if(graph[v].empty())
    {
        w[v] = 1; return;
    }
    for(auto x: graph[v])
    {
        dfs1(x, v);
        w[v] += w[x];
    }
}
void dfs(int v, int par)
{
    if(graph[v].empty())
    {
        dpmin[v] = dpmax[v] = 0;
        return ;
    }
    int mini = inf, sum = 0;
    for(auto x: graph[v])
    {
        dfs(x, v);
        mini = min(mini, dpmin[x]);
        sum += w[x] - dpmax[x];
    }
    dpmin[v] = sum - 1;
    dpmax[v] = w[v] - mini - 1;
}
int main()
{
    ios::sync_with_stdio(0);
    cin >> n;
    for(int i = 1; i <= n - 1; i++)
    {
        int u, v; cin >> u >> v;
        graph[u].pb(v);
    }
    dfs1(1, -1);
    dfs(1, -1);
    cout << dpmax[1] + 1 << " " << dpmin[1] + 1;
    return 0;
}
