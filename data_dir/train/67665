#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define eb emplace_back
#define mt make_tuple

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int N = 300010, oo = 0x3f3f3f3f;
int tree[4*N];
deque<int> where[N];

int a[N], b[N];

int build(int start, int end, int pos)
{
	if (start == end)
		return tree[pos] = a[start];
	int mid = (start+end)/2;
	int l = build(start, mid, 2*pos + 1);
	int r = build(mid+1, end, 2*pos + 2);
	return tree[pos] = min(l, r);
}

int update(int start, int end, int upos, int pos)
{
	if (start > upos or end < upos)
		return tree[pos];
	
	if (start == end)
		return tree[pos] = oo;
	
	int mid = (start+end)/2;
	int l = update(start, mid, upos, 2*pos + 1);
	int r = update(mid+1, end, upos, 2*pos + 2);
	return tree[pos] = min(l, r);
}

int query(int start, int end, int qstart, int qend, int pos)
{
	if (qstart > end or qend < start)
		return oo;
	
	if (start >= qstart and end <= qend)
		return tree[pos];
	
	int mid = (start+end)/2;
	int l = query(start, mid, qstart, qend, 2*pos + 1);
	int r = query(mid+1, end, qstart, qend, 2*pos + 2);
	return min(l, r);
}

int main()
{
	int t;
	scanf("%d", &t);
	while (t--)
	{
		int n;
		scanf("%d", &n);
		for (int i = 0; i < n; i++)
		{
			scanf("%d", a+i);
			where[a[i]].pb(i);
		}
		for (int i = 0; i < n; i++)
			scanf("%d", b+i);

		build(0, n-1, 0);

		for (int i = 0; i < n; i++)
		{
			if (where[b[i]].empty())
			{
				printf("NO\n");
				goto clear;
			}
			int pos = where[b[i]].front();
			where[b[i]].pop_front();
			if (pos == 0 or query(0, n-1, 0, pos-1, 0) >= b[i])
				update(0, n-1, pos, 0);
			else
			{
				printf("NO\n");
				goto clear;
			}
		}
		printf("YES\n");	
		clear:
		for (int i = 0; i < n; i++)
			where[a[i]].clear();
	}
	return 0;
}


