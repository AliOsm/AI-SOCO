#include <iostream>
#include <vector>

using namespace std;

vector<int> g[200200];
int res = 0;

// need, added
pair<bool, bool> dfs(int v, int p, int dep) {
	bool need = false;
	bool added = false;
	int children = 0;
	for (int x : g[v]) {
		if (x == p) continue;
		++children;
		pair<bool, bool> child = dfs(x, v, dep + 1);
		need |= child.first;
		added |= child.second;
	}
	if (children == 0) {
		if (dep > 2) {
			return make_pair(true, false);
		} else {
			return make_pair(false, false);
		}
	}
	if (need) {
		++res;
		return make_pair(false, true);
	}
	if (dep > 2) {
		if (added) {
			return make_pair(false, false);
		} else {
			return make_pair(true, false);
		}
	} else {
		return make_pair(false, false);
	}
}

int main() {
	int n;
	cin >> n;
	for (int i = 0; i < n - 1; i++) {
		int a, b;
		cin >> a >> b;
		--a, --b;
		g[a].push_back(b);
		g[b].push_back(a);
	}
	dfs(0, -1, 0);
	cout << res << endl;
	return 0;
}