#include<iostream>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<math.h>
#include<queue>
#include<random>
#include<ctime>
#include<unordered_map>
#include<iterator>
#include<bitset>
#include<cstring>
#include<stdio.h>
#include<list>
using namespace std;

#pragma warning(disable : 4996)

#define ll long long int

const int N = 2e5 + 5;
char s[N], d[5] = "LRDU";
int sum[4][N];

int main() {
#ifdef HOME
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int n, fx, fy;
	scanf("%d %s %d %d", &n, s, &fx, &fy);

	if (abs(fx + fy) % 2 != n % 2 || abs(fx) + abs(fy) > n) {
		printf("-1");
		return 0;
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < 4; j++) {
			sum[j][i + 1] += sum[j][i];
		}
		int q = 0;
		while (d[q] != s[i])
			q++;
		sum[q][i + 1]++;
	}

	int ans = n;
	for (int i = 0; i <= n; i++) {
		int l = i - 1, r = n + 1;
		while (r - l > 1) {
			int p = (r + l) >> 1,
				x = sum[1][i] - sum[0][i] +
				(sum[1][n] - sum[1][p]) - (sum[0][n] - sum[0][p]),
				y = sum[3][i] - sum[2][i] +
				(sum[3][n] - sum[3][p]) - (sum[2][n] - sum[2][p]);
			int need = abs(fx - x) + abs(fy - y);
			if (need > p - i)
				l = p;
			else
				r = p;
		}
		if (r != n + 1)
			ans = min(ans, r - i);
	}

	printf("%d", ans);



	return 0;
}