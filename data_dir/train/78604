#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define N	100000
#define M	100000
#define LN	16	/* LN = floor(log2(N)) */
#define M_	((M * LN) + (N - 1 + M * LN))

int max(int a, int b) { return a > b ? a : b; }

int oo[1 + N - 1], oj[1 + N - 1], ow[1 + N - 1];

int link(int o, int j, int w) {
	static int _ = 1;

	oo[_] = o, oj[_] = j, ow[_] = w;
	return _++;
}

int tt[1 + N][2], pp[1 + N], kk[1 + N];

int node(int k) {
	static int _ = 1;

	kk[_] = k;
	return _++;
}

int dir(int u) { return tt[pp[u]][0] == u ? 0 : 1; }

int is_root(int u) { return tt[pp[u]][0] != u && tt[pp[u]][1] != u; }

void attach(int p, int u, int d) {
	if (p)
		tt[p][d] = u;
	if (u)
		pp[u] = p;
}

void rotate(int u) {
	int v = pp[u], w = pp[v], du = dir(u), dv = dir(v);

	if (is_root(v))
		pp[u] = w;
	else
		attach(w, u, dv);
	attach(v, tt[u][du ^ 1], du);
	attach(u, v, du ^ 1);
}

void splay(int u) {
	while (!is_root(u)) {
		int v = pp[u];

		if (!is_root(v))
			rotate(dir(u) == dir(v) ? v : u);
		rotate(u);
	}
}

int first(int u) {
	while (tt[u][0])
		u = tt[u][0];
	splay(u);
	return u;
}

int ae[N], ta[N], tb[N]; long long dd[N];

void dfs(int i, long long d) {
	static int time;
	int o;

	dd[i] = d;
	ta[i] = time++;
	for (o = ae[i]; o; o = oo[o]) {
		int j = oj[o], w = ow[o];

		dfs(j, d + w);
	}
	tb[i] = time;
}

int st[N * 2], n_;

void pul(int i) {
	st[i] = max(st[i << 1], st[i << 1 | 1]);
}

void update(int i, int x) {
	st[i += n_] = x;
	while (i > 1)
		pul(i >>= 1);
}

int query(int l, int r) {
	int x = -1;

	for (l += n_, r += n_; l <= r; l >>= 1, r >>= 1) {
		if ((l & 1) == 1)
			x = max(x, st[l++]);
		if ((r & 1) == 0)
			x = max(x, st[r--]);
	}
	return x;
}

int tr[N];
long long xx[M_][2]; int m_;

void expose(int i, int x) {
	int v, u;

	splay(tr[i]);
	v = first(tr[i]), u = pp[v];
	while (u) {
		int j, x_;

		splay(u);
		j = kk[u];
		x_ = query(ta[j] + 1, tb[j] - 1);
		xx[m_][0] = x_ == -1 ? 1 : x_ + 1 + dd[j], xx[m_][1] = x + dd[j] + 1, m_++;
		attach(u, v, 1);
		v = u, u = pp[u];
	}
}

int compare(const void *a, const void *b) {
	int g1 = *(int *) a;
	int g2 = *(int *) b;
	long long x1 = xx[g1 >> 1][g1 & 1];
	long long x2 = xx[g2 >> 1][g2 & 1];

	return x1 == x2 ? 0 : (x1 < x2 ? -1 : 1);
}

int pq[1 + M_], iq[M_], cnt;

int less(int u, int v) { return xx[u][1] < xx[v][1]; }

int i2(int i) {
	return (i *= 2) > cnt ? 0 : i < cnt && less(pq[i + 1], pq[i]) ? i + 1 : i;
}

void pq_up(int u) {
	int i, j, v;

	for (i = iq[u]; (j = i / 2) && less(u, v = pq[j]); i = j)
		pq[iq[v] = i] = v;
	pq[iq[u] = i] = u;
}

void pq_dn(int u) {
	int i, j, v;

	for (i = iq[u]; (j = i2(i)) && less(v = pq[j], u); i = j)
		pq[iq[v] = i] = v;
	pq[iq[u] = i] = u;
}

void pq_add(int u) {
	iq[u] = ++cnt, pq_up(u);
}

void pq_remove_first() {
	int u = pq[1], v = pq[cnt--];

	if (v != u)
		iq[v] = 1, pq_dn(v);
	iq[u] = 0;
}

int main() {
	static int jj[N], gg[M_ * 2];
	int n, m, g, h, i, j;
	long long x_;

	scanf("%d%d", &n, &m);
	for (i = 0; i < n; i++)
		tr[i] = node(i);
	for (h = 0; h < n - 1; h++) {
		int w;

		scanf("%d%d%d", &i, &j, &w), i--, j--;
		pp[tr[j]] = tr[i];
		ae[i] = link(ae[i], j, w);
		jj[i] = j;
	}
	dfs(0, 0);
	for (i = 0; i < n; i++)
		if (ae[i]) {
			j = jj[i];
			splay(tr[i]), splay(tr[j]);
			attach(tr[i], tr[j], 1);
		}
	n_ = n;
	memset(st, -1, n_ * 2 * sizeof *st);
	while (m--) {
		int x;

		scanf("%d%d", &i, &x), i--;
		expose(i, x);
		update(ta[i], x);
	}
	m = m_;
	for (g = 0; g < m * 2; g++)
		gg[g] = g;
	qsort(gg, m * 2, sizeof *gg, compare);
	x_ = 0;
	for (g = 0; g < m * 2; g++) {
		int lr;
		long long x;

		h = gg[g] >> 1, lr = gg[g] & 1, x = xx[h][lr];
		while (cnt && x_ < x) {
			pq_remove_first();
			x_++;
		}
		x_ = x;
		if (lr == 0)
			pq_add(h);
		else {
			if (iq[h]) {
				int k = 0;

				for (h = 0; h < m; h++)
					if (xx[h][1] < x_)
						k++;
				printf("%lld %d\n", x_ - 1, k);
				return 0;
			}
		}
	}
	printf("-1 %d\n", m);
	return 0;
}
