//In the name of Allah

#include<bits/stdc++.h>

using namespace std;

const int Maxn = 100 * 1000 + 10;
long long n, ax, ay, bx, by, tx, ty;
pair<long long, long long> arr[Maxn];
pair<long double, long long> Max1a, Max2a, Max1b, Max2b;
long double ans;

int main()
{
    Max1a.first = Max2a.first = Max1b.first = Max2b.first = INT_MIN;
    scanf("%I64d%I64d%I64d%I64d%I64d%I64d", &ax, &ay, &bx, &by, &tx, &ty);
    scanf("%I64d", &n);
    for(int i = 0; i < n; i ++)
        scanf("%I64d%I64d", &arr[i].first, &arr[i].second);
    for(int i = 0; i < n; i ++)
    {
        long long disa = (arr[i].first - ax) * (arr[i].first - ax) + (arr[i].second - ay) * (arr[i].second - ay);
        long long dist = (arr[i].first - tx) * (arr[i].first - tx) + (arr[i].second - ty) * (arr[i].second - ty);
        long double a1 = (long double)sqrt(dist), a2 = (long double)sqrt(disa);
        ans += (long double)2 * a1;
        if(a1 - a2 > Max1a.first)
        {
            Max2a = Max1a;
            Max1a = make_pair(a1 - a2, i);
        }
        else
        {
            if(a1 - a2 > Max2a.first)
                Max2a = make_pair(a1 - a2, i);
        }
    }
    for(int i = 0; i < n; i ++)
    {
        long long disb = (arr[i].first - bx) * (arr[i].first - bx) + (arr[i].second - by) * (arr[i].second - by);
        long long dist = (arr[i].first - tx) * (arr[i].first - tx) + (arr[i].second - ty) * (arr[i].second - ty);
        long double a1 = (long double)sqrt(dist), a2 = (long double)sqrt(disb);
        if(a1 - a2 > Max1b.first)
        {
            Max2b = Max1b;
            Max1b = make_pair(a1 - a2, i);
        }
        else
        {
            if(a1 - a2 > Max2b.first)
                Max2b = make_pair(a1 - a2, i);
        }
    }
    if(Max1a.first < 0 || Max1b.first < 0)
        ans -= max(Max1a.first, Max1b.first);
    else
    {
        if(Max1a.second != Max1b.second)
        {
            ans -= Max1a.first;
            ans -= Max1b.first;
        }
        else
        {
            if(Max2a.first < 0 && Max2b.first > 0)
                ans -= Max1a.first + Max2b.first;
            else
            {
                if(Max2a.first > 0 && Max2b.first < 0)
                    ans -= Max2a.first + Max1b.first;
                else
                {
                    if(Max2a.first > 0 && Max2b.first > 0)
                        ans -= max(Max2a.first + Max1b.first, Max1a.first + Max2b.first);
                    else
                        ans -= max(Max1a.first, Max1b.first);
                }
            }
        }
    }
    cout << setprecision(9) << fixed << ans << endl;
    return 0;
}
