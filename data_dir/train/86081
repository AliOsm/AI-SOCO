//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const ll INF = 1e9 + 7;
const int MAXN = 1e6 + 5;
const double eps = 1e-9;
vi adj[MAXN];
ll ans = 0;
ll s[MAXN], a[MAXN];

void dfs(int u, int p, ll cur, int d) {
    a[u] = max(s[u], 0ll);
    ll tmp = INF;
    for (int v: adj[u]) {
        if (v == p)
            continue;
        ll nx = s[v];
        if (nx == -1) nx = cur;
        if (nx < cur) {
            printf("-1\n");
            exit(0);
        }
        dfs(v, u, nx, d + 1);
        tmp = min(tmp, a[v]);
    }
    if (d % 2 == 0) {
        for (int v: adj[u]) {
            if (v == p) continue;
            a[v] -= tmp;
        }
        if (tmp == INF) tmp = cur;
        a[u] = tmp - cur;
    }
}

int main()
{
    int n;
    ni(n);
    for (int i = 1; i < n; i++) {
        int p;
        ni(p);
        p--;
        adj[i].pb(p);
        adj[p].pb(i);
    }
    for (int i = 0; i < n; i++) {
        nl(s[i]);
    }
    ans += s[0];
    dfs(0, -1, s[0], 1);
    for (int i = 1; i < n; i++)
        ans += a[i];
    prl(ans);
    return 0;
}
