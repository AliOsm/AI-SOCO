//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx,avx2")
#include <bits/stdc++.h>
 
using namespace std;
 
#define PB push_back
#define MP make_pair
#define EB emplace_back
#define f first
#define s second
#define FOR(i,a,b) for (int i = a; i < (b); ++i)
#define RFOR(i, b, a) for (int i = b-1; i>=a; --i)
#define FILL(a, b) memset(a, b, sizeof a)
#define ALL(a) a.begin(), a.end()
#define SZ(a) ((int)a.size())
#define bitc(n) __builtin_popcount(n)
#define MAGIC0 mt19937 rnd(time(0)); //rnd()
 
typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
 
const int INF = 1000 * 1000 * 1000 + 7;
const LL LINF = 1LL * INF*INF;
const int MAX = 1e6 + 7;
const double PI = acos(-1.);
const double EPS = 1e-7;
const int MAXN = 3 * 100007;
 
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); 
 
int n;
bool ch[5207][5207];
char el[5005];

bool can(int x, int k)
{
	FOR(i, 0, n/x)
	{
		FOR(j, 0, n/x)
		{
			FOR(a, 0, x)
			{
				FOR(b, 0, x)
				{
					if (ch[a + i * x][b + j * x] != ch[i * x][j * x])
					{
						return 0;
					}
				}
			}
		}
	}
	return 1;
}
 
int main()
{
	//ios_base::sync_with_stdio(0);cin.tie(0);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	//cin >> n;
	scanf("%d", &n);
	int k = n / 4;
	getchar();
	FOR(i, 0, n)
	{
		FOR(j, 0, k)
		{
			char c = getchar();
			int num = 0;
			if ('A' <= c && c <= 'F')
			{
				num = 10 + c - 'A';
			}
			else
			{
				num = c - '0';
			}
			ch[i][j * 4 + 3] = num & 1;
			ch[i][j * 4 + 2] = (num >> 1) & 1;
			ch[i][j * 4 + 1] = (num >> 2) & 1;
			ch[i][j * 4] = (num >> 3) & 1;
		}
		getchar();
	}
	
	VI vec;
	vec.reserve(500);
	for(int i = 1;i * i <= n;++i)
	{
		if (n % i == 0)
		{
			vec.PB(i);
			if (i != n / i)
			{
				vec.PB(n/i);
			}
		}
	}
	
	sort(ALL(vec));
	
	RFOR(i, SZ(vec), 1)
	{
		if (can(vec[i], i))
		{
			printf("%d\n", vec[i]);
			return 0;
		}
	}
	printf("1\n");
	
	return 0;
}
 
 
 
 
 
 
 
 
 
 
 
 
