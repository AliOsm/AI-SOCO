#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

int tree[400005][26];

int cnt [26];

string s;
int q,n;

void build(int node, int start, int end)
{
    if(start == end)
    {
        tree[node][ s[start] - 'a' ]++;
    }
    else
    {
        int mid = (start + end) / 2;
        build(2*node, start, mid);
        build(2*node+1, mid+1, end);
        for(int i=0;i<26;i++){
            tree[node][i] = tree[node*2][i] + tree[node*2+1][i];
        }
    }
}
void update(int node, int start, int end, int idx, char val)
{
    if(start == end)
    {
        tree[node][ s[idx] - 'a' ]--;
        s[idx]=val;
        tree[node][ s[idx] - 'a' ]++;
    }
    else
    {
        int mid = (start + end) / 2;
        if(start <= idx and idx <= mid)
        {
            update(2*node, start, mid, idx, val);
        }
        else
        {
            update(2*node+1, mid+1, end, idx, val);
        }
        for(int i=0;i<26;i++){
            tree[node][i] = tree[node*2][i] + tree[node*2+1][i];
        }
    }
}
void query(int node, int start, int end, int l, int r)
{
    if(r < start or end < l)
    {
        return;
    }
    if(l <= start and end <= r)
    {
        for(int i=0;i<26;i++)cnt[i] += tree[node][i];
        return;
    }
    int mid = (start + end) / 2;
    query(2*node, start, mid, l, r);
    query(2*node+1, mid+1, end, l, r);
}
int main()
{
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    cin >> s;
    cin >> q;
    n=s.size();
    build(1,0,n-1);

    while(q--){
        int x,pos,l,r;
        char c;
        cin >>x;
        if(x==1){
            cin >> pos >> c;
            pos--;
            update(1,0,n-1,pos,c);
        }
        else{
            cin >> l >> r;
            l--;
            r--;
            for(int i=0;i<26;i++)cnt[i]=0;
            query(1,0,n-1,l,r);
            int sum = 0;
            for(int i=0;i<26;i++)if(cnt[i])sum++;
            cout << sum << "\n";
        }
    }



    return 0;
}
