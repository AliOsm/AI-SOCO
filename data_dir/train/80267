#include<bits/stdc++.h>
using namespace std;
int g[505][505];
int layer[505];
int n, m;
int ans[505][505];
int bfs(int src, int dst, int type) {
    queue<int> q; q.push(src);
    for (int i = 0; i < n; i++)
        layer[i] = -1;
    layer[src] = 0;
    while (!q.empty()) {
        int node = q.front(); q.pop();
        for (int child = 0; child < n; child++)
            if (child != node && g[node][child] == type && layer[child] == -1)
                layer[child] = layer[node] + 1, q.push(child);
    }
    return layer[dst];
}




int main() {
    ios::sync_with_stdio(false);
    srand(time(NULL));
    scanf("%d%d", &n, &m);
    for (int i = 0; i < m; i++) {
        int x, y; scanf("%d%d", &x, &y); --x; --y;
        g[x][y] = g[y][x] = 1;
    }

    int ans1 = bfs(0, n - 1, 0);
    int ans2 = bfs(0, n - 1, 1);
    if (ans1 == -1 || ans2 == -1)
        puts("-1");
    else
        printf("%d\n", max(ans1, ans2));




    return 0;
}
