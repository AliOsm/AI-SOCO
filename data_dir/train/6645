#include <bits/stdc++.h>

using namespace std;
const int N = 1e5 + 3;
int n, c, arr[N];
int LG[N];
int sTable[N][17];

void build() {
	LG[0] = -1;
	for (int i = 0; i < n; i++) {
		LG[i + 1] = LG[i] + !(i & (i + 1));
		sTable[i][0] = i;
	}
	for (int j = 1; (1 << j) <= n; j++)
		for (int i = 0; i + (1 << j) <= n; i++) {
			int a = sTable[i][j - 1];
			int b = sTable[i + (1 << (j - 1))][j - 1];
			sTable[i][j] = (arr[a] < arr[b] ? a : b);
		}
}

int findMin(int s, int e) {
	int len = e - s + 1;
	int lg = LG[len];
	int a = sTable[s][lg];
	int b = sTable[e - (1 << lg) + 1][lg];
	return min(arr[a], arr[b]);
}
long long mem[N];
long long cum[N];
long long go(int i) {
	if (i == n)
		return 0;
	long long &ret = mem[i];
	if (~ret)
		return ret;
	ret = go(i + 1) + arr[i];
	long long b = 1e18;
	if (i + c <= n) {
		b = go(i + c) + cum[i + c - 1];
		if (i)
			b -= cum[i - 1];
		b -= findMin(i, i + c - 1);
	}
	return ret = min(ret, b);
}
int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	scanf("%d %d", &n, &c);
	for (int i = 0; i < n; ++i) {
		scanf("%d", arr + i);
		if (i)
			cum[i] = cum[i - 1] + arr[i];
		else
			cum[i] = arr[i];
	}
	build();
	memset(mem, -1, sizeof mem);
	printf("%lld\n", go(0));
	return 0;
}