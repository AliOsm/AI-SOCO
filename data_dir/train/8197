/**
* The New Programming Style
*
* Only for you, my friend
*
* By PloadyFree
* PloadyFree@gmail.com
*
* 2015
*/

//#include <bits/stdc++.h>
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iterator>
#include <set>
#include <cmath>
#include <ctime>
#include <stack>
#include <fstream>
#include <array>
#include <map>

using namespace std;

#define all(a)      begin(a), end(a)
#define rall(a)     rbegin(a), rend(a)

typedef long double     ld;
typedef long long       ll;
typedef vector<ll>      vll;
typedef vector<int>     vi;
typedef vector<vi>      vvi;
typedef vector<bool>    vb;
typedef vector<vb>      vvb;
typedef pair<int, int>  pii;
typedef pair<ll, int>   pli;
typedef pair<int, ll>   pil;
typedef pair<ll, ll>    pll;
typedef vector<pii>     vpii;
typedef vector<double>  vd;

bool const TO_FILE = false;
string const FILENAME = "";
void prepare() {
    if (TO_FILE) {
        freopen((FILENAME + ".in").c_str(), "r", stdin);
        freopen((FILENAME + ".out").c_str(), "w", stdout);
    }
}

void solve() {
    int n, m, k;
    cin >> n >> m >> k;

    map<int, pair<int, int>> apps;  //  название, номер экрана и номер позиции
    map<pair<int, int>, int> apps2;

    int curScr = 0;
    int curPos = 0;
    for (int i = 0; i < n; i++) {
        int app;
        cin >> app;
        apps[app] = make_pair(curScr, curPos);
        apps2[make_pair(curScr, curPos)] = app;
        if (++curPos == k) {
            curPos = 0;
            curScr++;
        }
    }

    ll res = m;
    for (int i = 0; i < m; i++) {
        int curApp, prevApp;
        cin >> curApp;

        int curScr = apps[curApp].first;
        int curPos = apps[curApp].second;

        int prevScr, prevPos;

        if (curScr == 0 && curPos == 0) continue;
        else if (curPos == 0) {
            prevScr = curScr - 1;
            prevPos = k - 1;
            prevApp = apps2[make_pair(prevScr, prevPos)];
        } else {
            prevScr = curScr;
            prevPos = curPos - 1;
            prevApp = apps2[make_pair(prevScr, prevPos)];
        }

        apps[curApp] = make_pair(prevScr, prevPos);
        apps2[make_pair(prevScr, prevPos)] = curApp;

        apps[prevApp] = make_pair(curScr, curPos);
        apps2[make_pair(curScr, curPos)] = prevApp;

        res += curScr;
    }

    cout << res;
}

int main() {
    prepare();
    solve();
    //system("pause");
    return 0;
}