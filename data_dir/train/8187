#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;

#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
#define mod 1000000007
#define PI 3.14159265
#define endl '\n'
#define debug(x) cout << #x << " = " << x << endl;
#define MAX 200001

inline int add(int x, int y){ x += y; if(x >= mod) x -= mod; return x;}
inline int sub(int x, int y){ x -= y; if(x < 0) x += mod; return x;}
inline int mul(int x, int y){ return (x * 1ll * y) % mod;}
inline int pwr(int a, ll b){
	int x = 1 % mod;
	while(b){
		if(b & 1) x = mul(x, a);
		a = mul(a, a);
		b >>= 1;
	}
	return x;
}
inline int inv(int a){ return pwr(a, mod - 2);}

int dp[MAX][3];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n;
    ld l, r;
    cin >> n >> l >> r;
    int zero = floor(r / 3) - ceil(l / 3) + 1;
    int one = floor((r - 1) / 3) - ceil((l - 1) / 3) + 1;
    int two = floor((r - 2) / 3) - ceil((l - 2) / 3) + 1;
    dp[1][0] = zero;
    dp[1][1] = one;
    dp[1][2] = two;
    for (int i = 2; i <= n; i++) {
        dp[i][0] = add(add(mul(dp[i - 1][0], zero), mul(dp[i - 1][1], two)), mul(dp[i - 1][2], one));
        dp[i][1] = add(add(mul(dp[i - 1][0], one), mul(dp[i - 1][1], zero)), mul(dp[i - 1][2], two));
        dp[i][2] = add(add(mul(dp[i - 1][0], two), mul(dp[i - 1][1], one)), mul(dp[i - 1][2], zero));
    }
    cout << dp[n][0] << endl;

    return 0;
}
