#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif

#include <bits/stdc++.h>
#include <unordered_map>
#include<stack>
using namespace std;
#define OO ll(1e18)
#define MOD ll(1e6)
typedef unsigned long long ull;
typedef long long ll;
int n, m, q, us, ue;
ll lazy[8 * 1001000], rep[100100];

void update(int node, int s, int e, ll val = 1) {
	if (ue < s || us > e)return;
	int mid = (s + e) / 2;
	if (s >= us && e <= ue) {
		lazy[node] += val;
	}
	else {
		lazy[2 * node] += lazy[node];
		lazy[2 * node + 1] += lazy[node];
		lazy[node] = 0;
		update(2 * node, s, mid, val);
		update(2 * node + 1, mid + 1, e, val);
	}
	if (s == e)
		rep[s] = lazy[node] - val;
	return;
}

int main() {
	cin >> n >> m >> q;
	vector<ll>v(n);
	vector<vector<ll>>op(m, vector<ll>(3));
	for (int i = 0; i < n; i++)cin >> v[i];
	for (int i = 0; i < m; i++)cin >> op[i][0] >> op[i][1] >> op[i][2];
	for (int i = 0; i < q; i++) {
		cin >> us >> ue;
		update(1, 1, m);
	}
	for (int i = 1; i <= m; i++) {
		us = ue = i;
		update(1, 1, m);
	}
	for (int i = 0; i < m; i++)	op[i][2] *= rep[i + 1];
	memset(lazy, 0, sizeof lazy);
	memset(rep, 0, sizeof rep);
	for (int i = 0; i < m; i++) {
		us = op[i][0];
		ue = op[i][1];
		update(1, 1, n, op[i][2]);
	}
	for (int i = 1; i <= n; i++) {
		us = ue = i;
		update(1, 1, n);
	}
	for (int i = 0; i < n; i++) {
		cout << v[i] + rep[i + 1] << " ";
	}
}