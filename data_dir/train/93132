/*-----Deep D. Savani------------
-------DAIICT,INDIA--------------
*/
#include<bits/stdc++.h>
#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define mod 1000000007
#define deb(x) cout<<#x<<" : "<<x<<endl;
#define deb2(x,y) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<endl;
#define deb3(x,y,z) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<"\t"<<#z<<" : "<<z<<endl;
#define nax 1000010
#define FIO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
typedef long long ll;
    
using namespace std;

#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 

#define T ll  
#define ordered_set tree<T, null_type,less<T>, rb_tree_tag,tree_order_statistics_node_update> 
    
long long modulo(long long base,long long exponent,long long modulus);
long long choose(ll n,ll k);
ll inverse(ll a,ll m);

ll P=137;
ll MOD=mod;

vector<ll> inv(nax,0);

void build()
{

	ll temp=1;
	for(int i=0;i<nax;i++)
	{
		inv[i]=inverse(temp,MOD);
		temp=(temp*P)%MOD;
	}
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
}



struct Hash
{
	vector<ll> hashs;
	vector<ll> pows;

	ll P;
	ll MOD;

	Hash(string &s,ll P,ll MOD) : P(P),MOD(MOD)
	{
		ll n=s.size();
		pows.resize(n+1,0);
		hashs.resize(n+1,0);

		pows[0]=1;
		for(int i=1;i<=n;i++)
			pows[i]=(pows[i-1]*P)%MOD;

		hashs[0]=s[0];
		for(int i=1;i<n;i++)
		{
			hashs[i]=(hashs[i-1] + (s[i])*pows[i])%MOD ;
		}
	}

	ll get_hash(ll l,ll r)
	{
		ll ans=hashs[r];
		if(l!=0)
		{
			ans=(ans-hashs[l-1]+MOD)%MOD;
			ans=(ans*inv[l])%MOD;
		}
		return ans;
	}
};


vector<string> satind(nax);
unordered_map<ll,ll> hashtoind;    
    
int main(){

    build();
    
    FIO
    ll n;
    cin>>n;

    string s;
    cin>>s;

    ll m;
    cin>>m;

    Hash hs=Hash(s,P,MOD);

    for(int i=0;i<m;i++)
    {
    	string s1;
    	cin>>s1;
    	satind[i]=s1;	

    	for(int j=0;j<s1.size();j++)
    	{
    		if(s1[j]>='A' && s1[j]<='Z')
    			s1[j]=s1[j]-'A'+'a';
    	}
    	reverse(s1.begin(),s1.end());

    	ll temp=Hash(s1,P,mod).get_hash(0,s1.size()-1);
    	//deb(temp);
    	hashtoind[temp]=i;
    }

    vector<ll> dp(n,0);
    vector<ll> ans(n,0);

    for(int i=0;i<n;i++)
    {
    	for(int j=i-1,k=0;j>=-1 && k<1005;j--,k++)
    	{
    		//deb(hs.get_hash(j+1,i));
    		if( (j==-1 || dp[j]==1 ) && hashtoind.find(hs.get_hash(j+1,i))!=hashtoind.end())
    		{
    			//deb2(j,i);
    			dp[i]=1;
    			ans[i]=hs.get_hash(j+1,i);
    			break;
    		}
    	}
    	//deb(s[i]);
    }


    ll var=n-1;

    vector<string> final;
    while(var>=0)
    {
    	string s=satind[hashtoind[ans[var]]];
    	final.pb(s);
    	var-=s.size();
    }

    for(int i=final.size()-1;i>=0;i--)
    {
    	cout<<final[i]<<" ";
    }


    return 0;
}
    
        
    
long long modulo(long long base,long long exponent,long long modulus)
{
    if(modulus ==1)
        return 0;
    
    long long result=1;
    base=base % modulus;
    while(exponent>0)
    {
        if(exponent%2==1)
        {
            result=(result*base) % modulus;

        }
        exponent=exponent>>1;
        base = (base*base) % modulus;
    }
        return result;
}
    
long long choose(ll n,ll k)
{
    if(k==0)  return 1;
    return (n* choose(n-1,k-1))/k;
}
    
void EE(ll a,ll b,ll &co1,ll &co2)
{
    if(a%b==0)
    {
        co1=0;
        co2=1;
        return;
    }
    EE(b,a%b,co1,co2);
    ll temp=co1;
    co1=co2;
    co2=temp-co2*(a/b);
}
    
ll inverse(ll a,ll m)
{
    ll x,y;
    EE(a,m,x,y);
    if(x<0) x+=m;
    return x;
}