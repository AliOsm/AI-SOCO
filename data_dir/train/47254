#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cassert>
using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> l4;
int n, m, k;
const int maxn = 1e5+1;
struct Edge
{
  int u, id;
  ll len;
};
vector<Edge> g[maxn];
int pick[maxn];
ll d[maxn];
void dij()
{
  memset(d, -1, sizeof(d));
  d[1] = 0;
  set<l4> st;
  st.insert(l4(0, 1));
  while (!st.empty())
    {
      int cur = st.begin()->second;
      st.erase(st.begin());
      for (int i = 0; i < g[cur].size(); ++i)
	{
	  int nxt = g[cur][i].u;
	  ll nxtd = d[cur]+g[cur][i].len;
	  if (d[nxt] == -1 || d[nxt] > nxtd)
	    {
	      st.erase(l4(d[nxt], nxt));
	      st.insert(l4(d[nxt]=nxtd, nxt));
	      pick[nxt] = g[cur][i].id;
	    }
	  else if (d[nxt] == nxtd && pick[nxt] > m)
	    {
	      pick[nxt] = g[cur][i].id;
	    }
	  
	}
    }
}
int main()
{
  scanf("%d %d %d", &n, &m, &k);
  for (int i = 1; i <= m; ++i)
    {
      int u, v, len;
      scanf("%d %d %d", &u, &v, &len);
      g[u].push_back((Edge){v, i, (ll)len});
      g[v].push_back((Edge){u, i, (ll)len});
    }
  for (int i = 1; i <= k; ++i)
    {
      int v, len;
      scanf("%d %d", &v, &len);
      g[1].push_back((Edge){v, i+m, (ll)len});
    }
  dij();
  int ans = k;
  for (int i = 2; i <= n; ++i)
    {
      ans -= (pick[i] > m);
    }
  printf("%d\n", ans);
}

