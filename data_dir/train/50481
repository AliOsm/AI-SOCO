
// Problem : C. Little Elephant and Shifts
// Contest : Codeforces - Codeforces Round #136 (Div. 1)
// URL : https://codeforces.com/problemset/problem/220/C
// Memory Limit : 256 MB
// Time Limit : 2000 ms
// Powered by CP Editor (https://github.com/cpeditor/cpeditor)

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
ordered_set;	

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<pii, int> para;
const ll inf = 1e9 + 7;
const ll maxN = 1e6 + 5;
const ll MOD = 1e9 + 7;

int n, pos[maxN], val[maxN], a[maxN];
vi changeToLeft[maxN];
set<pii> lewo, prawo;

void print(set<pii>& lewo) {	
	for (auto x: lewo) {
		cout << x.st << " " << x.nd << endl;
	}
	cout << endl;
}

// sprawdz MODULO!
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	cin >> n;
	if (n == 1) {
		cout << 0 << endl;
		return 0;
	}
	RI(i, n) {
		int z;
		cin >> z;
		pos[z] = i;	
	}
	RI(i, n) cin >> a[i];
	RI(i, n) {
		if (pos[a[i]] >= i) {
			lewo.insert({pos[a[i]] - i, a[i]});
			changeToLeft[n - pos[a[i]] + i].pb(a[i]);
			val[a[i]] = pos[a[i]] - i;
		} else {
			prawo.insert({i - pos[a[i]], a[i]});
			changeToLeft[i - pos[a[i]]].pb(a[i]);
			val[a[i]] = i - pos[a[i]];
		}
	}
	// RI(i, n) {
		// cout << i << ": " << val[i] << endl;
	// }
	//
	RI(i, n) {
		int change = i - 1;
		int ans = inf;
		if (!lewo.empty()) {
			int x = lewo.begin()->st;
			ans = x + change;
		}
		if (!prawo.empty()) {
			int x = prawo.begin()->st;
			ans = min(ans, x - change);
		}
		cout << ans << "\n";
		
		{
			int el = a[i];
			lewo.erase(lewo.find({val[el], el}));
			prawo.insert({n - pos[el] + change + 1, el});
			val[el] = n - pos[el] + change + 1;
		}
		for (auto el: changeToLeft[i]) {
			prawo.erase(prawo.find({val[el], el}));
			lewo.insert({0 - change - 1, el});
			val[el] = -change - 1;
		}

	}
	return 0;
}
 
