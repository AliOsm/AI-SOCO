/*######################################################
#########~~~~~####~~~~###~~##~~##~~##~~##~~##~~#########
#########~~##~~##~~##~~##~~~#~~##~~~#~~##~~##~~#########
#~~~~~~##~~~~~###~~~~~~##~~#~~~##~~#~~~##~~##~~##~~~~~~#
#########~~######~~##~~##~~##~~##~~##~~##~~##~~#########
#########~~######~~##~~##~~##~~##~~##~~###~~~~##########
######################################################*/
#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize("O3")
#define ll long long
#define str string
#define rtn return
#define endl '\n'
#define f first
#define s second
#define pb push_back
#define db long double
#define bs 1000000007
#define inf 2e18
#define eps 1e-15
#define pll pair <ll, ll>
#define vi vector<ll>
#define fill(a,v) memset(a,v,sizeof(a))
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define loop(i,a,b) for(ll i=a;i<b;i++)
#define loop1(i,a,b) for(ll i=a;i<=b;i++)
#define rep(i,b) for(ll i=0;i<b;i++)
#define pool(i,a,b) for(ll i=b-1;i>=a;i--)
#define per(i,a) for(ll i=(a-1);i>=0;i--)
#define min(x, y) (x>y)?y:x
#define max(x, y) (x>y)?x:y
#define remin(x, y) x = min(x, y)
#define remax(x, y) x = max(x, y)

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " = " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << " = " << arg1 << " |";
  __f(comma+1, args...);
}
#else
#define trace(...)
#endif

ll n;
str a, b;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  cin >> n >> a >> b;
  int ans = 0;
  if ((n % 2) && a[n/2] != b[n/2]) ++ans;
  int to_do = n/2;
  rep (i, to_do) {
    set<char> s;
    map<char, int> mp;
    s.insert(a[i]);
    s.insert(a[n - i - 1]);
    s.insert(b[i]);
    s.insert(b[n - i - 1]);
    //trace(a[i], a[n - i - 1], b[i], b[n - i - 1]);
    mp[a[i]]++;
    mp[a[n - i - 1]]++;
    mp[b[i]]++;
    mp[b[n - i - 1]]++;
    if (s.size() == 1) continue;
    else if (s.size() == 2) {
      char cx = *s.begin();
      char ccx = (*--s.end());
      //cout << cx << ' ' << ccx << endl;
      if (mp[cx] == mp[ccx]) {
        continue;
      } else ++ans;
    }
    else if (s.size() == 3) {
      ans++;
      if (a[i] == a[n - i - 1]) ans++;
    }
    else if (s.size() == 4) {
      ans += 2;
    }
  }
  cout << ans << endl;
  rtn 0;
}
