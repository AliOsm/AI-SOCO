//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e6 + 5;
const double eps = 1e-9;
using namespace std;

struct Node
{
    ll lazy, val, col;

    Node(): lazy(0), val(0), col(0) {};
};
Node tree[MAXN];

void build(int l, int r, int k)
{
    if (l == r)
    {
        tree[k].lazy = 0;
        tree[k].val = 0;
        tree[k].col = l + 1;
        return;
    }
    int m = (l + r) >> 1;
    build(l,m,k<<1);
    build(m+1,r,k<<1|1);
}

void prop(int k, ll l, ll r)
{
    tree[k].val += (r - l + 1) * tree[k].lazy;
    if (l != r)
    {
        tree[k*2].lazy += tree[k].lazy;
        tree[k*2+1].lazy += tree[k].lazy;
    }
    tree[k].lazy = 0;
}

ll qry(int l, int r, int k, int a, int b)
{
    prop(k, l, r);
    if (r < a || b < l)
        return 0;
    if (a <= l && r <= b)
        return tree[k].val;
    int m = (l + r) / 2;
    return qry(l,m,k*2,a,b) + qry(m+1,r,k*2+1,a,b);
}

void upd(int l, int r, int k, int a, int b, ll x)
{
    prop(k, l, r);
    if (r < a || b < l)
        return;
    if (a <= l && r <= b && tree[k].col)
    {
        tree[k].lazy += abs(tree[k].col - x);
        prop(k, l, r);
        tree[k].col = x;
        return;
    }
    if (tree[k].col)
        tree[k*2].col = tree[k*2+1].col = tree[k].col;
    int m = (l + r) / 2;
    upd(l,m,k*2,a,b,x);
    upd(m+1,r,k*2+1,a,b,x);
    if (tree[k*2].col == tree[k*2+1].col)
        tree[k].col = tree[k*2].col;
    else
        tree[k].col = 0;
    tree[k].val = tree[k*2].val + tree[k*2+1].val;
}

int main()
{
    int n, m;
    ni(n), ni(m);
    build(0, n - 1, 1);
    while (m--)
    {
        int t, l, r, x;
        ni(t), ni(l), ni(r);
        if (t == 1)
        {
            ni(x);
            upd(0, n - 1, 1, l-1, r-1, x);
        }
        else
            prl(qry(0, n - 1, 1, l-1,r-1));
    }
    return 0;
}
