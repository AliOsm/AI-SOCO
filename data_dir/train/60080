

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <cstdio>
#include <random>
#include <chrono>
#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
#define mp make_pair
#define int long long
using namespace std;

const int INF = 1LL * 1000 * 1000 * 1000 * 1000 * 1000 * 1000;
const int MOD = 998244353;


void solve() {
	int n, m;
	cin >> n >> m;
	
	vector<string> a(n);
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}

	vector<vector<bool>> used(n, vector<bool>(m));
	vector < pair<pair<int, int>, int>> ans;


	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (a[i][j] == '.') continue;

			int left = 0, right = 0, up = 0, down = 0;

			for (int c = i + 1; c < n; c++) {
				if (a[c][j] == '*') down++;
				else break;
			}

			for (int c = i - 1; c >= 0; c--) {
				if (a[c][j] == '*') up++;
				else break;
			}

			for (int c = j - 1; c >= 0; c--) {
				if (a[i][c] == '*') left++;
				else break;
			}

			for (int c = j + 1; c < m; c++) {
				if (a[i][c] == '*') right++;
				else break;
			}

			int len = min(min(left, right), min(up, down));

			if (!len) continue;
			
			for (int c = j - len; c <= j + len; c++) {
				used[i][c] = true;
			}

			for (int c = i - len; c <= i + len; c++) {
				used[c][j] = true;
			}
			
			ans.pb({ {i + 1, j + 1}, len });
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (a[i][j] == '*' && !used[i][j]) {
				cout << -1;
				return;
			}
		}
	}

	cout << ans.size() << '\n';
	for (auto & p : ans) {
		cout << p.first.first << " " << p.first.second << " " << p.second << '\n';
	}
}


signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}