#include<bits/stdc++.h>

using namespace std;

#define ll long long int

ll ara[200005],cum[200005];

vector < ll > tree[4*200005];

void build(ll node, ll b, ll e)
{
    if(b==e)
    {
        tree[node]=vector < ll > (1,cum[b]);

        return ;
    }

    ll mid=(b+e)/2;

    ll Left=node*2;

    ll Right=Left+1;

    build(Left, b, mid);

    build(Right, mid+1, e);

    merge(tree[Left].begin(),tree[Left].end(),tree[Right].begin(),tree[Right].end(),back_inserter(tree[node]));
}

ll query(ll node, ll b, ll e, ll i, ll j, ll val)
{
    if(i>e || j<b)
    {
        return 0;
    }

    if(b>=i && e<=j)
    {
        ll ret=upper_bound(tree[node].begin(),tree[node].end(),val)-tree[node].begin();

       // ret--;

        if(ret<0) ret=0;

        return ret;
    }

    ll mid=(b+e)/2;

    ll Left=node*2;

    ll Right=Left+1;

    ll p1=query(Left, b, mid, i, j, val);

    ll p2=query(Right, mid+1, e, i, j, val);

    return p1+p2;
}

int main()
{
    ll n,k,i,j;

    scanf("%I64d %I64d",&n,&k);

    for(i=1; i<=n; i++)
    {
        scanf("%I64d",&ara[i]);

        cum[i]=cum[i-1]+ara[i];
    }

    build(1,1,n);

    ll ans=0;

    for(i=1; i<=n; i++)
    {
        ll val=k+cum[i-1]-1;

        ans+=query(1,1,n,i+1,n,val);

        ans+=(ara[i]<k);

        //cout<<"bb: "<<ans<<endl;
    }

    printf("%lld\n",ans);

    return 0;


}
