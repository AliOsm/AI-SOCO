#pragma GCC optimize("O3")

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace __gnu_pbds;
using namespace std;
 
typedef
tree<pair<int,int>,null_type,less<pair<int,int>>,rb_tree_tag, tree_order_statistics_node_update> ordered_set;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 1e6 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
int d[N];
int c[N];
vector < ll > dist[N];
vector < int > sum[N];

int main () {
	scanf("%d%d", &n, &m);
	for (int i = 2; i <= n; i ++) 
		scanf("%d", c + i);
	
	for (int v = 1, to; v * 2 <= n; v ++) {
		to = v * 2;
		d[to] = d[v] + c[to];
		to ++;
		d[to] = d[v] + c[to];		 
	}
//	exit(0);

	for (int v = n, l, r; v >= 1; v --) {
		sum[v].pb(d[v]);
		l = v * 2, r = v * 2 + 1;
		if(r <= n) {
      	sum[v].resize(sum[l].size() + sum[r].size() + 1);
      	merge(sum[l].begin(), sum[l].end(), sum[r].begin(), sum[r].end(), sum[v].begin() + 1);
    	} else if(l <= n) {
         sum[v].resize(sum[l].size() + 1);
      	copy(sum[l].begin(), sum[l].end(), sum[v].begin() + 1);
		}
		
		dist[v].resize(sum[v].size());
		dist[v][0] = sum[v][0];
		for (int i = 1; i < sum[v].size(); i ++) {
			dist[v][i] = dist[v][i - 1] + sum[v][i];
		}
//		cout << "ver : " << v << '\n';
//		for (int e : sum[v]) {
//			cout << e << ' ';
//		}
//		cout << '\n';
	}

	for (int i = 1; i <= m; i ++) {
		int v, h, x;
		scanf("%d%d", &v, &h);
		x = upper_bound(every(sum[v]), h + d[v]) - sum[v].begin();                              
		ll res = x * (ll)(h + d[v]) - (x ? dist[v][x - 1] : 0);
		//cout << sum[v][x] << '\n';
		//cout << "que " << v << ' ' << x << '\n';
		//cout << "+ " << x * (ll)(h + d[v]) - (x ? dist[v][x - 1] : 0) << '\n';
		h -= c[v];

		while (v != 1 && h > 0) {
			x = upper_bound(every(sum[v ^ 1]), h + d[v / 2]) - sum[v ^ 1].begin();

			res += h + x * (ll)(h + d[v / 2]) - (x ? dist[v ^ 1][x - 1] : 0);
			//cout << "+ " << x * (ll)(h + d[v / 2]) - (x ? dist[v ^ 1][x - 1] : 0) << '\n';
		
			v /= 2;
			h -= c[v];
		}
		printf("%lld\n", res);
	}


	return Accepted;
}

// B...a