#include<bits/stdc++.h>
using namespace std;


const int N = 51, dx[] = {-1, 0, 1, 0}, dy[] = {0, -1, 0, 1};



int n, r1, c1, r2, c2;
char a[N][N];
int sz;
bool used[2][N][N];
set < pair < int, int > > q[2];


void dfs(int x, int y){
    if(x < 1 || x > n || y < 1 || y > n || a[x][y] == '1' || used[sz][x][y]){
        return;
    }
    used[sz][x][y] = true;
    q[sz].insert(make_pair(x, y));
    for(int i = 0; i < 4; i++){
        int xx = x + dx[i],
            yy = y + dy[i];
        dfs(xx, yy);
    }
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin >> n >> r1 >> c1 >> r2 >> c2;
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= n; j++){
            cin >> a[i][j];
        }
    }
    dfs(r1, c1);
    sz += 1;
    dfs(r2, c2);
    if(q[0] == q[1]){
        cout << 0;
    }
    else{
        int ans = 2e9;
        for(auto it1 : q[0]){
            for(auto it2 : q[1]){
                ans = min(ans, (it1.first - it2.first) * (it1.first - it2.first) + (it1.second - it2.second) * (it1.second - it2.second));
            }
        }
        cout << ans;
    }
}
