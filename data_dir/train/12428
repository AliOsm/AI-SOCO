#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
#include <intrin.h>
using namespace std;
typedef long long ll;
typedef long double ld;

const ll MOD = 1000000007LL;
const int MAX_N = 2005;

int n, m;
bool a[MAX_N][MAX_N];
int rockPrefRow[MAX_N][MAX_N];
int rockPrefCol[MAX_N][MAX_N];
ll dp[MAX_N][MAX_N];
ll dpPrefRow[MAX_N][MAX_N];
ll dpPrefCol[MAX_N][MAX_N];

int32_t main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		string s; cin >> s;
		for (int j = 0; j < m; j++)
			a[i][j] = s[j] == 'R';
	}

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
		{
			if (j != 0)
				rockPrefRow[i][j] = rockPrefRow[i][j - 1];
			if (a[i][j])
				rockPrefRow[i][j]++;
		}
	for (int j = 0; j < m; j++)
		for (int i = 0; i < n; i++)
		{
			if (i != 0)
				rockPrefCol[i][j] = rockPrefCol[i - 1][j];
			if (a[i][j])
				rockPrefCol[i][j]++;
		}

	dp[0][0] = 1;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (j != 0)
			{
				dpPrefRow[i][j] += dpPrefRow[i][j - 1];
				if (dpPrefRow[i][j] >= MOD)
					dpPrefRow[i][j] -= MOD;
			}
			if (i != 0)
			{
				dpPrefCol[i][j] += dpPrefCol[i - 1][j];
				if (dpPrefCol[i][j] >= MOD)
					dpPrefCol[i][j] -= MOD;
			}

			dp[i][j] += dpPrefRow[i][j] + dpPrefCol[i][j];
			while (dp[i][j] >= MOD)
				dp[i][j] -= MOD;

			//ll dpUp = (i == 0) ? (j == 0 ? 1LL : 0LL) : dp[i - 1][j];
			ll dp1 = dp[i][j] - dpPrefRow[i][j];
			if (dp1 < 0)
				dp1 += MOD;
			int canMoveRight = (m - j - 1) - (rockPrefRow[i][m - 1] - rockPrefRow[i][j]);
			if (canMoveRight > 0)
			{
				int maxJ = j + canMoveRight;
				dpPrefRow[i][j + 1] += dp1;
				if (dpPrefRow[i][j + 1] >= MOD)
					dpPrefRow[i][j + 1] -= MOD;
				if (maxJ + 1 < m)
				{
					dpPrefRow[i][maxJ + 1] -= dp1;
					if (dpPrefRow[i][maxJ + 1] < 0)
						dpPrefRow[i][maxJ + 1] += MOD;
				}
			}

			//ll dpLeft = (j == 0) ? (i == 0 ? 1LL : 0LL) : dp[i][j - 1];
			ll dp2 = dp[i][j] - dpPrefCol[i][j];
			if (dp2 < 0)
				dp2 += MOD;
			int canMoveDown = (n - i - 1) - (rockPrefCol[n - 1][j] - rockPrefCol[i][j]);
			if (canMoveDown > 0)
			{
				int maxI = i + canMoveDown;
				dpPrefCol[i + 1][j] += dp2;
				if (dpPrefCol[i + 1][j] >= MOD)
					dpPrefCol[i + 1][j] -= MOD;
				if (maxI + 1 < n)
				{
					dpPrefCol[maxI + 1][j] -= dp2;
					if (dpPrefCol[maxI + 1][j] < 0)
						dpPrefCol[maxI + 1][j] += MOD;
				}
			}
		}
	}
	cout << dp[n - 1][m - 1] << endl;
	
	return 0;
}