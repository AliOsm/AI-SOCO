//I forgot you...
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)73;
const int MAXK = (int)18;
const int infint = (int)1e9 + 3;
const ll inf = (ll)1e18;
int n, m, a, b, dist[MAXN][(1LL << MAXK)], comp[MAXN], idx = 0, visited[MAXN], sz[MAXN], ted = 0, ans[MAXN], lst[MAXN];
vector<pair<int, int> > G[MAXN];
void dfs(int u)
{
	sz[idx]++;
	visited[u] = 1;
	comp[u] = idx;
	for (auto v : G[u])
		if(!visited[v.first] && v.second == a)
			dfs(v.first);
}
void dijkstra(int st, int curmask)
{
	for (int i = 1; i <= n; i++)
		for (int j = 0; j < (1LL << idx); j++)
			dist[i][j] = infint;
	dist[st][curmask] = 0;
	set<pair<int, pair<int, int> > > S;
	for (int i = 1; i <= n; i++)
		for (int j = 0; j < (1LL << idx); j++)
			S.insert({dist[i][j], {i, j}});
	while(!S.empty())
	{
		auto it = *S.begin();
		S.erase(it);
		int u = it.second.first, mask = it.second.second, dst = it.first;
		if(dst == infint)
			continue;
		for (auto v : G[u])
		{
			int vertex = v.first, edge = v.second;
			
			if(comp[vertex] != -1 && ((mask >> comp[vertex]) & 1) && comp[u] != comp[vertex])
				continue;
			if(edge == b && lst[vertex] == lst[u])
				continue;
				
			int nw_mask = mask | (1LL << comp[vertex]);
			if(dist[vertex][nw_mask] > dist[u][mask] + edge)
			{
				S.erase({dist[vertex][nw_mask], {vertex, nw_mask}});
				dist[vertex][nw_mask] = min(dist[vertex][nw_mask], dist[u][mask] + edge);
				S.insert({dist[vertex][nw_mask], {vertex, nw_mask}});
			}
		}
	}
}
int main()
{
	ios::sync_with_stdio(false); 
	cin.tie(0); cout.tie(0);
	cin >> n >> m >> a >> b;
	for (int i = 0; i < m; i++)
	{
		int u, v, c;
		cin >> u >> v >> c;
		G[u].push_back({v, c});
		G[v].push_back({u, c});
	}
	for (int i = 1; i <= n; i++)
		if(!visited[i])
			dfs(i), idx++;
	
	ted = idx;
	idx = 0;
	for (int i = 1; i <= n; i++)
		lst[i] = comp[i];
	
	
	for (int i = 1; i <= n; i++)
		if(sz[comp[i]] <= 3)
			comp[i] = -1;
	
	for (int i = 0; i < ted; i++)
		if(sz[i] >= 4)
		{
			for (int j = 1; j <= n; j++)
				if(comp[j] == i)
					comp[j] = idx;
			idx++;
		}
	int mask = 0;
	if(comp[1] != -1)
		mask += (1LL << comp[1]);
	dijkstra(1, mask);
	for (int i = 1; i <= n; i++)
		ans[i] = infint;
	for (int i = 1; i <= n; i++)
		for (int j = 0; j < (1LL << idx); j++)
			ans[i] = min(ans[i], dist[i][j]);
	for (int i = 1; i <= n; i++)
		cout << ans[i] << " ";
	
}
