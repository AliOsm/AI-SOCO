#include<bits/stdc++.h>
using namespace std;

#define si(n) scanf("%d",&n)
#define MAX 1000006
#define ll long long

int n,m,cnt=0,node_level[MAX],st[MAX],en[MAX],st_mp[MAX];
vector<int>gr[MAX];
bool vis[MAX];
vector<int>level[MAX];
vector<int>::iterator it;

ll ans[MAX],sum[MAX],tsum[MAX],tminus[MAX];


void dfs(int now,int h)
{
    vis[now]=true;
    st[now]=++cnt;
    st_mp[st[now]]=now;
    node_level[now]=h;
    level[h].push_back(st[now]);
    for(auto to : gr[now]){
        if(vis[to])continue;
        dfs(to,h+1);
    }
    en[now]=++cnt;
}

void go(int now,int p,ll val)
{
    val+=sum[now];
    ans[now]=val;
    val-=tminus[now];
    for(auto to : gr[now]){
        if(to==p)continue;
        go(to,now,val);
    }
}

int main()
{
    //freopen("input.txt","r",stdin);
    int i,j;
    si(n);
    for(i=1;i<n;i++){
        int u,v;
        si(u);si(v);
        gr[u].push_back(v);
        gr[v].push_back(u);
    }
    dfs(1,0);
    for(i=1;i<MAX && level[i].size();i++)sort(level[i].begin(),level[i].end());

    si(m);

    while(m--){
        int v,D,x;
        si(v);si(D);si(x);
        sum[v]+=x;
        ll d=D;
        d+=node_level[v];

        if(d>=MAX || (level[d].size()==0))continue;
        it=lower_bound(level[d].begin(),level[d].end(),st[v]);
        if(it==level[d].end() || *it>=en[v])continue;

        tsum[*it]+=x;
        it=upper_bound(level[d].begin(),level[d].end(),en[v]);
        if(it!=level[d].end())
            tsum[*it]-=x;
    }

    for(i=0;i<MAX && level[i].size();i++){
        ll now=0;
        for(auto x : level[i]){
            now+=tsum[x];
            int node=st_mp[x];
            tminus[node]=now;
        }
    }

    go(1,-1,0);

    for(i=1;i<=n;i++)printf("%lld ",ans[i]);

    return 0;
}
