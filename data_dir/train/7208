#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;

#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()

template<typename _T> inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template<typename _T, typename... args> void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define _upgrade ios_base::sync_with_stdio(0);
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 2e5 + 7;

int n, k;
LL T[N], pre[N], suf[N];

int main()
{
    _upgrade
    
    cin >> n >> k;
    for(int i = 1; i <= n; i++)
        cin >> T[i];
    sort(T + 1, T + n + 1);
    
    for(int i = 1; i <= n; i++)
        pre[i] = T[i] + pre[i - 1];
    for(int i = n; i; i--)
        suf[i] = T[i] + suf[i + 1]; 

    LL ans = LL(1e18) + 7;
    for(int i = 1; i <= n; i++)
    {
        if(T[i] == T[i - 1]) continue;
        
        int j = i;
        while(j < n && T[j + 1] == T[j])
            j++;

        int have = j - i + 1;
        if(have >= k)
        {
            ans = 0;
            break;
        }

        LL x = T[i];

        LL c1 = (x - 1) * (i - 1) - pre[i - 1];
        LL c2 = suf[j + 1] - (x + 1) * (n - j);
    
        if(i - 1 + have >= k)
            ans = min(ans, c1 + k - have);
        else
            ans = min(ans, c1 + c2 + k - have);

        if(n - j + have >= k)
            ans = min(ans, c2 + k - have);
        else
            ans = min(ans, c1 + c2 + k - have);
    }

    cout << ans << "\n";

	return 0;
}