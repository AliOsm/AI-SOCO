#include<bits/stdc++.h>
#define ll long long
#define pb push_back
#define omar ios::sync_with_stdio(0),ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
using namespace std;
struct point
{
    ll x,y,xx,yy;
    int slope()
    {
        if (abs(y-yy)&&!abs(x-xx)) return 2;
        else if (!abs(y-yy)&&abs(x-xx)) return 1;
        else return -1;
    }
    ll calc()
    {
        return abs(x-xx)+abs(y-yy);
    }
};
int main()
{
    omar;
    point arr[5];
    bool is=false;
    for (int i=0; i<4; ++i)
    {
        ll x,y,xx,yy;
        cin>>x>>y>>xx>>yy;
        arr[i].x=min(x,xx);
        arr[i].xx=max(x,xx);
        arr[i].y=min(y,yy);
        arr[i].yy=max(y,yy);
        if (arr[i].slope()==-1) is=true;
    }
    if (is) return cout<<"NO\n",0;
    vector<int>vx,vy;
    for (int i=0; i<4; ++i)
    {
        if (arr[i].slope()==1)
        {
            vx.pb(i);
        }
        else
        {
            vy.pb(i);
        }
    }
    if (vx.size()!=2||vy.size()!=2) return cout<<"NO\n",0;
    if (arr[vx[0]].calc()!=arr[vx[1]].calc()||arr[vy[0]].calc()!=arr[vy[1]].calc()) return cout<<"NO\n",0;
    if (arr[vx[0]].x==arr[vx[1]].x&&arr[vx[0]].xx==arr[vx[1]].xx&&
            arr[vy[0]].y==arr[vy[1]].y&&arr[vy[0]].yy==arr[vy[1]].yy&&
            abs(arr[vx[0]].y-arr[vx[1]].y)==arr[vy[0]].calc()&&
            abs(arr[vy[0]].x-arr[vy[1]].x)==arr[vx[0]].calc()
       )
    {
        return cout<<"YES\n",0;
    }
    cout<<"NO\n";
    return 0;
}
