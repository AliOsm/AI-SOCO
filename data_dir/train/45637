#pragma comment(linker, "/stack:256000000")

#include <iostream>
#include <cassert>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cstdio>
#include <cstring>
#include <string>
#include <set>

using namespace std;

#define REP(i, n) for (int i = 0; i < n; i++)
#define all(v) (v).begin(), (v).end()
#define sz(s) (int)(s).size()

const int N = 500100;

vector <int> g[N];
set <int> s;
int L[N], R[N], P[N];
int timer;

void dfs(int v, int p) {
	int cnt = 0;
	L[v] = ++timer;
	REP(i, sz(g[v])) {
		int to = g[v][i];
		if (to != p) {
			++cnt;
			P[to] = v;
			dfs(to, v);
		}
	}
	R[v] = ++timer;
	if (cnt == 0) {
		s.insert(L[v]);
	}
}

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int n, a, b;
	scanf("%d", &n);
	REP(i, n - 1) {
		scanf("%d %d", &a, &b);
		--a, --b;
		g[a].push_back(b);
		g[b].push_back(a);
	}
	P[0] = -1;
	dfs(0, -1);
	int q;
	scanf("%d", &q);
	set <int>::iterator it, jt;
	REP(_, q) {
		scanf("%d %d", &a, &b);
		--b;
		if (a == 1) {
			if (P[b] != -1) {
				it = s.lower_bound(L[P[b]]);
				if (it != s.end() && (*it) <= R[P[b]]) {
					s.insert(L[P[b]]);
				}
			}
			it = s.lower_bound(L[b]);
			jt = s.upper_bound(R[b]);
			s.erase(it, jt);
		} else if (a == 2) {
			s.insert(L[b]);
		} else {
			it = s.lower_bound(L[b]);
			if (it != s.end() && (*it) <= R[b]) {
				puts("0");
			} else {
				puts("1");
			}
		}
	}
	return 0;
}