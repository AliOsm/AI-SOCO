# include <bits/stdc++.h> 
using namespace std;
const int N = 101;
vector < int > edges[N] , redges[N] , v;
string s[N];
int deg[N] , fix[N];
void NO(){
	cout << "Impossible";
	exit(0);
}
void dfs(int x){
	fix[x] = 1;
	for(int i = 0; i < edges[x].size(); i ++){
		int u = edges[x][i];
		if(fix[u] == 1) NO();
		if(fix[u] == 2) continue;
		dfs(u);
	}
	fix[x] = 2; 
}
int main(){
	int n;
	cin >> n;
	for(int i = 1; i <= n; i ++){
		cin >> s[i];
		for(int j = 1; j < i; j ++){ 
			int k = 0;
			int mn = min(int(s[i].size()) , int(s[j].size()));
			while(k < mn && s[i][k] == s[j][k]) ++ k;
			if(k == mn){
				if(s[j].size() != k)
					NO();
			}
			else{
				int u = s[j][k] - 'a' + 1;
				int V = s[i][k] - 'a' + 1;
				edges[u].push_back(V);
				deg[u] ++;
				v.push_back(u);
				v.push_back(V);
				redges[V].push_back(u);
			} 
		}
	}
	string res = "";
	if(v.size()){
		dfs(v[0]);
		set < pair < int , int > > s;
		for(int i = 0; i < v.size(); i ++)
			s.insert({deg[v[i]] , v[i]});
		for(int i = 0; i < 100; i ++) fix[i] = 0;
		while(s.size()){
			set < pair < int , int > > :: iterator it = s.begin();
			int x = it->second;
			s.erase(it);
			for(int i = 0; i < redges[x].size(); i ++){
				int u = redges[x][i];
				s.erase({deg[u] , u}); 
				deg[u] --; 
				s.insert({deg[u] , u});
			}
			res += char(x + 'a' - 1);
			fix[x] = 1;
		}
	}
	for(int i = 1; i < 27; i ++) if(!fix[i]) res += (i + 'a' - 1);  
	reverse(res.begin() , res.end());
	cout << res << "\n";
}