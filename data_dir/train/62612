#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>

#ifdef PRINTERS
#include "printers.hpp"
using namespace printers;
#define tr(a)		cerr<<#a<<" : "<<a<<endl;
#else
#define tr(a)    
#endif

#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)	for(int i=a;i<b;i++)
using namespace std;
vector<pii>moves={{0,1},{0,-1},{1,0},{-1,0}};
void solve(){
	int n,m;
	cin>>n>>m;
	vector<string>x(n);
	rep(i,0,n)cin>>x[i];
	bool vis[3][1001][1001];
	memset(vis,0,sizeof vis);
	int shortest[3][n][m];
	memset(shortest,0,sizeof shortest);
	rep(i,0,3)rep(j,0,n)rep(k,0,m)shortest[i][j][k]=1e8;
	priority_queue<pair<int,pii>,vector<pair<int,pii>>,greater<pair<int,pii>>>q1,q2,q3;
	rep(i,0,n){
		rep(j,0,m){
			if(x[i][j]=='1')q1.push(mp(0,mp(i,j)));
			if(x[i][j]=='2')q2.push(mp(0,mp(i,j)));
			if(x[i][j]=='3')q3.push(mp(0,mp(i,j)));
		}
	}
	while(!q1.empty()){
		auto cur=q1.top();
		q1.pop();
		if(vis[0][cur.S.F][cur.S.S])continue;
		if(x[cur.S.F][cur.S.S]=='#')continue;
		vis[0][cur.S.F][cur.S.S]=1;
		shortest[0][cur.S.F][cur.S.S]=cur.F;
		for(auto i:moves){
			if(cur.S.F+i.F<0 or cur.S.S+i.S<0 or cur.S.F+i.F>=n or cur.S.S+i.S>=m)continue;
			q1.push(mp(cur.F+(x[cur.S.F+i.F][cur.S.S+i.S]=='.'),mp(cur.S.F+i.F,cur.S.S+i.S)));
		}
	}
	while(!q2.empty()){
		auto cur=q2.top();
		q2.pop();
		if(cur.S.F<0 or cur.S.S<0 or cur.S.F>=n or cur.S.S>=m)continue;
		if(vis[1][cur.S.F][cur.S.S])continue;
		if(x[cur.S.F][cur.S.S]=='#')continue;
		vis[1][cur.S.F][cur.S.S]=1;
		shortest[1][cur.S.F][cur.S.S]=cur.F;
		for(auto i:moves){
			if(cur.S.F+i.F<0 or cur.S.S+i.S<0 or cur.S.F+i.F>=n or cur.S.S+i.S>=m)continue;
			q2.push(mp(cur.F+(x[cur.S.F+i.F][cur.S.S+i.S]=='.'),mp(cur.S.F+i.F,cur.S.S+i.S)));
		}
	}
	while(!q3.empty()){
		auto cur=q3.top();
		q3.pop();
		if(cur.S.F<0 or cur.S.S<0 or cur.S.F>=n or cur.S.S>=m)continue;
		if(vis[2][cur.S.F][cur.S.S])continue;
		if(x[cur.S.F][cur.S.S]=='#')continue;
		vis[2][cur.S.F][cur.S.S]=1;
		shortest[2][cur.S.F][cur.S.S]=cur.F;
		for(auto i:moves){
			if(cur.S.F+i.F<0 or cur.S.S+i.S<0 or cur.S.F+i.F>=n or cur.S.S+i.S>=m)continue;
			q3.push(mp(cur.F+(x[cur.S.F+i.F][cur.S.S+i.S]=='.'),mp(cur.S.F+i.F,cur.S.S+i.S)));
		}
	}
	int ans=INT_MAX;
	rep(i,0,n)rep(j,0,m)if(x[i][j]!='#' and vis[0][i][j] and vis[1][i][j] and vis[2][i][j])ans=min(ans,shortest[0][i][j]+shortest[1][i][j]+shortest[2][i][j]-2*(x[i][j]=='.'));
	if(ans>5e7)cout<<-1;
	else cout<<ans;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t=1;
//	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}