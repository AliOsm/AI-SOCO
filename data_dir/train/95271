/*
    U FAIL U IMPROVE,
                     U SKIP U LOSE!!
                                    */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=1e9+7;   
#define INF 100000000
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctz(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clz(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffs(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,k,m,t,q,z;
const double pi=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
vector<int> pf(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//lli vis[305][305];
//lli a[500005];
//lli good[5005][5005];
//string s;
//map<lli,lli> vis;
//map<lli,lli> ml;
//vector<ll> v[2000005];
//lli mx=0;
//lli ff=0;
unordered_map<lli,lli> mm,mm1,mm2;
struct edge
{
    lli first,second,third;
};
vector<edge> vv;

vector<ll> v[200005];
//set<lli> s;
map<lli,lli> mk;
//int f=0;
map<ll,lli> bb;
//lli mx=-1;
//lli a[200005];
lli mi=1e18;
ll p[200005];
lli mx=1;
//set<lli> s;
lli hpy,atky,defy,hpm,atkm,defm,h,d,fl;
map<ll,lli> allow;
lli a[100005];
lli b[505][505];
lli tot=1e18;
map<lli,lli> vis;
string s1="\0";
string s2="\0";
string s;
string ss;
lli f=0;
map<ll,lli> ml;
int ff;
void dfs(lli i,lli mi,lli root)
{
    vis[i]=1;
    if(v[i].size()==0)
    {
        vv.push_back({root,i,mi});
        ff=1;
        return;
    }
    for(int j=0;j<v[i].size();j++)
    {
        if(vis[v[i][j].first]==0)
        {
            lli d=min(mi,v[i][j].second);
            dfs(v[i][j].first,d,root);
        }
    }
}
lli aa(string s)
{
    lli cnt=0;
    lli ans=0;
    for(int j=0;j<s.length();j++)
    {
        if(s[j]>'0')
        {
            if(s[j]>'1')
            {
            for(int hh=0;hh<=3-cnt-1;hh++)
            {
            if(hh==0)
            ans+=(s[j]-'0')-1;
            else if(hh==1)
            {
                lli k=s.length()-j-1;
                ans=ans+((s[j]-'0')-1)*(k)*9;
            }
            else if(hh==2)
            {
                 lli k=s.length()-j-1;
                ans=ans+((s[j]-'0')-1)*((k*(k-1))/2)*9*9;
            }
            }
            }
            for(int hh=0;hh<=3-cnt;hh++)
            {
            if(hh==0)
            ans++;
            else if(hh==1)
            {
                lli k=s.length()-j-1;
                ans=ans+((k)*9);
            }
            else if(hh==2)
            {
                 lli k=s.length()-j-1;
                ans=ans+(((k*(k-1))/2)*9*9);
            }
            else
            {
                lli k=s.length()-j-1;
            ans=ans+(((k*(k-1)*(k-2))/6)*9*9*9);
            }
            //cout<<hh<<" "<<j+1<<" "<<ans<<endl;
            }
            //ans+=
            cnt++;
        }
    }
    return ans;
}
map<lli,unordered_set<lli>> dp;
int main()
{
lli t;
cin>>t;
for(int i=1;i<=t;i++)
{
    lli x,y;
    cin>>x>>y;
    string s,s1;
    s=to_string(x);
    y++;
    s1=to_string(y);
    lli ans=aa(s1)-aa(s);
    cout<<ans<<endl;
}
}