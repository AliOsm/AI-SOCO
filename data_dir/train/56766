#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define ld double
#define X first
#define Y second
#define pb push_back
#define EPS 1e-9
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
using namespace std;
typedef pair<int, int> II;
typedef pair<II, int> III;

int dx[4] = {1,0,0,-1};
int dy[4] = {0,1,-1,0};
map<II, bool> ma;

struct point {
    ll x, y;
    point(ll x = 0, ll y = 0) {
        this->x = x;
        this->y = y;
    }
    point operator + (const point& a) const { return point(x+a.x, y+a.y); }
    point operator - (const point& a) const { return point(x-a.x, y-a.y); }
    bool operator== (point& p) { return p.x == x && p.y == y; }
};

struct line {
    double a, b, c;
    point A, B;

    line(double a = 0, double b = 0, double c = 0) : a(a), b(b), c(c) {}

    line(point A, point B) : A(A), B(B) {
        a = B.y - A.y;
        b = A.x - B.x;
        c = - (a * A.x + b * A.y);
    }
};

struct vecto {
    ll x, y;
    vecto(ll x = 0, ll y = 0) {
        this->x = x;
        this->y = y;
    }
    bool operator== (vecto& v) {
        return v.x == x && v.y == y;
    }
    bool operator< (const vecto& v) const {
        if (v.x == x) return y < v.y;
        return x < v.x;
    }
};

vecto toVec(point a, point b) { return vecto(b.x - a.x, b.y - a.y); }

line a[3];

ll crossProduct(point first, point second, point third) { return (second.x - first.x) * (third.y - first.y) - (second.y - first.y) * (third.x - first.x); }

bool between(ll a, ll b, ll c)
{
    if (a > b) swap(a, b);
    return (c >= a && c <= b);
}

bool on(point b, line a)
{
    if (crossProduct(a.A, a.B, b)) return false;
    return (between(a.A.x, a.B.x, b.x) && between(a.A.y, a.B.y, b.y));
}

ll dist(point a, point b) { return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y); }
ll dotProduct(vecto a, vecto b) { return a.x*b.x + a.y*b.y; }

bool checkProportion(line a, point b)
{
    ll distA = dist(a.A, b);
    ll distB = dist(a.B, b);
    if (distA > distB) swap(distA, distB);
    //cout << distA << " " << distB << endl;
    //cout << a.A.x << " " << a.A.y << endl;
    //cout << a.B.x << " " << a.B.y << endl;
    //cout << b.x << " " << b.y << endl;
    //cout << endl;
    return 16*distA >= distB;
}

bool checkAngle(line a, line b)
{
    vecto u = toVec(a.A, a.B);
    vecto v = toVec(b.A, b.B);
    if (u.x*v.y == v.x*u.y) return false;
    if (dotProduct(u, v) < 0) return false;
    return true;
}

bool check(line a, line b, line c)
{
    // condition 1
    if (!(a.A == b.A) && !(a.A == b.B) && !(a.B == b.A) && !(a.B == b.B)) return false;
    if (a.A == b.B) swap(b.A, b.B);
    else if (a.B == b.A) swap(a.A, a.B);
    else if (a.B == b.B) { swap(a.A, a.B); swap(b.A, b.B); }
    if (!(on(c.A, a) && on(c.B, b)) && !(on(c.A, b) && on(c.B, a))) return false;
    if (on(c.A, b) && on(c.B, a)) swap(c.A, c.B);
    // condition 2
    if (!checkAngle(a, b)) return false;
    // condition 3
    return (checkProportion(a, c.A) && checkProportion(b, c.B));
}

point A, B;

int main()
{
    ios::sync_with_stdio(0);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    int t;
    cin >> t;
    while (t--) {
        FOR(i,1,3) {
            cin >> A.x >> A.y >> B.x >> B.y;
            a[i] = line(A, B);
        }
        if (check(a[1], a[2], a[3]) || check(a[3], a[2], a[1]) || check(a[3], a[1], a[2])) cout << "YES\n";
        else cout << "NO\n";
    }
    //cout << "fuck";
    return 0;
}
