#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define fr first
#define sc second
#define pb push_back
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int> >
const int INF = 1e9 + 7;
const int MAXN = 2e6 + 200;
const  long double eps = 1e-16;
const long double pi = acos(-1.0);
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

int n;
int l[MAXN];
bool bol[MAXN];
int mx[MAXN], mn[MAXN];
long long kol[MAXN];
void solve() {
    cin >> n;

    for (int i = 1; i <= n; i++){
        cin >> l[i];
        mx[i] = 0;
        mn[i] = 1e7;

        for (int j = 1; j <= l[i]; j++){
            int x;
            cin >> x;

            if (mn[i] > x){
                mn[i] = x;

            }
            if (x > mn[i]) bol[i] = true;

            if (mx[i] < x){
                mx[i] = x;

            }
        }
    }

    int kol1 = 0;
    for (int i = 1; i <= n; i++){
        if (bol[i]) kol1++;
        if (bol[i]) continue;
        kol[mx[i]]++;
    }
    for (int i = 1000000; i >= 0; i--){

        kol[i] += kol[i + 1];
    }
    long long ans = 0;
    for (int i = 1; i <= n; i++){
        if (bol[i]) continue;
        int y = kol[mn[i] + 1];
        if (mx[i] >= mn[i] + 1) y--;

        ans += y;
        ans += kol1;
        if (mn[i] != mx[i]) ans++;
    }
    for (int i = 1; i <= n; i++){
        if (bol[i]) ans += n;
    }
    cout << ans << endl;
}


int main() {
ios::sync_with_stdio(NULL), cin.tie(0), cout.tie(0);
cout.setf(ios::fixed), cout.precision(20);
 //freopen("input.in", "r", stdin);
// freopen("output.out", "w", stdout);
 int step;
 step = 1;
  for (int i = 1; i <= step; i++){
         solve();
    }
}
