#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>

#define pb push_back
#define mp make_pair
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define tr(c, i) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define rtr(c, i) for (typeof((c).rbegin()) i = (c).rbegin(); i != (c).rend(); --i)
#define contains(c, x) ((c).find(x) != (c).end())
#define Contains(c, x) (find(all(c), x) != (c).end())
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define rep(i, n) REP(i, 0, (n))
#define To_String to_string< char,std::char_traits<char>,std::allocator<char> >

typedef long long ll;
typedef unsigned long long ull;
using namespace std;

ll kp[1000010], s[1000010];
int main()
{
	ios_base::sync_with_stdio(0);
	ll k, b, n, t;
	while (cin >> k >> b >> n >> t) {
		kp[0] = 1;
		if (k == 1) rep(i, 1000010) kp[i] = 1;
		else for (int i=1; kp[i-1] <= t; ++i) kp[i] = k * kp[i-1];
		s[0] = b * kp[0];
		for (int i=1; s[i-1]<=t; ++i) s[i] = b*kp[i] + s[i-1];

		for (int i=0; ; ++i) {
			if (kp[i+1] + s[i] > t) {
				cout << max(0LL, n-i) << endl;
				break;
			}
		}
	}

	return 0;
}
