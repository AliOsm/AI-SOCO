#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define ndl '\n'
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<int, ll> pil;
typedef pair<ll, int> pli;
typedef pair<int, ull> piu;
typedef vector<vector<int>> matrix;

const ll INF = 1e18 + 123;
const ld EPS = 1e-9;
const int inf = 1e9 + 123;
const int MOD = 1e9 + 7;
const int N = 2e5 + 123;
const int M = 1e6 + 123;
const double pi = acos(-1.0);
const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

int d[3][N], E;
vector<int> g[N];
ll p[N];

void init(int n){
    for (int i = 1; i <= n; i++){
        g[i].clear();
        d[0][i] = d[1][i] = d[2][i] = inf;
    }
    E = 0;
}

void bfs(int v){
    d[E][v] = 0;
    queue<int> q;
    q.push(v);
    while (!q.empty()){
        v = q.front();
        q.pop();
        for (int to : g[v]){
            if (d[E][to] > d[E][v]+1){
                d[E][to] = d[E][v]+1;
                q.push(to);
            }
        }
    }
    E++;
}

void solve(){
    int n, m, a, b, c;
    cin >> n >> m >> a >> b >> c;
    init(n);
    for (int i = 1; i <= m; i++){
        cin >> p[i];
    }
    sort(p+1, p+1+m);
    for (int u, v, i = 1; i <= m; i++){
        cin >> u >> v;
        g[u].pb(v);
        g[v].pb(u);
        p[i] += p[i-1];
    }
    bfs(a);
    bfs(b);
    bfs(c);
    ll ans = INF;
    if (d[0][b]+d[2][b] <= m){
        ans = p[d[0][b]+d[2][b]];
    }
    for (int i = 1; i <= n; i++){
        if (d[0][i]+d[1][i]+d[2][i] <= m) ans = min(ans, p[d[0][i]+d[1][i]+d[2][i]] + p[d[1][i]]);
    }

   // cout << l << " " << x << endl;
    cout << ans << ndl;
}

int main(){
    #ifdef KAZAKH
        freopen("input.txt", "r", stdin);
    #endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1;
    cin >> t;
    for (int i = 1; i <= t; i++){
        //cout << "case #" << i << ": ";
        solve();
    }
    return 0;
}
