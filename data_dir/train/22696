#include<bits/stdc++.h>
using namespace std;

int N, M, K;
long long A[100005][6], ans[6], preMax[100005][6], suffMax[100005][6];

void build(int len)
{
    if(len<=0)
        return;

    for(int i=1; i<=N; i++)
    {
        for(int j=1; j<=M; j++)
        {
            if((i-1)%len==0)
                preMax[i][j] = A[i][j];
            else
                preMax[i][j] = max(preMax[i-1][j], A[i][j]);
        }
    }

    for(int i=N; i>=1; i--)
    {
        for(int j=1; j<=M; j++)
        {
            if(i==N || (i-1)%len==len-1)
                suffMax[i][j] = A[i][j];
            else
                suffMax[i][j] = max(suffMax[i+1][j], A[i][j]);
        }
    }
}

long long getMax(int L, int R, int indx)
{
    if(L>R)
        return 0;

    return max(preMax[R][indx], suffMax[L][indx]);
}

int func(int len)
{
    int indx = -1;
    long long shot = (long long)1e16;

    build(len);

    for(int i=len; i<=N; i++)
    {
        long long sum = 0;

        for(int j=1; j<=M; j++)
            sum += getMax(i-len+1, i, j);

        if(sum<shot)
        {
            shot = sum;
            indx = i;
        }
    }

    if(shot>K)
        return 0;

    for(int i=1; i<=M; i++)
        ans[i] = getMax(indx-len+1, indx, i);

    return 1;
}

void solve(int left, int right)
{
    int mid = (left+right)/2;

    if(!func(mid))
        return solve(left, mid-1);

    if((mid+right)/2==mid)
    {
        if(func(right))
            return;

        func(mid);
        return;
    }

    return solve(mid, right);
}

int main()
{
    cin >> N >> M >> K;

    for(int i=1; i<=N; i++)
        for(int j=1; j<=M; j++)
            cin >> A[i][j];

    solve(0, N);

    for(int i=1; i<=M; i++)
        cout << ans[i] << " ";

    return 0;
}
