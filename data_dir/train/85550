#include <algorithm>
#include <iostream>
#include <iterator>
#include <iomanip>
#include <vector>
#include <cmath>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define rfile freopen("gotham.in", "r", stdin)
#define wfile freopen("gotham.out", "w", stdout)
#define files rfile; wfile

typedef long long ll;
typedef long double ld;
typedef vector< int > vi;
typedef vector< char > vc;
typedef vector< vi > vvi;
typedef map< ll, ll > mapT;
typedef pair< int, int > pairT;

int n, m, u, v, cycle_beg = -1, cycle_end = -1;
vi p, cl;
vvi g;

bool dfs(int v)
{
	cl[v] = 1;
	for (int i = 0; i < (int)g[v].size(); i++)
	{
		int to = g[v][i];
		if (cl[to] == 0)
		{
			p[to] = v;
			if (dfs(to))
				return true;
		}
		else
			if (cl[to] == 1)
			{
				p[to] = v;
				cycle_end = v;
				cycle_beg = to;
				return true;
			}
	}
	cl[v] = 2;
	return false;
}

bool mod_dfs(int v, int a, int b)
{
	cl[v] = 1;
	for (int i = 0; i < (int)g[v].size(); i++)
	{
		int to = g[v][i];
		if (v != a || to != b)
		{
			if (cl[to] == 0)
			{
				if (mod_dfs(to, a, b))
					return true;
			}
			else
				if (cl[to] == 1)
					return true;
		}
	}
	cl[v] = 2;
	return false;
}

int main()
{
	bool ok = true;
	scanf("%d %d", &n, &m);
	p.resize(n);
	g.resize(n);
	cl.resize(n);
	for (int i = 0; i < m; i++)
	{
		scanf("%d %d", &u, &v);
		u--; v--;
		g[u].push_back(v);
	}
	fill(cl.begin(), cl.end(), 0);
	for (int i = 0; i < n; i++)
	{
		if (cl[i] == 0)
			if (dfs(i))
			{
				ok = false;
				break;
			}
	}
	if (ok)
		printf("YES");
	else
	{
		for (int i = cycle_end; ; i = p[i])
		{
			ok = true;
			fill(cl.begin(), cl.end(), 0);
			for (int j = 0; j < n; j++)
			{
				if (cl[j] == 0)
				{
					if (mod_dfs(j, p[i], i))
					{
						ok = false;
						break;
					}
				}
			}
			if (ok)
			{
				printf("YES");
				return 0;
			}
			if (i == cycle_beg)
				break;
		}
		printf("NO");
	}
	return 0;
}