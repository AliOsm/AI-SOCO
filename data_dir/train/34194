#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define MAXV 100010

int parent[MAXV],rank[MAXV];

void init(int n){
    int i;
    REP(i,n) {parent[i] = i; rank[i] = 1;}
}

int root(int x){
    if(parent[x] != x) parent[x] = root(parent[x]);
    return parent[x];
}

void connect(int x, int y){
    int rx=root(x),ry=root(y);
    if(rx == ry) return;
    if(rank[rx] > rank[ry]) {parent[ry] = rx; rank[rx] += rank[ry];}
    if(rank[rx] <= rank[ry]) {parent[rx] = ry; rank[ry] += rank[rx];}
}

int deg[100010];
map <int, int> mp;

int main(void){
    int V,E,i,a,b;
    
    cin >> V >> E;
    init(V);
    
    REP(i,E){
        int a,b;
        scanf("%d%d", &a, &b);
        a--; b--;
        connect(a, b);
        deg[a]++; deg[b]++;
    }
    
    REP(i,V) mp[deg[i]]++;
    
    bool connected = true;
    REP(i,V) if(root(i) != root(0)) connected = false;
    
    if(connected){
        if(mp[1] == 2 && mp[2] == V-2){
            cout << "bus topology" << endl;
            return 0;
        }
        
        if(mp[2] == V){
            cout << "ring topology" << endl;
            return 0;
        }
        
        if(E == V-1 && mp[V-1] == 1){
            cout << "star topology" << endl;
            return 0;
        }
    }
    
    cout << "unknown topology" << endl;
    
    return 0;
}
