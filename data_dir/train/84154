#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define eb emplace_back
#define mt make_tuple

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int N = 200010;
int ans[N];
int deg[N];
bool trip[N];
set<int> g[N];
int cnt, k;

void remove(int u)
{
	if (!trip[u])
		return;
	
	queue<int> q;
	q.push(u);
	trip[u] = false;

	while (!q.empty())
	{
		u = q.front();
		q.pop();
		cnt--;

		for (int v : g[u])
		{
			deg[v]--;
			g[v].erase(u);

			if (trip[v] and deg[v] < k)
			{
				trip[v] = false;
				q.push(v);
			}
		}
		g[u].clear();
	}
}

int main()
{
	int n, m;
	scanf("%d %d %d", &n, &m, &k);
	vector<ii> e;
	cnt = n;
	for (int i = 0; i < m; i++)
	{
		int x, y;
		scanf("%d %d", &x, &y);
		deg[x]++;
		deg[y]++;
		e.eb(x, y);
		g[x].insert(y);
		g[y].insert(x);
	}

	for (int i = 1; i <= n; i++)
		trip[i] = true;
	
	for (int i = 1; i <= n; i++)
	{
		if (trip[i] and deg[i] < k)
			remove(i);
	}

	ans[m-1] = cnt;
	for (int i = m-2; i >= 0; i--)
	{
		int a = e[i+1].fi, b = e[i+1].se;
		if (!trip[a] or !trip[b])
		{
			ans[i] = cnt;
			continue;
		}
		deg[a]--;
		deg[b]--;
		
		g[a].erase(b);
		g[b].erase(a);

		if (deg[a] < k)
			remove(a);

		if (deg[b] < k)
			remove(b);
		ans[i] = cnt;
	}
	for (int i = 0; i < m; i++)
		printf("%d\n", ans[i]);
	return 0;
}


