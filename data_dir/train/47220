#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007
#define IN freopen("nocross.in","r",stdin)
#define OUT freopen("nocross.out","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 2000000000000000000LL
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define LOG 19
#define off 2

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less< i64 >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define maxn 100005

int mxBit = 60 ;
int dp[65][2] ;
pair<int,int> Next[65][2] ;

int possible(int idx , int carry,i64 x , i64 s)
{
    if(idx==mxBit)
    {
        if(carry == 0) return 1 ;
        else return 0 ;
    }
    if(dp[idx][carry]!=-1) return dp[idx][carry] ;
    for(int i=0 ; i<2 ; i++)
    {
        for(int j=0 ; j<2 ; j++)
        {
            int xb = ((x>>idx)&1) , sb = ((s>>idx)&1)  ;
            if( (i^j) != xb ) continue ;
            if( (i^j^carry) == sb && possible(idx+1, (i+j+carry)/2  , x , s ) )
            {
                dp[idx][carry] = 1 ;
                Next[idx][carry] = mp(i,j) ;
                return dp[idx][carry] ;
            }
        }
    }
    dp[idx][carry] = 0 ;
    return dp[idx][carry] ;
}

int main()
{
    i64 x , s ;

    scanf("%lld %lld",&x,&s) ;

    if(x==0&&s==0)
    {
        printf("0\n") ;
        return 0 ;
    }

    if( s<x || (s-x)%2 != 0 )
    {
        printf("-1\n") ;
        return 0 ;
    }

    memset(dp,-1,sizeof(dp)) ;

    if(s==x)
    {
        printf("1\n%lld\n",s) ;
        return 0 ;
    }

    int res = possible(0,0,x,s) ;

    if(!res)
    {
        printf("3\n%lld %lld %lld\n",x,(s-x)/2,(s-x)/2) ;
        return 0 ;
    }
    else{
   //     DBG ;
        i64 a =0, b =0;
        int idx = 0 , c = 0 ;
        for(int i=0 ; i<mxBit ; i++)
        {
            int x = Next[i][c].xx , y = Next[i][c].yy ;
            a += ((1LL<<i))*x ; b += ((1LL<<i))*y ;
            c = (x+y+c)/2 ;
        }

        printf("2\n%lld %lld\n",a,b) ;
    }

    return 0 ;
}
