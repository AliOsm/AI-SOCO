#include <bits/stdc++.h>
#define LL long long
#define pb push_back
using namespace std;

double a, b, c;
double p1x, p1y, p2x, p2y;

double findX(double py) {
	// ax + by + c = 0
	double x = (b * py + c) / a;
	return -x;
}

double findY(double px) {
	// ax + by + c = 0
	double y = (a * px + c) / b;
	return -y;
}

typedef pair<pair<double, double>, double> pdd;

vector<pdd> solve(double px, double py) {
	double temp = findY(px);
	pdd p1 = {{px, temp}, abs(py-temp)};
	temp = findX(py);
	pdd p2 = {{temp, py}, abs(px-temp)};
	return {p1, p2};
}

double manhattan(double p1x, double p1y, double p2x, double p2y) {
	return abs(p1x-p2x) + abs(p1y-p2y);
}

double euclidean(double p1x, double p1y, double p2x, double p2y) {
	double d1 = p1x - p2x;
	d1 *= d1;
	double d2 = p1y - p2y;
	d2 *= d2;
	return sqrt(d1 + d2);
}

int main() {
	cin>>a>>b>>c;
	cin>>p1x>>p1y>>p2x>>p2y;
	vector<pdd> p1 = solve(p1x, p1y);
	vector<pdd> p2 = solve(p2x, p2y);
	
	double answer = manhattan(p1x, p1y, p2x, p2y);
	for(pdd point1 : p1) {
		for(pdd point2 : p2) {
			double temp = euclidean(point1.first.first, point1.first.second, point2.first.first, point2.first.second);
			double res = temp + point1.second + point2.second;
//			cout<<"Case"<<endl;
//			cout<<point1.first.first<<" "<<point1.first.second<<" "<<point2.first.first<<" "<<point2.first.second<<endl;
//			cout<<"euclid: "<<temp<<"; result: "<<res<<endl;
			
			answer = min(answer, res);
		}
	}
	printf("%.10f\n", answer);
	return 0;
}