#define _CRT_SECURE_NO_WARNINGS
#include<bits\stdc++.h>
using namespace std;
typedef long long ll;

vector<int> G1[100100];
vector<int> G2[100100];
int open[100100];
int vis[100100];
int in[100100];
int TIMER = 1;
int sz = 0, cycle = 0;
void dfs1(int u){
	sz++;
	open[u] = 1;
	vis[u] = TIMER;
	for (int i = 0; i < G1[u].size(); i++){
		int nxt = G1[u][i];
		if (open[nxt]) cycle = 1;
		if (vis[nxt]) continue;
		dfs1(nxt);
	}
	open[u] = 0;
}

int ID = 0;
vector<int> comp[100100];
void dfs2(int u){
	vis[u] = 1;
	comp[ID].push_back(u);
	for (int i = 0; i < G2[u].size(); i++){
		int nxt = G2[u][i];
		if (vis[nxt]) continue;
		dfs2(nxt);
	}
}

int main(){
	//freopen("in.in", "r", stdin);
	//freopen("out.out", "w", stdout);
	ios::sync_with_stdio(0);
	cin.tie(0);

	int n, m; cin >> n >> m;
	for (int i = 0; i < m; i++){
		int a, b; cin >> a >> b;
		G1[a].push_back(b);
		G2[a].push_back(b);
		G2[b].push_back(a);
		in[b]++;
	}
	int ans = 0;
	for (int i = 1; i <= n; i++){
		if (vis[i]) continue;
		dfs2(i);
		ID++;
	}
	memset(vis, 0, sizeof vis);
	for (int i = 0; i < ID; i++){
		sz = 0, cycle = 0;
		for (int j = 0; j < comp[i].size(); j++){
			int u = comp[i][j];
			if (vis[u]) continue;
			dfs1(u);
		}
		ans += sz - 1 + cycle;
	}
	cout << ans << endl;

	return 0;
}