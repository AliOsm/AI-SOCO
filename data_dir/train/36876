#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
#include <bitset>
#include <complex>
#include <random>
#include <chrono>
#include <functional>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf 1000000
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pli pair<ll, int>
#define pil pair<int, ll>
#pragma GCC optimize ("O3")
//#define x first
//#define y second
const int mod = (1e9) + 7, mod2 = 998244353;
const double eps = 1e-10;
const int siz = 5e5 + 5, siz2 = 21, lg = 31, block = 317, block2 = 1000, mxv = 5e5;
int n, arr[siz], comp[siz], cur=1, bit[siz];
pii srtd[siz];
int add(ll a, ll b) {
	return (a + b) % mod;
}
int mul(ll a, ll b) {
	return (a*b) % mod;
}
int qrysum(int last) {
	int tot = 0;
	while (last > 0) {
		tot = add(tot, bit[last]);
		last -= (last & -last);
	}
	return tot;
}
void update(int node, int v) {
	while (node <= mxv) {
		bit[node] = add(bit[node], v);
		node += (node & -node);
	}
}
int main()
{
	scanf("%d", &n);
	for (int i = 1; i <= n; i++) {
		scanf("%d", &arr[i]);
		srtd[i] = mp(arr[i], i);
	}
	sort(srtd + 1, srtd + n + 1);
	int tot = 0;
	for (int i = 1; i <= n; i++) {
		comp[srtd[i].second] = cur++;
		tot = add(tot, mul(arr[i], mul(i, n-i+1)));
	}
	for (int i = 1; i <= n; i++) {
		tot = add(tot, mul(arr[i], mul(qrysum(comp[i]-1), n-i+1)));
		update(comp[i], i);
	}
	memset(bit, 0, sizeof bit);
	for (int i = n; i >= 1; i--) {
		tot = add(tot, mul(arr[i], mul(qrysum(comp[i] - 1), i)));
		update(comp[i], n-i+1);
	}
	printf("%d\n", tot);
  	return 0;
}