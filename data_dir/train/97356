/*input
10 3
6 7
2 1
9 5
1 5
10 4
8 3
6 5
10 6
3 6
10 5 1 3 7 4


*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define mp make_pair
#define fi first
#define se second
#define __builtin_popcount __builtin_popcountll
#define int long long
#define loop(i,l,r) for(int i=(l); i<=(r); i++)
#define rloop(i,l,r) for(int i=(l); i>=(r); i--)
#define bit(x,y) ((x>>y)&1LL)
const int N = 2e5 + 5;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
	return os << '(' << a.first << ", " << a.second << ')';
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
	os << '[';
	for (unsigned int i = 0; i < a.size(); i++)
		os << a[i] << (i < a.size() - 1 ? ", " : "");
	os << ']';
	return os;
}

int n, m;
bool mark[N];
vector<vector<int> > a(N);
int sumSub[N];

void dfs(int u, int p) {
	sumSub[u] = mark[u];
	for (auto v : a[u]) {
		if (v == p) continue;
		dfs(v, u);
		sumSub[u] += sumSub[v];
	}
}

int findCen(int u, int p, const int all) {
	for (auto v : a[u]) {
		if (v == p) continue;
		if (sumSub[v] > all / 2) return findCen(v, u, all);
	}
	return u;
}

void dfsGet(int u, int p, vector<int> &cur) {
	if (mark[u]) cur.push_back(u);
	for (auto v : a[u]) {
		if (v != p) dfsGet(v, u, cur);
	}
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> m;
	loop(i, 1, n - 1) {
		int u, v; cin >> u >> v;
		a[u].push_back(v);
		a[v].push_back(u);
	}
	loop(i, 1, 2 * m) {
		int t; cin >> t; mark[t] = true;
	}
	dfs(1, 1);
	int cen = findCen(1, 1, 2 * m);
	vector<vector<int> > all;
	for (auto v : a[cen]) {
		vector<int> cur;
		dfsGet(v, cen, cur);
		all.push_back(cur);
	}
	sort(all.begin(), all.end(), [&](vector<int> &u, vector<int> &v) {
		return u.size() < v.size();
	});
	vector<int> one;
	for (auto &vec : all) {
		for (auto &it : vec) one.push_back(it);
	}
	if (mark[cen]) one.push_back(cen);
	cout << 1 << endl;
	cout << cen << endl;
	loop(i, 0, m - 1) {
		cout << one[i] << sp << one[m + i] << sp << cen << endl;
	}
}