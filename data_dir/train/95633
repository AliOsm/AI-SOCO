#include <stdio.h>
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define sz(a) (int)a.size()
#define fi first
#define se second

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 1000000 + 239;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;

void print(vector<int> &a)
{
    for (int i : a)
        cout << i << " ";
    cout << endl;
}

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("lasers.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ld s, x1, x2;
    cin >> s >> x1 >> x2;
    ld t1, t2;
    cin >> t1 >> t2;
    t1 = 1 / t1;
    t2 = 1 / t2;
    ld p, d;
    cin >> p >> d;
    ld ans = abs(x1 - x2) / t2;
    if (t2 >= t1)
    {
        cout << ans << endl;
        return 0;
    }
    if (x1 > x2)
    {
        x1 = s - x1;
        x2 = s - x2;
        p = s - p;
        d = -d;
    }
    ld tr = 0;
    if (p <= x1)
    {
        if (d == 1)
            tr = (x1 - p);
        else
            tr = p + x1;
    }
    else
    {
        if (d == 1)
            tr = (s - p) + s + x1;
        else
            tr = p + x1;
    }
    ld t = tr / (t1 - t2);
    if (t * t2 <= abs(x1 - x2))
        ans = min(ans, t + (abs(x1 - x2) - t * t2) / t1);
    cout << ans;
    return 0;
}
