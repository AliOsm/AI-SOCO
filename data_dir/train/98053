#include <cstdio>

#include <map>
#include <queue>
#include <vector>
#include <algorithm>

using namespace std;

typedef vector<int> VI;
typedef pair<int,int> II;

struct X {
   int freq, num;
   X(int _f, int _n) : freq(_f), num(_n) {}
   bool operator<(const X& x) const {
      if (freq != x.freq) return freq < x.freq;
      return num > x.num;
   }
};

int N;
int R[100004];
map<int,int> freq;

VI A, B, C;

int main(int argc, char* argv[]) {
   scanf("%d", &N);
   for (int i = 0; i < N; ++i)
      scanf("%d", R+i);
   sort(R, R+N);
   for (int i = 0; i < N; ++i)
      ++freq[R[i]];

   priority_queue<X> pq;
   for (int i = 0; i < N; ++i) {
      if (i > 0 && R[i] == R[i-1]) continue;
      pq.push( X( freq[ R[i] ], R[i] ) );
   }

   int v[3];
   while (pq.size() > 2) {
      X a = pq.top(); pq.pop();
      X b = pq.top(); pq.pop();
      X c = pq.top(); pq.pop();
      if (--a.freq > 0) pq.push(a);
      if (--b.freq > 0) pq.push(b);
      if (--c.freq > 0) pq.push(c);
      v[0] = a.num, v[1] = b.num, v[2] = c.num;
      sort(v, v+3);
      A.push_back(v[0]);
      B.push_back(v[1]);
      C.push_back(v[2]);
   }

   printf("%d\n", (int) A.size());
   for (int i = 0; i < A.size(); ++i)
      printf("%d %d %d\n", C[i], B[i], A[i]);
   return 0;
}
