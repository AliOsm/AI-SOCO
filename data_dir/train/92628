#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define M 10000005

int pown[M/10];
vector<int> vec[M/10];

int getP(int x, int n)
{
    ll res = 1;
    for(int i = 1; i < n; i++)
    {
        res *= x;
        if(res > M) return 0;
    }

    return res;
}

int main()
{
    int n, l, r;
    cin>>n>>l>>r;

    if(n < 3)
    {
        ll ans;

        if(n == 1) ans = r-l+1;
        else ans = 1LL*(r-l+1)*(r-l);

        cout<<ans<<endl;
        return 0;
    }

    for(int i = 1; i < M; i++)
    {
        pown[i] = getP(i, n);
        if(pown[i] == 0) break;
    }

    for(int i = 1; pown[i]; i++)
    {
        for(int j = 1; pown[j]; j++)
        {
            if(__gcd(i, j) == 1) vec[i].push_back(pown[j]);
        }
    }

//    for(int i = 1; i <= 5; i++)
//    {
//        printf("%d:", i);
//        for(int j = 0; j < min((int)vec[i].size(), 5); j++) printf(" %d", vec[i][j]);
//        printf("\n");
//    }

    ll ans = 0;

    for(int i = 1; pown[i]; i++)
    {
        for(int j = i; j <= r; j += i)
        {
            if(j < l) continue;
            if(j%pown[i]) continue;

            int x = j/pown[i];
            int a = (l+x-1)/x;
            int b = r/x;

            if(a > b) continue;

            ans += upper_bound(vec[i].begin(), vec[i].end(), b)-lower_bound(vec[i].begin(), vec[i].end(), a);
        }
    }

    ans -= r-l+1;
    cout<<ans<<endl;

    return 0;
}
