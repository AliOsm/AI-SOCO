#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>
 
using namespace std;
using namespace __gnu_pbds;
 
#define endl '\n'
 
typedef long long ll;
typedef pair<ll, ll> pii;
typedef tree<int, null_type,less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
 
template<typename T>
static T randint(T lo, T hi){
	return uniform_int_distribution<T>(lo, hi)(rng);
}
 
vector<ll> v, sum;
ll n, a, r, m;

ll f(ll x){

	int pos = lower_bound(v.begin(), v.end(), x) - v.begin();
	pos--;

	ll le = 0;
	if(pos >= 0)
		le = x * 1ll * (pos + 1) - sum[pos];
	pos++;

	ll gr = 0;
	if(pos <= n - 1)
		gr = sum[n - 1] - (pos - 1 >= 0 ? sum[pos - 1] : 0) - x * 1ll * (n - 1 - pos + 1);

	ll ans = le * a + gr * r;
	ll mn = min(le, gr);
	le -= mn;
	gr -= mn;
	ans = min(ans, mn * m + le * a + gr * r);

	return ans;
}
 
int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
 
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
 	
	
	const ll oo = 1e18;

	cin >> n >> a >> r >> m;

	ll ans = oo;

	v.resize(n), sum.resize(n);
	for(int i = 0; i < n; i++)
		cin >> v[i];

	sort(v.begin(), v.end());

	for(int i = 0; i < n; i++){
		sum[i] = v[i];
		if(i)
			sum[i] += sum[i - 1];
	}

	ll lo = 0, hi = 2e9;

	while(hi - lo > 10){
		ll third = (hi - lo) / 3;
		ll p1 = lo + third;
		ll p2 = hi - third;

		if(f(p1) < f(p2))
			hi = p2;
		else
			lo = p1;
	}

	for(ll i = lo; i <= hi; i++)
		ans = min(ans, f(i));

	cout << ans << endl;
 
	return 0;
}