/*---> 11 November 2019 <--- > 13:21:16 <---*/
// #pragma GCC optimize("Ofast")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
// #pragma GCC optimize("unroll-loops")
// #pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("O3")
//#pragma GCC target ("sse4")
#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
using namespace std;
//template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
#define int long long
#define F first
#define S second
#define mod 1000000007
#define inf (int)1e18+5
#define sz(x) (int)x.size()
#define PI 3.141592653589793238510
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define __ ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define vi vector<int>
#define vpii vector<pair<int,int> > 
#define vvi vector<vector<int> >
#define PRINT_TIME cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s." <<endl;
#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename   enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "
typedef long double ld;
typedef pair<int,int> pii;
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
const int N=1e5+5;
void show(auto st){
	while(!st.empty())
		debug()<< imie(st.top()),st.pop();
}
int32_t main(){__
	stack<pair<char,int> > st;
	string s;
	cin>>s;
	int n=s.length();
	vi dp(n+1,-1);
	for(int i=0;i<n;i++){
		if(!st.empty() && ((st.top().F=='[' && s[i]==']') || (st.top().F=='(' && s[i]==')')))
		{
			dp[st.top().S]=i;
			st.pop();
		}
		else{
			st.push({s[i],i});
		}
	}
	// debug()<< imie(dp);
	pair<int,pii> ans={0,{-1,-1}},fin={0,{-1,-1}};
	int mx=0;
	for(int i=0;i<n;i++){
		if(dp[i]!=-1){
			if(ans==make_pair(0LL,make_pair(-1LL,-1LL))){
				ans.S.F=i;
				ans.S.S=dp[i];
				int cnt=0;
				for(int j=i;j<=dp[i];j++){
					if(s[j]=='[')
						cnt++;
				}
				ans.F=cnt;
				if(cnt>=mx){
					mx=cnt;
					fin=ans;
				}
				i=dp[i];
			}
			else{
				if(ans.S.S+1==i){
					ans.S.S=dp[i];
					int cnt=0;
					for(int j=i;j<=dp[i];j++){
						if(s[j]=='[')
							cnt++;
					}
					ans.F+=cnt;
					if(ans.F>=mx){
						mx=ans.F;
						fin=ans;
					}
					i=dp[i];
				}
				else{
					int cnt=0;
					for(int j=i;j<=dp[i];j++){
						if(s[j]=='[')
							cnt++;
					}
					ans.F=cnt;
					ans.S.F=i;
					ans.S.S=dp[i];
					if(ans.F>=mx){
						mx=ans.F;
						fin=ans;
					}
					// debug()<< imie(fin) imie(ans);
					i=dp[i];
				}
			}
		}
	}
	if(ans.F>=mx){
		mx=ans.F;
		fin=ans;
	}
	if(fin.F==0){
		cout<<0<<"\n";
	}
	else{
		int cnt=0;
		string ans1;
		for(int i=fin.S.F;i<=fin.S.S;i++){
			ans1+=s[i];
			if(s[i]=='[')
				cnt++;
		}
		cout<<fin.F<<"\n";
		cout<<ans1<<"\n";
	}
return 0;
}