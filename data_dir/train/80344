// Charan Sriramula

#include<bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long int ll;

const ll lg=22;
const ll N=5e3+5;
const ll INF=1e18+5;
const ll mod=1e9+7;
const double PI = 3.14159265358979323846;

#define is(n) scanf("%d",&n)
#define io(n) printf("%d\n",n)
#define ls(n) scanf("%lld",&n)
#define lo(n) printf("%lld\n",n)

#define f first
#define s second
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define GCD(a,b) __gcd((a),(b))
#define all(v) v.begin(),v.end()
#define bits(x) __builtin_popcount(x)
#define LCM(a,b) ((a)*(b))/GCD((a),(b))
#define ms(dp,val) memset(dp,val,sizeof(dp))
#define fast ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
template<typename T> T power(T x,T y){T ans=1;while(y>0){if(y&1LL) ans=(ans*x)%mod;y>>=1LL;x=(x*x)%mod;}return ans%mod;}

inline ll mul(ll a, ll b){ return (a * 1ll * b) % mod; }
inline ll sub(ll a, ll b){ ll c = a - b; if(c < 0) c += mod; return c; }
inline ll add(ll a, ll b){ ll c = a + b; if(c > mod) c -= mod; return c; }
inline ll inv(ll a){ return power(a, mod - 2); }

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

ll n,a[N],dp[N][4];

ll F(ll idx,ll part)
{
  ll res=-INF,sum=0;
  if(part>4){return -INF;}
  if(idx==n){return 0;}
  if(dp[idx][part]!=-1){return dp[idx][part];}
  res=max(res,F(idx,part+1));
  for(ll j=idx+1;j<=n;j++)
  {
    if(part&1){sum-=a[j-1];res=max(res,sum+F(j,part+1));}
    else{sum+=a[j-1];res=max(res,sum+F(j,part+1));}
  }
  return dp[idx][part]=res;
}

int main()
{
  fast;
  cin>>n;
  ms(dp,-1);
  for(ll i=0;i<n;i++){cin>>a[i];}
  ll ans=F(0,0);
  //trace(ans);
  vector<ll> pos;
  ll lasidx=0,laspart=0,lassum=0;
  for(ll i=0;i<3;i++)
  {
    ll cursum=0;
    for(ll j=lasidx;j<=n;j++)
    {
      if(j==lasidx)
      {
        // dont add anything
      }
      else
      {
        if(laspart&1){cursum-=a[j-1];}
        else{cursum+=a[j-1];}
      }
      ll tempsum=lassum+cursum+F(j,laspart+1);
      if(tempsum==ans)
      {
        lasidx=j;
        lassum+=cursum;
        laspart++;
        pos.pb(j);
        break;
      }
    }
  }
  for(auto i:pos){cout<<i<<" ";}
}
