/*
ID: Tariqul
PROG:
LANG: C++
*/

#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define fo(i,j,n) for(i=j;i<n;++i)
#define Fo(i,j,n) for(i=n-1;i>=j;--i)
#define foo(i,j,v) fo(i,j,sz(v))
#define Foo(i,j,v) Fo(i,j,sz(v))
#define li(v) v.begin(),v.end()
#define sz(v) ((int)v.size())
#define CLR(a,v) memset((a),(v),sizeof(a))
#define inf 1e9
#ifdef localhost
typedef long long Long;
#else
typedef __int64 Long;
#endif // localhost
#define pi (2*acos(0))
#define eps 1e-9

#define two(X) (1<<(X))
#define twoL(X) (((Long)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)

char BUFFER[100000 + 5];
bool readn(int &n)	{ return scanf("%d",&n) == 1; }
#ifdef localhost
bool readl(Long &n)	{ return scanf("%lld",&n) == 1; }
#else
bool readl(Long &n)	{ return scanf("%I64d",&n) == 1; }
#endif // localhost
bool readd(double &n){ return scanf("%lf",&n) == 1; }
bool reads(string &s){ s = ""; int n = scanf("%s",BUFFER); if(n == 1)s = BUFFER; return n == 1; }
bool readln(string &s){ char *valid = gets(BUFFER); if(valid)s = BUFFER; return ((bool)valid); }

const int maxn = 1e5 + 10;
vector<int> adj[maxn],path;
bool vis[maxn],parity[maxn];

void input(int &n)
{
	int i,m,a,b; cin >> n >> m;
	path.clear(); fo(i,0,maxn)adj[i].clear(); CLR(vis,false);
	fo(i,0,m)
	{
		readn(a); readn(b); a--; b--;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	fo(i,0,n)
	{
		readn(m); parity[i] = (m == 1);
	}
}

void add_to_path(int node)
{
	vis[node] = true;
	parity[node] = !parity[node];
	path.push_back(node);
}

void dfs(int u, int p = -1)
{
	add_to_path(u);
	int i,v;
	foo(i,0,adj[u])
	{
		v = adj[u][i];
		if(vis[v])continue;
		dfs(v,u);
	}
	if(-1 != p)
	{
		if(parity[u])
		{
			add_to_path(p);
			add_to_path(u);
		}
		add_to_path(p);
	}
}

int checkPath(int n)
{
	int i,root;
	fo(i,0,n)if(parity[i])break;
	if(i == n)return 0;
	root = i; dfs(root,-1);
	if(parity[root]){ path.pop_back(); parity[root] = false; }
	fo(i,0,n)if(parity[i])return -1;
	return 1;
}

int main()
{
	#ifdef localhost
	freopen("/home/tariqul/APC/Contest/input.txt","r",stdin);
	//freopen("/home/tariqul/APC/Contest/output.txt","w",stdout);
	#endif

	int i,n,m;
	input(n);
	m = checkPath(n);
	if(m < 1)
	{
		cout << m << endl;
		return 0;
	}
	cout << sz(path) << endl;
	foo(i,0,path)
	{
		if(i > 0)printf(" ");
		printf("%d",path[i]+1);
	}
	cout << endl;
	return 0;
}
