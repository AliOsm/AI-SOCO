#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_popcount

#ifndef D
    #define dbg(x) 0
    #define dbgs(x) 0
#else
    #define dbg(x) cerr << (#x) << " --> " << (x) << endl
    #define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 200 + 5;

int n, go[N];
bool h[N], on_cycle[N];
vector < int > t[N], maybe;

void dfs(int x) {

	while(!h[x]) {
		h[x] = 1;
		x = go[x];
	}

	maybe.pb(x);

}

int dfs2(int x) {

	int mx = 0;

	foreach(it, t[x])
		if(!on_cycle[*it])
			mx = max(mx, dfs2(*it));

	return mx + 1;

}

ll gcd(ll x, ll y) {

	return !y ? x : gcd(y, x % y);

}

int main () {
    
    ios :: sync_with_stdio(0);
 
	cin >> n;

	FOR(i, 1, n) {
		cin >> go[i];
		t[go[i]].pb(i);
	}

	FOR(i, 1, n) {
		memset(h, 0, sizeof(h));
		dfs(i);
	}

	int mxdep = 1;

	ll lcm = 1;

	foreach(it, maybe) {
		if(on_cycle[*it]) continue;
		int x = *it, size = 0;
		while(!on_cycle[x]) {
			on_cycle[x] = 1;
			x = go[x];
			size++;
		}
		int st = x;
		mxdep = max(mxdep, dfs2(x) - 1);
		x = go[x];
		while(x != st) {
			mxdep = max(mxdep, dfs2(x) - 1);
			x = go[x];
		}
		lcm = lcm / gcd(lcm, size) * size;
	}

	cout << ((mxdep - 1) / lcm + 1) * lcm << endl;

    return 0;
    
}
