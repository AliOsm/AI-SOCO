#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ii pair<int,int>
#define li pair<ll,int>
#define iii pair<ii,int>
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pp pop_back
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 1000000000
#define inf 2000000000
#define N 200005
#define LOG 24
using namespace std;

heap< iii, vector<iii>, greater<iii> >  q;
int n,x,y,num,moment,ans=-1,tut[N],S[8*N];

int get(int node,int bas,int son,int x,int y) {

	if(bas>=x && son<=y) return S[node];
	if(bas>y || son<x) return 0;
	return get(node*2,bas,orta,x,y)+get(node*2+1,orta+1,son,x,y);

}

void up(int node,int bas,int son,int x,int y,int val) {

	if(bas>y || son<x) return ;
	if(bas>=x && son<=y) {
		S[node]+=val;
		return ;
	}
	up(node*2,bas,orta,x,y,val);
	up(node*2+1,orta+1,son,x,y,val);
	S[node]=S[node*2]+S[node*2+1];

}

int main() {

	scanf("%d",&n);
	for(int i=1;i<=n;i++) {
		scanf("%d %d",&x,&y);
		q.push(mp(mp(x,0),i));
		q.push(mp(mp(y+1,1),i));
	}
	int bef=-1;
	while(!q.empty()) {
		iii x=q.top();
		q.pop();
		if(x.st.st!=bef) {
			if(num==1) {
				up(1,1,2*n,moment,moment,1);
			}
			moment++;
			bef=x.st.st;
		}
		if(x.st.nd==0){
			tut[x.nd]=moment;
			num++;	
		}
		else {
			num--;
			int gt=get(1,1,2*n,tut[x.nd],moment-1);
			if(!gt) {
				ans=x.nd;
				break;
			}
		}

	}
	printf("%d",ans);

}