//In the name of good
#include <bits/stdc++.h>
using namespace std ;
#define X first 
#define Y second 
#define int long long 
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
typedef pair < int , int > pii ;
const int maxn = 1e5 + 1 ;
const int maxL = 20 ;
const int inf = 1e16 + 1 ;

int data[4*maxn], flag[4*maxn], n, q , qu1 [ maxn ] , qu2 [ maxn ] , qu3 [ maxn ] ;
int data1[4*maxn], flag1[4*maxn] ;
 
int left(int i){
  return 2*i+1;
}
 
int right(int i){
  return 2*i+2;
}
 
void relax_flag(int node, int st, int en){
  data[node] += flag[node]*(en-st);
  if(en != st+1){
    flag[left(node)] += flag[node];
    flag[right(node)] += flag[node];
  }
  flag[node] = 0;
}
 
int get(int node, int st, int en, int l, int r){
  relax_flag(node, st, en);
  if(st==l && en==r){
    return data[node];
  }
 
  int mid = (st+en)/2;
  if(r<=mid) return get(left(node), st, mid, l, r);
  if(l>=mid) return get(right(node), mid, en, l, r);
  return get(left(node), st, mid, l, mid)+
    get(right(node), mid, en, mid, r);
}
 
 
void add(int node, int st, int en, int l, int r, int x){
  relax_flag(node, st, en);
  if(st == l && en == r){
    flag[node] += x;
    return ;
  }
     
  int mid = (st+en)/2;
  if(r<=mid) add(left(node), st, mid, l, r ,x);
  else if(l>=mid) add(right(node), mid, en, l, r, x);
  else{
    add(left(node), st, mid, l, mid, x);
    add(right(node), mid, en, mid, r, x);
  }
  data[node] = get(left(node), st, mid, st, mid)+
    get(right(node), mid, en , mid, en);
}

void relax_flag1 (int node, int st, int en){
  data1[node] += flag1[node]*(en-st);
  if(en != st+1){
    flag1[left(node)] += flag1[node];
    flag1[right(node)] += flag1[node];
  }
  flag1[node] = 0;
}
 
int get1(int node, int st, int en, int l, int r){
  relax_flag1(node, st, en);
  if(st==l && en==r){
    return data1[node];
  }
 
  int mid = (st+en)/2;
  if(r<=mid) return get1(left(node), st, mid, l, r);
  if(l>=mid) return get1(right(node), mid, en, l, r);
  return get1(left(node), st, mid, l, mid)+
    get1(right(node), mid, en, mid, r);
}
 
 
void add1(int node, int st, int en, int l, int r, int x){
  relax_flag1(node, st, en);
  if(st == l && en == r){
    flag1[node] += x;
    return ;
  }
     
  int mid = (st+en)/2;
  if(r<=mid) add1(left(node), st, mid, l, r ,x);
  else if(l>=mid) add1(right(node), mid, en, l, r, x);
  else{
    add1(left(node), st, mid, l, mid, x);
    add1(right(node), mid, en, mid, r, x);
  }
  data1[node] = get1(left(node), st, mid, st, mid)+
    get1(right(node), mid, en , mid, en);
}
 

int32_t main()
{
  fast ;
  int n , m , k ;
  cin >> n >> m >> k ; 
  for ( int i = 0 ; i < n ; i ++ ) 
    { 
      int a ;
      cin >> a ;
      add ( 0 , 0 , n , i , i + 1 , a ) ;
    } 
  for ( int i = 0 ; i < m ; i ++ )
    {
      cin >> qu1 [ i ] >> qu2 [ i ] >> qu3 [ i ] ; 
      qu1 [ i ] -- ;
    }
  for ( int i = 0 ; i < k ; i ++ ) 
    {
      int a , b ;
      cin >> a >> b ;
      a -- ;
      add1 ( 0 , 0 , m , a , b , 1 ) ;
    } 
  for ( int i = 0 ; i < m ; i ++ )
    { 
      int hlp = get1 ( 0 , 0 , m , i , i + 1 ) ;
      qu3 [ i ] *= hlp ; 
      add ( 0 , 0 , n , qu1 [ i ] , qu2 [ i ] , qu3 [ i ] ) ;
    } 
  for ( int i = 0 ; i < n ; i ++ )
    cout << get ( 0 , 0 , n , i , i + 1 ) << ' ' ;
}
