#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>
#define fr first
#define se second

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 + 9;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

ll n,a,b,k;
char s[N+5];

ll solvegp(ll num,ll aa,ll r)
{
  if(num == 1)return aa%mod;
  ll ret = solvegp(num/2,aa,r);
  ll vv = fp(r,num/2,mod);
  ll ret2 = ret + (vv * ret)%mod;
  ret2%= mod;
  if(num & 1)ret2+= (aa * fp(r,num - 1,mod))%mod;
  return ret2%mod; 
}
int main()
{
  finp;
  cin>>n>>a>>b>>k;
  n++;
  ll m = n/k;
  cin>>s;

  ll curr = 1;
  ll mul = fp(b,k,mod);
  mul*= fp(a,(mod - 1 - k),mod);
  mul%= mod;
  ll S = solvegp(m,1,mul);

  



  ll ans = 0;

  afor(i,0,k-1)
  {
    ll curr;
    if(s[i] == '+')curr = 1;
    else curr = mod - 1;

    curr*= fp(a,n - 1 -i,mod);
    curr%= mod;

    curr*=  fp(b,i,mod);
    curr%= mod;

    curr*= S;
    curr%= mod;

    ans+= curr;
    ans%= mod;
  }

  cout<<ans;

  
return 0;
}