#include <iostream>
#include <vector>
using namespace std;
#define MOD 1000000007

int N,M;

vector<int> edges[100000];
int nxt[200000],tp[200000];
int hang[100000];

vector<int> occ[100000];
vector<int> occType[100000];

vector<int> lst;
vector<int> lstEdges;
bool vis[100000];

void dfs(int i,int e)
{
	//cout << "DFS " << i << ' ' << e << '\n';
	lst.push_back(i);
	vis[i] = 1;
	for(int j=0;j<edges[i].size();j++)
	{
		if(!vis[nxt[edges[i][j]]])
		{
			//cout << "Add edge to " << nxt[edges[i][j]] << '\n';
			lstEdges.push_back(tp[edges[i][j]]);
			dfs(nxt[edges[i][j]],edges[i][j]);
		}
		else if(edges[i][j] != (e^1))
		{
			//cout << "Add edge to " << nxt[edges[i][j]] << '\n';
			lstEdges.push_back(tp[edges[i][j]]);
		}
//		else cout << "Bad edge " << edges[i][j] << " to " << nxt[edges[i][j]] << '\n';
	}
}

vector<pair<int,int> > ansStack;

int ways[100000][2][2][2];

int main()
{
	cin.tie(0);
	ios::sync_with_stdio(0);
	cin >> N >> M;
	int k,a;
	for(int i=0;i<N;i++)
	{
		cin >> k;
		for(int j=0;j<k;j++)
		{
			cin >> a;
			if(a>0)
			{
				occ[a-1].push_back(i);
				occType[a-1].push_back(0);
			}
			else
			{
				occ[-a-1].push_back(i);
				occType[-a-1].push_back(1);
			}
		}
	}
	int mult = 1;
	for(int i=0;i<M;i++)
	{
		if(occ[i].size()==0) mult = (2*mult)%MOD;
		else if(occ[i].size()==1) hang[occ[i][0]]++;
		else
		{
			edges[occ[i][0]].push_back(2*i);
			nxt[2*i] = occ[i][1];
			tp[2*i] = (occType[i][0]^occType[i][1]);
			edges[occ[i][1]].push_back(2*i+1);
			nxt[2*i+1] = occ[i][0];
			tp[2*i+1] = tp[2*i];
		}
	}
	for(int i=0;i<N;i++) if(edges[i].size()==0)
	{
		vis[i] = 1;
		if(hang[i]==0) ansStack.push_back(make_pair(1,0));
		else if(hang[i]==1) ansStack.push_back(make_pair(1,1));
		else ansStack.push_back(make_pair(1,3));
	}

	for(int i=0;i<N;i++) if(edges[i].size()==2 && nxt[edges[i][0]]==i)
	{
		vis[i] = 1;
		if(tp[edges[i][0]]==0) ansStack.push_back(make_pair(1,1));
		else ansStack.push_back(make_pair(0,2));
	}

	for(int i=0;i<N;i++) if(edges[i].size()==1 && !vis[i])
	{
		lst.clear();
		lstEdges.clear();
		dfs(i,-1);
		int ans[2];
		int ind = lst.size()-1;
		for(int l=0;l<2;l++)
			for(int r=0;r<2;r++)
				ways[0][l][r][0] = (!l && !r), ways[0][l][r][1] = (l || r);
		for(int i=1;i<=ind;i++)
			for(int l=0;l<2;l++)
				for(int r=0;r<2;r++)
					for(int p=0;p<2;p++)
					{
						ways[i][l][r][p] = 0;
						for(int cur=0;cur<2;cur++)
							ways[i][l][r][p] = (ways[i][l][r][p] + ways[i-1][l][cur^lstEdges[i-1]][p^(cur||r)])%MOD;
					}
		ans[0] = ways[ind][0][0][0], ans[1] = ways[ind][0][0][1];
		if(hang[lst[0]]) ans[0] = (ans[0] + ways[ind][1][0][0])%MOD, ans[1] = (ans[1] + ways[ind][1][0][1])%MOD;
		if(hang[lst[ind]]) ans[0] = (ans[0] + ways[ind][0][1][0])%MOD, ans[1] = (ans[1] + ways[ind][0][1][1])%MOD;
		if(hang[lst[0]] && hang[lst[ind]]) ans[0] = (ans[0] + ways[ind][1][1][0])%MOD, ans[1] = (ans[1] + ways[ind][1][1][1])%MOD;
		ansStack.push_back(make_pair(ans[0],ans[1]));
	}
	
	for(int i=0;i<N;i++) if(!vis[i])
	{
		//cout << "Start " << nxt[edges[i][0]] << ' ' << nxt[edges[i][1]] << '\n';
		lst.clear();
		lstEdges.clear();
		dfs(i,-1);
		int ans[2];
		int ind = lst.size()-1;
		for(int l=0;l<2;l++)
			for(int r=0;r<2;r++)
				ways[0][l][r][0] = (!l && !r), ways[0][l][r][1] = (l || r);
		for(int i=1;i<=ind;i++)
			for(int l=0;l<2;l++)
				for(int r=0;r<2;r++)
					for(int p=0;p<2;p++)
					{
						ways[i][l][r][p] = 0;
						for(int cur=0;cur<2;cur++)
							ways[i][l][r][p] = (ways[i][l][r][p] + ways[i-1][l][cur^lstEdges[i-1]][p^(cur||r)])%MOD;
					}
		//cout << lstEdges.size() << ' ' << ind << '\n';
		ans[0] = ans[1] = 0;
		for(int cur=0;cur<2;cur++)
			for(int p=0;p<2;p++)
				ans[p] = (ans[p] + ways[ind][cur][cur^lstEdges[ind]][p])%MOD;
		ansStack.push_back(make_pair(ans[0],ans[1]));
	}
	int ans[2];
	long long tmp[2];
	ans[0] = 1, ans[1] = 0;
	for(int i=0;i<ansStack.size();i++)
	{
		tmp[0] = (ans[0]*((long long)(ansStack[i].first)) + ans[1]*((long long)ansStack[i].second))%MOD;
		tmp[1] = (ans[1]*((long long)(ansStack[i].first)) + ans[0]*((long long)ansStack[i].second))%MOD;
		ans[0] = tmp[0], ans[1] = tmp[1];
	}
	cout << (mult*((long long)ans[1]))%MOD << '\n';
}