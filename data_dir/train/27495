#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template<class T> using OS = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define ll long long
#define ld double
#define ull unsigned long long

ll q, x, y, k, p;

vector<ll> getFactors(int n) {
    vector<ll> re;
    for (int i = 2; i * i <= n; i++)
        if (n % i == 0) {
            re.push_back(i);
            while (n % i == 0) n /= i;
        }
    if (n != 1) re.push_back(n);
    return re;
}

ll get(ll mid, ll x, vector<pair<ll, int>> &num) {
    ll re = mid - x;
    for (auto j : num) {
        ll f = mid / j.first;
        ll s = x / j.first;
        re += (f - s) * j.second;
    }
    return re;
}

int main() {
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);

    cin >> q;
    while (q--) {
        cin >> x >> p >> k;

        vector<ll> f = getFactors(p);
        vector<pair<ll, int>> num;
        for (int i = 1; i < (1 << f.size()); i++) {
            ll g = 1;
            for (int j = 0; j < f.size(); j++)
                if ((1 << j) & i) {
                    g *= f[j];
                }
            num.push_back({g, __builtin_popcount(i) % 2 == 0 ? 1 : -1});
        }

        ll l = x + 1, r = 1e12, mid;
        while (l <= r) {
            mid = (l + r) >> 1;
            if (get(mid, x, num) >= k) {
                r = mid - 1;
                y = mid;
            } else {
                l = mid + 1;
            }
        }

        cout << y << '\n';
    }

    return 0;
}