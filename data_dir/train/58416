#include<bits/stdc++.h> 
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define MOD 1000000007
#define MOD2 1000000009
#define INF 2000000000
#define DESPACITO 1000000000000000000
#define PI acos(-1);
#define E 998244353
#define pb push_back
#define mp make_pair
#define ll long long

using namespace std;
//using namespace __gnu_pbds;

//typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> pbds;

int tree1[400005],tree2[400005],lazy1[400005],lazy2[400005];
int n;

void Create(int node,int start,int end)
{
	if(start==end)
	{
		tree1[node]=INF;
		tree2[node]=INF;
		lazy1[node]=INF;
		lazy2[node]=INF;
	}
	else
	{
		int mid=(start+end)/2;
		Create(2*node,start,mid);
		Create(2*node+1,mid+1,end);
		tree1[node]=min(tree1[2*node],tree1[2*node+1]);
		tree2[node]=min(tree2[2*node],tree2[2*node+1]);
		lazy1[node]=INF;
		lazy2[node]=INF;
	}
}

void updateRange1(int node,int start,int end,int l,int r,int val)
{
	if(lazy1[node]!=INF)
	{
		tree1[node]=min(tree1[node],lazy1[node]);
		if(start!=end)
		{
			lazy1[2*node]=min(lazy1[node],lazy1[2*node]);
			lazy1[2*node+1]=min(lazy1[node],lazy1[2*node+1]);
		}
		lazy1[node]=INF;
	}
	if(start>end or start>r or end<l or l>r)
		return;
	if(start>=l and end<=r)
	{
		tree1[node]=min(tree1[node],val);
		if(start!=end)
		{
			lazy1[2*node]=min(lazy1[2*node],val);
			lazy1[2*node+1]=min(lazy1[2*node+1],val);
		}
		return;
	}
	int mid=(start+end)/2;
	updateRange1(2*node,start,mid,l,r,val);
	updateRange1(2*node+1,mid+1,end,l,r,val);
	tree1[node]=min(tree1[2*node],tree1[2*node+1]);
}

void updateRange2(int node,int start,int end,int l,int r,int val)
{
	if(lazy2[node]!=INF)
	{
		tree2[node]=min(tree2[node],lazy2[node]);
		if(start!=end)
		{
			lazy2[2*node]=min(lazy2[node],lazy2[2*node]);
			lazy2[2*node+1]=min(lazy2[node],lazy2[2*node+1]);
		}
		lazy2[node]=INF;
	}
	if(start>end or start>r or end<l or l>r)
		return;
	if(start>=l and end<=r)
	{
		tree2[node]=min(tree2[node],val);
		if(start!=end)
		{
			lazy2[2*node]=min(lazy2[2*node],val);
			lazy2[2*node+1]=min(lazy2[2*node+1],val);
		}
		return;
	}
	int mid=(start+end)/2;
	updateRange2(2*node,start,mid,l,r,val);
	updateRange2(2*node+1,mid+1,end,l,r,val);
	tree2[node]=min(tree2[2*node],tree2[2*node+1]);
}

int query1(int node,int start,int end,int l,int r)
{
	if(start>end or start>r or end<l or l>r)
		return INF;
	if(lazy1[node]!=INF)
	{
		tree1[node]=min(tree1[node],lazy1[node]);
		if(start!=end)
		{
			lazy1[2*node]=min(lazy1[node],lazy1[2*node]);
			lazy1[2*node+1]=min(lazy1[node],lazy1[2*node+1]);
		}
		lazy1[node]=INF;
	}
	if(start>=l && end<=r)
		return tree1[node];
	int mid=(start+end)/2;
	int p=query1(2*node,start,mid,l,r);
	int q=query1(2*node+1,mid+1,end,l,r);
	return min(p,q);
}

int query2(int node,int start,int end,int l,int r)
{
	if(start>end or start>r or end<l or l>r)
		return INF;
	if(lazy2[node]!=INF)
	{
		tree2[node]=min(tree2[node],lazy2[node]);
		if(start!=end)
		{
			lazy2[2*node]=min(lazy2[node],lazy2[2*node]);
			lazy2[2*node+1]=min(lazy2[node],lazy2[2*node+1]);
		}
		lazy2[node]=INF;
	}
	if(start>=l && end<=r)
		return tree2[node];
	int mid=(start+end)/2;
	int p=query2(2*node,start,mid,l,r);
	int q=query2(2*node+1,mid+1,end,l,r);
	return min(p,q);
}

int main()
{
	IOS;
	#ifndef ONLINE_JUDGE
		freopen("input.txt","r",stdin);
		freopen("output.txt","w",stdout);
	#endif
	cin >> n;
	int a[n+1],b[n+1];
	REP(i,1,n)
	{
		int x;
		cin >> x;
		a[x]=i;
	}
	REP(i,1,n)
	{
		int x;
		cin >> x;
		b[x]=i;
	}
	Create(1,1,n+1);
	REP(i,1,n)
	{
		if(b[i]<=a[i])
		{
			int c1=a[i]-b[i];
			updateRange1(1,1,n+1,1,b[i],c1);
			int c2=n-a[i]+b[i];
			updateRange2(1,1,n+1,b[i]+1,b[i]+(n-a[i]),c2);
			updateRange1(1,1,n+1,b[i]+(n-a[i])+1,n+1,-(b[i]+(n-a[i])));
		}
		else
		{
			int c1=b[i]-a[i];
			updateRange2(1,1,n+1,1,c1,c1);
			updateRange1(1,1,n+1,c1+1,c1+a[i],-c1);
			int c2=n-a[i]+b[i];
			updateRange2(1,1,n+1,c1+a[i]+1,n+1,c2);
		}
	}
	REP(i,1,n)
	{
		int ans=min(query1(1,1,n+1,i,i)+(i-1),query2(1,1,n+1,i,i)-(i-1));
		cout << ans << "\n";
	}

}	
