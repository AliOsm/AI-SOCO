#include <iostream>
#include <cmath>
#include <string>
#include <assert.h>

using namespace std;

#define ll unsigned long long
#define vi vector<int>
#define pb push_back
#define loop(i,n) for(int i=0; i<n; i++)
#define pii pair<int, int>
#define mp make_pair

const int MXN = 2 * 1e5 + 5;
const int MOD = 1e9 + 7;
int cnt_left[MXN], cnt_right[MXN];
ll fact[MXN];

void init() {
	fact[0] = 1;
	for (int i=1; i<MXN; i++) fact[i] = (i * fact[i - 1]) % MOD;
}

ll get_fact (ll val) {
	return fact[val];
}

ll inverseModp(ll a, ll p) {
    assert(p < (1ull << 63));
    assert(a < p);
    assert(a != 0);
    ll ex = p-2, result = 1;
    while (ex > 0) {
        if (ex % 2 == 1) {
            result = (result*a) % p;
        }
        a = (a*a) % p;
        ex /= 2;
    }
    return result;
}

ll nCrModp(ll n, ll r, ll p)
{
	ll res = 0;
	ll num = get_fact(n);
	ll den1 = get_fact(n-r);
	ll den2 = get_fact(r);
	return (num * inverseModp ((den1 * den2) % MOD, MOD)) % MOD;
}

int main() {
    ios_base::sync_with_stdio(false);
	init();
    string s;
	cin>>s;
	for (int i=0; i<s.length(); i++) {
		cnt_left[i] = (s[i] == '(')? 1: 0;
		if (i > 0) cnt_left[i] += cnt_left[i-1];
	}
	for (int i=s.length() - 1; i>=0; i--) {
		cnt_right[i] = (s[i] == ')')? 1: 0;
		if (i < s.length() - 1) cnt_right[i] += cnt_right[i + 1];
	}
	ll res = 0;
	for (int i=0; i<s.length(); i++) {
		if (s[i] == ')') continue;
		int left = cnt_left[i] - 1;
		int right = cnt_right[i];
		int tot = left + right;
		int r = min(tot - left - 1, right - 1);
		if (r < 0) continue;
		res += nCrModp(tot, r, MOD);
		res %= MOD;
	}
	cout<<res<<endl;
    return 0;
}   