#include <cstdio>
#include <cstring>
#include <cmath>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long LL;
#define INF 0x3f3f3f3f
#define eps 1e-8

int n, m, k, l, x, y, cur;
bool flag[200010];
vector<int> v[200010], p[200010];

void Dfs(int x) {
	flag[x] = 1;
	if (p[cur].size() == l) cur++;
	p[cur].push_back(x);
	for (int i = 0; i < v[x].size(); i++)
		if (!flag[v[x][i]]) {
			Dfs(v[x][i]);
			if (p[cur].size() == l) cur++;
			p[cur].push_back(x);
		}
}

int main() {
	memset(flag, 0, sizeof(flag));
	scanf("%d%d%d", &n, &m, &k);
	for (int i = 0; i < m; i++) {
		scanf("%d%d", &x, &y);
		v[x].push_back(y);
		v[y].push_back(x);
	}
	l = 2*n/k + (2*n%k > 0);
	cur = 0;
	Dfs(1);
	for (int i = cur; i < k; i++)
		if (p[i].size() == 0) p[i].push_back(1);
	for (int i = 0; i < k; i++) {
		printf("%d", p[i].size());
		for (int j = 0; j < p[i].size(); j++)
			printf(" %d", p[i][j]);
		printf("\n");
	}
	return 0;
}
