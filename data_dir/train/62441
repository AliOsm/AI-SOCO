#pragma GCC target("avx2")
#pragma GCC optimize("O3")

# include <x86intrin.h>
# include <bits/stdc++.h>

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

inline void Input_Output () {
	//freopen(".in", "r", stdin);
   //freopen(".out", "w", stdout);
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
vector < pair < int, int > > g[N];
ll dp[N][2];

void go (int v, int pr = 0) {
	priority_queue < ll > mx;
	for (auto e : g[v]) if (e.F != pr) {
		go(e.F, v);
		dp[v][1] += dp[e.F][0];
		mx.push(dp[e.F][1] + e.S - dp[e.F][0]);
	}
	ll sum = dp[v][1];
	dp[v][0] = dp[v][1];

	int cnt = k;
	while (cnt > 0 && mx.size()) {
		sum += mx.top();
		mx.pop();
		cnt--;
		if (cnt > 0) dp[v][1] = max(dp[v][1], sum);
		dp[v][0] = max(dp[v][0], sum);
	}

	dp[v][0] = max(dp[v][0], dp[v][1]);
}

void solve () {
	cin >> n >> k;
	for (int i = 1; i <= n; i ++) g[i].clear(), dp[i][0] = dp[i][1] = 0;
	for (int i = 1; i < n; i ++) {
		int l, r, w;
		cin >> l >> r >> w;
		g[l].pb({r, w});
		g[r].pb({l, w});
	}
	go(1);
	cout << max(dp[1][0], dp[1][1]) << '\n';
}

int main () {
   SpeedForce;
	int q;
	cin >> q;
	while (q--) solve();
   return Accepted;
}

// B...a