//Daniel Grzegorzewski
#include <bits/stdc++.h>
#pragma GCC optimize("O3")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace std;

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
     ios_base::sync_with_stdio(0);
     cin.tie(0);
}

const int N = 53;

int n, po, ko, a[N][N], p[N*N];

int Find(int x) {
  if (x == p[x])
    return x;
  return p[x] = Find(p[x]);
}

void Union(int x, int y) {
  x = Find(x);
  y = Find(y);
  p[x] = y;
}

int main() {
  init_ios();
  cin >> n;
  int x, y;
  cin >> x >> y;
  --x;
  --y;
  po = n*x+y;
  cin >> x >> y;
  --x;
  --y;
  ko = n*x+y;
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < n; ++j) {
      char c;
      cin >> c;
      a[i][j] = (int)(c-'0'+1);
      p[n*i+j] = n*i+j;
    }
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j)
      for (int l = -1; l <= 1; ++l)
        for (int r = -1; r <= 1; ++r)
          if (i+l >= 0 && i+l < n && j+r >= 0 && j+r < n && a[i][j] == a[i+l][j+r] && l*r == 0)
            Union(n*i+j, n*(i+l)+j+r);
  }
  int res = 1e9;
  if (Find(po) == Find(ko)) {
    cout<<"0\n";
    return 0;
  }
  for (int i1 = 0; i1 < n; ++i1)
    for (int j1 = 0; j1 < n; ++j1)
      for (int i2 = 0; i2 < n; ++i2)
        for (int j2 = 0; j2 < n; ++j2) {
          if ((i1 != i2 || j1 != j2) && ((Find(po) == Find(n*i1+j1) && Find(ko) == Find(n*i2+j2)) || (Find(po) == Find(n*i2+j2) && Find(ko) == Find(n*i1+j1))))
            res = min(res, (i1-i2)*(i1-i2)+(j1-j2)*(j1-j2));
        }
  cout<<res<<"\n";
}