#include <bits/stdc++.h>

using namespace std;

#define long long long
//#define double __float128
#define INF (long) 1e18
#define MOD ((long) 1e9 + 7)
#define mll map<long, long>
#define pll pair<long, long>
#define umap unordered_map
#define umll umap<long, long>
#define pb push_back
#define FOR(i, a, b) \
  for (long i = a; i < (long) b; i++)
#define SORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr < b.atr; });
#define UNSORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr > b.atr; });
#define PRINTV(v) \
  FOR (_i, 0, v.size()) \
    cout << v[_i] << " "; \
  cout << "\n";

set<long> gera_primos(long n)
{
  set<long> primos;
  vector<bool> crivo(n+1);
  primos.insert(2);
  for (long i = 3; i <= n; i += 2) {
    if (crivo[i]) continue;
    primos.insert(i);
    for (long j = i; j <= n; j += i) {
      crivo[j] = true;
    }
  }
  return primos;
}

struct Link
{
  long from, to, cost;
};

struct Node
{
  bool visitado = false;
  long size = 0;
  double t;
  vector<long> in, out;
};

long build(auto &nodes, long r, long pai)
{
  nodes[r].size = 1;
  for (auto &x : nodes[r].out) {
    if (x == pai) continue;
    nodes[r].size += build(nodes, x, r);
  }
  return nodes[r].size;
}

void solve(auto &nodes, long r, long pai)
{
  for (auto &x : nodes[r].out) {
    if (x == pai) continue;
    long y = nodes[r].size - nodes[x].size - 1;
    double z = y * 0.5 + nodes[r].t;
    nodes[x].t = z + 1;
    solve(nodes, x, r);
  }
}

int main()
{
  ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

  long n;
  cin >> n;

  vector<Node> nodes(n+1);
  FOR (i, 2, n+1) {
    long p;
    cin >> p;
    nodes[p].out.pb(i);
  }
  build(nodes, 1, -1);

  vector<double> resp(n+1);
  nodes[1].t = 1.0;
  solve(nodes, 1, -1);

  FOR (i, 1, n+1) {
    printf("%g ", nodes[i].t);
  }
  puts("");
}
