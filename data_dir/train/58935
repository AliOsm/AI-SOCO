#include<bits/stdc++.h>
using namespace std;
const int MAXN = 3e5+7;

int tr[4*MAXN], lazy[4*MAXN];
int active[4*MAXN];

void propagate(int u, int l, int r) {
    if (lazy[u]) {
        tr[u] += lazy[u];
        if (l!=r) {
            lazy[u*2] += lazy[u];
            lazy[u*2+1] += lazy[u];
        }
        lazy[u] = 0;
    }
}

void init(int u, int l, int r) {
    tr[u] = MAXN;
    if (l == r) return;
    int mid = (l+r)/2;
    init(u*2, l, mid);
    init(u*2+1, mid+1, r);
}

void update(int u, int l, int r, int x, int y, int v) {
    propagate(u, l, r);
    if (r < x || y < l) return;
    if (x <= l && r <= y) {
        lazy[u] += v;
        propagate(u, l, r);
        return;
    }
    int mid = (l+r)/2;
    update(u*2, l, mid, x, y, v);
    update(u*2+1, mid+1, r, x, y, v);
    tr[u] = min(tr[u*2], tr[u*2+1]);
}

int n;
int p[MAXN], r[MAXN];

void initiateIndex(int idx) {
    update(1, 1, n, 1, idx, -1);
    update(1, 1, n, idx, idx, -MAXN);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin >> n;

    for (int i = 1; i <= n; i++) {
        cin >> p[i];
        r[p[i]] = i;
    }

    init(1, 1, n);
    initiateIndex(r[n]);

    int ans = n;
    cout << ans;

    for (int i = 1; i < n; i++) {
        int q;
        cin >> q;

        update(1, 1, n, 1, q, 1);
        while (tr[1] >= 0) {
            ans--;
            initiateIndex(r[ans]);
        }
        cout << " " << ans;
    }

    cout << "\n";

    return 0;
}
