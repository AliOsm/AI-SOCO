#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef vector<ll> vl ;

#define mp make_pair
#define pb push_back
#define f first
#define s second
#define all(v) (v).rbegin(),(v).rend()

const int MOD = 1000000007;
const int N = 1000005;
const double PI =4*atan(1);

ll m,x,y,n,p,k;
int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};

char grid[1005][1005];
bool vis[1005][1005];
ll ans[1005][1005];
vector<pair<ll,ll > > v;
vector<pair<ll,ll > >ss;

bool ingrid(ll x,ll y){
    return x>=0 && y>=0 && x<n && y<m;
}

void dfs(ll x, ll y){
    if(vis[x][y])return ;
    vis[x][y]=1;
    for(int i=0;i<4;i++){
        ll xx=x+dx[i];
        ll yy=y+dy[i];
        if(ingrid(xx,yy)){
            if(grid[xx][yy]=='*')ss.pb(mp(xx,yy));
            else dfs(xx,yy);
        }
    }
    v.pb(mp(x,y));
}


int main(){
    ios::sync_with_stdio(0);
    //freopen("easy.txt","r",stdin);
    cin >> n >> m>> k;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cin >> grid[i][j];
        }
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j]=='.' && vis[i][j]==0){
                ss.clear();
                v.clear();
                dfs(i,j);
                x=ss.size();
                for(auto t: v){
                    ans[t.f][t.s]=x;
                }
            }
        }
    }
    while(k--){
        cin >> x >> y;
        x--;y--;
        cout << ans[x][y] << "\n";
    }

    return 0;
}