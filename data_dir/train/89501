#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
#include <functional>
using namespace std;
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf 1000000
const int mod = (1e9) + 7;
const double eps = 1e-6;
const int siz = 1e5 + 5, siz2 = 1e5 + 5;
int n, m;
char grid[1005][1005];
struct star {
	int x, y, s;
};
vector<star> stars;
struct lim{
	int u, l, d, r;
};
lim lims[1005][1005];
int rowcumu[1005][1005], colcumu[1005][1005];
int main()
{
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++) {
		scanf("%s", grid[i]+1);
	}
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			if (grid[i][j] != '*') {
				continue;
			}
			int l = j, r = j;
			for (int k = j + 1; k <= m; k++) {
				if (grid[i][k] != '*') {
					break;
				}
				r = k;
			}
			for (int k = l; k <= r; k++) {
				lims[i][k].l = l;
				lims[i][k].r = r;
			}
			j = r;
		}
	}
	for (int i = 1; i <= m; i++) {
		for (int j = 1; j <= n; j++) {
			if (grid[j][i] != '*') {
				continue;
			}
			int u = j, d = j;
			for (int k = j + 1; k <= n; k++) {
				if (grid[k][i] != '*') {
					break;
				}
				d = k;
			}
			for (int k = u; k <= d; k++) {
				lims[k][i].u = u;
				lims[k][i].d = d;
			}
			j = d;
		}
	}
	for (int i = 2; i < n; i++) {
		for (int j = 2; j < m; j++) {
			if (grid[i][j] == '*') {
				int sz = 0;
				sz = min(i-lims[i][j].u, min(j - lims[i][j].l, min(lims[i][j].d - i, lims[i][j].r - j)));
				if (sz) {
					stars.push_back({i, j, sz});
					rowcumu[i][j-sz]++;
					rowcumu[i][j+sz+1]--;
					colcumu[i-sz][j]++;
					colcumu[i + sz + 1][j]--;
				}
			}
		}
	}
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			rowcumu[i][j] += rowcumu[i][j - 1];
		}
	}
	for (int i = 1; i <= m; i++) {
		for (int j = 1; j <= n; j++) {
			colcumu[j][i] += colcumu[j-1][i];
			if (grid[j][i]=='*' && colcumu[j][i] == 0 && rowcumu[j][i] == 0) {
				printf("-1\n");
				return 0;
			}
		}
	}
	int sz = stars.size();
	printf("%d\n", sz);
	for (auto v : stars) {
		printf("%d %d %d\n", v.x, v.y, v.s);
	}
	return 0;
}