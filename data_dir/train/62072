#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

int main() {
  int n;
  scanf("%d", &n);
  vector<int> a(n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", &a[i]);
  }
  vector<int> L(n), R(n);
  R[n - 1] = 1;
  for (int i = n - 2; i >= 0; --i) {
    R[i] = (a[i] < a[i + 1] ? 1 + R[i + 1] : 1);
  }
  L[0] = 1;
  for (int i = 1; i < n; ++i) {
    L[i] = (a[i] < a[i - 1] ? 1 + L[i - 1] : 1);
  }
  string ret;
  int x = 0, y = n - 1;
  int cur = 0;
  while (x <= y) {
    // trace(x, y, cur);
    if (max(a[x], a[y]) <= cur) break;
    if (a[x] <= cur) {
      ret += 'R';
      cur = a[y--];
      continue;
    }
    if (a[y] <= cur) {
      ret += 'L';
      cur = a[x++];
      continue;
    }
    if (a[x] < a[y]) {
      ret += 'L';
      cur = a[x++];
    } else if (a[x] > a[y]) {
      ret += 'R';
      cur = a[y--];
    } else {
      // trace(x, y, R[x], L[y]);
      if (R[x] > L[y]) {
        ret += 'L';
        cur = a[x++];
      } else {
        ret += 'R';
        cur = a[y--];
      }
    }
  }
  printf("%d\n", (int)ret.size());
  puts(ret.c_str());
  return 0;
}
