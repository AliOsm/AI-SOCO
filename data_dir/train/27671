#include "bits/stdc++.h"
using namespace std;

#define MAX 100002

int n;
int m;



unordered_map<int, int> mp[MAX];
set<int> uncap[MAX];
vector<int> d[MAX];


int linkk;
int root;
vector<int> lis;

int mark[MAX];

vector<vector<int> > v;
set<int> ss;

vector<pair<int, int> > ich[MAX];

unordered_set<int> s2;

int main() {
	linkk++;
	cin >> n >> m;
	for (int i = 0; i < MAX; i++) {
		mark[i] = i;
	}
	for (int i = 0; i < n; i++) {
		int b;
		scanf("%d", &b);
		int cur = 0;
		v.push_back(vector<int>());
		for (int j = 0; j < b; j++) {
			int a;
			scanf("%d", &a);
			v.back().push_back(a);
			lis.clear();
			for (auto it = uncap[cur].rbegin(); it != uncap[cur].rend(); it++) {
				if ((*it) > a ) {
					lis.push_back((*it));
				}
				else {
					break;
				}
			}
			for (int el : lis) {
				uncap[cur].erase(el);
				mark[el] = el - MAX;
				ss.insert(el);
				s2.insert(el);
			}
			d[cur].push_back(a);
			ich[a].push_back(make_pair(cur, d[cur].size()-1));
			uncap[cur].insert(a);
			if (mp[cur].count(a)) {
				cur = mp[cur][a];
			}
			else {
				mp[cur][a] = linkk;
				linkk++;
				cur = linkk - 1;
			}
		}
		if (mp[cur].size()) {
			puts("No");
			return 0;
		}
	}
	while (s2.size()) {
		int k = *s2.begin();
		s2.erase(k);
		for (auto it : ich[k]) {
			int f = it.first;
			int s = it.second;
			for (; s >= 0 && d[f][s] != -1; s--) {
				if (ss.count(d[f][s]) == 0) {
					ss.insert(d[f][s]);
					s2.insert(d[f][s]);
					mark[d[f][s]] = d[f][s] - MAX;
				}
				d[f][s] = -1;
			}
		}
	}
	for (int i = 0; i < v.size(); i++) {
		for (int j = 0; j < v[i].size(); j++) {
			v[i][j] = mark[v[i][j]];
		}
	}
	for (int i = 0; i + 1 < v.size(); i++) {
		if (v[i] <= v[i + 1]) {
			continue;
		}
		else {
			puts("No");
			return 0;
		}
	}
	puts("Yes");
	cout << ss.size() << endl;
	for (auto it = ss.begin(); it != ss.end(); it++) {
		if (it != ss.begin()) {
			printf(" ");
		}
		printf("%d", (*it));
	}
	puts("");
	return 0;
}