/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
struct seg{
    int start;
    int end;
    int id;
    seg(int a, int b, int c){
        start = a;
        end = b;
        id = c;
    }
};
typedef seg segment;
bool cmp(segment a, segment b){
    return a.end<b.end;
}
const int N = 2e5+5;
int BIT[2*N];

void update(int idx, int val) {
    for(int i = idx; i < 2*N; i += i & -i) {
        BIT[i] += val;
    }
}

int query(int idx) {
    int res = 0;
    for(int i = idx; i; i -= i & -i) {
        res += BIT[i];
    }
    return res;
}
//int tree[4*N];

/*void update(int node, int start, int end, int Idx, int value){
    if(start == end){
        tree[node] = 1;
        return;
    }
    int mid = (start+end)>>1;
    if(Idx<=mid) update(2*node, start, mid, Idx, value);
    else update(2*node+1, mid+1, end, Idx, value);
    tree[node] = tree[2*node]+tree[2*node+1];
}
int query(int node, int start, int end, int l, int r){
    if(start>r or end<l) return 0;
    if(start>=l and end<=r) return tree[node];
    int mid = (start+end)>>1;
    return query(2*node, start, mid, l, r)+query(2*node+1, mid+1, end, l, r);
}*/

class ProblemDNestedSegments {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n; in>>n;
        vector<segment> arr;
        map<int, int> Map;
        for(int i = 1; i<=n; ++i){
            int l, r; in>>l>>r;
            Map[l] = 0;
            Map[r] = 0;
            arr.emplace_back(l, r, i);
        }
        int cnt = 1;
        for(auto &w: Map) w.second = cnt++;
        for(auto &w : arr) w.start = Map[w.start], w.end = Map[w.end];
        sort(arr.begin(), arr.end(), cmp);
        vector<int> res(n+1);
        memset(BIT, 0, sizeof(BIT));
        cnt = 0;
        for(int i = 0; i<n; ++i){
            int id = arr[i].id;
            res[id] = cnt - query(arr[i].start);
            cnt++;
            update(arr[i].start, 1);
        }
        for(int i = 1; i<=n; ++i) out<<res[i]<<'\n';
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	ProblemDNestedSegments solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
