#include<bits/stdc++.h>
using namespace std;
const int max_rats=290;
const int maxn=1000+10;
class node
{
	public:
    	int x,y,d;
	   	node(int xx=0,int yy=0,int dd=0)
		{
    	    x=xx,y=yy,d=dd;
    	}
};
vector<node>rats;
int n,m,d,cnt_rats=0,Size=0;
int MAP[maxn][maxn];
char s[maxn][maxn];
int reach[maxn][maxn];
int vx[max_rats*max_rats],vy[max_rats*max_rats];
bool va[max_rats*max_rats][max_rats];
bool vis[maxn][maxn];
const int dx[4]={0,1,-1,0},dy[4]={1,0,0,-1};
void put_set(int x,int y,int type)
{
    if(!reach[x][y])
    {
        va[++Size][type]=1;
        vx[Size]=x;
        vy[Size]=y;
        return ;
    }
    for(int i=1;i<=Size;i++)
    {
    	if(vx[i]==x&&vy[i]==y)
		{
        	va[i][type]=1;
    	    break;
    	}
    }
}
void bfs(int type,node st)
{
    memset(vis,0,sizeof(vis));
    queue<node>q;
    q.push(st);
    vis[st.x][st.y]=1;
    while(!q.empty())
    {
        node u=q.front();
        q.pop();
        put_set(u.x,u.y,type);
        reach[u.x][u.y]=1;
        if(u.d==d)continue;
        for(int i=0;i<4;i++)
        {
            int x=u.x+dx[i],y=u.y+dy[i];
            if(x<1||x>n||y<1||y>m||vis[x][y]||MAP[x][y])continue;
            vis[x][y]=1;
            q.push(node(x,y,u.d+1));
        }
    }   
}
int ans1,ans2,find_ans=0;
int main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    scanf("%d%d%d",&n,&m,&d);
    for(int i=1;i<=n;i++)
    {
        scanf("%s",s[i]+1);
        for(int j=1;j<=m;j++)
        if(s[i][j]=='R')cnt_rats++;
    }
    if(cnt_rats>max_rats){printf("-1\n");return 0;}
    for(int i=1;i<=n;i++)
    for(int j=1;j<=m;j++)
    {
        MAP[i][j]=0;
        if(s[i][j]=='X')MAP[i][j]=1;
        if(s[i][j]=='R')rats.push_back(node(i,j,0));
    }
    for(int i=0;i<cnt_rats;i++)
    bfs(i,rats[i]);
    if(Size==1)
    {
        for(int i=0;i<cnt_rats;i++)
        if(va[1][i]==0)
        {
            printf("-1\n");
            return 0;
        }
        printf("%d %d ",vx[1],vy[1]);
        for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++)
        {
            if(MAP[i][j]||(i==vx[1]&&j==vy[1]))continue;
            printf("%d %d\n",i,j);
            return 0;
        }
    }
    for(int i=1;i<Size;i++)
    {
        for(int j=i+1;j<=Size;j++)
        {
            find_ans=1;
            for(int k=0;k<cnt_rats;k++)
            if(va[i][k]==0&&va[j][k]==0)
            {
                find_ans=0;
                break;
            }
            if(find_ans)
			{
                ans1=i;
                ans2=j;
                break;
            }
        }   
        if(find_ans)break;
    }
    if(find_ans)printf("%d %d %d %d\n",vx[ans1],vy[ans1],vx[ans2],vy[ans2]);
    else puts("-1");
    return 0;
}