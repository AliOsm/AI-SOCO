# include <bits/stdc++.h>

# define pb push_back
# define fr first
# define sc second
# define mk make_pair

using namespace std;

const int inf = 1000000000 + 7;
const int N = 1e6 + 5;

typedef long long ll;

int n, a[N], t[N], pos, tt[N];
ll ans;

void build(int v = 1, int tl = 1, int tr = n)
{
      if(tl == tr)
            t[v] = a[tl];
      else
      {
            int tm = (tl + tr) >> 1;
            build(v << 1, tl, tm);
            build((v << 1) | 1, tm + 1, tr);
            t[v] = min(t[v << 1], t[(v << 1) | 1]);
      }
}

int get(int l, int r, int v = 1, int tl = 1, int tr = n)
{
      if(tr < l || r < tl) return inf;
      if(l <= tl && tr <= r) return t[v];
      int tm = (tl + tr) >> 1;
      return min(get(l, r, v << 1, tl, tm), get(l, r, (v << 1) | 1, tm + 1, tr));
}

int sum(int l, int r, int v = 1, int tl = 1, int tr = n)
{
      if(tr < l || r < tl) return 0;
      if(l <= tl && tr <= r) return tt[v];
      int tm = (tl + tr) >> 1;
      return sum(l, r, v << 1, tl, tm) + sum(l, r, (v << 1) | 1, tm + 1, tr);
}

void update(int pos, int v = 1, int tl = 1, int tr = n)
{
      if(tl == tr)
      {
            t[v] = inf;
            tt[v] = 1;
      }
      else
      {
            int tm = (tl + tr) >> 1;
            if(pos <= tm)
                  update(pos, v << 1, tl, tm);
            else
                  update(pos, (v << 1) | 1, tm + 1, tr);
            t[v] = min(t[v << 1], t[(v << 1) | 1]);
            tt[v] = tt[v << 1] + tt[(v << 1) | 1];
      }
}

int main()
{
      cin >> n;

      for(int i = 1; i <= n; i ++)
            cin >> a[i];

      pos = 1;

      build();

      for(int i = 1; i < n; i ++)
      {
            int mn = get(1, n);
            if(get(pos, n) == mn)
            {
                  int l = pos, r = n;
                  while(r - l > 1)
                  {
                        int md = (l + r) >> 1;
                        if(get(pos, md) == mn)
                              r = md;
                        else
                              l = md;
                  }
                  if(get(pos, l) == mn)
                        r = l;
                  ans += (r - pos) - sum(pos + 1, r);
                  if(i == 1) ans ++;
                  pos = r;
                  update(pos);
            }
            else
            {
                  int l = 1, r = pos;
                  while(r - l > 1)
                  {
                        int md = (l + r) >> 1;
                        if(get(1, md) == mn)
                              r = md;
                        else
                              l = md;
                  }
                  if(get(1, l) == mn)
                        r = l;
                  ans += (n - pos) - sum(pos + 1, n);
                  ans += r - sum(1, r);
                  pos = r;
                  update(pos);
            }
      }

      cout << ans + 1 << endl;
}
