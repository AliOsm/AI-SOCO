#include<bits/stdc++.h>
using namespace std;
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
#define ll long long

template<class T> ostream& operator<<(ostream &os,vector<T> V){
	os<<"[ ";for(auto v:V)os<<v<<" ";return os<<" ]";
}
template<class L,class R> ostream& operator<<(ostream &os,pair<L,R> P){
	return os<<"("<<P.first<<","<<P.second<<")";
}
ll mxm(){return LLONG_MIN;}
template<typename... Args>
ll mxm(ll a,Args... args){return max(a,mxm(args...));}
ll mnm(){return LLONG_MAX;}
template<typename... Args>
ll mnm(ll a,Args... args){return min(a,mnm(args...));}

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
template<typename Arg1>
void __f(const char* name,Arg1&& arg1){
	cout<<name<<" : "<<arg1<<endl;
}
template<typename Arg1,typename... Args>
void __f(const char* names,Arg1&& arg1,Args&&... args){
		const char* comma=strchr(names+1,',');cout.write(names,comma-names)<<" : "<<arg1<<" | ";__f(comma+1,args...);
}
#else
#define trace(...) 1
#endif

#define ld long double
#define vll vector<ll>
#define pll pair<ll,ll>
#define ii pair<int,int>
#define vi vector<int>
#define vpll vector<pll>
#define vii vector<ii>
#define vvi vector<vi>
#define vvll vector<vll>
#define vvpll vector<vpll>
#define vvii vector<vii>
#define vld vector<ld>
#define vvld vector<vld>
#define I insert
#define F first
#define S second
#define pb push_back
#define all(x) x.begin(),x.end()
#define endl "\n"
#define siz(a)	((int)(a).size())

const int mod=1e9+7;
inline int add(int a,int b){a+=b;if(a>=mod)a-=mod;return a;}
inline int sub(int a,int b){a-=b;if(a<0)a+=mod;return a;}
inline int mul(int a,int b){return (a*1ll*b)%mod;}
inline int power(int a,int b){int rt=1;while(b>0){if(b&1)rt=mul(rt,a);a=mul(a,a);b>>=1;}return rt;}
inline int inv(int a){return power(a,mod-2);}

const int N=1e6+5;
vi cap(N),deg(N);
vvii adj(N);
vi done(N),ign(N);
vii edg(N);
int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);cout<<setprecision(25);
	int n,m;cin>>n>>m;		
	for(int i=0;i<m;i++){
		int u,v;cin>>u>>v;
		adj[u].pb({v,i});adj[v].pb({u,i});
		deg[u]++;deg[v]++;
		edg[i]={u,v};
	}
	for(int i=1;i<=n;i++) cap[i]=deg[i]-(deg[i]+1)/2;
	priority_queue<pair<int,int>> pq;
	for(int i=1;i<=n;i++)
		if(cap[i]>0)pq.push({cap[i],i});
	int keep=min(m,(n+m)/2+((n+m)&1));
	int m1=m;
	while(m1>keep){
		auto a=pq.top();
		pq.pop();
		if(a.F!=cap[a.S]){
			if(cap[a.S]>0)pq.push({cap[a.S],a.S});
			continue;
		}
		int nod=a.S;
		int got=0;
		while(!adj[nod].empty()){
			if(ign[(adj[nod].back()).S])adj[nod].pop_back();
			else if(cap[(adj[nod].back()).F]==0)ign[(adj[nod].back()).S]=1,adj[nod].pop_back();
			else if(done[(adj[nod].back()).S])adj[nod].pop_back();
			else{
				got=1;done[(adj[nod].back()).S]=1;
				cap[(adj[nod].back()).F]--;
				cap[nod]--;m1--;break;
			}
		}
		if(got&&cap[nod]>0)pq.push({cap[nod],nod});
	}
	cout<<keep<<endl;
	for(int i=0;i<m;i++)
		if(!done[i])cout<<edg[i].F<<' '<<edg[i].S<<endl;
}