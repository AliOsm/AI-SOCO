//ITNOG
#include<bits/stdc++.h>
 
using namespace std;
 
 
#define int long long
#define rep(i, s, e) for(int i = s; i < e; i ++)
typedef double ld;
 
const int maxN = 2000 + 5;
const int mod = 1000*1000*1000+7;
const int maxL = 17;
typedef long long ll;

#define x first
#define y second

int a[2503];
int dp[2503][2503];


int pr[2503], su[2503];

vector<pair<int,int> > v;
string s;



int get(int i, int j, int l, int r)
{
    if(l == r) return 0;
    int xx = dp[i][j];
    
//    if(i == 0 && j == 3) cout << dp[i][j] <<endl;

    int st = 2 * i - 1;
    while(st >= 0 && s[st] == '*') xx *= a[(st-1)/2], st -= 2;
    st = 2 * j+1;
    while(st < s.size() && s[st] == '*') xx *= a[(st+1)/2], st += 2;
    
    return xx;
}


main()
{
    ios::sync_with_stdio(0); cin.tie();
    cin >> s;

    int n = s.size() / 2; n ++;
    
    rep(i,0,n) a[i] = dp[i][i] = s[2*i] -'0';

    rep(i,0,n) rep(j,i+1,n)
    {
	  if(s[2*j-1] == '*')
	  {
		int st = 2*j-1, tmp = a[j];
		while(st >= 2 * i && s[st] == '*')
		{
		    tmp *= a[(st-1)/2];
		    st -= 2;
		}
//		cout << (st-1)/2 << endl;
		dp[i][j] = tmp + (st > 0 ? dp[i][(st-1)/2] : 0);
	  }
	  else
		dp[i][j] += dp[i][j-1] + a[j];
    }

//    cout << dp[0][1] << endl;
    /*
    rep(i,0,n) 
    {
	  rep(j,0,n) cout << dp[i][j] << ' ';
	  cout << endl;
    }
    */

    int ans = a[0];

    rep(i,1,n)
    {
	  if(s[2*i-1] == '*') ans *= a[i];
	  else
		v.push_back({i-1, ans}), ans = a[i];
    }
    v.push_back({n-1,ans});

    rep(i,1,v.size()+1) pr[i] = v[i-1].second + pr[i-1];
    for(int i = v.size(); i > 0; i --) su[i] = v[i-1].second + su[i+1];

    
    ans = 0;
    rep(i,0,v.size()) ans += v[i].second;
   
    rep(i,0,n) rep(j,i+1,n)
    {
	  int l = lower_bound(v.begin(), v.end(), make_pair(i,-1LL)) - v.begin();
	  int r = upper_bound(v.begin(), v.end(), make_pair(j,-1LL)) - v.begin(); 
	  
	  int tmp = pr[l] + su[r+2];
	  
//	  cout << i << ' ' << j << ' ' << tmp << ' ';
	  tmp += get(i,j,l,r);
//	  cout << tmp << endl;
	  ans = max(ans, tmp);
    }
    
    cout << ans << endl;
    
    return 0;
}
