/*
* p.cpp
*
*  Created on: 2016/12/27
*      Author: joi
*/
#include<bits/stdc++.h>
using namespace std;

bool room[600][600][31][9];

int X = 160;
int Y = 160;

int n;

struct st{
	int a;
	int b;
	int c;
	int d;
	st(int a_,int b_,int c_,int d_){
		a = a_;
		b = b_;
		c = c_;
		d = d_;
	}
};
queue<st> q;

int dx[] = { 0, 1, 1, 1, 0, -1, -1, -1 };
int dy[] = { 1, 1, 0, -1, -1, -1, 0, 1 };

bool vis[1000][1000];

pair<int, int> get_x(int a, int b, int dir, int len, int id){
	dir += 8;
	dir %= 8;
	for (int i = 1; i <= len; i++){
		vis[a + dx[dir]*i][b + dy[dir]*i] = true;
	}
	int x = a + dx[dir] * len;
	int y = b + dy[dir] * len;
	if (room[x][y][id][dir] == false){
		room[x][y][id][dir] = true;
		q.push(st(x, y, id, dir));
	}
	return make_pair(x, y);
}
void ans(){
	int cnt = 0;
	for (int i = 0; i < 1000; i++){
		for (int j = 0; j < 1000; j++){
			if (vis[i][j]){
				cnt++;
			}
		}
	}
	cout << cnt << endl;
}
int main(){
	cin >> n;
	
	for (int i = 0; i < n; i++){
		int t;
		scanf("%d", &t);
		if (i == 0){
			for (int j = 0; j < t; j++){
				vis[X][Y+j] = true;
				if(j==t-1)room[X][Y + j][i][0] = true;
			}
			q.push(st(X, Y + t - 1, i, 0));
			continue;
		}
		while (!q.empty()){
			st a = q.front();
			if (a.c == i)break;
			q.pop();
			 get_x(a.a, a.b, a.d - 1,t,i);
			get_x(a.a, a.b, a.d + 1,t,i);
		}
	}
	ans();
	return 0;
}