#include<bits/stdc++.h>
using namespace std;
#define MOD 1000000007
typedef long long ll;

char c[1007];
ll l, k;

ll nCr[1007][1007];

vector< ll >validOnes;

int flg[1007][1007][2];
ll dp[1007][1007][2];

ll rc(ll ps, ll ones, ll shoman)
{
    if (ps==l) {
        //cout << ps << " " << ones << " " << shoman << endl;
        int id = lower_bound(validOnes.begin(), validOnes.end(), ones) - validOnes.begin();
        if (id < validOnes.size() && validOnes[id]==ones) return 1LL;
        else return 0LL;
    }

    if (flg[ps][ones][shoman]) return dp[ps][ones][shoman];

    ll ret = 0;
    ll rem = l-ps;
    flg[ps][ones][shoman] = 1;

    if (shoman==0) {
        for (ll vo : validOnes) {
            if (vo - ones < 0) continue;
            if (vo - ones > rem) continue;
            ret = (ret + nCr[rem][vo-ones])%MOD;
        }
    } else {
        if (c[ps]=='1') {
            ret = (rc(ps+1, ones, 0) + rc(ps+1, ones+1, 1) )%MOD;
        } else ret = rc(ps+1, ones, 1);
    }

    //cout << "dp[" << ps << "][" << ones << "][" << shoman << "] = " << ret << endl;

    return dp[ps][ones][shoman] = ret;
}

ll cost[1007];

int main()
{
    cost[1] = 0;

    for (int i = 2; i <= 1000; i++) {
        cost[i] = 1 + cost[__builtin_popcount(i)];
    }

    scanf("%s", c);
    l = strlen(c);

    scanf("%lld", &k);

    if (k==0) {
        printf("%d\n", 1);
        return 0;
    }
    if (k==1) {
        printf("%lld\n", l-1);
        return 0;
    }

    k--;


    for (ll i = 1; i <= 1000; i++) {
        if (cost[i]==k) {
            validOnes.push_back(i);
            //cout << "can have " << i << " ones" << endl;
        }
    }

    for (ll n = 0; n <= l; n++) {
        nCr[n][0] = 1LL;
        for (ll r = 1; r <= n; r++) {
            nCr[n][r] = (nCr[n-1][r-1]+nCr[n-1][r])%MOD;
        }
    }

    printf("%lld\n", rc(0, 0, 1));


    return 0;
}
