#include "bits/stdc++.h"

using namespace std;

#define debug(args...) fprintf(stderr, args)

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define pb push_back
#define sz(x) (int)(x).size()
#define all(x) x.begin(), x.end()

typedef long long ll;
typedef pair<int, int> pii;

const int maxn = 1e5 + 10;

int n, m, k;

int c[maxn];
vector<int> adj[maxn];

bool mrk[maxn];
int bad[maxn];

bool ok(double ratio) {
	queue<int> Q;

	FOR(i, 1, n) {
		mrk[i] = false;
		bad[i] = sz(adj[i]) - ceil(ratio * sz(adj[i]));
	}

	FOR(i, 1, k) {
		mrk[c[i]] = true;
		Q.push(c[i]);
	}

	while(!Q.empty()) {
		int v = Q.front();

		Q.pop();

		for(auto u: adj[v])
			if(!mrk[u]) {
				--bad[u];

				if(bad[u] < 0) {
					mrk[u] = true;
					Q.push(u);
				}
			}
	}

	int cnt = 0;

	FOR(i, 1, n) if(!mrk[i]) ++cnt;

	return cnt > 0;
}

void solve() {
	double l = 0.0;
	double r = 1.0;

	for(int it = 0; it <= 200; ++it) {
		double mid = (l + r) / 2.0;

		if(ok(mid)) l = mid;
		else r = mid;
	}

	ok(l - 1e-9);

	vector<int> nodes;

	FOR(i, 1, n) if(!mrk[i]) nodes.pb(i);

	printf("%d\n", sz(nodes));

	for(auto u: nodes) printf("%d ", u);
}

int main() {
	scanf("%d %d %d", &n, &m, &k);

	FOR(i, 1, k) scanf("%d", &c[i]);

	FOR(i, 1, m) {
		int a, b;

		scanf("%d %d", &a, &b);
		adj[a].pb(b);
		adj[b].pb(a);
	} 

	solve();
	return 0;
}
