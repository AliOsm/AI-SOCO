#include <bits/stdc++.h>
using namespace std;

const int MAX = 4e5 + 5;
int n, m, s, l, k, dp[MAX][2], out[MAX], mk[MAX], ord[MAX], cc[MAX], sz[MAX];
pair <int, int> p[MAX][2];
vector <int> g[MAX], gt[MAX];

void dfs1(int u) {
	mk[u] = 1;

	for(int v : g[u])
		if(!mk[v])
			dfs1(v);

	ord[l--] = u;
}

void dfs2(int u) {
	mk[u] = 1;
	cc[u] = k;
	sz[k]++;

	for(int v : gt[u])
		if(!mk[v])
			dfs2(v);
}

int main() {
	scanf("%d%d", &n, &m);

	l = n;

	for(int i = 1; i <= n; i++) {
		int c; scanf("%d", &c);
		out[i] = c;

		for(int j = 1; j <= c; j++) {
			int x; scanf("%d", &x);
			g[i].push_back(x);
			gt[x].push_back(i);
		}
	}

	scanf("%d", &s);

	queue <pair <int, int> > q;
	q.push({s, 0});

	for(int i = 1; i <= n; i++)
		dp[i][0] = dp[i][1] = INT_MAX;

	dp[s][0] = 0;

	while(!q.empty()) {
		int u = q.front().first;
		int f = q.front().second;
		q.pop();

		for(int v : g[u]) {
			if(dp[u][f] + 1 < dp[v][f ^ 1]) {
				dp[v][f ^ 1] = dp[u][f] + 1;
				p[v][f ^ 1] = { u, f };
				q.push({v, f ^ 1});
			}
		}
	}

//	for(int i = 1; i <= n; i++)
//		printf("%d : %d %d\n", i, dp[i][0], dp[i][1]);

	for(int i = 1; i <= n; i++) {
		if(out[i] == 0 && dp[i][1] != INT_MAX) {
			printf("Win\n");

			int x = i, y = 1;
			vector <int> ans;

			while(x > 0) {
				ans.push_back(x);
				int nx = p[x][y].first;
				int ny = p[x][y].second;
				x = nx, y = ny;
			}

			reverse(ans.begin(), ans.end());

			for(int o : ans)
				printf("%d ", o);
			printf("\n");

			return 0;
		}
	}

	for(int i = 1; i <= n; i++)
		if(!mk[i])
			dfs1(i);

	for(int i = 1; i <= n; i++)
		mk[i] = 0;

	for(int i = 1; i <= n; i++) {
		int u = ord[i];

		if(!mk[u])
			k++, dfs2(u);
	}

//	for(int i = 1; i <= n; i++)
//		printf("%d : %d %d\n", i, cc[i], sz[cc[i]]);

	for(int i = 1; i <= n; i++)
		mk[i] = 0;

	queue <int> w;
	w.push(s);

	while(!w.empty()) {
		int u = w.front();
		w.pop();

		if(sz[cc[u]] > 1) {
			printf("Draw\n");
			return 0;
		}

		for(int v : g[u])
			if(!mk[v])
				w.push(v);
	}

	printf("Lose\n");
	return 0;
}