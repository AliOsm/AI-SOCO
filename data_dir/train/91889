#include <bits/stdc++.h>
#define ll long long
#define MOD 1000000007

using namespace std;

const double pi = acos(-1);

int n, arr[300005], st[300005 << 2], mn[300005 << 2];

void build(int id = 1, int l = 1, int r = n){
  if(l == r){
    st[id] = arr[l - 1];
    mn[id] = arr[l - 1];
    return;
  }
  int mid = (l + r) >> 1;
  build(id << 1, l, mid);
  build(id << 1 | 1, mid + 1, r);
  st[id] = __gcd(st[id << 1], st[id << 1 | 1]);
  mn[id] = min(mn[id << 1], mn[id << 1 | 1]);
}

int query(int s, int e, int id = 1, int l = 1, int r = n){
  if(s <= l && r <= e) return st[id];
  int mid = (l + r) >> 1;
  if(e <= mid) return query(s, e, id << 1, l, mid);
  if(s > mid) return query(s, e, id << 1 | 1, mid + 1, r);
  return __gcd(query(s, e, id << 1, l, mid), query(s, e, id << 1 | 1, mid + 1, r));
}

int getMin(int s, int e, int id = 1, int l = 1, int r = n){
  if(s <= l && r <= e) return mn[id];
  int mid = (l + r) >> 1;
  if(e <= mid) return getMin(s, e, id << 1, l, mid);
  if(s > mid) return getMin(s, e, id << 1 | 1, mid + 1, r);
  return min(getMin(s, e, id << 1, l, mid), getMin(s, e, id << 1 | 1, mid + 1, r));
}

bool ok(int mid){
  for(int i=0; i<=n - mid; i++){
    int mn = getMin(i + 1, i + mid);
    int g = query(i + 1, i + mid);
    if(mn == g)
      return 1;
  }
  return 0;
}

vector<int> ans;

void getAns(int mid){
  for(int i=0; i<=n - mid; i++){
    int mn = getMin(i + 1, i + mid);
    int g = query(i + 1, i + mid);
    if(mn == g)
      ans.push_back(i + 1);
  }
}

int main()
{
  scanf("%d", &n);
  for(int i=0; i<n; i++)
    scanf("%d", arr + i);
  build();
  int st = 1, en = n;
  while(st < en){
    int mid = (st + en + 1) >> 1;
    if(ok(mid)) st = mid;
    else en = mid - 1;
  }
  getAns(st);
  printf("%d %d\n", ans.size(), st - 1);
  for(int i: ans)
    printf("%d ", i);
  return 0;
}
