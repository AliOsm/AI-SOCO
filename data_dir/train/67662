#include<bits/stdc++.h>
using namespace std;

int sz[1000002], p[1000002];


int find (int x) {
  if (p[x] != x)
    return p[x] = find(p[x]);
  else
    return x;
}

void Union (int x, int y) {
  int X = find(x);
  int Y = find(y);
  if (X != Y) {
    if (sz[Y] < sz[X]) {
      p[Y] = X;
      sz[X] += sz[Y];
    }
    else {
      p[X] = Y;
      sz[Y] += sz[X];
    }
  }
}


struct edge {
  int nr, x, y;
  bool operator < (const edge a) const {
    return nr < a.nr;
  }
} e[1000002];

int n, a[1000002];
long long ans = 0;

void solve () {
  for (int i = 1; i < n; i++)
    e[i].nr = max(a[e[i].x], a[e[i].y]);
  for (int i = 1; i <= n; i++) {
    p[i]= i;
    sz[i] = 1;
  }
  sort(e + 1, e + n);
  for (int i = 1; i < n; i++) {
    ans += 1ll * sz[find(e[i].x)] * sz[find(e[i].y)] * e[i].nr;
    Union(e[i].x, e[i].y);
  }
}




int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(0); cout.tie(0);
  cin >> n;
  for (int i = 1; i <= n; i++)
    cin >> a[i];
  for (int i = 1; i < n; i++)
    cin >> e[i].x >> e[i].y;
  solve();
  for (int i = 1; i <= n; i++)
    a[i] = -a[i];
  solve();
  cout << ans;
  return 0;
}
