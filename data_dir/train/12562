#include <bits/stdc++.h>

using namespace std;

#define SZ(x) ((int)(x).size())
#define PB(x) push_back(x)
#define MEMSET(x,v) memset(x,v,sizeof(x))
#define REP(i,n) for(int i=0;(i)<(n);++(i))
#define x first
#define y second
#define INF (0x3f3f3f3f)

typedef long long LL;
typedef pair<int, int> P2;
template<class A, class B> inline bool mina(A &x, B y) {return (x > y)?(x=y,1):0;}
template<class A, class B> inline bool maxa(A &x, B y) {return (x < y)?(x=y,1):0;}

const int MAXL = 20;

class LazySegmentTree {
public:
    typedef int Update_t;
    typedef LL Query_t;
    typedef vector<int> Value_t;
    typedef int Lazy_t;

    typedef struct tree_st {
        vector<int> in;
        Lazy_t lazy;
        int l, r;
    } TreeNode;
    vector<TreeNode> tree;
    int N; // the number of data
    int tree_size; // the number of tree nodes
    LazySegmentTree() {}
    LazySegmentTree(int n) { build_tree(n); }
    Query_t query(int ll, int rr) { return value_to_result(query(1, ll, rr)); }
    void update(int ll, int rr, Update_t val) { update(1, ll, rr, val); }
private:
    Lazy_t DEF_LAZY = 0;
    // Initialize node
    void initialize_node (int at) {
        tree[at].in = vector<int>(MAXL, 0);
    }
    // Node's value to query's result
    Query_t value_to_result(vector<int> val) {
        LL res = 0;
        for (int i = MAXL - 1; i >= 0; i--) {
            res <<= 1;
            res += val[i];
        }
        return res;
    }
    // Return node's value (considering the given node's value and lazy)
    Value_t node_to_value(int at) {
        if (tree[at].lazy == 0) return tree[at].in;
        int temp[MAXL] = {0};
        int x = tree[at].lazy;
        REP(i, MAXL) {
            temp[i] = x & 1;
            x >>= 1;
        }
        vector<int> res;
        REP(i, MAXL) {
            int num_1 = tree[at].in[i];
            int num_0 = tree[at].r - tree[at].l + 1 - num_1;
            if (temp[i] == 0) {
                res.PB(num_1);
            } else {
                res.PB(num_0);
            }
        }
        return res;
    }
    // Update node's lazy
    void update_lazy(int at, Update_t up_val) {
        tree[at].lazy ^= up_val;
    }
    // Recalculate the parent's value without considering the parent's lazy
    void update_up(int at){
        vector<int> res_l = node_to_value(at * 2);
        vector<int> res_r = node_to_value(at * 2 + 1);
        REP(i, MAXL) {
            tree[at].in[i] = res_l[i] + res_r[i];
        }
    }
    // Update children's lazy
    void update_down(int at){
        tree[at * 2].lazy ^= tree[at].lazy;
        tree[at * 2 + 1].lazy ^= tree[at].lazy;
        tree[at].lazy = 0;
    }
    // Update the result
    void update_result(vector<int> &res, vector<int> q) {
        REP(i, MAXL) {
            res[i] += q[i];
        }
    }
    Value_t query(int at, int ll, int rr){
        if (ll > tree[at].r || rr < tree[at].l) return vector<int>(MAXL, 0);
        if (ll <= tree[at].l && tree[at].r <= rr) {
            return node_to_value(at);
        } else {
            vector<int> res(MAXL, 0);
            update_down(at);
            update_result(res, query(at * 2, ll, rr));
            update_result(res, query(at * 2 + 1, ll, rr));
            update_up(at);
            return res;
        }
    }
    void update(int at, int ll, int rr, Update_t up_val){
        if (ll > tree[at].r || rr < tree[at].l) return ;
        if (ll <= tree[at].l && tree[at].r <= rr) {
            update_lazy(at, up_val);
        } else {
            update_down(at);
            update(at * 2, ll, rr, up_val);
            update(at * 2 + 1, ll, rr, up_val);
            update_up(at);
        }
    }
    void build_tree(int n) {
        N = n; int base = 1; while (base < N) base *= 2; tree_size = base * 2;
        tree = vector<TreeNode> (tree_size);
        init(1, 1, n);
    }
    void init(int at, int ll, int rr) {
        tree[at].l = ll; tree[at].r = rr;
        initialize_node(at);
        if (ll == rr) {
            int x;
            scanf("%d", &x);
            REP(i, MAXL) {
                tree[at].in[i] = x & 1;
                x >>= 1;
            }
        }
        if (ll < rr) {
            int mid = (tree[at].l + tree[at].r) >> 1;
            init(at * 2, tree[at].l, mid);
            init(at * 2 + 1, mid + 1, tree[at].r);
            update_up(at);
        }
    }
};


const int MAXN = 1e5+5;

int N, M;

int main() {
    scanf("%d", &N);
    LazySegmentTree tree(N);
    scanf("%d", &M);
    REP(m, M) {
        int oper;
        scanf("%d", &oper);
        if (oper == 1) {
            int a, b;
            scanf("%d %d", &a, &b);
            printf("%lld\n", tree.query(a, b));
        } else {
            int a, b, x;
            scanf("%d %d %d", &a, &b, &x);
            tree.update(a, b, x);
        }
    }

    return 0;
}
