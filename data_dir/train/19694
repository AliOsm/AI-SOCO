//g++ -g -std=c++11 ./SC.cpp -o ./p
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define ff first
#define ss second
#define rz resize
#define len length
#define nl '\n'

typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;

struct edge{
  ll wt;
};

const int NN = 100000, MM = 100000;

int n,m;
edge E[MM+100];
vpii g[NN+100];

int pre[NN+100];
ll dd[NN+100];
const ll INF = (ll)9e18;
void dijk(int x){
  fill(dd,dd+n+1,INF);
  memset(pre,-1,sizeof pre);
  
  dd[x]=0;
  priority_queue<pair<ll,int> ,vector<pair<ll,int> >,greater<pair<ll,int> > > pq;
  pq.push({dd[x],x});
  
  while(!pq.empty()){
    auto w = pq.top().ff;
    auto u = pq.top().ss;
    pq.pop();
    if(dd[u]<w)
      continue;
    for(auto&e:g[u]){
      auto dv = dd[u]+E[e.ss].wt;
      if(dd[e.ff]>dv){
	dd[e.ff]=dv;
	pre[e.ff]=u;
	pq.push({dv,e.ff});
      }
    }
  }
}

int main(){
  ios::sync_with_stdio(0);
  cin.tie(0),cout.tie(0);
  
  cin>>n>>m;

  for(int e=1;e<=m;e++){
    int u,v;ll w;
    cin>>u>>v>>w;
    g[u].pb({v,e});
    g[v].pb({u,e});
    E[e].wt=w;
  }

  dijk(1);

  if(pre[n]==-1){
    cout<<-1<<endl;
    return 0;
  }
  
  vi path;
  for(int v=n;v!=1;v=pre[v])
    path.pb(v);
  path.pb(1);
  reverse(path.begin(),path.end());

  for(auto&v:path)
    cout<<v<<' ';
  cout<<nl;
  
  return 0;
};
