#include <bits/stdc++.h>
  
using namespace std;
  
template<class T> void ckmin(T &a, T b) { a = min(a, b); }
template<class T> void ckmax(T &a, T b) { a = max(a, b); }
  
#define pb push_back
#define mp make_pair
#define cotu cout
#define itn int
#define Red ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define F first
#define S second
#define sz(x) (int)x.size()
#define all(x) (x).begin(), (x).end()
#define rep(i, n) for(int i = 0; i < n; ++i)
#define repr(i,n) for(int i = n - 1; i >= 0; --i)
#define Rep(i, a, n) for(int i = (a); i <=(n); ++i)
#define repst(i, n) for(auto it = n.begin(); it != n.end(); ++it)
#define Repr(i, a, n) for(int i = (n); i >= (a); --i)
  
#define ordered_set tree<ll , null_type,less_equal<ll >, rb_tree_tag,tree_order_statistics_node_update> 
  
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
typedef long long ll;
  
const int inf = int(1e9);
const int mod = inf + 7;
const int N = 1e6 + 555;
const double PI = acos(-1.0);
 
void solve()
{
	int n;
	cin >> n;
	vector<ll> p;
	for(int i = 0; i < n; ++i) {
		ll x;
		cin >> x;
		p.push_back(x / 100);
	}
	ll x, a, y, b;
	cin >> x >> a >> y >> b;
	ll k;
	cin >> k;
	sort(all(p));
	if(x < y) swap(x, y), swap(a, b);
	multiset<ll> aa, bb, ab;
	ll sum = 0;
	for(ll i = 1; i <= n; ++i){
		if(i % a == 0 && i % b == 0){
			if(aa.empty() && bb.empty()){
				sum += p.back() * (x + y);
				p.pop_back();
			}
			else if(!aa.empty() && !bb.empty()){
				ll A = *aa.rbegin();
				ll B = *bb.rbegin();
				ll C = p.back();
				aa.erase(aa.find(*aa.rbegin()));
				bb.erase(bb.find(*bb.rbegin()));
				p.pop_back();
				aa.insert(B);
				bb.insert(C);
				sum -= A * x;
				sum -= B * y;
				sum += A * (x + y);
				sum += B * x;
				sum += C * y;
			}
			else if(!aa.empty()){
				ll A = *aa.rbegin();
				ll C = p.back();
				aa.erase(aa.find(*aa.rbegin()));
				p.pop_back();
				aa.insert(C);
				sum -= A * x;
				sum += A * (x + y);
				sum += C * x;
			}
			else if(!bb.empty()){
				ll B = *bb.rbegin();
				ll C = p.back();
				bb.erase(bb.find(*bb.rbegin()));
				p.pop_back();
				bb.insert(C);
				sum -= B * y;
				sum += B * (x + y);
				sum += C * y;
			}
		}
		else if(i % a == 0){
			if(bb.empty()){
				sum += p.back() * x;
				aa.insert(p.back());
				p.pop_back();
			}
			else{
				ll B = *bb.rbegin();
				ll C = p.back();
				p.pop_back();
				bb.erase(bb.find(*bb.rbegin()));
				bb.insert(C);
				aa.insert(B);
				sum -= B * y;
				sum += B * x;
				sum += C * y;
			}
		}
		else if(i % b == 0){
			sum += p.back() * y;
			bb.insert(p.back());
			p.pop_back();
		}
		if(sum >= k){
			cout << i << endl;
			return;
		}
	}
	cout << -1 << endl;
}
 
  
int main()
{
	Red;
    int T;
    cin >> T;
    while(T--)
    solve();
    return 0;
}