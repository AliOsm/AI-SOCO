/*  */
#include <iostream>
#include <sstream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <bitset>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
#include <iterator>
#include <iomanip>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define sti				set<int>
#define stpii			set<pair<int, int> >
#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define clr				clear
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1
#define getBits(x)		__builtin_popcount(x)
#define getBitIdx(x)	__builtin_ffs(x)

typedef long long LL;
const int maxn = 50005;
int a[maxn], n;
int pos[maxn], sz[maxn];
int g[maxn][32];
set<int> st;

bool judge(int bound) {
	memset(pos, 0, sizeof(pos));
	bool flag;
	
	st.clear();
	per(i, 0, n) {
		flag = true;
		int r = upper_bound(g[i], g[i]+sz[i], bound) - g[i];
		per(k, 0, r) {
			int x = g[i][k];
			if (!st.count(x)) {
				flag = false;
				st.insert(x);
				break;
			}
		}
		if (flag) return false;
	}
	
	return true;
}

int main() {
	cin.tie(0);
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	scanf("%d", &n);
	rep(i, 0, n) {
		scanf("%d", &a[i]);
	}
	
	sort(a, a+n);
	rep(i, 0, n) {
		int x = a[i], l = 0;
		while (x) {
			g[i][l++] = x;
			x >>= 1;
		}
		// reverse(all(g[i]));
		reverse(g[i], g[i]+l);
		sz[i] = l;
	}
	
	int l, r, mid, bound;
	l = 1;
	bound = r = a[n - 1];
	while (l <= r) {
		mid = ((LL)l + r) >> 1;
		if (judge(mid)) {
			bound = mid;
			r = mid - 1;
		} else {
			l = mid + 1;
		}
	}
	judge(bound);
	for (auto iter=st.begin(); iter!=st.end(); ++iter)
		printf("%d ", *iter);
	putchar('\n');
	
	#ifndef ONLINE_JUDGE
		printf("time = %ldms.\n", clock());
	#endif
	
	return 0;
}
