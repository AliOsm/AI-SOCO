#include <bits/stdc++.h>
using namespace std;

vector<string> ask(int l, int r)
{
  cout << "? " << l << ' ' << r << endl;
  cout.flush();
  vector<string> resp;
  for (int i = l; i <= r; i++)
    for (int j = i; j <= r; j++)
    {
      string s;
      cin >> s;
      resp.push_back(s);
    }
  return resp;
}

void answer(vector<int> ans)
{
  cout << "! ";
  for (int x : ans)
    cout << char(x + 'a');
  cout << endl;
  cout.flush();
  exit(0);
}

vector<int> solve(int n, int a1)
{
  vector<int> ans(n + 1, 0);
  ans[1] = a1;
  auto resp = ask(1, n);
  int cnt[111][26] = {0};
  for (auto s : resp)
  {
    int len = s.size();
    for (auto c : s)
      cnt[len][c - 'a']++;
  }

  cnt[2][a1]--;
  for (int c = 0; c < 26; c++)
    if (cnt[2][c] % 2)
      ans[n] = c;

  for (int len = 3, l = 2, r = n - 1; l <= r; len++, l++, r--)
  {
    for (int i = 1; i < l; i++)
    {
      cnt[len][ans[i]] -= i;
      cnt[len][ans[n - i + 1]] -= i;
    }

    if (l == r)
    {
      for (int c = 0; c < 26; c++)
        if (cnt[len][c])
          ans[l] = c;
      break;
    }

    vector<int> candidates;
    for (int c = 0; c < 26; c++)
      if (cnt[len][c] % len)
        candidates.push_back(c);

    assert(candidates.size() == 1 || candidates.size() == 2);
    ans[l] = candidates[0];
    ans[r] = candidates.back();
  }

  return ans;
}

int main()
{
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  int n;
  cin >> n;
  auto resp0 = ask(1, 1);
  int x = resp0[0][0] - 'a';
  if (n == 1)
    answer({x});

  auto u = solve(n, x);
  auto v = solve(n - 1, x);
  vector<int> ans(n);
  ans[0] = u[1];
  ans[n - 1] = u[n];
  ans[n - 2] = v[n - 1];
  for (int l = 2, r = n - 1; l < r;)
  {
    if (u[r] != v[r])
      swap(u[l], u[r]);
    ans[l - 1] = u[l];
    r--;
    if (r == l)
      break;
    if (v[l] != u[l])
      swap(v[l], v[r]);
    ans[r - 1] = v[r];
    l++;
  }

  answer(ans);
}
