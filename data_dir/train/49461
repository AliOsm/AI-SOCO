#include <bits/stdc++.h>

using namespace std;
#define ll long long
#define pb push_back
#define pf push_front
#define F first
#define S second
#define lp(i, a, b) for (int i=a;i<=(int)b;++i)
#define lp2(i, a, b) for (ll i=a;i>=b;--i)
#define f(x) return cout<<x<<"\n",0
#define pii pair<int,int>
#define pll pair<ll,ll>
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
#define pr(x) cout<<#x<<" = { "<<x<<" } \n"
#define vi vector<int>
#define vl vector<ll>
#define vs vector<string>
#define vii vector<pii>
#define vll vector<pll>
#define FAST ios::sync_with_stdio(0),ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0)
#define clr(c, x) memset(c,x,sizeof(c));
const int dx[] = {0, 1, 0, -1, 1, -1, 1, -1};
const int dy[] = {1, 0, -1, 0, 1, -1, -1, 1};
const int N = (int) 5e5 + 5, L = 18;
const ll mod = (int) 1e9 + 7;
pii v[N];
vii ST[N * 4];
vi g[N];
int n, x, y;

inline int BS(int l, int r, int tar) {
    int ans = l;
    while (l <= r) {
        int mid = (l + r) >> 1;
        if (v[mid].F <= tar) l = mid + 1, ans = mid;
        else r = mid - 1;
    }
    return ans;
}

inline void build(int l = 1, int r = n, int idx = 1) {
    if (l == r) {
        ST[idx].pb({-v[l].S, l});
        return;
    }
    int mid = (l + r) >> 1;
    build(l, mid, idx << 1);
    build(mid + 1, r, idx << 1 | 1);
    sort(all(ST[idx << 1]));
    sort(all(ST[idx << 1 | 1]));
    ST[idx].resize(ST[idx << 1].size() + ST[idx << 1].size());
    merge(all(ST[idx << 1]), all(ST[idx << 1 | 1]), ST[idx].begin());
}

inline int find(int s, int e, int q, int l = 1, int r = n, int idx = 1) {
    if (l > e || r < s) return 0;
    if (s <= l && e >= r) {
        int lo = 0, hi = ST[idx].size() - 1, ans = -1;
        while (lo <= hi) {
            int mid = (lo + hi) >> 1;
            if (ST[idx][mid].F <= q) lo = mid + 1, ans = mid;
            else hi = mid - 1;
        }
        lp(i, 0, ans) {
            if (s == ST[idx][i].S) continue;
            g[s].pb(ST[idx][i].S);
            g[ST[idx][i].S].pb(s);
        }
        return (ans + 1);
    }
    int mid = (l + r) >> 1;
    int a = find(s, e, q, l, mid, idx << 1);
    int b = find(s, e, q, mid + 1, r, idx << 1 | 1);
    return (a + b);
}

bool vis[N];

void dfs(int i, int par) {
    vis[i] = true;
    for (auto u:g[i]) {
        if (u == par) continue;
        if (vis[u]) {
            //cout << u << "\n";
            cout << "NO\n";
            exit(0);
        }
        dfs(u, i);
    }
}

int main() {
    FAST;
    cin >> n;
    lp(i, 1, n) {
        cin >> x >> y;
        v[i] = {x, y};
    }
    sort(v + 1, v + n + 1);
    build();
    int tot = 0;
    lp(i, 1, n) {
        int r = BS(i, n, v[i].S);
        tot += find(i, r, v[i].S * -1);
        tot--;
        //cout << tot << "\n";
        if (tot > n - 1) f("NO");
    }
    if (tot == n - 1) {
        lp(i, 1, n) if (!vis[i]) dfs(i, i);
        cout << "YES\n";
    } else cout << "NO\n";
    return 0;
}