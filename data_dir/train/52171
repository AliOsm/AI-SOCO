#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
int n, m;
ll k;
const int MXN=100*1000;
const int MXM=5;
ll a[MXN][MXM];

int mx(const multiset<int>& Q)
{
    assert(!Q.empty());
    auto it=Q.rbegin();
    return *it;
}

void solve()
{
    int best_subseg=0;
    vector<int> ans(m, 0);

    multiset<int> Q[MXM];

    int L=0, R=0;
    for(L=0; L<n; L++)
    {
        //cout << L << ' ' << R << endl;

        ll ss=0LL;
        for(int j=0; j<m; j++) ss+=a[L][j];
        if(ss>k)
        {
            for(int j=0; j<m; j++) Q[j].clear();
            continue;
        }

        if(R<=L)
        {
            for(int j=0; j<m; j++) Q[j].insert(a[L][j]);
            R=L+1;
        }


        while(R<n)
        {
            //cout << "HERE" << L << " " << R << endl;
            ll new_ss=0LL;
            for(int j=0; j<m; j++) new_ss+=max(a[R][j], (ll)mx(Q[j]));
            if(new_ss<=k)
            {
                for(int j=0; j<m; j++) Q[j].insert(a[R][j]);
                R++;
            }
            else break;
        }
        assert(L<n);
        assert(R<=n);

        int curr_subseg=R-L+1;
        if(curr_subseg>best_subseg)
        {
            best_subseg=curr_subseg;
            for(int j=0; j<m; j++) ans[j]=mx(Q[j]);
        }

        for(int j=0; j<m; j++)
        {
            Q[j].erase(Q[j].find(a[L][j]));
        }
    }
    //cout << "DONE\n";

    for(int j=0; j<m; j++) cout << ans[j] << ' ';
}

int main()
{
    //scanf("")
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    cin >> n >> m >> k;
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<m; j++) cin >> a[i][j];
    }
    solve();
    return 0;
}
