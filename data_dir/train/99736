#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int maxn = 2e5+5;

struct Query{
    int l, r;

    Query() {};
    Query(int a, int b) {
        l = a;
        r = b;
    }
} q[maxn], order[maxn];

int n, t, arr[maxn], block, cnt[1000005];
map <pair<int, int>, ll> mp;

bool cmp(Query a, Query b){
    if (a.l/block != b.l/block) {
        return a.l/block < b.l/block;
    }

    return a.r < b.r;
}

ll sq(int val){
    return (1LL * val * val);
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);

    cin >> n >> t;
    for (int i = 0; i < n; i++){
        cin >> arr[i];
    }

    for (int i = 0; i < t; i++){
        cin >> q[i].l >> q[i].r;
        q[i].l--;
        q[i].r--;
        order[i] = q[i];
    }

    block = (int)sqrt(n);
    sort(q, q + t, cmp);

    int cl = 0, cr = 0;
    ll sum = 0;
    for (int i = 0; i < t; i++){
        int l = q[i].l, r = q[i].r;

        while (cl < l){
            sum -= (1LL * sq(cnt[arr[cl]]) * arr[cl]);
            cnt[arr[cl]]--;
            sum += (1LL * sq(cnt[arr[cl]]) * arr[cl]);
            cl++;
        }

        while (cl > l){
            sum -= (1LL * sq(cnt[arr[cl - 1]]) * arr[cl - 1]);
            cnt[arr[cl - 1]]++;
            sum += (1LL * sq(cnt[arr[cl - 1]]) * arr[cl - 1]);
            cl--;
        }

        while (cr <= r){
            sum -= (1LL * sq(cnt[arr[cr]]) * arr[cr]);
            cnt[arr[cr]]++;
            sum += (1LL * sq(cnt[arr[cr]]) * arr[cr]);
            cr++;
        }

        while (cr > r + 1){
            sum -= (1LL * sq(cnt[arr[cr - 1]]) * arr[cr - 1]);
            cnt[arr[cr - 1]]--;
            sum += (1LL * sq(cnt[arr[cr - 1]]) * arr[cr - 1]);
            cr--;
        }

        //printf("%I64d\n", sum);
        mp[{l, r}] = sum;
    }

    for (int i = 0; i < t; i++) printf("%I64d\n", mp[{order[i].l, order[i].r}]);
    return 0;
}
