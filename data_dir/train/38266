#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
#define pb push_back
using namespace std;


template <class _T> inline void rd(_T &_a) {
	int _f=0,_ch=getchar();_a=0;
	while(_ch<'0' || _ch>'9'){if(_ch=='-')_f=1;_ch=getchar();}
	while(_ch>='0' && _ch<='9')_a=(_a<<1)+(_a<<3)+_ch-'0',_ch=getchar();
	if(_f)_a=-_a;
}

const int N = 1e5 + 10;
const int M = 12;
const int mod = 1e9 + 7;
const int p1 = 97, p2 = 151;
int pp1, pp2;
int n, m;
int a[M][N], loc[M][N];
ll ha[M][N], hb[M][N];
ll pp1i[N], pp2i[N];
ll ans = 0;

ll powmod(ll a, ll b){
	if(b == 0) return 1;
	if(b & 1) return a * powmod(a, b - 1) % mod;
	return powmod(a * a % mod, b / 2);
}

int h1(int i, int j, int k){
	ll v = (ha[i][k] - ha[i][j - 1] + mod) % mod;
	v = v * pp1i[j] % mod;
	return v;
}

int h2(int i, int j, int k){
	ll v = (hb[i][k] - hb[i][j - 1] + mod) % mod;
	v = v * pp2i[j] % mod;
	return v;
}

bool allequal(int spos, int len){
	int x = h1(1,loc[1][spos], loc[1][spos] + len - 1);
	int y = h2(1,loc[1][spos], loc[1][spos] + len - 1);

	for(int i = 2; i <= m; i++){
		int xx = h1(i,loc[i][spos], loc[i][spos] + len - 1);
		int yy = h2(i,loc[i][spos], loc[i][spos] + len - 1);
		if(xx != x || yy != y) return false;
	}
	return true;

}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    pp1 = powmod(p1,mod-2);
    pp2 = powmod(p2,mod-2);

    pp1i[0] = 1;
    pp2i[0] = 1;

   	for(int i = 1; i < N; i++){
   		pp1i[i] = pp1i[i - 1] * pp1 % mod;
   		pp2i[i] = pp2i[i - 1] * pp2 % mod;
   	}

    rd(n); rd(m);
    for(int i = 1; i <= m; i++) for(int j = 1; j <= n; j++) rd(a[i][j]);
    for(int i = 1; i <= m; i++){
    	ll pa = p1, pb = p2;
    	for(int j = 1; j <= n; j++){
    		loc[i][a[i][j]] = j;
    		ha[i][j] = (ha[i][j - 1] + pa * a[i][j]) % mod;
    		hb[i][j] = (hb[i][j - 1] + pb * a[i][j]) % mod;
    		pa = pa * p1 % mod;
    		pb = pb * p2 % mod;
    	}
    }
    
    for(int i = 1; i <= n; i++){
    	vector<int> locs(m + 1, 0);
    	int lo = 1, hi = n;
    	for(int j = 1; j <= m; j++){
    		locs[j] = loc[j][i];
    		hi = min(hi, n + 1 - locs[j]);
    	}

    	ll z = 1;
    	while(lo <= hi){
    		int mid = (lo + hi) / 2;
    		if(allequal(i, mid)){
    			z = mid; lo = mid + 1;
    		}
    		else hi = mid - 1;
    	}
    	// cout << z << endl;
    	ans += z;
    }
	
	cout << ans << endl;


    return 0;
}
