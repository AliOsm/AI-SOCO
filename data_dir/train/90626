#include <bits/stdc++.h>

using namespace std;

int n;
vector<int> v[500005];
long long dp[500005], da[500005], ans = LLONG_MAX;
pair<long long, long long> p[500005], q[500005];

void dfs(int a, int b) {
	dp[a] = 1;
	if (v[a].size() == 1) {
		da[a] = 1;
		return;
	}
	for (int i : v[a])
		if (i != b) {
			dfs(i, a);
			dp[a] += dp[i];
		}
	da[a] = LLONG_MAX;
	int ps = 0, qs = 0;
	for (int i : v[a])
		if (i != b) {
			long long tmp = dp[a] - dp[i];
			da[a] = min(da[a], tmp * tmp + da[i]);
			p[ps++] = {-dp[i], da[i]};
		}
	sort(p, p + ps);
	for (int i = 0; i < ps; i++) {
		if (qs == 0 || p[i].first != q[qs - 1].first) {
			for (int j = 0; j < qs; j++) {
				long long tmp = n + p[i].first + q[j].first;
				ans = min(ans, p[i].second + q[j].second + tmp * tmp);
			}
			if (qs == 0 || p[i].second < q[qs - 1].second)
				q[qs++] = p[i];
		} else {
			long long tmp = n + p[i].first + q[0].first;
			ans = min(ans, p[i].second + q[0].second + tmp * tmp);
		}
	}
}

int main() {
	scanf("%d", &n);
	if (n == 2) {
		puts("2");
		return 0;
	}
	for (int i = 1; i < n; i++) {
		int ta, tb;
		scanf("%d%d", &ta, &tb);
		v[ta].push_back(tb);
		v[tb].push_back(ta);
	}
	for (int i = 1; i <= n; i++)
		if (v[i].size() != 1) {
			dfs(i, 0);
			break;
		}
	ans = (long long)n * (n - 1) - (ans - n) / 2;
	printf("%lld\n", ans);
}
