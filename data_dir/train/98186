#include <stdio.h>
#include <algorithm>
#include <vector>

using namespace std;

int ini[2012][2012], sol[2012][2012], cc[2012][2012];
vector <int> G[2012];
bool vis[2012];

struct chestie {
    int x, y, val;
} xx[2222 * 2222];

struct comp {
    inline bool operator () (chestie A, chestie B) {
        return A.val < B.val;
    }
};

int dj[2222];

int father(int X) {
    return dj[X] = (X == dj[X] ? X : father(dj[X]));
}

int unite(int A, int B) {
    dj[father(A)] = father(B);
}

void dfs(int from, int nod, int c) {
    vector <int> :: iterator it;
    vis[nod] = 1;
    sol[from][nod] = c;
    if (sol[from][nod] != ini[from][nod])
        return ;
    for (it = G[nod].begin(); it != G[nod].end(); ++it)
        if (!vis[*it])
            dfs(from, *it, c + cc[nod][*it]);
}

int main() {
    //freopen("data.in", "r", stdin);
    //freopen("data.out", "w", stdout);

    int n, cnt = 0;
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= n; ++j) {
            scanf("%d", &ini[i][j]);
            xx[++cnt].x = i;
            xx[cnt].y = j;
            xx[cnt].val = ini[i][j];
        }

    for (int i = 1; i <= n; ++i)
        dj[i] = i;
    sort(xx + 1, xx + n * n + 1, comp());
    for (int i = 1; i <= n * n; ++i) {
        int nodX = xx[i].x;
        int nodY = xx[i].y;
        if (father(nodX) == father(nodY))
            continue;
        G[nodX].push_back(nodY);
        G[nodY].push_back(nodX);
        cc[nodX][nodY] = cc[nodY][nodX] = xx[i].val;
        unite(nodX, nodY);
    }

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j)
            vis[j] = 0;
        dfs(i, i, 0);
    }

    bool is = true;
    for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= n; ++j)
            if (ini[i][j] != sol[i][j] || (sol[i][j] == 0 && i != j))
                is = false;

    if (is)
        printf("YES");
    else
        printf("NO");

    return 0;
}
