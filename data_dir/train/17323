#include<bits/stdc++.h>
#define si(x) scanf("%d",&x)
#define sii(x,y) scanf("%d %d",&x,&y)
#define siii(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define su(x) scanf("%u",&x)
#define sl(x) scanf("%ld",&x)
#define sli(x) scanf("%lld",&x)
#define slii(x,y) scanf("%lld %lld",&x,&y)
#define sliii(x,y,z) scanf("%lld %lld %lld",&x,&y,&z)
#define slu(x) scanf("%llu",&x)
#define sf(x) scanf("%f",&x)
#define slf(x) scanf("%lf",&x)
#define slff(x,y) scanf("%lf %lf",&x,&y)
#define slfff(x,y,z) scanf("%lf %lf %lf",&x,&y,&z)
#define sc(x) scanf("%c",&x)
#define ss(x) scanf("%s",x)
#define pf printf
#define fpf fprintf
#define pb push_back
#define f(i,x,y,z) for(int i=x;i<y;i=i+z)
#define f1(i,x,y,z) for(int i=x;i>y;i=i-z)
#define MAX ((int)(1e8))
#define pi 2*acos(0)
#define mp make_pair
#define M ((ll)(1e9+7))
#define xx first
#define yy second
#define NN 4005
#define N ((int)(2e5+10))
#define vc vector
#define pq priority_queue
#define Q queue
#define eps 1e-12


using namespace std;

typedef long long int ll;
typedef unsigned long long int lu;

char s[N], bin[N], binn[N];




int cmp_for_sa(int *r,int a,int b,int l){
    return (r[a]==r[b]) && (r[a+l]==r[b+l]);
}
int wa[N],wb[N],wws[N],wv[N];
int sfx_ar[N],lcp[N];



void DA(int *r,int *rnk,int n,int m){
    int i,j,p,*x=wa,*y=wb,*t;
    for(i=0;i<m;i++) wws[i]=0;
    for(i=0;i<n;i++) wws[x[i]=r[i]]++;
    for(i=1;i<m;i++) wws[i]+=wws[i-1];
    for(i=n-1;i>=0;i--) rnk[--wws[x[i]]]=i;
    for(j=1,p=1;p<n;j*=2,m=p)
    {
        for(p=0,i=n-j;i<n;i++) y[p++]=i;
        for(i=0;i<n;i++) if(rnk[i]>=j) y[p++]=rnk[i]-j;
        for(i=0;i<n;i++) wv[i]=x[y[i]];
        for(i=0;i<m;i++) wws[i]=0;
        for(i=0;i<n;i++) wws[wv[i]]++;
        for(i=1;i<m;i++) wws[i]+=wws[i-1];
        for(i=n-1;i>=0;i--) rnk[--wws[wv[i]]]=y[i];
        for(t=x,x=y,y=t,p=1,x[rnk[0]]=0,i=1;i<n;i++)
            x[rnk[i]]=cmp_for_sa(y,rnk[i-1],rnk[i],j)?p-1:p++;
    }
}
void cal_lcp(int *r,int *rnk,int n){
    int i,j,k=0;
    for(i=1;i<=n;i++) sfx_ar[rnk[i]]=i;
    for(i=0;i<n;lcp[sfx_ar[i++]]=k)
        for(k?k--:0,j=rnk[sfx_ar[i]-1];r[i+k]==r[j+k];k++);
}

int rnk[N],data[N],n,p,q;


void Deal (char *A)
{
    n = strlen(A) ;
    for (int i = 0 ; i < n ; i++) {
        data[i] = A[i] ;
    }
    DA(data,rnk,n+1,128);
    cal_lcp(data,rnk,n);
}

void suffix_array(char *str){
    Deal(str) ; /// returns 1 based SA
    for (int i = 0 ; i < n ; i++) { /// transforming it into 0-based SA
        rnk[i] = rnk[i+1] ;
        lcp[i] = lcp[i+2] ;
        sfx_ar[i]--;
    }
}


vector < int > v[N];

int par[N], sum[N], l[N], r[N];

int findpar(int n)
{
    if(n==par[n]) return n;
    return par[n] = findpar(par[n]);
}

int main()
{
    int n, i, j, a, b;
    ll ans = 0, tmp;
    scanf("%d",&n);
    scanf("%s %s",s,bin);
    ///printf("%s\n%s\n",s,bin);
    for(i = 0; i<n/2; i++){
        swap(s[i],s[n-1-i]);
        swap(bin[i],bin[n-1-i]);
    }
    for(i = 0; i<n; i++){
        if(bin[i]=='0'){
            ans = n-i;
            break;
        }
    }



    ///printf("%s %d\n",s,strlen(s));
    ///printf("%s %d\n",bin,strlen(bin));
    suffix_array(s);

    ///for(i = 0; i<n; i++) cout<<sfx_ar[i]<<" "<<rnk[i]<<" "<<lcp[i]<<endl;

    for(i = 0; i<n; i++) binn[i] = bin[rnk[i]];
    binn[n] = '\0';
    ///printf("%s\n",binn);

    for(i = 1; i<=n; i++) sum[i] = sum[i-1] + (binn[i-1]=='1');
    for(i = 0; i<n-1; i++){
        par[i] = i;
        l[i] = r[i] = i;
        v[lcp[i]].pb(i);
    }
    tmp = 0;
    for(i = n-1; i>0; i--){
        for(j = 0; j<v[i].size(); j++){
            lcp[v[i][j]] = -1;
            b = findpar(v[i][j]);
            if(v[i][j]>0 && lcp[v[i][j]-1]==-1){
                a = findpar(v[i][j]-1);
                l[b] = l[a];
                ///r[v[i][j]] = r[a];
                par[a] = b;
            }
            if(v[i][j]<n-2 && lcp[v[i][j]+1]==-1){
                a = findpar(v[i][j]+1);
                ///l[v[i][j]] = l[a];
                r[b] = r[a];
                par[a] = b;
            }
            tmp = max(tmp,(ll)(r[b]-l[b]+2-(sum[r[b]+2]-sum[l[b]])));
        }
        ans = max(ans,(ll)i*tmp);
    }

    printf("%lld\n",ans);
    return 0;
}
