#include <bits/stdc++.h>

using namespace std;

#define ok printf("ok\n");
#define pf printf
#define sc scanf
#define br printf("\n")

#define scs(a) scanf("%s",a)
#define sc1(a) scanf("%d",&a)
#define sc2(a,b) scanf("%d %d",&a,&b)
#define sc3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define sc1l(a) scanf("%lld",&a)
#define sc2l(a,b) scanf("%lld %lld",&a,&b)
#define sc3l(a,b,c) scanf("%lld %lld %lld",&a,&b,&c)
#define sc1d(a) scanf("%lf",&a)
#define sc2d(a,b) scanf("%lf %lf",&a,&b)
#define sc3d(a,b,c) scanf("%lf %lf %lf",&a,&b,&c)
#define pfs(a) printf("%s",a)
#define pf1(a) printf("%d",a)
#define pf2(a,b) printf("%d %d",a,b)
#define pf1l(a) printf("%lld",a)
#define pf2l(a,b) printf("%lld %lld",a,b)
#define pf1d(a) printf("%lf",a)
#define pf2d(a,b) printf("%lf %lf",a,b)

#define pii pair<int,int>
#define pll pair<long long,long long>
#define mp make_pair
#define F first
#define S second
#define pb push_back

#define mem0(a) memset(a,0,sizeof(a))
#define mem1(a) memset(a,-1,sizeof(a))

#define read freopen("input.txt","r",stdin)
#define write freopen("output.txt","w",stdout)

long long inline gcd(long long x,long long y){return !y?(long long)abs(x):gcd(y,x%y);}  //returns always positive gcd
long long inline lcm(long long a,long long b){return ((long long)abs((a/gcd(a,b))*b));} //returns always positive lcm
double inline cartesian_dist(double x1,double y1,double x2,double y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}

long long bigmod(long long b,long long p,long long m){              //for both positive and negative base
    if(!p)return 1%m;
    else if(p&1)return (((b%m)+m)%m*bigmod(b,p-1,m))%m;
    else {long long ret=bigmod(b,p/2,m);return (ret*ret)%m;}
}
// inverse will exist if and only if gcd(a,m) is 1
long long inverse(long long a,long long m){return bigmod(a,m-2,m);}  //if Mod is prime
long long extended(long long a,long long m){
    long long oldr=a,r=m,oldans=1,ans=0,quotient;
    while(r){
        quotient=oldr/r;
        oldr=oldr-r*quotient;
        swap(oldr,r);
        oldans=oldans-ans*quotient;
        swap(oldans,ans);
    }
    return ((oldans%m)+m)%m;
}

//template<class t1,class t2>  bool check_bit(t1 &mask,t2 i){return mask&((t1)1<<i);}
//template<class t1,class t2>  void set_bit(t1 &mask,t2 i){mask=mask|((t1)1<<i);}
//template<class t1,class t2>  void reset_bit(t1 &mask,t2 i){mask=mask&~((t1)1<<i);}


typedef long long ll;
const double PI=acos(-1.0);
const double eps=10E-12;
# define inf (ll)1e18

ll MOD=101LL;

ll n,x,y,cnt[2*(int)1e6+5],sum[2*(int)1e6+5],maxVal=0;

int main(){
    sc3l(n,x,y);
    for(int i=1,ai;i<=n;i++){
        sc1(ai);
        ++cnt[ai];
        maxVal=max(maxVal,(ll)ai);
    }
    for(int i=1;i<=2*maxVal;i++){
        sum[i]=i*cnt[i];
        sum[i]+=sum[i-1];
        cnt[i]+=cnt[i-1];
    }
    //ok;

    //for(int i=1;i<=maxVal;i++)pf("%4lld",cnt[i]);br;
    //for(int i=1;i<=maxVal;i++)pf("%4lld",sum[i]);br;
    ll ans=n*x;
    for(int i=2;i<=2*maxVal;i++){
        ll newVal=0,used=n;
        for(int j=i;j<=2*maxVal;j+=i){
            int canCover=max(j- (int)(x/y),j-i+1);

            newVal+=((cnt[j]-cnt[canCover-1])*(ll)j-(sum[j]-sum[canCover-1]))*y;
            used-=(cnt[j]-cnt[canCover-1]);
            //if(i==2)cout<<canCover<<" "<<j<<" "<<newVal<<endl;
        }
        //cout<<newVal<<" "<<used<<" "<<x<<endl;
        ans=min(ans,newVal+used*x);
    }
    pf1l(ans);br;

    return 0;
}
