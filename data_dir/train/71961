//**KEEP IT SHORT AND SIMPLE**

#include <bits/stdc++.h>
#define IO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define FILES freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define REP(i,a,b) for (int i = a; i < b; i++)
#define NL '\n'
#define F first
#define S second
#define dot(a, b) (conj(a) * (b)).real()
#define cross(a, b) (conj(a)* (b)).imag()
using namespace std;
typedef long long ll;
typedef long double ld;
typedef bool bl;
typedef vector < vector<long long> > vvl;
typedef vector <long long> vll;
typedef pair <long long, long long> pll;
typedef map <long long, long long> mll;
typedef map <long long, bool> mlb;
typedef priority_queue<long long, vector<long long>, greater<long long> > minPq;
typedef tuple<ll, ll, ll> line;
typedef complex<double> point;
const double pi = 2 * acos(0.0);
const int OO = 0x3f3f3f3f;
const ll Mod = 998244353;
ll n, z, dp[1002][2002][3][3];
ll solve(ll i, ll k, bl w, bl b)
{
    if(i == n)          return (k + w + b == z);
    if(~dp[i][k][w][b]) return dp[i][k][w][b];
    ll ans;
    if(w && b)  ans = solve(i + 1, k, w, b) + solve(i + 1, k + 2, w, b) + solve(i + 1, k + 1, w, 0) + solve(i + 1, k + 1, 0, b);
    else if(w)  ans = solve(i + 1, k, w, b) + 2 * solve(i + 1, k, w, 1) + solve(i + 1, k + 1, 0, 1);
    else if(b)  ans = solve(i + 1, k, w, b) + 2 * solve(i + 1, k, 1, b) + solve(i + 1, k + 1, 1, 0);
    else        ans = solve(i + 1, k, 1, 0) + solve(i + 1, k, 0, 1) + 2 * solve(i + 1, k, 1, 1);
    return dp[i][k][w][b] = ans % Mod;
}
int main()
{
    IO
    cin >> n >> z;
    memset(dp, -1, sizeof dp);
    cout << solve(0, 0, 0, 0);
    return 0;
}
