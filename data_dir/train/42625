#include <string.h>
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <set>
 
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
 
#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf
 
#define pf printf
#define mp make_pair
 
using namespace std;
const int N = 410000;
const int mod = 1000000007;

int n,k;
int a[N];
ll sb[N];
map<ll,vector<ll>> ct;

ll pw(ll a, int b) {
	ll ret = 1;
	while(b>0) {
		if(b&1) ret = (ret * a);
		a = a*a;
		b>>=1;
	}
	return ret;
}

ll ftt[N],nd[N];

void frac(ll t){
	ll ft1 = 1;
	ll ft2 = 1;
	ll m = t;
	for(ll i = 2; i *i <=t; ++i) {
		if(t%i==0){
			int num = 0;
			while(t%i==0) {
				t/=i;
				num++;
			}
			num %=k;
			if(num==0) {
				continue;
			}
			ft1 *= pw(i,num);
			ft2 *= pw(i,k-num);
		}
	}
	if(t>1){
		ft1 *= t;
		ft2 *= pw(t,k-1);
	}
	ftt[m] = ft1;
	nd[m] = ft2;
	//printf("m = %lld ft1 = %lld ft2 = %lld\n",m,ft1,ft2);
	ct[ft1].pb(m);
}

int main(){
	cin>>n>>k;
	fr(i,0,n) {
		sf("%d",&a[i]);
		frac(a[i]);
	}
	ll ans = 0;
	fr(i,0,n) {
		int m = a[i];
		//printf("i = %d a = %d ftt = %lld need = %lld\n",i,a[i],ftt[m],nd[m]);
		if(ftt[m]==-1)continue;
		//printf("ct = %zd\n",ct[nd[m]].size());
		ans +=ct[nd[m]].size();
		if(nd[m]==ftt[m])ans--;
		//printf("ans = %lld\n",ans);
	}
	cout<<ans/2<<endl;
}

