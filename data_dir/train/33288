#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>

#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 1000000007
#define PI 3.14159265

using namespace std;

typedef unsigned long long ull;

bool is_prime(int n) {

    for (int i = 2; i * i <= n; ++i) {
            if (n % i == 0) {
                  return false;
            }
    }
    return true;
}

inline ll getPow(ll a,ll b){
    ll res = 1,tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
          /* res %= mod;*/
       }
       tp *= tp;
      /* tp %= mod;*/
       b >>= 1ll;
    }
    return res;
}

inline ll nxt() {
    ll x;
    scanf("%lld", &x);
    return x;
}

void ok() {
     puts("YES");
     exit(0);
}

void no() {
     puts("NO");
     exit(0);
}
ll xx[] = {-1, 1, 0, 0};
ll yy[] = {0, 0, -1, 1};

bool is_end(vector<ll> mas) {
    make_unique(mas);
    return mas.size() == 1;
}
int main()
{
    ll n = nxt();
    vector<ll> mas(n);
    vector<vector<ll>> ans;
    for(int i = 0; i < n; i++) {
           mas[i] = nxt();
    }
    while(true) {
         if(is_end(mas)) {
              break;
         }
         vector<pair<ll, ll> > cur(n);

         for(int i = 0; i < n; i++) {
                cur[i] = {mas[i], i};
         }
         sort(all(cur));
         reverse(all(cur));
         ll k = 0;
         while(k < n && (k < 2 || cur[k].first == cur[0].first)) {
                  k++;
         }
         if(k % 2 == 0) {
               for(int i = 0; i < k; i += 2) {
                      ll ind1 = cur[i].second;
                      ll ind2 = cur[i+1].second;
                      vector<ll> te(n, 0);
                      te[ind1] = 1;
                      te[ind2] = 1;
                      ans.push_back(te);
               }
         }
         else {
               ll id_1 = cur[0].second;
               ll id_2 = cur[1].second;
               ll id_3 = cur[2].second;
               vector<ll> t(n, 0);
               t[id_1] = 1;
               t[id_2] = 1;
               t[id_3] = 1;
               ans.push_back(t);
               for(int i = 3; i < k; i += 2) {
                      ll ind1 = cur[i].second;
                      ll ind2 = cur[i+1].second;
                      vector<ll> te(n, 0);
                      te[ind1] = 1;
                      te[ind2] = 1;
                      ans.push_back(te);
               }
         }
         for(int i = 0; i < k; i++) {
                ll ind = cur[i].second;
                mas[ind] = max(mas[ind] - 1, 0ll);
         }
    }
    cout << mas.front() << endl << ans.size() << endl;
    for(int i = 0; i < ans.size(); i++) {
           for(int j = 0; j < n; j++) {
                  cout << ans[i][j];
           }
           cout << endl;
    }
    return 0;
}
