#include<iostream>
#include<vector>
#include<sstream>
#include<algorithm>
#include<numeric>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<complex>
#include<set>
#include<map>
#include<queue>
#include<cassert>

using namespace std;

#define rep(i,n) for(int i=0;i<n;i++)
#define rp(i,c) rep(i,(c).size())
#define fr(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define pb push_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()
#define dbg(x) cerr<<#x<<" = "<<(x)<<endl

typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int,int> pi;
typedef long long ll;

const int inf=1<<28;
const double INF=1e12,EPS=1e-9;

int n,m;
int v[200000];
vector<vi> g;
map<pi,int> dir;

void dfs(int c){
	v[c]=1;
	rep(i,g[c].size()){
		int to=g[c][i];
		if(!dir.count(mp(c,to))){
			dir[mp(c,to)]=1; dir[mp(to,c)]=0;
			if(!v[to])dfs(to);
		}
	}
}
int  rdfs(int c){
	v[c]=1;
	int res=1;
	rep(i,g[c].size()){
		int to=g[c][i];
		if(dir[mp(c,to)]==0&&!v[to])res+=rdfs(to);
	}
	return res;
}
void run()
{
	cin>>n>>m;
	g.resize(n);
	rep(i,m){
		int a,b; cin>>a>>b;
		g[--a].pb(--b); g[b].pb(a);
	}
	dfs(0);
	memset(v,0,sizeof(v));
	if(rdfs(0)<n){
		cout<<0<<endl; return;
	}
	fr(i,dir)if(i->second)cout<<i->first.first+1<<" "<<i->first.second+1<<endl;
}

int main()
{
#ifndef ONLINE_JUDGE
	int cs=3;rep(i,cs)
#endif
	run();
}
