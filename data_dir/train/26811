#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define f(i, n) for(int i=0; i<n; i++)
#define rf(i, n) for(int i=n-1; i>=0; i--)
#define pb push_back



int main(){
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	int x,y, a, b;
	cin>>x>>y>>a>>b;
	int cnt=0;
	for(int i=b; i<=y; i++){
		for(int j=a; j<=x; j++){
			if (j>i) cnt++;
		}
	}
	cout<<cnt<<'\n';
	for(int i=a; i<=x; i++ ){
		for(int j=b; j<=y; j++){
			if (j<i) cout<<i<<' '<<j<<'\n';
		}
	}
}



/*	int n, m;
	cin>>n>>m;
	string s; cin>>s;
	vector<vector<int> >dp(n+1, vector<int>(27));
	int deg[n+1]={0};
	vector<vector<int> >gp(n+1);
	for(int i=0;i<m;i++){
		int a,b;
		cin>>a>>b;
		gp[a].pb(b);
		deg[b]++;
	}
	queue<int>work;
	for(int i=0; i<n+1; i++){
		if (deg[i]==0) work.enqueue(i);
	}
	int cnt=0;
	while (!work.empty() && cnt<=n){
		int node=work.top();
		dp[node][s[node-1]-96]++;
		for(auto a: gp[node]){
			for(int j=0; j<27;j++){
				dp[a][j]+=dp[node][j];
			}
			deg[a]--;
			if (!deg[a]) work.enqueue(a);
		}
		work.pop();
		cnt++;
	}
	if (cnt!=n) cout<<-1;
	else 
	
}
	/* 
   for(int i=0; i<n; i++){
   	for(int j=0; j<m; j++){
   		cout<<h[i][j]<<' '<<v[i][j]<<'\n';
   		if (h[i][j]>=k) ans++;
   		if (v[i][j]>=k) ans++;
   		if (k==1) ans--;
   		cout<<ans<<' ';
	   }
   }
   cout<<ans;
}*/
