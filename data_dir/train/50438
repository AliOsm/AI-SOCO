/*
 * @author khokharnikunj8
 */

#include <bits/stdc++.h>

using namespace std;

const int MAXN = 200005;

vector<int> G[MAXN];
int values[MAXN];
int nodes;
int ans[MAXN];
int lower[MAXN];

void dfs(int node, int parent) {
    lower[node] = max(lower[node], values[node]);
    for (int i : G[node]) {
        if (i == parent) continue;
        dfs(i, node);
        lower[node] += max(0, lower[i]);
    }
}

void dfs1(int node, int parent, int value) {
    ans[node] = max(ans[node], lower[node] + max(0, value));
    for (int i : G[node]) {
        if (i == parent) continue;
        dfs1(i, node, lower[node] + max(0, value) - max(0, lower[i]));
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> nodes;
    for (int i = 1; i <= nodes; i++) {
        cin >> values[i];
        if (values[i] == 0) values[i]--;
    }
    for (int i = 1; i <= nodes; i++) ans[i] = lower[i] = INT_MIN;
    for (int i = 0; i < nodes - 1; i++) {
        int u, v;
        cin >> u >> v;
        G[u].push_back(v);
        G[v].push_back(u);
    }
    dfs(1, -1);
    dfs1(1, -1, 0);
    for (int i = 1; i <= nodes; i++) cout << ans[i] << " ";
    return 0;
}