#include<bits/stdc++.h>

using namespace std;

#define int long long

const int INF = 0x3f3f3f3f;

signed main(){
	int n;
	cin >> n;
	
	vector<int> b,r;
	int last = INF;
		
	int resp = 0;	
		
	for(int i = 1;i <= n;i++){
		int x;
		char c;
		cin >> x >> c;
		
		if(c == 'G'){
			int res = 0;
			
			if(last == INF){
				
				if(r.size() > 0) resp += x - r[0];
				if(b.size() > 0) resp += x - b[0];
				
				r.clear() , b.clear();
				
				last = x;
				continue;
			}
		
			int d = 0;
			
			for(int j = 0;j < b.size();j++){
				if(j == 0) d = max(d,b[j] - last);
				else d = max(d,b[j] - b[j-1]);
				if(j == (int) b.size() - 1) d = max(d,x - b[j]);
			}
			if(d > 0)res += (x - last) - d;
		
			d = 0;
			
			for(int j = 0;j < r.size();j++){
				if(j == 0) d = max(d,r[j] - last);
				else d = max(d,r[j] - r[j-1]);
				if(j == (int) r.size() - 1) d = max(d,x - r[j]);
			} 
			
			if(d > 0) res += (x - last) - d;
			res += x - last;
			
			resp += min(res,2*(x - last));
		
			r.clear(),b.clear();
			last = x;
		}
		if(c == 'R') r.push_back(x);
		if(c == 'B') b.push_back(x);
	}
	
	if(last == INF){
		if(r.size() > 0) resp += r[(int) r.size() - 1] - r[0];
		if(b.size() > 0) resp += b[(int) b.size() - 1] - b[0];
		
		cout << resp << endl;
		return 0;
	}
	
	if(r.size() > 0) resp += r[(int) r.size() - 1] - last;
	if(b.size() > 0) resp += b[(int) b.size() - 1] - last;
	
	cout << resp << endl;
}