#include<bits/stdc++.h>
using namespace std;

const int N = 100 * 1000 + 20, LOG = 20;
int n, par[N][LOG], h[N], q;
vector<int> adj[N];

void dfs_lca(int v, int parent = -1) {
    for (int i = 1; i < LOG; i++)
        par[v][i] = (par[v][i - 1] == -1? -1: par[par[v][i - 1]][i - 1]);
    for (auto u: adj[v])
        if (u ^ parent) {
            h[u] = h[v] + 1;
            par[u][0] = v;
            dfs_lca(u, v);
        }
}

int get_par(int v, int k) {
    for (int i = LOG - 1; ~i; i--)
        if ((1 << i) & k)
            v = par[v][i];
    return v;
}


int lca(int u, int v) {
    if (h[v] < h[u])
        swap(v, u);
    v = get_par(v, h[v] - h[u]);
    if (v == u)
        return v;
    for (int i = LOG - 1; ~i; i--)
        if (par[v][i] != par[u][i]) {
            v = par[v][i];
            u = par[u][i];
        }
    return par[v][0];
}

int dist(int v, int u) {
    int x = lca(v, u);
    return h[v] + h[u] - 2 * h[x];
}


int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    cin >> n;
    for (int i = 1; i < n; i++) {
        int v, u;
        cin >> v >> u;
        adj[--u].push_back(--v);
        adj[v].push_back(u);
    }
    par[0][0] = -1;
    dfs_lca(0);
    cin >> q;
    for (int i = 0; i < q; i++) {
        int a, b, x, y, k;
        cin >> x >> y >> a >> b >> k;
        a--, b--, x--, y--;
        int tmp1 = dist(a, b), tmp2 = (dist(a, x) + 1 + dist(y, b)), tmp3 = (dist(a, y) + 1 + dist(x, b));
        cout << ((tmp1 % 2 == k % 2 && tmp1 <= k) || (tmp2 % 2 == k % 2 && tmp2 <= k) || (tmp3 % 2 == k % 2 && tmp3 <= k)? "YES": "NO") << "\n";
    }
}