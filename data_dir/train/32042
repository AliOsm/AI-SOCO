#include <bits/stdc++.h>
using namespace std;
#define SZ(v) int((v).size())
#define ALL(vec) begin(vec), end(vec)
typedef long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#ifdef Rahul
# define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#else
# define error(...) 42;
#endif
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
template<typename A> string to_string(vector<vector<A>> v) {string r; 
  for (auto x: v) r += "\n" + to_string(x); return r;}
int Nerr;
template<typename A> string to_string(A *p) {return to_string(vector<A>(p, p + Nerr));}
void err(istream_iterator<string>) { cerr << endl; }
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
#define Lu(...) [&] (auto &&u) { return __VA_ARGS__; }
#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }
int const MOD = 1e9 + 7;
long long const INF = 1e18 + 42;
/***********************************************************************/
const int N = 1e6 + 42, K = 26;
int g[N][K], a[N], t[N << 2], ans[N], len[N];
void upd(int i, int l, int r, int u, int L = 1, int R = N - 1) {
  if (r < L or l > R) return;
  if (l <= L && R <= r) return void(uin(t[i], u));
  upd(i + i, l, r, u, L, (L + R) / 2), upd(i + i + 1, l, r, u, (L + R) / 2 + 1, R);
}
int ask(int i, int p, int L = 1, int R = N - 1) {
  uin(t[i], t[i >> 1]);
  if (p < L or p > R) return 0;
  if (p == L && p == R) return t[i];
  return ask(i + i, p, L, (L + R) / 2) ^ ask(i + i + 1, p, (L + R) / 2 + 1, R);
}
void dfs(int u = 0, int d = 0) {
  static int ctr = 1;
  if (a[u]) ans[a[u]] = d = min(d, ctr + ask(1, ctr));
  upd(1, ctr, ctr + len[u] - 1, d - ctr + 1), ctr += !!a[u];
  for (int j = 0; j < K; ++j) if (g[u][j]) dfs(g[u][j], 1 + d);
}
int32_t main() {
  cin.tie(nullptr) -> sync_with_stdio(false);
  
  int n; cin >> n;
  for (int i = 1; i <= n; ++i) {
    int p; char c; cin >> p >> c;
    g[p][(int) (c - 'a')] = i;
  }
  int m; cin >> m;
  for (int i = 1; i <= m; ++i) {
    int x; cin >> x, a[x] = i, len[x] = 1;
  }
  for (int i = n; i >= 0; --i) for (int j = 0, v; j < K; ++j) 
    if ((v = g[i][j])) len[i] += len[v];
  dfs();
  for (int i = 1; i <= m; ++i) 
    cout << ans[i] << ' ';
}
