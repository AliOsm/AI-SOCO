#include "bits/stdc++.h"

using namespace std;
using LL = long long;

constexpr int N = 1e6 + 5;

int n, m;
int in[N];
int link[N];
int ans[N];
vector< int> E[N];
bitset< N> seen;
vector< int> ord;

int get(int x, int y) {
	return x * m + y;
}

int find(int x) {
	return x == link[x]? x : link[x] = find(link[x]);
}

void unite(int x, int y) {
	x = find(x);
	y = find(y);
	link[y] = x;
}

void dfs(int x) {
	seen[x] = 1;
	for (int &b : E[x]) {
		if (seen[b]) continue;
		dfs(b);
	}
	ord.push_back(x);
}

int main() {
	ios::sync_with_stdio(false); cin.tie(nullptr);

	cin >> n >> m;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			int x; cin >> x;
			in[get(i, j)] = x;
		}
	}

	iota(link, link + n * m, 0);

	for (int i = 0; i < n; i++) {
		vector< pair< int, int>> vals;
		for (int j = 0; j < m; j++) {
			int id = get(i, j);
			vals.emplace_back(in[id], id);
		}
		sort(begin(vals), end(vals));
		for (int j = 0; j + 1 < m; j++) {
			if (vals[j].first == vals[j + 1].first) {
				unite(vals[j].second, vals[j + 1].second);
			}
		}
	}

	for (int j = 0; j < m; j++) {
		vector< pair< int, int>> vals;
		for (int i = 0; i < n; i++) {
			int id = get(i, j);
			vals.emplace_back(in[id], id);
		}
		sort(begin(vals), end(vals));
		for (int i = 0; i + 1 < n; i++) {
			if (vals[i].first == vals[i + 1].first) {
				unite(vals[i].second, vals[i + 1].second);
			}
		}
	}

	for (int i = 0; i < n; i++) {
		vector< pair< int, int>> vals;
		for (int j = 0; j < m; j++) {
			int id = find(get(i, j));
			vals.emplace_back(in[id], id);
		}
		sort(begin(vals), end(vals));
		for (int j = 0; j + 1 < m; j++) {
			if (vals[j].first < vals[j + 1].first) E[vals[j].second].push_back(vals[j + 1].second);
		}
	}

	for (int j = 0; j < m; j++) {
		vector< pair< int, int>> vals;
		for (int i = 0; i < n; i++) {
			int id = find(get(i, j));
			vals.emplace_back(in[id], id);
		}
		sort(begin(vals), end(vals));
		for (int i = 0; i + 1 < n; i++) {
			if (vals[i].first < vals[i + 1].first) E[vals[i].second].push_back(vals[i + 1].second);
		}
	}

	for (int i = 0; i < n * m; i++) {
		if (!seen[i] && !E[i].empty()) {
			dfs(i);
		}
	}
	reverse(begin(ord), end(ord));
	//for (int x : ord) cerr << x / m << ' ' << x % m << endl;

	for (int x : ord) {
		for (int y : E[x]) {
			ans[y] = max(ans[y], ans[x] + 1);
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cout << ans[find(get(i, j))] + 1 << ' ';
		} cout << "\n";
	}
}