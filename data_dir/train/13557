         /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
using namespace std;
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
const int mod=998244353;         
const int N=5e3+4;

int mul(int a,int b)
{
	return (1LL*a*b)%mod;
}

void add(int &a,int b)
{
	a+=b;

	if(a>=mod)
	a-=mod;
}

void sub(int &a,int b)
{
	a-=b;

	if(a<0)
	a+=mod;
}

int me(int a,int b)
{
	int res=1;

	while(b)
	{
		if(b&1)
		res=mul(res,a);

		a=mul(a,a);

		b>>=1;
	}

	return res;
}

int mi(int n)
{
	return me(n,mod-2);
}

//dp[i][j] tells the probability of getting a strictly increasing sequence 
// of length i at ending at j.

int dp[N][N],fa[N],dp1[N][N];

int main()
{
	int n;

	scn(n);

	rep(i,0,n)
	{
		int val; scn(val);

		fa[val]++;
	}

	int inv[n+1];

	rep(i,1,n+1)
	inv[i]=mi(i);

	rep(i,1,n+1)
	dp[1][i]=dp1[1][i]=mul(fa[i],inv[n]);

	for(int j=2;j<=n;j++)
	add(dp[1][j],dp[1][j-1]);

	for(int i=2;i<=n;i++)
	{
		for(int j=2;j<=n;j++)
		{
			int temp=mul(fa[j],inv[n-i+1]);

			//if(i==2 and j==3)
			//cout<<temp<<endl;

			dp[i][j]=dp1[i][j]=mul(dp[i-1][j-1],temp);
		}

		for(int j=2;j<=n;j++)
		add(dp[i][j],dp[i][j-1]);
	}

	// for(int i=1;i<=n;i++)
	// {
	// 	for(int j=1;j<=n;j++)
	// 	cout<<dp[j][i]<<" ";

	// 	cout<<endl;
	// }

	int ans=0;

	for(int num=1;num<=n;num++)
	if(fa[num]>1)
	{
		for(int len=1;len<n;len++)
		{
			int here=dp1[len][num];

			int temp=mul(fa[num]-1,inv[n-len]);

			add(ans,mul(here,temp));
		}
	}

	pri(ans);

    return 0;
}