#include<bits/stdc++.h>
//#define ll long long int32_t 
#define int long long int
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD2 998244353
#define MOD1 1e9+7
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define piii pair<pii,int>
#define precise(i) cout<<fixed<<setprecision(i)
using namespace std;
const double PI = atan(1.0)*4;
const int64_t INF=1000000000000000003;
const int32_t LOG=21;
const int MOD=MOD1;

int a[100005];
pii b[100005];
vector<int> v[100005];
int level[100005];
int ind[1000005];
bool checker[1000005];
bool check[100005];
int loc[100005];
int n;



int shortest_cycle(int n) 
{ 
    int ans = INT_MAX; 
  
    for (int i = 0; i<n; i++) { 
  
        int temp=loc[i];
        if(temp*temp>=1000001)continue;
        vector<int> dist(n, (int)(1e9)); 
  
        vector<int> par(n, -1); 
  
        dist[i] = 0; 
        queue<int> q; 
  
        q.push(i); 
  
        while (!q.empty()) { 
  
            int x = q.front(); 
            q.pop(); 
  
            for (int child : v[x]) { 
  
                if (dist[child] == (int)(1e9)) { 
  
                    dist[child] = 1 + dist[x]; 
  
                    par[child] = x; 
  
                    q.push(child); 
                } 
  
                else if (par[x] != child and par[child] != x) 
                    ans = min(ans, dist[x] + dist[child] + 1); 
            } 
        } 
    } 
  
    if (ans == INT_MAX) 
        return -1; 
  
    else
        return ans; 
} 

int32_t main()
{ 
      getFaster;
      int tests=1;
      //cin>>tests;
      rep(ii,0,tests)
      {
           cin>>n;
           int pos=2;
           ind[0]=1;
           loc[0]=1;
           bool g=false;
           rep(i,0,n)cin>>a[i];
           rep(i,0,n)
           {
              b[i]={1,1};
              int cur=0;
              for(int j=2;j*j<=a[i];j++)
              {
              	 if(a[i]%j==0)
              	 {
              	 	 int cnt=0;
              	 	 while(a[i]%j==0)
              	 	 {a[i]/=j;cnt++;}
              	 	 if(!cur && (cnt&1)){b[i].f=j;cur++;}
              	 	 else if(cnt&1) b[i].s=j;              	 	 
              	 }	
              }

              if(a[i]!=1)
              {
                  if(!cur)b[i].f=a[i];
                  else b[i].s=a[i];
              }

              int normalized=b[i].f*b[i].s;
              if(checker[normalized])
              {
              	 g=true;
              }
              checker[normalized]=true;	


              if(b[i].f==1)
              {
              	 cout<<1<<endl;
              	 return 0;
              }	
           
           if(b[i].f!=1)
           {
               if(ind[b[i].f]!=0)
               {
               }
               else
               {
               	   ind[b[i].f]=pos;
               	   loc[pos]=b[i].f;
               	   pos++;
               }	
           }

           if(b[i].s!=1)
           {
           	    if(ind[b[i].s]!=0);
           	    else
           	    {
           	    	ind[b[i].s]=pos;
           	    	loc[pos]=b[i].s;
           	    	pos++; 
           	    }	
           }

           }

           if(g)
           {
           	  cout<<2<<endl;
           	  return 0;
           }


           
           rep(i,0,n)
           {
           	   int ind1=ind[b[i].f];
           	   int ind2=ind[b[i].s];
           	  // cout<<"YO "<<loc[ind1]<<" "<<loc[ind2]<<endl;
           	   v[ind1].push_back(ind2);
           	   v[ind2].push_back(ind1);
           }

           n=pos;

           int ans=shortest_cycle(n);

           

           cout<<ans<<endl;
           


      }
      return 0;     
}
