//  Copyright Â© 2019 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 1000005
#define pii pair < int , int >
#define fi first
#define se second
#define mid (l+r)/2
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

int N, K, tim;
int a[MAX];
int in[MAX];
int out[MAX];
int tree[8*MAX];
int lazy[8*MAX];
vector < int > ady[MAX];

void dfs( int x )
{
	in[x] = ++tim;
	for( auto v : ady[x] )
		dfs( v );
	out[x] = tim; 
}

void updlazy( int x )
{
	if( ! lazy[x] )
		return;
	tree[x] += lazy[x];
	lazy[2*x+1] += lazy[x];
	lazy[2*x+2] += lazy[x];
	lazy[x] = 0;
}

void upd( int x , int l , int r , int lq , int rq , int v )
{
	updlazy( x );
	if( l > rq or r < lq )
		return;
	if( l >= lq && r <= rq )
	{
		lazy[x] = v;
		updlazy( x );
		return;
	}
	upd( 2*x+1 , l , mid , lq , rq , v );
	upd( 2*x+2 , mid+1 , r , lq , rq , v );
	tree[x] = max( tree[2*x+1] , tree[2*x+2] );
}

int main()
{
    optimiza_io
    cin >> N >> K;
    for( int i = 1; i <= N; i ++ )
    	cin >> a[i];
    
    stack < pii > s;
    s.push( { MAX , N + 1 } );
    for( int i = N; i >= 1; i -- )
    {
    	while( s.top().fi <= a[i] )
    		s.pop();
    	ady[s.top().se].push_back( i );
    	s.push( { a[i] , i } );
    }
    N++;
    dfs( N );
    
    for( int i = 1; i <= K; i ++ )
    	upd( 0 , 1 , N , in[i] , out[i] , 1 );
    	
    for( int i = K; i < N; i ++ )
    {
    	cout << tree[0] << " ";
    	int l = i - K + 1;
    	int r = i + 1;
    	upd( 0 , 1 , N , in[l] , out[l] , -1 );
    	upd( 0 , 1 , N , in[r] , out[r] , 1 );
    }
    return 0;
}


// 1 2 3 