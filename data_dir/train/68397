#include <bits/stdc++.h>
#define LL long long
#define pb push_back
#define mp make_pair
#define fi first
#define sc second
using namespace std;

int ar[100100],treeMax[400100],treeMin[400100],inf=1e9;
int n,m,o,last=-1,cnt,mx,mn,ans;

void build_max(int node, int a, int b) {
    if(a > b) return; // Out of range
  	
  	if(a == b) { // Leaf node
    		treeMax[node] = ar[a]; // Init value
		return;
	}
	
	build_max(node*2, a, (a+b)/2); // Init left child
	build_max(node*2+1, 1+(a+b)/2, b); // Init right child
	
	treeMax[node] = max(treeMax[node*2], treeMax[node*2+1]); // Init root value
}

void build_min(int node, int a, int b) {
    if(a > b) return; // Out of range
  	
  	if(a == b) { // Leaf node
    	treeMin[node] = ar[a]; // Init value
		return;
	}
	
	build_min(node*2, a, (a+b)/2); // Init left child
	build_min(node*2+1, 1+(a+b)/2, b); // Init right child
	
	treeMin[node] = min(treeMin[node*2], treeMin[node*2+1]); // Init root value
}

int query_max(int node, int a, int b, int i, int j) {
	
	if(a > b || a > j || b < i) return -inf; // Out of range

	if(a >= i && b <= j) // Current segment is totally within range [i, j]
		return treeMax[node];

	int q1 = query_max(node*2, a, (a+b)/2, i, j); // Query left child
	int q2 = query_max(1+node*2, 1+(a+b)/2, b, i, j); // Query right child

	int res = max(q1, q2); // Return final result
	
	return res;
}


int query_min(int node, int a, int b, int i, int j) {
	
	if(a > b || a > j || b < i) return inf; // Out of range

	if(a >= i && b <= j) // Current segment is totally within range [i, j]
		return treeMin[node];

	int q1 = query_min(node*2, a, (a+b)/2, i, j); // Query left child
	int q2 = query_min(1+node*2, 1+(a+b)/2, b, i, j); // Query right child

	int res = min(q1, q2); // Return final result
	
	return res;
}

int main() {
	scanf("%d %d %d",&n,&m,&o);
	for(int i=0;i<n;i++) scanf("%d",&ar[i]);
	build_max(1,0,n-1);
	build_min(1,0,n-1);
	bool check = true;
	for(int i=0;i<n;i++){
		cnt=0;
		mx=-1e9;
		mn=1e9;
		for(int j=i;j<n;j++){
			mx=max(mx,ar[j]);
			mn=min(mn,ar[j]);
			if(mx-mn>m) break;
			cnt++;
		}
		if(cnt>=o){
			ans++;
			last = i+o-1;
			i += cnt-1;
		}
		else{
			int left = o-cnt;
			if(i-left<=last){
				check=false;
				break;
			}
			mx = query_max(1,0,n-1,i-left,i+cnt-1);
			mn = query_min(1,0,n-1,i-left,i+cnt-1);
			if(mx-mn>m){
				check=false;
				break;
			}
			ans++;
			i += cnt-1;
			last = i;
		}
		//cout<<ans<<" "<<i<<" "<<last<<" "<<cnt<<endl;
	}
	if(check){
		printf("%d\n",ans);
		return 0;
	}
	check = true;
	reverse(ar,ar+n);
	build_max(1,0,n-1);
	build_min(1,0,n-1);
	ans=0,last=-1;
	for(int i=0;i<n;i++){
		cnt=0;
		mx=-1e9;
		mn=1e9;
		for(int j=i;j<n;j++){
			mx=max(mx,ar[j]);
			mn=min(mn,ar[j]);
			if(mx-mn>m) break;
			cnt++;
		}
		if(cnt>=o){
			ans++;
			last = i+o-1;
			i += cnt-1;
		}
		else{
			int left = o-cnt;
			if(i-left<=last){
				check=false;
				break;
			}
			mx = query_max(1,0,n-1,i-left,i+cnt-1);
			mn = query_min(1,0,n-1,i-left,i+cnt-1);
			if(mx-mn>m){
				check=false;
				break;
			}
			ans++;
			i += cnt-1;
			last = i;
		}
		//cout<<ans<<" "<<i<<" "<<last<<" "<<cnt<<endl;
	}
	if(check) printf("%d\n",ans);
	else printf("-1\n");
	return 0;
}