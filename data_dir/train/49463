#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <memory.h>
#include <sstream>
#include <queue>
#include <cassert>
#include <ctime>
#include <complex>
#include <unordered_map>
#include <random>
 
using namespace std;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<pii, pii> piiii;
typedef pair<int64, int> pli;
typedef pair<int, char> pic; 

#define pb push_back
#define sq(x) ((x)*(x))
#define cube(x) (((x)*(x))*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define bit(mask, b) ((mask >> b) & 1)
#define biton(mask, bit) (mask | (((uint64)(1)) << bit))
#define bitoff(mask, bit) (mask & (~(((uint64)(1)) << bit)))
#define bitputon(mask, bit) (mask |= (((uint64)(1)) << bit))
#define bitputoff(mask, bit) (mask &= (~(((uint64)(1)) << bit)))
#define FAIL() (*((int*)(0)))++
#define INF ((int)(1e9) + 1337)
#define EPS (1e-9)
#define y1 yy1
#define y0 yy0
#define j0 jj0

const long double PI = acosl((long double)-1.0);
const int64 LINF = 1e18;//((1ull << 63) - 1ull);
const int MOD = 1000000007;
int test;

const int MAXN = 10500;

struct point
{
	int x, y;

	void read()
	{
		scanf ("%d%d", &x, &y);
	}
};

inline bool dless(double a, double b)
{
	return a + EPS < b;
}

inline bool dgreater(double a, double b)
{
	return a - EPS > b;
}

inline bool dequal(double a, double b)
{
	return abs(a - b) < EPS;
}

point p[MAXN];
int n;
int w, v, u;
vector <point> pth;
int mn, mx;

void init()
{
	scanf ("%d%d%d%d", &n, &w, &v, &u);
	swap(v, u);
	for (int i = 1; i <= n; i++)
	{
		p[i].read();
	}
}

inline int right(int pos)
{
	return pos < n ? pos + 1 : 1;
}

inline int left(int pos)
{
	return pos > 1 ? pos - 1 : n;
}

void get_path()
{
	mn = INF;
	mx = -INF;
	for (int i = 1; i <= n; i++)
	{
		mn = min(mn, p[i].y);
		mx = max(mx, p[i].y);
	}
	for (int i = 1; i <= n; i++)
	{
		if (p[i].y == mn)
		{
			int k = i;
			while (p[right(k)].y == p[k].y)
			{
				k = right(k);
			}
			while (true)
			{
				pth.push_back(p[k]);
				if (p[k].y == mx)
				{
					break;
				}
				k = right(k);
			}
			break;
		}
	}
}

bool check_before()
{
	for (int i = 1; i <= n; i++)
	{
		if (dgreater((double)p[i].y / v, (double)p[i].x / u))
		{
			return false;
		}
	}
	return true;
}

void solve()
{
	init();
	if (check_before())
	{
		printf("%.10lf\n", (double)w / v);
		return;
	}
	get_path();
	double t = 0.0;
	int y = 0;
	for (int i = 0; i < pth.size(); i++)
	{
		double my = t + (double)(pth[i].y - y) / v;
		double bus = (double)pth[i].x / u;
		t = max(my, bus);
		y = pth[i].y;
	}
	if (y < w)
	{
		t += (double)(w - y) / v;
	}
	printf("%.10lf\n", t);
}

void precalc()
{
	
}

int main()
{
    //ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
	//test_output(); return 0;
    srand(55);
	precalc();
	int tests = 1;
	//scanf ("%d", &tests);
	for (test = 1; test <= tests; test++)
	{
		solve();
	}
	
    return 0;
}