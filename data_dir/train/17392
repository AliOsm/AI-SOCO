//void _(){
//    int n,m;
//    cin >> n >> m;
//    vpll arr(n);
//    rep(i,n)
//        arr[i].Y = i+1;
//    rep(i,m){
//        int u,v;
//        ll w;
//        cin >> u >> v >> w;
//        arr[u-1].X += w;
//        arr[v-1].X -= w;
//    }
//    sort(rall(arr));
//    int l = 0, r = n-1;
//    vvl ans;
//    while(l < r){
//        if(arr[l].X == 0){
//            ++l;
//            continue;
//        }
//        if(arr[r].X == 0){
//            --r;
//            continue;
//        }
//        ll take = min(arr[l].X,-arr[r].X);
//        ans.pb({arr[l].Y,arr[r].Y,take});
//        arr[l].X -= take;
//        arr[r].X += take;
//    }
//    print sz(ans);
//    print_vn ans;
//}
//
#include <iomanip>
#include <algorithm>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define REP_ZERO_INT(i,r) for(int i = 0; i < r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define sz(v) ll(v.size())
#define X first
#define Y second
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef pair<ll, ll> pll;
typedef vector<pll> vpll;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout)
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }
    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
struct _print2{
    string s1,s2,end;
    bool space;
    ostream &stream;
    _print2(string _s1 = " ", string _s2 = " ", string _end="\n", ostream &_stream = cout)
        :s1(_s1),s2(_s2),end(_end),space(false),
        stream(_stream) {}
    ~_print2() { stream << end; }
    template <typename T>
        _print2 &operator , (const T &t) {
            for(auto _ : t){
                if (space) stream << s1;
                space = true;
                _print p(s2,"",stream);
                    p,_;
            }
            return *this;
        }
};
#define print _print(),
#define print_vn _print2("\n"," ","\n"),
T1 ostream& operator<<(ostream& stream, const vector<T>& t){
    for(int i = 0; i < sz(t); ++i){
        stream << t[i];
        if(i+1 < sz(t))
            stream << ' ';
    }
    return stream;
}
void _(){
    int n,m;
    cin >> n >> m;
    vpll arr(n);
    rep(i,n)
        arr[i].Y = i+1;
    rep(i,m){
        int u,v;
        ll w;
        cin >> u >> v >> w;
        arr[u-1].X += w;
        arr[v-1].X -= w;
    }
    sort(rall(arr));
    int l = 0, r = n-1;
    vvl ans;
    while(l < r){
        if(arr[l].X == 0){
            ++l;
            continue;
        }
        if(arr[r].X == 0){
            --r;
            continue;
        }
        ll take = min(arr[l].X,-arr[r].X);
        ans.pb({arr[l].Y,arr[r].Y,take});
        arr[l].X -= take;
        arr[r].X += take;
    }
    print sz(ans);
    print_vn ans;
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
