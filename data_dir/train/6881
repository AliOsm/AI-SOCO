#include <bits/stdc++.h>
using namespace std;

#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define LL long long 
#define ar32(x) array<int, x> 
#define ar64(x) array<LL, x>
const int oo = 1e9 + 5;
// const int MOD = 1e9 + 7;
const LL ooll = 1e18 + 5;
const int MOD = 998244353;

const int N = 2e5 + 5;

int v[N], sum[4*N], p[N];
LL sumi[4*N];

void build(int node, int st, int en) {
    sum[node] = sumi[node] = 0;
    if (st == en) return;
    int m = (st + en)/2;
    build(2 * node + 1, st, m);
    build(2 * node + 2, m+1, en);
}

void add(int pos, int node, int st, int en) {
    if (st == en) {
        sum[node]++;
        sumi[node] += pos;
        return;
    }
    int m = (st + en)/2;
    if (pos <= m) add(pos, 2 * node + 1, st, m);
    else add(pos, 2 * node + 2, m+1, en);
    sum[node] = sum[2 * node + 1] + sum[2 * node +2];
    sumi[node] = sumi[2 * node + 1] + sumi[2 * node +2];
}

int locate(int x, int node, int st, int en) {
    if (st == en) return st;
    int m = (st + en)/2;
    if (sum[2 * node + 1] >= x) return locate(x, 2 * node + 1, st, m);
    else return locate(x - sum[2 * node + 1], 2 * node + 2, m+1, en);
}

int querysum(int l, int r, int node, int st, int en) {
    if (st > r || en < l) return 0;
    if (st >= l && en <= r) return sum[node];
    int m = (st + en)/2;
    int lefans = querysum(l, r, 2 * node + 1, st, m);
    int rigans = querysum(l, r, 2 * node + 2, m+1, en);
    return lefans + rigans;
}

LL query(int l, int r, int node, int st, int en) {
    if (st > r || en < l) return 0;
    if (st >= l && en <= r) return sumi[node];
    int m = (st + en)/2;
    LL lefans = query(l, r, 2 * node + 1, st, m);
    LL rigans = query(l, r, 2 * node + 2, m+1, en);
    return lefans + rigans;
}

void solve() {
    int n, i;
    cin >> n;
    for (i=1;i<=n;i++) {
        cin >> v[i];
        p[v[i]] = i;
    }
    LL inv = 0, ex, median;
    for (i=1;i<=n;i++) {
        inv += i-1 - querysum(1, p[i], 0, 1, n);
        add(p[i], 0, 1, n);
        median = locate((i+1)/2, 0, 1, n);
        LL xx = (i + 1)/2;
        // cout << median << " median\n";
        LL q = query(1, median, 0, 1, n);
        ex = median * ((i+1)/2) - q - (xx * (xx - 1))/2;
        xx = i - xx;
        ex += query(1, n, 0, 1, n) - q - median * (i - (i+1)/2) - (xx * (xx + 1))/2;
        cout << inv + ex << " \n"[i==n];
    }
}
 
int main() {
    FASTIO;
    int t = 1;
    // cin >> t;
    while(t--) solve();
    return 0;
}