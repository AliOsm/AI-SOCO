#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<map>
#include<iterator>
#include<stack>
#include<string>
#include<climits>
#include<bitset>
#include<queue>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<sstream>

#define MOD 1000000007
#define ll long long int
#define vi vector<int>
#define vll vector<long long int>
#define vvi vector<vector<int> >
#define vvl vector<vector<long long int> >
#define vp vector<pair<int, int> >
#define sc(n) scanf("%d", &n)
#define ssync ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)

using namespace std;

string toBin(long long int a)
{
	return bitset<64>(a).to_string();
}

void printArr(int* a, int n)
{
	for(int i = 0; i < n; i++)
		printf("%d ", a[i]);
	printf("\n");
}

string intToString (ll a)
{
	ostringstream temp;
	temp<<a;
	return temp.str();
}

ll pow(ll base, ll exponent)
{
	ll result = 1;
	while(exponent > 0)
	{
		if (exponent % 2 == 1)
			result *= base;
		exponent = exponent >> 1;
		base *= base;
	}
	return result;
}

ll powerWithMod(ll base, ll exponent, ll modulus)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if (exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent = exponent >> 1;
		base = (base * base) % modulus;
	}
	return result;
}

int main()
{
	ssync;
	ll n, k, t;
	cin>>n>>k;
	vll a(n);
	for(int i=0; i<n; i++)
		cin>>a[i];
	ll low = 1, high = 2*MOD;
	while(low < high)
	{
		ll mid = (low+high) / 2;
		if(low == mid)
			mid++;
		t=0;
		for(int i=0; i<n; i++)
			t += max((ll)0, mid-a[i]);
		if(t<=k)
			low=mid;
		else
			high=mid-1;
	}
	t=k;
	for(int i=0; i<n ;i++)
	{
		t -= max((ll)0 , low-a[i]);
		a[i] = max(a[i], low);
	}

	for(int i=0; i<n; i++)
	{
		if(a[i] == low && t)
		{
			t--;
			a[i]++;
		}
	}
	low = 1, high = 2*MOD;
	while(low < high)
	{
		ll mid = (low+high) / 2;
		t=0;
		for(int i=0; i<n; i++)
			t += max((ll)0, a[i]-mid);
		if(t<=k)
			high=mid;
		else
			low=mid+1;
	}
	t=k;
	for(int i=0; i<n ; i++)
	{
		t -= max((ll)0 , a[i]-low);
		a[i] = min(a[i], low);
	}
	for(int i=0; i<n; i++)
	{
		if(a[i] == low && t)
		{
			t--;
			a[i]--;
		}
	}
		cout << *max_element(a.begin(), a.end()) - *min_element(a.begin(), a.end()) << "\n";
	return 0;
}
