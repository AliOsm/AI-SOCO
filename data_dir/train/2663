#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <string.h>
#include <vector>
#include <map>
#include <set>
#include <list>
#include <deque>
#include <queue>
#include <sstream>

using namespace std;

#define fi first
#define se second
#define mp make_pair
#define pb push_back

#define task "a"
typedef long long ll;

const int maxN = 105;
const int maxK = 17;
const int maxA = 60;
const int INF = (int)1e9;

int isPrime(int n) {
    if (n < 2) {
        return 0;
    }
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            return 0;
        }
    }
    return 1;
}

int primesMask[maxA];

int dp[maxN][1 << maxK];
int P[maxN][1 << maxK];

int abs_(int a) {
    return a < 0 ? -a : a;
}

int main() {
   // freopen(task".in", "r", stdin); freopen(task".out", "w", stdout);
    vector<int> primes;
    for (int i = 0; i < maxA; i++) {
        if(isPrime(i)) {
            primes.push_back(i);
        }
    }

    for (int i = 1; i < maxA; i++) {
        for (int j = 0; j < primes.size(); j++) {
            if (i % primes[j] == 0) {
                primesMask[i] |= (1 << j);
            }
        }
    }

    for (int i = 0; i < maxN; i++) {
        for (int j = 0; j < (1 << maxK); j++) {
            dp[i][j] = INF;
        }
    }

    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    reverse(a.begin(), a.end());
    dp[0][0] = 0;
    for (int i = 0; i < n; i++) {
        for (int mask = 0; mask < (1 << maxK); mask++) {
            if (dp[i][mask] != INF) {
                for (int j = 1; j < maxA; j++) {
                    if ((mask & primesMask[j]) == 0) {
                        int mask2 = mask | primesMask[j];
                        if (dp[i + 1][mask2] > dp[i][mask] + abs_(a[i] - j)) {
                            dp[i + 1][mask2] = dp[i][mask] + abs_(a[i] - j);
                            P[i + 1][mask2] = j;
                        }
                    }
                }
            }
        }
    }
    int mask = 0;
    for (int i = 0; i < (1 << maxK); i++) {
        if (dp[n][i] < dp[n][mask]) {
            mask = i;
        }
    }

    for (int i = n; i >= 1; i--) {
        cout << P[i][mask] << " ";
        mask ^= primesMask[P[i][mask]];
    }
    return 0;
}
