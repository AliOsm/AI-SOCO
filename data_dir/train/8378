#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define N 200010
const ll p = 998244353;
int n, k;
int a[N];
ll f[N][2]; 
int need[N];

ll f1()
{
	memset(f, 0, sizeof f);
	memset(need, -1, sizeof need);
	int last = -1;
	for (int i = (n & 1) ? n : n - 1; i >= 1; i -= 2)
	{
		need[i] = last;
		if (a[i] != -1) last = a[i];
	}	
	if (a[1] == -1) 
	{
		f[1][0] = k;
		if (need[1] != -1)
			f[1][1] = 1; 
	}
	else 
	{
		f[1][0] = 1;
		if (a[1] == need[1])
		   f[1][1] = 1;	
	}
	for (int i = 3; i <= n; i += 2)
	{
		if (a[i] == -1)
		{
			f[i][0] = 1ll * (k - 1) * f[i - 2][0] % p;
			if (need[i] == -1) continue;
			int pre = i - 2;
			if (a[pre] != -1)
			{
				if (need[i] != a[pre]) 
					f[i][1] = f[pre][0];
			}
			else
			{
				f[i][1] = (f[pre][0] - f[pre][1] + p) % p;
			}
		}
		else
		{
			f[i][0] = (f[i - 2][0] - f[i - 2][1] + p) % p;
			if (a[i] == need[i])
				f[i][1] = f[i][0];	
		}
	}
	return f[(n & 1) ? n : n - 1][0];
}

ll f2()
{
	memset(f, 0, sizeof f);
	memset(need, -1, sizeof need);
	int last = -1;
	for (int i = (n & 1) ? n - 1 : n; i >= 1; i -= 2)
	{
		need[i] = last;
		if (a[i] != -1) last = a[i];
	}
	if (a[2] == -1) 
	{
		f[2][0] = k;
		if (need[2] != -1) 
			f[2][1] = 1; 
	}
	else 
	{
		f[2][0] = 1;
		if (need[2] == a[2])
			f[2][1] = 1;
	}
	for (int i = 4; i <= n; i += 2)
	{
		if (a[i] == -1)
		{
			f[i][0] = 1ll * (k - 1) * f[i - 2][0] % p;
			if (need[i] == -1) continue; 
			int pre = i - 2;
			if (a[pre] != -1)
			{
				if (need[i] != a[pre]) 
					f[i][1] = f[pre][0];
			}
			else
			{
				f[i][1] = (f[pre][0] - f[pre][1] + p) % p;
			}
		}
		else
		{
			f[i][0] = (f[i - 2][0] - f[i - 2][1] + p) % p;
			if (need[i] == a[i])
				f[i][1] = f[i][0];	
		}
	}
	return f[(n & 1) ? n - 1 : n][0];
}

int main()
{
	while (scanf("%d%d", &n, &k) != EOF)
	{
		for (int i = 1; i <= n; ++i) 
			scanf("%d", a + i);
		printf("%lld\n", f1() * f2() % p);
	}
	return 0;
}
