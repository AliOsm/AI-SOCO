#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define sz(x) (int)(x).size()
#define li long long
#define ld long double
#define x first
#define y second
#define pt pair<int, int>
#define pll pair<li, li>
#define forn(i, t) for(int i = 0; i < (t); i++)
#define fore(i, f, t) for(int i = (f); i < (t); i++)
#define forr(i, f, t) for(int i = (f) - 1; i >= (t); i--)
#define all(x) (x).begin(), (x).end()
#define ins insert

using namespace std;


const int INF = 2147483647;
const int MOD = 1000000007;
const li INF64 = 9223372036854775807;
const ld EPS = 1e-7;

mt19937 myrand(time(NULL));

const int N = 500 * 1000 + 13;

li n, a, b, T;
char s[N];
li p[N];


bool read(){
	if(scanf("%lld%lld%lld%lld\n", &n, &a, &b, &T) != 4)
		return 0;
	scanf("%s\n", s);
	return 1;
}


li calcl(li l, pll sum){
	li res = sum.x, r = 1;
	pll sumr = mp(0, (n - l - 1) * a);
	for (; l < n;){
		while (r <= l && sumr.y + a + p[r] + sum.y <= T){
			sumr.x++;
			sumr.y += a + p[r];
			r++;
		}
		//printf("[%lld(%lld, %lld) %lld(%lld, %lld)] ", l, sum.x, sum.y, r, sumr.x, sumr.y);
		if (sum.y + sumr.y <= T)
			res = max(res, sum.x + sumr.x);
		sum.x--;
		l++;
		if (l < n){
			sum.y -= a + p[l];
			sumr.y -= a;
		}
	}
	//printf("\n");
	return res;
}


li calcr(li r, pll sum){
	li res = sum.x, l = n - 1;
	pll suml = mp(0, (r - 1) * a);
	for (; r > 0;){
		while (l >= r && suml.y + a + p[l] + sum.y <= T){
			suml.x++;
			suml.y += a + p[l];
			l--;
		}
		//printf("[%lld(%lld, %lld) %lld(%lld, %lld)] ", l, suml.x, suml.y, r, sum.x, sum.y);
		if (suml.y + sum.y <= T)
			res = max(res, sum.x + suml.x);
		sum.x--;
		r--;
		if (r > 0){
			sum.y -= a + p[r];
			suml.y -= a;
		}
	}
	//printf("\n");
	return res;
}


void solve(){
	forn(i, n) p[i] = (s[i] == 'h' ? 1 : b + 1);
	//printf("%d %d %d %d\n", n, a, b, T);
	//cout << s << "\n";
	if (p[0] > T){
		printf("0\n");
		return;
	}
	pll suml = mp(1, p[0]), sumr = mp(1, p[0]);
	li l = n - 1, r = 1;
	while (r < n && sumr.y + p[r] + a <= T){
		sumr.x++;
		sumr.y += p[r] + a;
		r++;
	}
	while (l > 0 && suml.y + p[l] + a <= T){
		suml.x++;
		suml.y += p[l] + a;
		l--;
	}
	li ans = 1;
	ans = max(ans, calcl(l, suml));
	ans = max(ans, calcr(r, sumr));
	printf("%lld\n", ans);
}


int main(){
	#ifdef _DEBUG
		freopen("input.txt", "r", stdin);
	#endif
	while(read())
		solve();
	return 0;
}