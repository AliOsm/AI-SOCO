#include<bits/stdc++.h>

using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

#define endl '\n'
#define MAX

typedef long long ll;
typedef pair<int,int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

typedef complex<double> point;
struct line { point p, q; };

const double eps = 1e-9;

double cross(point a, point b) { return imag(conj(a) * b); }

bool intersectLS(const line &l, const line &s)
{
	return cross(l.q - l.p, s.p - l.p) *       // s[0] is left of l
			cross(l.q - l.p, s.q - l.p) < eps; // s[1] is right of l
}

double eval(ll x, ll a, ll b, ll c){
	return (-1.0 * c - a * x) / (1.0 * b);
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	int xo, yo, xi, yi;
	cin >> xo >> yo >> xi >> yi;
	
	line s = {point(1.0 * xo, 1.0 * yo), point(1.0 * xi, 1.0 * yi)};

	int n;
	cin >> n;
	
	int ans = 0;
	
	while(n--){
		ll a, b, c;
		cin >> a >> b >> c;
		
		if(b == 0){
			double X = (-1.0 * c) / (1.0 * a);
			if(X > min(xo, xi) + eps && X < max(xo, xi) + eps)
				ans++;
			continue;
		}
		
		ll X1 = 0, X2 = 1;
		double Y1 = eval(X1, a, b, c), Y2 = eval(X2, a, b, c);
		line l = {point(1.0 * X1, 1.0 * Y1), point(1.0 * X2, 1.0 * Y2)};
		
		if(intersectLS(l, s))
			ans++;
	}
	
	cout << ans << endl;

	return 0;
}