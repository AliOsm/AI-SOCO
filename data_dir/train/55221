//satyaki3794
#include <bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define LEFT(n) (2*(n))
#define RIGHT(n) (2*(n)+1)
 
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;

ll pwr(ll base, ll p, ll mod = MOD){
ll ans = 1;while(p){if(p&1)ans=(ans*base)%mod;base=(base*base)%mod;p/=2;}return ans;
}

ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}

ll invMod(ll n){
    return pwr(n, MOD-2);
}


int n, k, cc, revmap[400005], starts[400005], endings[400005];
ll fac[200005], invFac[200005];
map<int, int> compress;
ii arr[200005];

ll C(int n, int r){
    if(r > n)   return 0;
    ll ans = fac[n];
    ans = (ans * invFac[r]) % MOD;
    ans = (ans * invFac[n-r]) % MOD;
    return ans;
}


int main(){

    // ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    fac[0] = invFac[0] = 1;
    for(int i=1;i<=200000;i++){
        fac[i] = (i * fac[i-1]) % MOD;
        invFac[i] = pwr(fac[i], MOD-2);
    }

    scanf("%d%d", &n, &k);
    for(int i=1;i<=n;i++){
        scanf("%d%d", &arr[i].ff, &arr[i].ss);
        compress[arr[i].ff];
        compress[arr[i].ss];
    }

    cc = 0;
    for(map<int,int>::iterator it=compress.begin();it!=compress.end();it++){
        it->ss = ++cc;
        revmap[cc] = it->ff;
    }

    for(int i=1;i<=n;i++){
        arr[i].ff = compress[arr[i].ff];
        arr[i].ss = compress[arr[i].ss];
        starts[arr[i].ff]++;
        endings[arr[i].ss]++;
    }

    ll ans = 0;
    int active = 0;
    for(int i=1;i<=cc;i++){

        active += starts[i];
        ans += C(active, k);
        ans %= MOD;
        active -= endings[i];

        if(i < cc){
            ans += (revmap[i+1]-revmap[i]-1) * C(active, k);
            ans %= MOD;
        }
    }

    printf("%I64d", ans);
    return 0;
}








