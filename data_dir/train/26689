//**KEEP IT SHORT AND SIMPLE**

#include <bits/stdc++.h>
#define IO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define FILES freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define REP(i,a,b) for (int i = a; i < b; i++)
#define NL '\n'
#define F first
#define S second
using namespace std;
typedef long long ll;
typedef bool bl;
typedef vector < vector<long long> > vvl;
typedef vector <long long> vll;
typedef pair <long long, long long> pll;
typedef set <long long> sll;
typedef map <long long, long long> mll;
typedef map <long long, bool> mlb;
typedef priority_queue<long long, vector<long long>, greater<long long> > minPq;
double pi = 2 * acos(0.0);
int OO = 0x3f3f3f3f;
long long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); }
long long lcm(long long a, long long b) { return a * (b / gcd(a, b)); }
ll _sieve_size, arr[10000010], mp[10000010];
bitset<10000010> _bs;
vll _primes;
void sieve(ll upperbound)
{
    _sieve_size = upperbound;
    _bs.set();
    _bs[0] = _bs[1] = 0;
    ll x = 1;
    for(ll i = 2;i <= _sieve_size;i++)
    {
        if(_bs[i])
        {
            for(ll j = i * 2;j <= _sieve_size;j+=i)
            {
                _bs[j] = 0;
                mp[i] += arr[j];
            }
            _primes.push_back(i);
            mp[i] += arr[i] + mp[x];
            x = i;
        }
    }
}
int main()
{
    IO
    memset(arr, 0, sizeof arr);
    memset(mp, 0, sizeof mp);
    ll n, m, x, y;
    cin >> n;
    REP(i, 0, n)
    {
        cin >> x;
        arr[x]++;
    }
    sieve(10000005);
    cin >> m;
    while(m--)
    {
        cin >> x >> y;
        auto it1 = lower_bound(_primes.begin(), _primes.end(), x);
        auto it2 = upper_bound(_primes.begin(), _primes.end(), y);
        --it2;
        if(*it1 > y || *it1 < x || *it2 > y || *it2 < x)
        {
            cout << 0 << NL;
            continue;
        }
        if(*it1 == 2)
        {
            cout << mp[*it2] << NL;
            continue;
        }
        --it1;
        cout << mp[*it2] - mp[*it1] << NL;
    }
    return 0;
}
