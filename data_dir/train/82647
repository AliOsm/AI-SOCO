#include <iostream>
#include <cstdlib>
#include <ctime>
#include <utility>
#include <cstring>
#include <algorithm>
#include <cassert>
using namespace std;

struct segment_tree
{
	int pow2;
	int *A;

	segment_tree(int N)
	{
		pow2 = 1;
		while (pow2<N) pow2 <<= 1;
		A = new int[pow2 * 2];
		memset(A, 0, pow2 * 2 * sizeof(int));
	}

	void inc(int ind)
	{
		int old_val = A[ind + pow2];
		update(ind, old_val + 1);
	}

	void update(int ind, int val)
	{
		ind += pow2;
		A[ind] = val;
		while (ind>1)
		{
			ind >>= 1;
			A[ind] = A[ind << 1] + A[(ind << 1) + 1];
		}
	}

	int sum(int L, int R)
	{
		return sum(L, R, 1, 0, pow2 - 1);
	}

	int sum(int L, int R, int ind, int LB, int RB)
	{
		if (L>R) return 0;
		if (LB == L && R == RB) return A[ind];
		int MB = (LB + RB) >> 1;
		return sum(L, min(MB, R), ind << 1, LB, MB) + sum(max(MB + 1, L), R, (ind << 1) + 1, MB + 1, RB);
	}

	~segment_tree()
	{
		delete[] A;
	}
};

typedef long long ll;
const int MAXN = 100 * 1000 + 9;
ll n, k;
ll a[MAXN];
ll s[MAXN];

ll s_sorted[MAXN];
int sz_no_dupl;

int find_ind(ll val) // highest i, such that s_sorted[i]<=val
{
	int L = 0, R = sz_no_dupl - 1, M;
	while (R - L>1)
	{
		M = (L + R) >> 1;
		if (s_sorted[M] <= val) L = M;
		else R = M;
	}
	if (s_sorted[R] <= val) return R;
	else if (s_sorted[L] <= val) return L;
	else return -1;
}

const ll INF = 1000LL * 1000LL * 1000LL * 1000LL * 1000LL * 1000LL;

bool possible(ll goal)
{
	segment_tree T(sz_no_dupl);
	int ind;

	ind = find_ind(s[0]);
	T.inc(ind);

	ll count_ok = 0;

	for (int i = 1; i <= n; i++)
	{
		ll up_bound = s[i] - goal;
		int ind_up_bound = find_ind(up_bound);

		int temp = T.sum(0, ind_up_bound);
		count_ok += temp;

		ind = find_ind(s[i]);
		T.inc(ind);
	}

	return count_ok >= k;
}

ll solve(void)
{
	ll L = -INF, R = INF, M;

	while (R - L>1)
	{
		M = (L + R) >> 1;
		if (possible(M)) L = M;
		else R = M;
	}
	if (possible(R)) return R;
	else return L;
}

void init(void)
{
	s[0] = 0LL;
	for (int i = 1; i <= n; i++) s[i] = a[i] + s[i - 1];

	memcpy(s_sorted, s, (n + 1)*sizeof(ll));
	sort(s_sorted, s_sorted + (n + 1));

	sz_no_dupl = 0;
	for (int iter_i = 0; iter_i <= n;)
	{
		int iter_j = iter_i;
		while (iter_j + 1<n && s_sorted[iter_j + 1] == s_sorted[iter_i]) iter_j++;

		s_sorted[sz_no_dupl++] = s_sorted[iter_j];
		iter_i = iter_j + 1;
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> k;
	for (int i = 1; i <= n; i++) cin >> a[i];

	init();
	cout << solve();

	return 0;
}
