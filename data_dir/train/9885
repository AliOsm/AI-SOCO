/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 16-Nov-2018 21:47:50
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 2e5 + 7;
const int inf = 1e9 + 7;

int a[N];
vector <int> v;
map <int, int> f;

inline int ok(int i, long long need) {
    int l = i, r = len(v) - 1, f = -1;
    while (l <= r) {
        int mid = l + r >> 1;
        if (v[mid] >= need) {
            f = mid, r = mid - 1;
        } else {
            l = mid + 1;
        }
    }
    return f;
}

int solve() {
    int n; Int(n);
    FOR (i, 1, n) Int(a[i]);

    FOR (i, 1, n) ++f[a[i]];

    for (auto i : f) v.push_back(i.second);

    sort(all(v));

    long long res = 0;
    for (int i = 1; i <= n; ++i) {
        long long x = 1LL * i, cur = 0;
        int pos = ok(0, x);
        while (~pos) {
            cur += x;
            x *= 2;
            pos = ok(pos + 1, x);
        }
        umax(res, cur);
    }

    printf("%lld\n", res);

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}