#include<bits/stdc++.h>
using namespace std;
typedef long long int uli;
const int mx=2e5+10;
const int mxv=1e6+10;
const uli mod=1e9+7;
uli f[mx],g[mx];
int d[mx];
vector<int>ls[mx];
vector<int>qs[mx];
uli ans[mx];
bool p[mxv];
int lp[mxv];
int idx[mxv];

uli fxp(uli b,uli x){
   uli a=1;
   for(;x!=0;b=b*b%mod,x>>=1)
      if(x&1ll)a=a*b%mod;
   return a;
}
uli iv(uli b){ return fxp(b,mod-2); }

void upd(int i,uli v){
   for(i++;i<mx;i+=(i&-i))f[i]=f[i]*v%mod;
}
uli qry(int i){
   uli a=1;
   for(i++;i>0;i-=(i&-i))a=a*f[i]%mod;
   return a;
}
uli rng(int i,int j){
   return qry(j)*iv(qry(i-1))%mod;
}

int main(){
   memset(p,true,sizeof p);
   for(int i=2;i<mxv;i++)if(p[i]){
      lp[i]=i;
      for(int j=i+i;j<mxv;j+=i){
         p[j]=0;
         lp[j]=i;
      }
   }
   for(int i=0;i<mx;i++)f[i]=1ll;

   int n,q,l,r;
   scanf("%d",&n);
   for(int i=0;i<n;i++)scanf("%d",d+i);
   g[0]=d[0];
   for(int i=1;i<n;i++)g[i]=g[i-1]*d[i]%mod;

   scanf("%d",&q);
   for(int i=0;i<q;i++){
      scanf("%d %d",&l,&r);
      ls[--r].push_back(--l);
      qs[r].push_back(i);
   }
   //phi(N)=N*prod((pi-1)/pi)
   memset(idx,-1,sizeof idx);
   for(int i=0;i<n;i++){
      int v=d[i];
      while(v!=1){
         int x=lp[v];
         while(v%x==0)v/=x;
         uli y=uli(x-1)*iv(x)%mod;
         if(idx[x]!=-1)upd(idx[x],iv(y));
         upd(i,y);
         idx[x]=i;
      }
      for(int j=0;j<int(ls[i].size());j++){
         int l=ls[i][j];
         uli o=g[i];
         if(l>0)o=o*iv(g[l-1])%mod;
         ans[qs[i][j]]=o*rng(l,i)%mod;
      }
   }
   for(int i=0;i<q;i++)
      printf("%d\n",int(ans[i]));
   return 0;

}
