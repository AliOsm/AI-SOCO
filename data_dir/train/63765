#include<bits/stdc++.h>
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define LB lower_bound
#define UB upper_bound
#define SP fixed << setprecision(10)

using namespace std;

typedef long long ll;
typedef pair <short int , short int> pii;
typedef double DB;

const int N = 5010;
const int MOD = 1000*1000*1000LL + 7;

vector <pii> vc[10010];
vector <int> cmp[N];
int par[N] , col[N] , x[N] , y[N] , pw[N];
bool mark[N];

bool merge(int u , int v){

	bool f = (col[u] == col[v]);
	if(par[u] == par[v])
	   	return !f;
	
	if(cmp[par[u]].size() > cmp[par[v]].size())
	   swap(u , v);
	
	int p = par[u];
	for(int z : cmp[p]){
	   	cmp[par[v]].PB(z);
		par[z] = par[v];
		if(f)
		   col[z] = 1 - col[z];
	}
	
	cmp[p].clear();
	return 1;
}

int main(){

	ios_base::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);
	
	int n , ans1(0) , ans2(0);
	cin >> n;

	for(int i = 0 ; i < n ; i++)
	   	cin >> x[i] >> y[i];
	
	pw[0] = 1;
	for(int i = 0 ; i < n ; i++){
	   pw[i+1] = pw[i] * 2 % MOD;
	   par[i] = i;
	   cmp[i].PB(i);
	   
	   for(int j = i+1 ; j < n ; j++){
		  	int dist = abs(x[i] - x[j]) + abs(y[i] - y[j]);
			ans1 = max(ans1 , dist);
			vc[dist].PB({i , j});
	   }
	}
	
	
	for(int i = 10000 ; i >= 0 ; ){
	   	if(vc[i].size()){
		   	pii u = vc[i].back();

			if(!merge(u.F , u.S))
				i = -1;			
			else
				vc[i].pop_back();			
		}

		if(i >= 0 && vc[i].empty()){
		    memset(mark , 0 , sizeof mark);
			ans2 = 0;			
			for(int j = 0 ; j < n ; j++){			
				int t = par[j];
				if(!mark[t])
					ans2++;
				mark[t] = 1;
			}
		    i--;		   
		}
	}
	
	while(ans1 && vc[ans1].empty())
	   ans1--;
	
	cout << ans1 << endl << pw[ans2] << endl;

	return 0;
}
