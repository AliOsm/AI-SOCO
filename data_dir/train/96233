/*
  Compete against Yourself.
  Author - Aryan Choudhary (@aryanc403)
*/

#pragma GCC optimize ("Ofast")
#pragma GCC target ("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize ("-ffloat-store")

#include<iostream>
#include<bits/stdc++.h>
using namespace std;
#define fo(i,n)   for(i=0;i<(n);++i)
#define repA(i,j,n)   for(i=(j);i<=(n);++i)
#define repD(i,j,n)   for(i=(j);i>=(n);--i)
#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()
#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define endl "\n"

typedef long long int lli;
typedef long double mytype;
typedef pair<lli,lli> ii;
typedef vector<ii> vii;
typedef vector<lli> vi;

clock_t time_p=clock();
void aryanc403()
{
#ifdef ARYANC403
    time_p=clock()-time_p;
    cerr<<"Time Taken : "<<(float)(time_p)/CLOCKS_PER_SEC<<"\n";
#endif
}

#ifdef ARYANC403
#include "/home/aryan/codes/PastCodes/header.h"
#else
    #define dbg(args...)
#endif

const lli INF = 0xFFFFFFFFFFFFFFFL;

lli seed;
mt19937 rng(seed=chrono::steady_clock::now().time_since_epoch().count());
inline lli rnd(lli l=0,lli r=INF)
{return uniform_int_distribution<lli>(l,r)(rng);}

class CMP
{public:
bool operator()(ii a , ii b) //For min priority_queue .
{    return ! ( a.X < b.X || ( a.X==b.X && a.Y <= b.Y ));   }};

void add( map<lli,lli> &m, lli x,lli cnt=1)
{
    auto jt=m.find(x);
    if(jt==m.end())         m.insert({x,cnt});
    else                    jt->Y+=cnt;
}

void del( map<lli,lli> &m, lli x,lli cnt=1)
{
    auto jt=m.find(x);
    if(jt->Y<=cnt)            m.erase(jt);
    else                      jt->Y-=cnt;
}

bool cmp(const ii &a,const ii &b)
{
    return a.X<b.X||(a.X==b.X&&a.Y<b.Y);
}

const lli mod = 1000000007L;
const lli maxN = 100000L;

    lli T,n,i,j,k,in,cnt,l,r,u,v,x,y;
    lli m;
    string s;
    vi e[maxN+5],a;
    lli sze[maxN+5],p[maxN+5],rt;
    //priority_queue < ii , vector < ii > , CMP > pq;// min priority_queue .

void link(lli x,lli y)
// add x'chain to node y.
{
    a.pb(x);
    p[x]=y;
}

void dfs(lli u,lli y)
{
    if(e[u].empty())
    {
        if(y==-1)
            rt=u;
        return;
    }

    if(y!=-1)
        link(y,e[u][0]);
    dfs(e[u][0],y);

    lli n=sz(e[u]),i;
    repA(i,1,n-1)
    {
        link(e[u][i-1],e[u][i]);
        dfs(e[u][i],e[u][i-1]);
    }
}

lli dfs_(lli u)
{
    // dbg(u);
    lli &c=sze[u];
    c=0;
    for(auto x:e[u])
        c=max(c,dfs_(x));
    c++;
    sort(e[u].begin(),e[u].end(),[&](const lli &a,const lli &b){
        return sze[a]>sze[b];
    });
    return c;
}

int main(void) {
    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
    // freopen("txt.in", "r", stdin);
    // freopen("txt.out", "w", stdout);
// cout<<std::fixed<<std::setprecision(35);
// cin>>T;while(T--)
{

    cin>>n;

    repA(i,1,n-1)
    {
        cin>>in;
        e[in].pb(i);
        p[i]=in;
    }

    dfs_(0);
    dfs(0,-1);

    vi b;
    u=rt;
    while(n--)
    {
        b.pb(u);
        u=p[u];
    }

    reverse(all(b));
    for(auto x:b)
        cout<<x<<" ";
    cout<<endl;

    reverse(all(a));
    cout<<sz(a)<<endl;
    for(auto x:a)
        cout<<x<<" ";
}   aryanc403();
    return 0;
}