#include <bits/stdc++.h>
#include <stdio.h>
#include <cstdio>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
 
#define pb push_back
#define mp make_pair
#define sz(s) ((int)(s.size()))
#define all(s) s.begin(),s.end()
#define rep(i,a,n) for(int i=a;i<=n;++i)
#define per(i,n,a) for(int i=n;i>=a;--i)
#define dbg(x) cerr << (#x) << " --> " << (x) << nxtl;
#define onlycin ios_base::sync_with_stdio(false); cin.tie(0) 
using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;
typedef double ld;
typedef tree<
pair < int, int >,
null_type,
less< pair < int, int > >,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;
const int MAXN = (int)5e5+228;
const char nxtl = '\n';
const int mod = (int)1e9+7;
const double eps = (double)1e-9;
template<typename T> inline bool updmin(T &a, const T &b) {return a > b ? a = b, 1 : 0;}
template<typename T> inline bool updmax(T &a, const T &b) {return a < b ? a = b, 1 : 0;}

int n;
ll sz[MAXN], dp[MAXN][3];
vector < int > g[MAXN];
int a[MAXN];

void dfs(int x, int pr = -1) {
	sz[x] = a[x];
	vector < ll > v;
	for(auto &to : g[x]) {
		if(to == pr) continue;
		dfs(to,x);
		updmax(dp[x][1],dp[to][1]);
		updmax(dp[x][2],dp[to][2]);
		v.pb(dp[to][1]);
		sz[x] += sz[to];
	}
	sort(all(v));
	reverse(all(v));
	if(sz(v) > 1) updmax(dp[x][2], v[0]+v[1]);
	updmax(dp[x][1], sz[x]);
}

int main() {
	#ifdef accepted
		freopen(".in", "r", stdin);
		freopen(".out", "w", stdout);
	#endif
	onlycin;
	cin >> n;
	rep(i,1,n) cin >> a[i];
	rep(i,1,n) dp[i][1] = dp[i][2] = -(ll)1e16;
	rep(i,2,n) {
		int x, y; cin >> x >> y;
		g[x].pb(y);
		g[y].pb(x);
	}
	dfs(1);
	if(dp[1][2] == -(ll)1e16) cout << "Impossible";
	else cout << dp[1][2];
	return 0;
}
