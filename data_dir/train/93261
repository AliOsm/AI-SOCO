#include<bits/stdc++.h>
using namespace std;
#define ll  long long
#define endl '\n'
#define FASTINOUT ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
const ll mod = 1000000007;
const double PI = 3.141592653589793238463;
const int N=2e5+1;
int socks[N];
int parent[N];
int root[N];
bool visited[N];
vector<int>v[N];
int find(int x){
    if (parent[x]==x)
        return x;
    return find(parent[x]);
}
void merge(int x,int y){
    int parentx=find(x);
    int parenty=find(y);
    if (parentx==parenty)
        return;
        if (root[parentx]>=root[parenty]){
        root[parentx]+=root[parenty];
        parent[parenty]=parentx;
        }
        else{
        root[parenty]+=root[parentx];
        parent[parentx]=parenty;
        }
}
int main()
{
    FASTINOUT;
    int x,m,k,r,l;
    cin>>x>>m>>k;
    for (int i=1;i<=x;i++){
        cin>>socks[i];
        parent[i]=i;
        root[i]=1;
    }
    for (int i=1;i<=m;i++){
        cin>>r>>l;
        merge(r,l);
    }
    for (int i=1;i<=x;i++)
            v[find(i)].push_back(socks[i]);
    ll ans=0;
    for (int i=1;i<=x;i++){

        map<int,int>mp;
        int mx=0;
        for (int j=0;j<v[i].size();j++){
            mp[v[i][j]]++;
            mx=max(mx,mp[v[i][j]]);
        }
        ans+=v[i].size()-mx;
    }
    cout<<ans<<endl;
    return 0;
}
