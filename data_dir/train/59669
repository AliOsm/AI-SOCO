//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
//#pragma GCC target("avx,tune=native")
// Anand Jaisingh

#include<bits/stdc++.h>

using namespace std;

typedef complex<double> base;
typedef long double ld;
typedef long long ll;

#define pb push_back
#define pii pair<int,int>
#define pll pair< ll , ll >
#define vi vector<int>
#define vvi vector< vi >

const int maxn=(int)(2e3+3);
const ll mod=(ll)(1e9+7);
string a[maxn];
int vals[maxn][maxn];
int n,m,r,c,cost1,cost2;
int x[4]={1,-1,0,0},y[4]={0,0,1,-1};
int cost[4]={0,0,1,1};

bool check(int i,int j)
{
    return (i>=0 && i<n && j>=0 && j<m && a[i][j]!='*');
}

int main()
{
    ios_base::sync_with_stdio(0);cin.tie(0);

    cin>>n>>m>>r>>c>>cost1>>cost2;

    r--;c--;

    for(int i=0;i<n;i++)
    {
        string s;cin>>s;

        a[i]=s;

        for(int j=0;j<m;j++)
        {
            vals[i][j]=INT_MAX;
        }
    }

    assert(check(r,c));

    queue< pair< int, pii > > qx,qy;

    qx.push({0,{r,c}});vals[r][c]=0;

    while(qx.size()>0 || qy.size()>0)
    {
        if(qy.size()==0)
        {
            pair< int, pii > curr=qx.front();

            qx.pop();int x1=curr.second.first,y1=curr.second.second;

            for(int i=0;i<4;i++)
            {
                int next_x=x1+x[i],next_y=y1+y[i];

                if(check(next_x,next_y) && vals[next_x][next_y]>vals[x1][y1]+cost[i])
                {
                    vals[next_x][next_y]=vals[x1][y1]+cost[i];

                    if(cost[i]==0)
                    {
                        qx.push({vals[next_x][next_y],{next_x,next_y}});
                    }

                    else
                    {
                        qy.push({vals[next_x][next_y],{next_x,next_y}});
                    }
                }
            }
        }

        else if(qx.size()==0)
        {
            pair< int, pii > curr=qy.front();

            qy.pop();int x1=curr.second.first,y1=curr.second.second;

            for(int i=0;i<4;i++)
            {
                int next_x=x1+x[i],next_y=y1+y[i];

                if(check(next_x,next_y) && vals[next_x][next_y]>vals[x1][y1]+cost[i])
                {
                    vals[next_x][next_y]=vals[x1][y1]+cost[i];

                    if(cost[i]==0)
                    {
                        qx.push({vals[next_x][next_y],{next_x,next_y}});
                    }

                    else
                    {
                        qy.push({vals[next_x][next_y],{next_x,next_y}});
                    }
                }
            }
        }

        else if(qx.front().first<=qy.front().first)
        {
            pair< int, pii > curr=qx.front();

            qx.pop();int x1=curr.second.first,y1=curr.second.second;

            for(int i=0;i<4;i++)
            {
                int next_x=x1+x[i],next_y=y1+y[i];

                if(check(next_x,next_y) && vals[next_x][next_y]>vals[x1][y1]+cost[i])
                {
                    vals[next_x][next_y]=vals[x1][y1]+cost[i];

                    if(cost[i]==0)
                    {
                        qx.push({vals[next_x][next_y],{next_x,next_y}});
                    }

                    else
                    {
                        qy.push({vals[next_x][next_y],{next_x,next_y}});
                    }
                }
            }
        }

        else
        {
            pair< int, pii > curr=qy.front();

            qy.pop();int x1=curr.second.first,y1=curr.second.second;

            for(int i=0;i<4;i++)
            {
                int next_x=x1+x[i],next_y=y1+y[i];

                if(check(next_x,next_y) && vals[next_x][next_y]>vals[x1][y1]+cost[i])
                {
                    vals[next_x][next_y]=vals[x1][y1]+cost[i];

                    if(cost[i]==0)
                    {
                        qx.push({vals[next_x][next_y],{next_x,next_y}});
                    }

                    else
                    {
                        qy.push({vals[next_x][next_y],{next_x,next_y}});
                    }
                }
            }
        }
    }

    int res=0;

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<=c;j++)
        {
            if(vals[i][j]<INT_MAX)
            {
                int dis=c-j,left=((vals[i][j]-dis)/2)+dis,right=(vals[i][j]-dis)/2;

                if(left<=cost1 & right<=cost2)
                {
                    res++;
                }
            }
        }

        for(int j=c+1;j<m;j++)
        {
            if(vals[i][j]<INT_MAX)
            {
                int dis=j-c,left=(vals[i][j]-dis)/2,right=((vals[i][j]-dis)/2)+dis;

                if(left<=cost1 & right<=cost2)
                {
                    res++;
                }
            }
        }
    }

    cout<<res<<endl;

    return 0;
}
