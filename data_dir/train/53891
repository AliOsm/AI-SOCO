# include <bits/stdc++.h>
 
using namespace std;
 
# define MP make_pair
# define L first
# define R second
 
const int maxn = 500 + 10;
 
pair <int,int> par[maxn][maxn];
 
int a[maxn], b[maxn], pd[maxn], Par[maxn], Idp[maxn];
int last[maxn][maxn];
int dp[maxn][maxn];
 
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
 
	int m;
	cin >> m;
	for (int i = 0; i < m; i++)
		cin >> b[i];
 
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			if(a[i - 1] == b[j - 1])
				dp[i][j] = dp[i - 1][j - 1] + 1, par[i][j] = MP(i - 1, j - 1), last[i][j] = a[i - 1];
			else{
				if(dp[i - 1][j] > dp[i][j - 1])
					dp[i][j] = dp[i - 1][j], par[i][j] = MP(i - 1, j), last[i][j] = last[i - 1][j];
 
				if(dp[i - 1][j] < dp[i][j - 1])
					dp[i][j] = dp[i][j - 1], par[i][j] = MP(i, j - 1), last[i][j] = last[i][j - 1];
 
				if(dp[i - 1][j] == dp[i][j - 1]){
					if((last[i - 1][j] >= last[i][j - 1] and i >= j) or (last[i - 1][j] <= last[i][j - 1] and i <= j))
						dp[i][j] = dp[i][j - 1], par[i][j] = MP(i, j - 1), last[i][j] = last[i][j - 1];
					else
						dp[i][j] = dp[i - 1][j], par[i][j] = MP(i - 1, j), last[i][j] = last[i - 1][j];
				}
			}
 
 
 
	int x = n, y = m;
	vector <int> v;
	while(x > 0 && y > 0){
		pair <int,int> p = par[x][y];
		if(p.L < x && p.R < y)
			v.push_back(last[x][y]);
 
		x = p.L, y = p.R;
	}
	reverse(v.begin(), v.end());
 
	if(v.size() == 0){
		cout << "0" << endl;
		return 0;
	}
 
	int size = 0;
	for (int i = 0; i < v.size(); i++){
		int x = v[i];
		int idx = lower_bound(pd, pd + size, x) - pd;
		if(idx == size)
			size++;
 
		pd[idx] = x;
		Idp[idx] = i;
		if(idx > 0)
			Par[i] = Idp[idx - 1];
		else
			Par[i] = -1;
	}
 
	int piv = Idp[size - 1];
	vector <int> ans;
	while(piv != -1)
		ans.push_back(v[piv]), piv = Par[piv];
	
	cout << ans.size() << endl;
	for (int i = ans.size() - 1; i >= 0; i--)
		cout << ans[i] <<" ";
	cout << endl;
	
	return 0;
}