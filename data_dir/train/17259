/**
 * Dont raise your voice, improve your argument.
 * --Desmond Tutu
 */

#include <bits/stdc++.h>
using namespace std;

#define DEBUG
#ifndef DEBUG
#define endl "\n"
#endif

const double PI = acos(-1);
typedef long long ll;
#define fori(n) for(ll i=0; i<(n); i++)

#define cins(s) string s; cin>>s;
#define cini(i) int i; cin>>i;
#define cinll(l) ll l; cin>>l;
#define cind(d) double d; cin>>d;
#define cinai(a, n) vi a(n); fori(n) { cin>>a[i]; }
#define cinall(a, n) vll a(n); fori(n) { cin>>a[i]; }
#define cinas(s, n) vs s(n); fori(n) { cin>>s[i]; }
#define cinad(a, n) vd a(n); fori(n) { cin>>a[i]; }

typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<double> vd;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<string> vs;
typedef vector<ll> vll;

/* We need to find the
 *
 */
void solve() {
	cini(n);
	set<int> sa;
	for (int i = 0; i < n; i++) {
		cini(aux);
		sa.insert(aux);
	}

	const int INF = 1e9;
	/* returns the minimal possible value of all those in va
	 * manipulating bits lower or eq than position bit.
	 */
	function<int(vi&, int)> mival = [&](vi &va, int bit) {
		if (va.size() == 0)
			return INF;

		if (va.size() == 1) {
			int val = va[0];
			//cout << "va.size()==1, bef val=" << val << endl;
			for (int i = 0; i <= bit; i++)
				val &= ~(1 << i);
			//cout << "va.size()==1, aft val=" << val << endl;
			return val;
		}

		set<int> s0;
		set<int> s1;
		for (int i : va)
			if (i & (1 << bit))
				s1.insert(i);
			else
				s0.insert(i | (1 << bit));

		vi v0(s0.size());
		vi v1(s1.size());
		copy(s0.begin(), s0.end(), v0.begin());
		copy(s1.begin(), s1.end(), v1.begin());

		if (s0.size() > 0 && s1.size() > 0) {
			//cout << "bit=" << bit << " v0[0]=" << v0[0] << " v1[0]=" << v1[0] << endl;
			return min(mival(v0, bit - 1), mival(v1, bit - 1));
		} else if (s0.size() > 0) {
			for (int &v : v0)
				v &= ~(1 << bit);
			return mival(v0, bit - 1);
		} else if (s1.size() > 0) {
			for (int &v : v1)
				v &= ~(1 << bit);
			return mival(v1, bit - 1);
		}
		assert(false);
	};

	vi a(sa.size());
	copy(sa.begin(), sa.end(), a.begin());
	int ans = mival(a, 30);
	cout << ans << endl;

}

int main() {
	cin.tie(nullptr);
	std::ios::sync_with_stdio(false);
	solve();
}

