#include<bits/stdc++.h>
#define F first
#define S second
#define PB push_back
#define LB lower_bound
#define UB upper_bound
#define SP fixed << setprecision(10)
#define ER(x) cout << #x << " = " << x << endl;

using namespace std;

typedef long long ll;
typedef pair <int , int> pii;
typedef double DB;

const int N = 5010 , INF = 100000000;

vector <int> adj[N][2] , cmp[N] , vc;
queue <int> q;

int d[N][N] , comp[N] , c;
bool mark[N] , notsink[N] , a[N][N] , er[N];

void BFS(int s , int f){
	
	q.push(s);
	d[s][s] = 0;
	mark[s] = 1;

	while(!q.empty()){
		int u = q.front();
		q.pop();

		for(int v : adj[u][f]){
			if(!mark[v]){
				q.push(v);
				mark[v] = 1;
				d[s][v] = d[s][u] + 1;
				if(!f){
					er[v] = 1;
				}
			}
		}
	}

	return;
}

void DFS1(int v){
	
	mark[v] = 1;
	for(int u : adj[v][1]){
		if(!mark[u] && !er[u]){
			DFS1(u);
		}
	}
	
	vc.PB(v);
}

void DFS2(int v , int c){

	mark[v] = 1;
	comp[v] = c;
	cmp[c].PB(v);
	
	for(int u : adj[v][1]){
		if(!mark[u] && !er[u]){
			DFS2(u , c);
		}
	}
	
	return;
}

int main(){

	ios_base::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);
	
	int n , m , t(0) , ret(0) , u , v;
	cin >> n >> m;

	for(int i = 0 ; i < m ; i++){
		cin >> u >> v;
		adj[--u][1].PB(--v);
		adj[v][0].PB(u);
		a[u][v] = 1;
	}
		
	for(int i = 0 ; i < n ; i++){
		for(int j = 0 ; j < n ; j++){
			d[i][j] = INF;
		}

		if(adj[i][1].empty()){
			er[i] = 1;
		}
	}
	
	for(int i = 0 ; i < n ; i++){
		if(er[i]){
			BFS(i , 0);
			memset(mark , 0 , sizeof mark);
		}
	}

	for(int i = 0 ; i < n ; i++){
		if(!mark[i] && !er[i]){
			BFS(i , 1);
			memset(mark , 0 , sizeof mark);
		}
	}

	for(int i = 0 ; i < n ; i++){
		if(!mark[i] && !er[i]){
			DFS1(i);
		}
	}	
	
	reverse(vc.begin() , vc.end());
	memset(mark , 0 , sizeof mark);
	
	for(int u : vc){
		if(!mark[u]){
			DFS2(u , c);
			c++;
		}
	}

	for(int i = 0 ; i < n ; i++){
		if(er[i]){
			continue;
		}

		for(int u : adj[i][1]){
			if(!er[u] && comp[i] != comp[u]){
				notsink[comp[i]] = 1;
			}
		}
	}

	for(int i = 0 ; i < c ; i++){		
		
		if(notsink[i]){
			continue;
		}

		int mn = INF;
		for(int u : cmp[i]){
			for(int v : cmp[i]){
				if(u != v && a[v][u]){
					mn = min(mn , d[u][v] + 1);
				}
			}
		}

		if(mn != INF){
			t += mn;
			ret += mn*999 + 1;
		}
	}
	
	cout << ret + n - t << endl;	
	return 0;
}
