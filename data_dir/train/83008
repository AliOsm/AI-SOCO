#include <bits/stdc++.h>
using namespace std;

const int N = 1005;
const int M = (1<<8) + 10;
int dp[N][M];
int a[N];
vector<int> adj[10];
int n , k , ans;

int nxt(int idx , int moves){
    moves--;
    int j = lower_bound(adj[a[idx]].begin() , adj[a[idx]].end() , idx) - adj[a[idx]].begin();
    if((int)adj[a[idx]].size() <= j + moves)return -1;
    return adj[a[idx]][j+moves] + 1;
}

int solve(int idx = 0 , int msk = 0 , int cnt = 0){
    if(idx == -1)return -N*N;
    if(cnt == 8)return 0;
    if(idx == n)return -N*N;
    int &ret = dp[idx][msk];
    if(~ret)return ret;
    ret = solve(idx + 1 , msk , cnt);
    if(msk & (1<<a[idx]))return ret;
    ret = max(ret , solve(nxt(idx , k) , msk | (1 << a[idx]) , cnt+1) + k);
    ret = max(ret , solve(nxt(idx , k + 1) , msk | (1 << a[idx]) , cnt+1) + k + 1);
    return ret;
}

int solve0(int idx = 0 , int msk = 0 , int cnt = 0){
    if(cnt == 8)return 0;
    if(idx == n)return 0;
    int &ret = dp[idx][msk];
    if(~ret)return ret;
    ret = solve0(idx + 1 , msk , cnt);
    if(msk & (1<<a[idx]))return ret;
    ret = max(ret , solve0(nxt(idx , k + 1) , msk | (1 << a[idx]) , cnt+1) + k + 1);
    return ret;
}


int main()
{
    scanf("%d",&n);
    for(int i = 0 ; i < n ; i++){
        scanf("%d",&a[i]);
        a[i]--;
        adj[a[i]].push_back(i);
    }


    int s = 0 , e = 335;
    while(s < e){
        int mid = s + (e-s+1)/2;
        k = mid;
        memset(dp,-1,sizeof dp);
        if(solve() >= mid*8)s = mid;
        else e = mid-1;
    }

    memset(dp,-1,sizeof dp);
    k = s;
    if(k)ans = solve();
    else ans = solve0();

    cout << ans << endl;

    return 0;
}

