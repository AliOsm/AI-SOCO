#include <cstring>
#include <iostream>
#include <bitset>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <utility>
#include <algorithm>
#include <iomanip>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define scs(s) scanf("%s", s)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define imprime(v)                                        \
  for (int X = 0; X < v.size(); X++) cout << v[X] << " "; \
  cout << endl;
#define grid(v)                                                   \
  for (int X = 0; X < v.size(); X++) {                            \
    for (int Y = 0; Y < v[X].size(); Y++) cout << v[X][Y] << " "; \
    cout << endl;                                                 \
  }
#define endl "\n"
const int INF = 0x3f3f3f3f;
const long double pi = acos(-1);
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vector<ll> > vvi;
typedef vector<vector<ii> > vvii;
const int MOD = 1e9 + 7;
const int N=210;
int graph[N][N];
int g[N][N];
int us[N], deg[N],foi[N];
map<int,ii> mapa;
vi camin;
int n,m;
void limpa(){
  memset(graph,0,sizeof(graph));
  memset(us,0,sizeof(us));
  memset(deg,0,sizeof(deg));
  memset(g,0,sizeof(g));
  memset(foi,0,sizeof(foi));
  mapa.clear();
  camin.clear();
}
void dfs(int u, int tam){
  us[u]=1;
  for(int i=1;i<tam;i++){
    if(g[u][i]){
      g[u][i]--;
      g[i][u]--;
      dfs(i, tam);
    }
  }
  camin.pb(u);
}
void process()
{
  for(int i=0;i<camin.size()-1;i++){
   ii x=mapa[camin[i]];
    ii y=mapa[camin[i+1]];
//    cout<<camin[i]<<" "<<camin[i+1]<<endl;
//    cout<<x.first<<" "<<x.second<<endl;
//    cout<<y.first<<" "<<y.second<<endl;
    if(graph[x.first][y.first]){
      graph[x.first][y.first]=graph[y.first][x.first]=0;
      cout<<x.first<<" "<<y.first<<endl;
    }
    else if(graph[x.first][y.second]){
      graph[x.first][y.second]=graph[y.second][x.first]=0;
      cout<<x.first<<" "<<y.second<<endl;
    }
    else if(graph[x.second][y.first]){
      graph[x.second][y.first]=graph[y.first][x.second]=0;
      cout<<x.second<<" "<<y.first<<endl;
    }
    else if(graph[x.second][y.second]){
      graph[x.second][y.second]=graph[y.second][x.second]=0;
      cout<<x.second<<" "<<y.second<<endl;
    }
  }
}
void compress(int tam)
{
  for(int i=1;i<tam;i++){
    for(int j=1;j<tam;j++){
      ii x=mapa[i];
      ii y=mapa[j];
      g[i][j]+=graph[x.first][y.first];
      g[i][j]+=graph[x.second][y.first];
      g[i][j]+=graph[x.first][y.second];
      g[i][j]+=graph[x.second][y.second];
    }
  }
}
void sovai(int tam)
{
 for(int i=1;i<tam;i++){
    if(us[i]) continue;
    dfs(i, tam);
    process();
    camin.clear();
  }
}
void solve(){
  limpa();
  sc2(n,m);
  for(int i=0;i<m;i++){
    int u,v;
    sc2(u,v);
    graph[u][v]=graph[v][u]=1;
    deg[u]++,deg[v]++;
  }
  int r=0;
  int tam=1;
  for(int i=1;i<=n;i++)
    if(deg[i]%2==0) r++;
  cout<<r<<endl;
  for(int i=1;i<=n;i++)
    for(int j=i+1;j<=n;j++){
      if(deg[i]%2 and deg[j]%2 and !foi[i] and !foi[j]){ 
        mapa[tam]=mp(i,j);
        foi[i]=1; 
        foi[j]=1;
        tam++;
      }
    }
  for(int i=1;i<=n;i++) 
    if(deg[i]%2==0){ 
      mapa[tam]=mp(i,0);
      tam++;
    }
  compress(tam);
/*  for(int i=1;i<tam;i++){
    for(int j=1;j<tam;j++){
      cout<<g[i][j];
    }
    cout<<endl;
  }*/
  sovai(tam);
}
int main()
{
  int t;
  sc(t);
  while(t--){
    solve();
  }
  return 0;
}
