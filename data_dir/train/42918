
#include <random>
#include <chrono>
#include <functional>
#include <utility>
#include <iomanip>
#include <iostream>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>

int n;
int T;
std::vector<int> a;
std::vector<int> t;
std::vector<int> answer;

bool solve(int offer) {
    std::vector<std::pair<int, int>> d;
    for (int i = 0; i < n; ++i) {
        if (a[i] >= offer) {
            d.push_back(std::make_pair(t[i], i + 1));
        }
    }
    if (int(d.size()) < offer) {
        return false;
    }
    std::sort(d.begin(), d.end());
    for (size_t i = 1; i < d.size(); ++i) {
        d[i].first += d[i - 1].first;
    }
    if (d[offer - 1].first <= T) {
        answer.clear();
        for (int i = 0; i < offer; ++i) {
            answer.push_back(d[i].second);
        }
        return true;
    } else {
        return false;
    }
}

int main() {

    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);

    std::cin >> n >> T;
    a.resize(n);
    t.resize(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> a[i] >> t[i];
    }

    // TODO
    int lt = 0;
    int rt = n + 1;

    while (lt + 1 < rt) {  // TODO
        int mt = (lt + rt) / 2;
        if (solve(mt)) {
            lt = mt;
        } else {
            rt = mt;
        }
    }

    std::cout << answer.size() << std::endl;
    std::cout << answer.size() << std::endl;
    for (int elem: answer) {
        std::cout << elem << " ";
    }

    return 0;
}