#include<bits/stdc++.h>
using namespace std;
const int MXN = 20, MAX = (1 << 18);
long long n, m, k, r, t, p, c, Mx, dp[MXN][MAX], A[MXN], T[MXN][MXN];
int Bitcount(int num)
{
    if (num == 0)
        return (0);
    return ((num & 1) + Bitcount(num / 2));
}
long long Solve(int Mask, int l)
{
    if (dp[l][Mask] != -1)
        return (dp[l][Mask]);
    long long Max = 0;
    for (int i = 0; i < n; i++)
    {
        if (!(Mask & (1 << i)) || i == l)
            continue;
        Max = max(Max, Solve(Mask - (1 << l), i) + T[i][l]);
    }
    dp[l][Mask] = Max + A[l];
    return (dp[l][Mask]);
}
int main()
{
    scanf("%I64d%I64d%I64d", &n, &m, &k);
    for (int i = 0; i < n; i++)
        scanf("%I64d", &r), A[i] = r;
    for (int i = 0; i < k; i++)
        scanf("%I64d%I64d%I64d", &r, &t, &p), T[r - 1][t - 1] = p;
    for (int i = 1; i < MAX; i++)
        for (int j = 0; j < 18; j++)
            dp[j][i] = -1;
    for (int i = 1; i < (1 << n); i++)
        for (int j = 0; j < n; j++)
            if (Bitcount(i) == m && (i & (1 << j)))
                Mx = max(Mx, Solve(i, j));
    printf("%I64d", Mx);
    return (0);
}
