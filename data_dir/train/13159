#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOR(i, a, b) for (int i = a; i < int(b); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

const int MAX = 4004000;
const int INF = 1000000;
int st[MAX], pot;

char s[200100];
int a[200100], n;

void init() {
	pot = 1;
	while(pot <  800000) pot *= 2;
	REP(i, 2*pot) st[i] = INF;
}

void up(int leaf, int val) {
	int node = pot + leaf;
	st[node] = min(st[node], val);
	node /= 2;
	while(node > 0) {
		st[node] = min(st[2*node], st[2*node + 1]);
		node /= 2;
	}
}

int query(int node, int l, int r, int L, int R) {
	if(r < L || R < l) return INF;
	else if(L <= l && r <= R) return st[node];
	else return min(query(2*node, l, (l + r)/2, L, R), query(2*node + 1, (l + r)/2 + 1, r, L, R));
}

int q(int l, int r) {
	return query(1, 0, pot - 1, l, r);
}


bool is(char c) {
	c = tolower(c);
	return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
}

int t(int k) {
	return k + 220000;
}

int acc[200100];

int main() {
	scanf("%s", s);
	n = strlen(s);
	REP(i, n) a[i] = (is(s[i]) ? 1 : -1);
	init();
	int ans = 0, cnt = 0;
	for(int i = 0; i < n; i++) {
		if(i != 0) acc[i] = acc[i - 1];
		if(a[i] == 1) acc[i]--;
		else acc[i] += 2;
		//printf("i = %d, acc = %d\n", i, acc[i]);
		if(acc[i] >= 0) {
			ans = i + 1;
			cnt = 1;
		}
		
		int j = q(0, t(acc[i]));
		if(j != INF) {
			if(i - j > ans) {
				ans = i - j;
				cnt = 1;
			}
			else if(i - j == ans) cnt++;
		}
		up(t(acc[i]), i);
	}
	if(ans == 0) printf("No solution\n");
	else printf("%d %d\n", ans, cnt);
}














