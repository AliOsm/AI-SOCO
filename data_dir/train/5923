#include <bits/stdc++.h>
using namespace std;
const int BASE = 998244353;

int n, preDfs[200200], postDfs[200200], dfsCount, subtree[200200], par[200200];
vector<int> a[200200];
vector<pair<int, int>> childrenWithSize[200200], childrenTimeInterval[200200];
int tree[200200];

long long power(long long x, long long y)
{
  if (!y)
    return 1;
  long long res = power(x, y >> 1);
  res = res * res % BASE;
  if (y & 1)
    res = res * x % BASE;
  return res;
}

void dfsSize(int x)
{
  subtree[x] = 1;
  for (int y : a[x])
    if (y != par[x])
    {
      par[y] = x;
      dfsSize(y);
      subtree[x] += subtree[y];
      childrenWithSize[x].push_back({subtree[y], y});
    }
  sort(childrenWithSize[x].begin(), childrenWithSize[x].end());
}

void dfsTime(int x)
{
  preDfs[x] = ++dfsCount;
  int lastSz = 0;
  for (auto [szY, y] : childrenWithSize[x])
  {
    dfsTime(y);
    if (szY != lastSz) childrenTimeInterval[x].push_back({szY, postDfs[y]});
    else childrenTimeInterval[x].back().second = postDfs[y];
    lastSz = szY;
  }
  postDfs[x] = dfsCount;
}

void add(int x, int v)
{
  for (int i = x; i <= n; i += i & -i)
  {
    tree[i] += v;
    if (tree[i] >= BASE)
      tree[i] -= BASE;
  }
}

int get(int x)
{
  int res = 0;
  for (int i = x; i; i -= i & -i)
  {
    res += tree[i];
    if (res >= BASE)
      res -= BASE;
  }
  return res;
}

int main()
{
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  int q;
  cin >> n >> q;
  for (int i = 1; i < n; i++)
  {
    int x, y;
    cin >> x >> y;
    a[x].push_back(y);
    a[y].push_back(x);
  }

  dfsSize(1);
  dfsTime(1);

  int sumD = 0;
  long long invN = power(n, BASE - 2);
  while (q--)
  {
    int op, x, d;
    cin >> op >> x;
    if (op == 1)
    {
      cin >> d;
      if (!d) // what's the point???
        continue;

      sumD = (sumD + d) % BASE;
      // par
      if (par[x])
      {
        int sz = n - subtree[x];
        long long value = sz * invN % BASE * d % BASE;
        if (preDfs[x] > 1)
        {
          add(1, value);
          add(preDfs[x], BASE - value);
        }
        if (postDfs[x] < n)
          add(postDfs[x] + 1, value);
      }
      // at most sqrt(n) children intervals
      int lastId = preDfs[x];
      long long lastValue = 0;
      for (auto [sz, to] : childrenTimeInterval[x])
      {
        long long value = sz * invN % BASE * d % BASE;
        add(lastId + 1, (value - lastValue + BASE) % BASE);
        lastId = to;
        lastValue = value;
      }
      if (lastId < n)
        add(lastId + 1, BASE - lastValue);
    }
    else
    {
      long long ans = (sumD - get(preDfs[x]) + BASE) % BASE;
      cout << ans << '\n';
    }
  }
}
