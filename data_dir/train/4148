#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <map>
#include <iterator>
#include <queue>
#include <list>
#include <stack>
#include <set>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef list < int > :: iterator IteratorList;

const int NMax = 101;
const int INF = (int) (1e9);
const int cntTree = 262145;
const double eps = 1e-9;
const double PI = 3.141592653589793238462;
const int MOD = (int) 1e9 + 7;

#define MIN(x,y) ((x) > (y) ? (y) : (x))
#define MAX(x,y) ((x) > (y) ? (x) : (y))
#define SQR(x) ((x) * (x))
#define ABS(x) ((x) < (0) ? (-(x)) : (x))
#define SZ(x) (int) (x).size()

struct T
{
    int t,w;
    void read()
    {
        scanf("%i%i", &t, &w);
    }
    bool operator <(const T &a) const
    {
        return (w > a.w);
    }
};

int n;
T p[NMax];
int dp[NMax][20003];

int solve(int i,int W)
{
    if (i == n + 1)
        if (W < 10001) return INF;
        else return 0;
    if (dp[i][W] != -1) return dp[i][W];
    dp[i][W] = MIN(solve(i + 1,W - p[i].w),solve(i + 1,W + p[i].t) + p[i].t);
    return dp[i][W];
}


int main()
{
    scanf("%i", &n);
    for (int i = 1;i <= n;i++) p[i].read();
    sort(p + 1,p + n + 1);
    for (int i = 0;i < NMax;i++)
        for (int j = 0;j < 20002;j++) dp[i][j] = -1;
    cout << solve(1,10001);
    
    return 0;
}
