#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <functional>
using namespace std;
#define ll long long
#define mp make_pair
#define ld long double
const int mod = 1000000007;
int n, m, k;
vector<int> adj[1005];
bool vis[1005];
int ad, nod;
void dfs(int i) {
	nod++;
	vis[i] = true;
	int sz = adj[i].size();
	for (int j = 0; j < sz; j++) {
		ad++;
		if (!vis[adj[i][j]]) {
			dfs(adj[i][j]);
		}
	}
}
vector<int> gs;
int ks[1005];
int main() {
	scanf("%d%d%d", &n, &m, &k);
	for (int i = 0; i < k; i++) {
		scanf("%d", &ks[i]);
	}
	for (int i = 0; i < m; i++) {
		int a, b;
		scanf("%d%d",&a, &b);
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	ll ans = 0;
	ll mx = 0;
	for (int i = 0; i < k; i++) {
		dfs(ks[i]);
		ad /= 2;
		ll val = ((ll)nod*(nod - 1)) / 2 - ad;
		ans += val;
		mx = max(mx,(ll)nod);
		nod = ad = 0;
	}
	vector<int> t;
	for (int i = 1; i <= n; i++) {
		if (!vis[i]) {
			dfs(i);
			ad /= 2;
			ll val = ((ll)nod*(nod - 1)) / 2 - ad;
			ans += val;
			t.push_back(nod);
			nod = ad = 0;
		}
	}
	for (auto v : t) {
		ans += mx*v;
		mx += v;
	}
	printf("%I64d\n", ans);
	return 0;
}
