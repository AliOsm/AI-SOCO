#include <bits/stdc++.h>
using namespace std;
struct P
{
    int x,y;
    bool operator<(const P &a)const{
        //if(y!=a.y) return y>a.y;
        return max(x,-x)>max(a.x,-a.x);

    }

};
vector<int> v[3];
//bitset<4001000> b;
int i,n,d,m,k,a,b,c,e;
long long o[222511][5];
int l[1];
int j[1];
int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=998244353,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[333331];
stack<int> s;
//set<int> s,s1;

//priority_queue<int,vector<int>,greater<int> > q;
//queue<int> q;
//string r;
char r[11110];
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p;
//v.resize(unique(v.begin(),v.end())-v.begin());
/*struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> p;//safe_map;
*/
bool as(P a,P b)
{
    if(a.y!=b.y)
    return a.y>b.y;
    return a.x>b.x;
}

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//rng();


long long f(int n,int m)
{
    if(n<=1)
    {
        if(n<0) return 0;
        if(n==0)
        {
            if(m==1) return 0;
            return 1;
        }
        if(m==2) return max(0,b-2);
        if(m<4) return b-1;
        return b;
    }
    if(o[n][m]>=0) return o[n][m];
    if(m==1)
    {
        return o[n][m]=(f(n-2,1)*(b-1)%mod+f(n-2,2)*(b-1)%mod*(b-2)%mod)%mod;
    }
    if(m==2)
    {
        return o[n][m]=(f(n-2,1)*max(b-2,0)%mod+f(n-2,2)*max((b-2),0)%mod*(b-2)%mod+f(n-2,2)*max((b-1),0)%mod)%mod;
    }
    if(m==3)
    return o[n][m]=(f(n-2,1)*(b-1)%mod+f(n-2,2)*max(b-1,0)%mod*(b-1)%mod)%mod;
    if(m==4)
    return o[n][m]=(f(n-2,1)*b%mod+f(n-2,2)*(b)%mod*(b-1)%mod)%mod;
}


int main()
{
    memset(o,-1,sizeof(o));
    scanf("%d %d",&a,&b);
    for(int t=1;t<=a;t++)
    {
        //n=-1;
        scanf("%d",&n);
        if(v[t%2].size())
        {
            if(n>0&&n==v[t%2][v[t%2].size()-1])
            {
                puts("0");
                return 0;
            }
        }
        v[t%2].push_back(n);

    }
    x=1;
    for(int h=0;h<2;h++)
    {
        c=-1;
        for(int t=0;t<v[h].size();t++)
        if(v[h][t]==-1)
        {
            if(c<0) c=t;
        }
        else
        {
            if(c>=0)
            {
                if(c==0)
                x*=f(t-c,3);
                else
                {
                    if(v[h][c-1]==v[h][t])
                    x*=f(t-c,1);
                    else x*=f(t-c,2);
                }
                x%=mod;
            }
            c=-1;
        }
        if(c>=0)
        {
            if(c==0)
            {
                //puts("#");
                //printf("%lld %d %d@@\n",x,v[h].size(),c);
                x*=f(v[h].size()-c,4);
            }
            else x*=f(v[h].size()-c,3);
            x%=mod;
        }
        //if(h==0) y=x,x=1;
    }
    printf("%lld",x);
}


