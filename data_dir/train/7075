/*
ID: essi
LANG: C++
TASK: .cpp
*/
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld double long
#define all(n) n.begin(), n.end()
#define rall(s) (s).rbegin(),(s).rend()
#define bs(x) (bitset<60>(x)).to_string()
#define sep ios::sync_with_stdio(0),cin.tie(0)
int n,k, len;
string s;
int alpha[26];
void dfs(int i, vector<int> &seen) {
	
	if (seen[n-1-i] == 0){
    	++len;
    	++alpha[s[n-1-i] - 'a'];
    	seen[n-1-i] = 1;
    	dfs(n-1-i, seen);
    }
    
	if (i+k < n && seen[i+k] == 0){
		++len;
		++alpha[s[i+k] - 'a'];
		seen[i+k] = 1;
		dfs(i+k, seen);
	}
	if (i-k >= 0 && seen[i-k] == 0){
		++len;
		++alpha[s[i-k] - 'a'];
		seen[i-k] = 1;
		dfs(i-k, seen);
	}
}

int main() {
    //ifstream fin ("word.in");
    //ofstream fout ("word.out");
    // start from index 1 and implement dfs
    sep;

    int q; cin >> q;
    for (; q > 0 ; q--) {
    	cin >> n >> k;
    	cin >> s;
    	vector<int> seen(n, 0);
    	int res = 0; 
    	for (int i = 0; i < n; ++i) {
    		if (seen[i] == 0) {
    			len = 0;
    			memset(alpha, 0, sizeof(alpha) );
    			++len;
    			++alpha[s[i] - 'a'];
    			seen[i] = 1;
    			dfs(i, seen);
    			int M = 0;
    			for (int j = 0; j < 26;++j)
    				M = max(alpha[j], M);
    			res+= (len-M);
    		}
    	}
      cout << res << "\n";
    }
}

