#include <iostream>
#include <cstring>

using namespace std;



#define MOD 1000000007

typedef long long ll;

ll dp[105][105];
ll dp2[105][15];


void gen() {
   dp[0][0] = 1;
   for (int n = 1; n < 101; ++n) {
      dp[n][0] = 1;
      for (int k = 1; k < n; ++k) {
         dp[n][k] = (dp[n-1][k-1] + dp[n-1][k]) % MOD;

      }
      dp[n][n] = 1;
   }
}

int v[10];

ll solve(int length, int dig){

    if(length < 0) return 0;
    if(dig == 9)  {
        return (length >= v[dig]);
    }
    if(dp2[length][dig] != -1) return dp2[length][dig];

    long long ans = 0;

    int n_length = length - 1;
    if(dig != 0 ) n_length++;

    for(int i = v[dig]; i <= length; i++){
        ans = (ans + solve(length - i, dig + 1) * dp[n_length][i]) % MOD;
    }
    return dp2[length][dig] = ans;

}


int main()
{
    gen();

    int n; cin >> n;

    int sum = 0;

    for(int i = 0; i < 10; i++){
        cin >> v[i];
        sum += v[i];
    }

    long long ans = 0;

    memset(dp2, -1, sizeof dp2);

    for(int i = sum; i <= n ; i++){

        if( i == 0) continue;
        
        long long cur = solve(i, 0);
       // cout << cur << endl;

        ans += cur;
        ans %= MOD;

    }

    cout << ans << endl;

    return 0;
}
