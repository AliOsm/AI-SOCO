#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double
#define all(a) a.begin(),a.end()
#define endl '\n'
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define ull unsigned long long
#define int long long
#define iter vector<int>::iterator
using namespace std;
using namespace __gnu_pbds;

template<class T>
using ordered_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

template<class T>
using ordered_multiset=tree<T,null_type,less_equal<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rnd1(chrono::steady_clock::now().time_since_epoch().count());

//find_by_order
//order_of_key

const int N=1e6+7;
const int inf=1e9+5;
const int mod=1e9+7;

vector<int>g[N];
bool good[N];

void dfs(int v,int p=-1)
{
    int kol=0;
    if (g[v].size()==1){
        good[v]=true;
        return;
    }
    for (int i=0;i<g[v].size();++i){
        int to=g[v][i];
        if (to==p)continue;
        dfs(to,v);
        if (good[to]){
            good[v]=true;
            ++kol;
        }
    }
    for (int i=0;i<g[v].size();++i){
        int to=g[v][i];
        if (to==p)continue;
        if (!(good[to] && kol>=2)){
            cout<<"NO"<<endl;
            exit(0);
        }
    }
}

main ()
{
    ios;
    int n;
    cin>>n;
    for (int i=1;i<=n-1;++i){
        int x,y;
        cin>>x>>y;
        g[x].pb(y);
        g[y].pb(x);
    }
    if (n==2){
        cout<<"YES"<<endl;
        exit(0);
    }
    int kol=0;
    for (int i=1;i<=n;++i){
        if (g[i].size()==1)++kol;
    }
    if (kol<3){
        cout<<"NO"<<endl;
        exit(0);
    }
    if (kol==n-1){
        cout<<"YES"<<endl;
        exit(0);
    }
    int root=1;
    for (int i=1;i<=n;++i){
        if (g[i].size()>g[root].size()){
            root=i;
        }
    }
    dfs(root);
    cout<<"YES"<<endl;
}
