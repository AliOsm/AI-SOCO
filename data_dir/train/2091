#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <memory.h>
#include <sstream>
#include <queue>
#include <cassert>
#include <ctime>
#include <complex>
//#include <unordered_map>
//#include <random>
 
using namespace std;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<pii, pii> piiii;
typedef pair<int64, int> pli;
typedef pair<int, char> pic; 

#define pb push_back
#define sq(x) ((x)*(x))
#define cube(x) (((x)*(x))*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define bit(mask, b) ((mask >> b) & 1)
#define biton(mask, bit) (mask | (((uint64)(1)) << bit))
#define bitoff(mask, bit) (mask & (~(((uint64)(1)) << bit)))
#define bitputon(mask, bit) (mask |= (((uint64)(1)) << bit))
#define bitputoff(mask, bit) (mask &= (~(((uint64)(1)) << bit)))
#define FAIL() (*((int*)(0)))++
#define INF ((int)(1e9) + 1337)
#define EPS (1e-9)
#define y1 yy1
#define y0 yy0
#define j0 jj0

const long double PI = acosl((long double)-1.0);
const int64 LINF = 1e18;//((1ull << 63) - 1ull);
const int MOD = 1000000007;

const int MAXN = 105;

int n;
char f[MAXN][MAXN];
int dx[4] = {0, -1, 0, 1};
int dy[4] = {-1, 0, 1, 0};
pii p1, p2, p3, p4;

void init()
{
	scanf ("%d", &n);
	for (int i = 1; i <= n; i++)
	{
		scanf ("%s", &f[i][1]);
	}
}

inline bool valid(int x, int y)
{
	return 1 <= x && x <= n && 1 <= y && y <= n;
}

int check_1(int x, int y)
{
	return (f[x][y] == '4'
		&& (!valid(x - 1, y - 1) || f[x - 1][y - 1] == '1')
		&& (!valid(x, y - 1) || f[x][y - 1] == '2')
		&& (!valid(x - 1, y) || f[x - 1][y] == '2'));
}

int check_2(int x, int y)
{
	return (f[x][y] == '4'
		&& (!valid(x - 1, y + 1) || f[x - 1][y + 1] == '1')
		&& (!valid(x, y + 1) || f[x][y + 1] == '2')
		&& (!valid(x - 1, y) || f[x - 1][y] == '2'));
}

int check_3(int x, int y)
{
	return (f[x][y] == '4'
		&& (!valid(x + 1, y + 1) || f[x + 1][y + 1] == '1')
		&& (!valid(x, y + 1) || f[x][y + 1] == '2')
		&& (!valid(x + 1, y) || f[x + 1][y] == '2'));
}

int check_4(int x, int y)
{
	return (f[x][y] == '4'
		&& (!valid(x + 1, y - 1) || f[x + 1][y - 1] == '1')
		&& (!valid(x, y - 1) || f[x][y - 1] == '2')
		&& (!valid(x + 1, y) || f[x + 1][y] == '2'));
}

bool get_angles()
{
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			if (check_1(i, j))
			{
				if (p1.first)
				{
					return false;
				}
				p1 = pii(i, j);
			}
			if (check_2(i, j))
			{
				if (p2.first)
				{
					return false;
				}
				p2 = pii(i, j);
			}
			if (check_3(i, j))
			{
				if (p3.first)
				{
					return false;
				}
				p3 = pii(i, j);
			}
			if (check_4(i, j))
			{
				if (p4.first)
				{
					return false;
				}
				p4 = pii(i, j);
			}
		}
	}
	return true;
}

bool check_angles()
{
	if (p1.first == p2.first && p1.second <= p2.second 
		&& p2.second == p3.second && p2.first <= p3.first
		&& p3.first == p4.first && p4.second <= p3.second
		&& p1.second == p4.second && p1.first <= p4.first)
	{
		for (int i = p1.first; i <= p3.first; i++)
		{
			for (int j = p1.second; j <= p2.second; j++)
			{
				if (f[i][j] != '4')
				{
					return false;
				}
			}
		}
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= n; j++)
			{
				if (i < p1.first - 1 || i > p3.first + 1 || j < p1.second - 1 || j > p3.second + 1)
				{
					if (f[i][j] != '0')
					{
						return false;
					}
				}
			}
		}
		for (int i = p1.first; i <= p3.first; i++)
		{
			if (valid(i, p1.second - 1) && f[i][p1.second - 1] != '2')
			{
				return false;
			}
			if (valid(i, p2.second + 1) && f[i][p2.second + 1] != '2')
			{
				return false;
			}
		}
		for (int i = p1.second; i <= p3.second; i++)
		{
			if (valid(p1.first - 1, i) && f[p1.first - 1][i] != '2')
			{
				return false;
			}
			if (valid(p3.first + 1, i) && f[p3.first + 1][i] != '2')
			{
				return false;
			}
		}
		return true;
	}
	else
	{
		return false;
	}
}

void solve()
{
	init();
	if (get_angles() && check_angles())
	{
		printf("Yes\n");
	}
	else
	{
		printf("No\n");
	}
}

void precalc()
{
	
}

int main()
{
    //ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
	//test_output(); return 0;
    srand(25);
	precalc();
	int tests = 1;
	//scanf ("%d", &tests);
	for (int i = 1; i <= tests; i++)
	{
		solve();
	}
	
    return 0;
}