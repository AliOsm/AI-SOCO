#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

const long long MAX = 510000;
const long long INF = 1LL << 60;
const long long MOD = 1000000007LL;
const long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

struct SegmentTree {
private:
	ll n;
	vector<ll> node;
public:
	SegmentTree(vector<ll> v) {
		ll sz = v.size();
		n = 1; while (sz > n) n *= 2;
		node.resize(2 * n - 1, INF);

		for (ll i = 0; i < sz; i++) {
			node[i + n - 1] = v[i];
		}
		for (ll i = n - 2; i >= 0; i--) {
			node[i] = max(node[i * 2 + 1], node[i * 2 + 2]);
		}
	}

	void update(ll x, ll val) {
		x += n - 1;
		node[x] = val;

		while (x > 0) {
			x = (x - 1) / 2;
			node[x] = max(node[x * 2 + 1], node[x * 2 + 2]);
		}
	}

	ll getmax(ll a, ll b, ll k = 0, ll l = 0, ll r = -1) {
		if (r < 0) r = n;
		if (r <= a || b <= l) return -INF;
		if (a <= l && r <= b) return node[k];

		ll vl = getmax(a, b, 2 * k + 1, l, (l + r) / 2);
		ll vr = getmax(a, b, 2 * k + 2, (l + r) / 2, r);
		return max(vl, vr);
	}
};

int main()
{
	ll t;
	scanf("%lld", &t);
	while (t--) {
		ll n;
		scanf("%lld", &n);
		vector<ll> a(n);
		ll mx = 0;
		for (ll i = 0; i < n; i++) {
			scanf("%lld", &a[i]);
			chmax(mx, a[i]);
		}
		ll m;
		scanf("%lld", &m);
		vector<ll> p(n + 1, -1);
		bool flag = false;
		for (ll i = 0; i < m; i++) {
			ll tem1, tem2;
			scanf("%lld %lld", &tem1, &tem2);
			if (mx <= tem1) flag = true;
			chmax(p[tem2], tem1);
		}
		if (!flag) {
			puts("-1");
			continue;
		}
		for (ll i = n; i >= 1; i--) {
			chmax(p[i - 1], p[i]);
		}
		SegmentTree seg(a);
		ll res = 0;
		for (ll i = 0; i < n;) {
			res++;
			ll l = 0;
			ll r = n - i;
			while (r - l > 1) {
				ll mid = (l + r) >> 1;
				ll mn = seg.getmax(i, i + mid + 1);
				if (p[mid + 1] >= mn) {
					l = mid;
				}else{
					r = mid;
				}
			}
			//cout << "l :" << l << endl;
			i += l + 1;
		}
		printf("%lld\n", res);
	}
	return 0;
}
