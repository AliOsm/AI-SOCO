#include<bits/stdc++.h>
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
using namespace std;
const ll mod=1e9+7;         
const int N=2e5+4;
ll tree[4*N],lazy[4*N];
void update(int node,int st,int end,int l,int r,ll val)
{
    if(lazy[node])
    {
        tree[node]+=(ll)(end-st+1)*lazy[node];
        if(st!=end)
        {
            lazy[2*node]+=lazy[node];
            lazy[2*node+1]+=lazy[node];
        }
        lazy[node]=0;
    }
    if(st>r||end<l)
    return;
    if(st>=l&&end<=r)
    {
        tree[node]+=(ll)(end-st+1)*val;
        if(st!=end)
        {
            lazy[2*node]+=val;
            lazy[2*node+1]+=val;
        }
        return;
    }
    int mid=(st+end)/2;
    update(2*node,st,mid,l,r,val);
    update(2*node+1,mid+1,end,l,r,val);
    tree[node]=tree[2*node]+tree[2*node+1];
}
ll query(int node,int st,int end,int l,int r)
{
    if(st>r||end<l)
    return 0;
    if(lazy[node])
    {
        tree[node]+=(ll)(end-st+1)*lazy[node];
        if(st!=end)
        {
            lazy[2*node]+=lazy[node];
            lazy[2*node+1]+=lazy[node];
        }
        lazy[node]=0;
    }
    if(st>=l&&end<=r)
    return tree[node];
    int mid=(st+end)/2;
    ll a,b;
    a=query(2*node,st,mid,l,r);
    b=query(2*node+1,mid+1,end,l,r);
    return a+b;
}
int main()                  
{
    int n,m;
    scn(n);scn(m);
    int a[m];
    rep(i,0,m)
    scn(a[i]);
    rep(i,0,m-1)
    {
        if(a[i]==a[i+1])
        continue;
        int x=min(a[i],a[i+1]),y=max(a[i],a[i+1]);
        if(x>1)
        update(1,1,n,1,x-1,(ll)(y-x));
        if(y<n)
        update(1,1,n,y+1,n,(ll)(y-x));
        if(y-x>1)
        update(1,1,n,x+1,y-1,(ll)(y-x-1));
        update(1,1,n,y,y,(ll)x);
        update(1,1,n,x,x,(ll)(y-1));
    }
    rep(i,1,n+1)
    {
        ll ans=query(1,1,n,i,i);
        printf("%lld ",ans);
    }
}