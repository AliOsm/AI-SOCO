#include <iostream>
#include <cstdio>
#include <string>
#include <algorithm>
#include <cctype>
#include <cstring>
#include <vector>
#include <sstream>
#include <set>
#include <ctime>
#include <queue>
#include <map>
#include <stack>
#include <cmath>
using namespace std;
typedef long long LL;
const int N = 1505;
const int MOD = 1000000007;
struct Point {
    int id;
    double x , y;
    inline void input (int i) {
        id = i;
        scanf ("%lf %lf" , &x , &y);
    }
}p[N];
int n , size[N] , ans[N];
vector <int> e[N];
double xmul (Point p , Point p1 , Point p2) {
    return (p1.x - p.x) * (p2.y - p.y) - (p1.y - p.y) * (p2.x - p.x);
}
Point cer;
double cmp (Point a , Point b) {
    return xmul (cer , a , b) > 0;
}
void dfs (int u , int pre) {
    size[u] = 1;
    for (int i = 0 ; i < e[u].size() ; i ++) {
        int v = e[u][i];
        if (v != pre) {
            dfs (v , u);
            size[u] += size[v];
        }
    }
} 
void dfs (int root , int pre , int l , int r) {
    for (int i = l + 1 ; i <= r ; i ++) {
        if (p[i].x < p[l].x || (p[i].x == p[l].x && p[i].y < p[l].y)) {
            swap (p[i] , p[l]);
        }
    }
    cer = p[l];
    ans[p[l].id] = root;
    sort (p + l + 1 , p + r + 1 , cmp);
    for (int i = 0 , from = l + 1 ; i < e[root].size() ; i ++) {
        int v = e[root][i];
        if (v != pre) {
            dfs (v , root , from , from + size[v] - 1);
            from += size[v];
        }
    }
}
int main(){
#ifndef ONLINE_JUDGE
    freopen ("input.txt" , "r" , stdin);
    // freopen ("output.txt" , "w" , stdout);
#endif
    scanf ("%d" , &n);
    for (int i = 1 ; i < n ; i ++) {
        int u , v;
        scanf ("%d %d" , &u , &v);
        u --; v --;
        e[u].push_back (v);
        e[v].push_back (u);
    }
    for (int i = 0 ; i < n ; i ++) {
        p[i].input (i);
    }
    dfs (0 , -1);
    dfs (0 , -1 , 0 , n - 1);
    for (int i = 0 ; i < n ; i ++)
        printf ("%d " , ans[i] + 1);
    return 0;
}