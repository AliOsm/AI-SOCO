#include <bits/stdc++.h>
typedef long long LL;
using namespace std;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 30000 + 5;
const LL inf = 1LL << 60;

LL a[N], b[N];
int orda[N], ordb[N], which[N], rnk[N];
int n;

inline long long cost(int x, int y) {
	return which[orda[x]] == ordb[y] ? -inf: a[orda[x]] * b[ordb[y]];
}

bool cmpa(const int &i, const int &j) {
	return a[i] > a[j];
}

bool cmpb(const int &i, const int &j) {
	return b[i] > b[j];
}

struct Mat {
	LL mat[3][3];

	Mat() {
		rep(i, 3) {
			rep(j, 3) {
				mat[i][j] = - inf;
			}
		}
	}

	const LL* operator[] (const int &x) const {
		return mat[x];
	}

	LL* operator[] (const int &x) {
		return mat[x];
	}
};

Mat operator* (const Mat &A, const Mat &B) {
	Mat ret;
	rep(i, 3) {
		rep(j, 3) {
			rep(k, 3) {
				ret[i][j] = max(ret[i][j], A[i][k] + B[k][j]);
			}
		}
	}
	return ret;
}
				
Mat val[N << 1];

inline int getID(int l, int r) {
	return l + r | l != r;
}

Mat getMatrix(int pos) {
	Mat ret;
	ret[0][0] = cost(pos, pos);
	if(pos + 1 < n) {
		ret[0][1] = cost(pos, pos + 1) + cost(pos + 1, pos);
		if(pos + 2 < n) {
			ret[0][2] = max(ret[0][2], max(cost(pos, pos+1) + cost(pos+1, pos+2) + cost(pos+2, pos), 
						cost(pos, pos+2) + cost(pos+1, pos) + cost(pos+2, pos+1)));
		}
	}
	ret[1][0] = 0;
	ret[2][1] = 0;
	return ret;
}

void up(int l, int r) {
	int mid = l + r >> 1;
	val[getID(l, r)] = val[getID(l, mid)] * val[getID(mid+1, r)];
}

void build(int l, int r) {
	if(l == r) {
		val[getID(l, r)] = getMatrix(l);
	} else {
		int mid = l + r >> 1;
		build(l, mid);
		build(mid+1, r);
		up(l, r);
	}
}

void modify(int l, int r, int L, int R) {
	if(l == r) {
		val[getID(l, r)] = getMatrix(l);
	} else {
		int mid = l + r >> 1;
		if(L <= mid)
			modify(l, mid, L, R);
		if(R >	mid) {
			modify(mid+1, r, L, R);
		}
		up(l, r);
	}
}

int main() {
	int q, u, v;
	scanf("%d%d", &n, &q);
	rep(i, n) {
		scanf("%I64d", a + i);
		orda[i] = i;
	}
	sort(orda, orda + n, cmpa);
	rep(i, n) {
		rnk[orda[i]] = i;
	}
	rep(i, n) {
		scanf("%I64d", b + i);
		ordb[i] = i;
	}
	sort(ordb, ordb + n, cmpb);
	rep(i, n) {
		which[i] = i;
	}
	build(0, n-1);
	while(q --) {
		scanf("%d%d", &u, &v);
		u --;
		v --;
		swap(which[u], which[v]);
		modify(0, n-1, max(0, rnk[u]-2), rnk[u]);
		modify(0, n-1, max(0, rnk[v]-2), rnk[v]);
		printf("%I64d\n", val[getID(0, n-1)][0][0]);
	}
	return 0;
}

