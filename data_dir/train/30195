#include <bits/stdc++.h>
using namespace std;

const long long INF = 1e18 + 1e9;

struct person {
	int a, s[10];

	bool operator<(const person other) const {
		return a < other.a;
	}
};

int n, p, k;
person per[100005];

long long dp[2][1 << 8][8];

int main() {
	// ios_base::sync_with_stdio(false);
	// cin.tie(0);
	// cout.tie(0);

	scanf("%d %d %d", &n, &p, &k);
	for (int i = 0; i < n; i++) {
		scanf("%d", &per[i].a);
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < p; j++) {
			scanf("%d", &per[i].s[j]);
		}
	}

	sort(per, per + n);
	reverse(per, per + n);

	fill(&dp[0][0][0], &dp[0][0][0] + 2 * (1 << 8) * 8, -INF);

	dp[1][0][0] = 0;
	for (int i = 0; i < k; i++) {
		dp[1][0][0] += per[i].a;
	}

	for (int i = 0; i < n; i++) {
		for (int mask = 0; mask < (1 << p); mask++) {
			for (int lebih = 0; lebih <= p; lebih++) {
				dp[i & 1][mask][lebih] = dp[~i & 1][mask][lebih];
			}
		}

		for (int mask = 0; mask < (1 << p); mask++) {
			for (int j = 0; j < p; j++) {
				if (mask & (1 << j)) {
					continue;
				}

				for (int lebih = 0; lebih <= p; lebih++) {
					if (i + 1 < n && i + 1 <= k + lebih) {
						dp[i & 1][mask | (1 << j)][lebih + 1] = max(dp[i & 1][mask | (1 << j)][lebih + 1], dp[~i & 1][mask][lebih] - per[i].a + per[i].s[j] + per[k + lebih].a);
					} else {
						dp[i & 1][mask | (1 << j)][lebih] = max(dp[i & 1][mask | (1 << j)][lebih], dp[~i & 1][mask][lebih] + per[i].s[j]);
					}
				}
			}
		}

		// for (int mask = 0; mask < (1 << p); mask++) {
		// 	cout << "i: " << i << " mask: " << mask << " ->\n";
		// 	for (int lebih = 0; lebih <= p; lebih++) {
		// 		cout << dp[i & 1][mask][lebih] << ' ';
		// 	}
		// 	cout << '\n';
		// }
	}

	long long best = 0;
	for (int lebih = 0; lebih <= p; lebih++) {
		best = max(best, dp[~n & 1][(1 << p) - 1][lebih]);
	}

	printf("%lld\n", best);

	return 0;
}