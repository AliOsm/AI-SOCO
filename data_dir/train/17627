#include <bits/stdc++.h>
using namespace std;

int n;
int musk[3];
int t[200055];

int main() {
	scanf("%d", &n);
	scanf("%d %d %d", &musk[0], &musk[1], &musk[2]);
	
	sort(musk, musk + 3);
	
	for (int i = 0; i < n; i++) scanf("%d", &t[i]);
	
	sort(t, t + n);
	
	for (int i = 0; i < n; i++) if (t[i] > musk[0] + musk[1] + musk[2]) {
		puts("-1");
		return 0;	
	}
	
	int res = 0;
	
	// try a + b + c
	
	for (int i = n - 1; i >= 0; i--) if (t[i] > musk[1] + musk[2]) {
		res++;
		n--;	
	}
	
	// try b + c
	
	multiset<int> s;
	vector<int> alive;

	for (int i = 0; i < n; i++) s.insert(t[i]);
	
	for (int i = n - 1; i >= 0; i--) {
		if (s.find(t[i]) == s.end()) continue;
		
		s.erase(s.find(t[i]));
		
		if (t[i] > musk[0] + musk[2]) {
			res++;
			
			auto ite = s.upper_bound(musk[0]);
			
			if (ite == s.begin()) continue;
			
			--ite;
			
			s.erase(ite);	
		} else alive.push_back(t[i]);
	}
	
	s.clear();
	
	for (auto u : alive) s.insert(u);
	
	alive.clear();
	n = (int)s.size();
	
	int cnt = 0;
	
	for (auto u : s) t[cnt++] = u;
	
	// try a + c
	
	for (int i = n - 1; i >= 0; i--) {
		if (s.find(t[i]) == s.end()) continue;
		
		s.erase(s.find(t[i]));
		
		if (t[i] > max(musk[2], musk[0] + musk[1])) {
			res++;
			
			auto ite = s.upper_bound(musk[1]);
			
			if (ite == s.begin()) continue;
			
			--ite;
			
			s.erase(ite);	
		} else alive.push_back(t[i]);
	}
	
	s.clear();
	
	for (auto u : alive) s.insert(u);
	
	n = (int)s.size();
	
	// try (a + b) & c or a & b & c
	
	int cool = 0x3f3f3f3f;
	int ab = 0, c = 0;
	
	for (auto u : s) {
		if (u <= musk[0] + musk[1]) ab++;
		if (u <= musk[2]) c++;
	}

	for (int round = 0; !s.empty(); round++) {
		if (max(ab, c) == (int)s.size()) {
			if (min(ab, c) >= (int)s.size() / 2) {
				cool = min(cool, round + ((int)s.size() + 1) / 2);	
			} else {
				cool = min(cool, round + (int)s.size() - min(ab, c));	
			}
		}
		
		bool bad = true;

		for (int i = 0; i < 3; i++) {
			auto ite = s.upper_bound(musk[i]);
			
			if (ite == s.begin()) continue;
			
			ite--;
			bad = false;
			
			if (*ite <= musk[0] + musk[1]) ab--;
			if (*ite <= musk[2]) c--;
			
			s.erase(ite);	
		}
		
		if (bad) break;
		if (s.empty()) cool = min(cool, round + 1);
	}
	
	printf("%d\n", res + cool);
	
	return 0;
}

