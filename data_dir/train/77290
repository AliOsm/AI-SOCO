#include <cstdio>
#include <ctime>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

vector<vector<int> > v;
vector<vector<int> > vu;
vector<int> used;
vector<int> comp;
vector<int> isCyclic;

bool dfs(int cur)
{
	if(used[cur]==1) return true;
	if(used[cur]==2) return false;
	used[cur]=1;
	bool res=false;
	for(int i=0;i<v[cur].size();i++)
	{
		int to=v[cur][i];
		res|=dfs(to);
	}
	used[cur]=2;
	return res;
}

void fillComp(int cur, int clr)
{
	if(comp[cur]==clr) return;
	comp[cur]=clr;
	for(int i=0;i<vu[cur].size();i++)
	{
		fillComp(vu[cur][i], clr);
	}
}

int main()
{
	int n,m;
	scanf("%d%d",&n,&m);
	set<int> met;
	v.resize(n);
	vu.resize(n);
	used.resize(n);
	comp.resize(n,-1);
	isCyclic.resize(n);
	REP(i,m)
	{
		int a,b;
		scanf("%d%d",&a,&b);
		a--;
		b--;
		v[a].push_back(b);
		vu[a].push_back(b);
		vu[b].push_back(a);
		met.insert(a);
		met.insert(b);
	}
	int res=n;
	REP(i,n)
	{
		if(comp[i]==-1)
			fillComp(i,i);
		if(dfs(i))
			isCyclic[comp[i]]=1;
	}
	REP(i,n)
		if(comp[i]==i)
			res-=1-isCyclic[i];
	printf("%d\n",res);
	return 0;
}
