#include<bits/stdc++.h>
#define all(v) (v).begin(),(v).end()
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ri(x) scanf("%d",&(x))
#define ri2(x,y) scanf("%d %d",&(x),&(y))
#define ri3(x,y,z) scanf("%d %d %d",&(x),&(y),&(z))
#define rll(x) scanf("%lld",&(x))
#define rll2(x,y) scanf("%lld %lld",&(x),&(y))
#define rll3(x,y,z) scanf("%lld %lld %lld",&(x),&(y),&(z))
#define gc(x) ((x) = getchar())
using namespace::std;

const long double PI = acos(-1);
const long long MOD = 1000000000 +7;

typedef long long ll;
typedef pair<ll,ll> pll;
typedef pair<ll,pll> tll;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef vector<tll> vtll;
typedef vector<string> vs;
typedef set<int> si;
typedef set<ii> sii;
typedef set<iii> siii;

ll gcd(ll a, ll b){ return b==0?a:gcd(b,a%b);}

ll add(ll a, ll b, ll m = MOD){
	if(a >= m) a %= m;
	if(b >= m) b %= m;
	if(a < 0) a += m;
	if(b < 0) b += m;
	ll res = a+b;
	if(res >= m or res <= -m) res %= m;
	if(res < 0) res += m;
	return res;
}

ll mul(ll a, ll b, ll m = MOD){
	if(a >= m) a %= m;
	if(b >= m) b %= m;
	if(a < 0) a += m;
	if(b < 0) b += m;
	ll res = a*b;
	if(res >= m or res <= -m) res %= m;
	if(res < 0) res += m;
	return res;
}

ll pow_mod(ll a, ll b, ll m = MOD){
	ll res = 1LL;
	a = a%m;
	while(b){
		if(b&1) res = mul(res,a,m);
		b >>= 1;
		a = mul(a,a,m);
	}
	return res;
}

ll fastexp(ll a, ll b){
	ll res = 1LL;
	while(b){
		if(b&1) res = res*a;
		b >>= 1;
		a *= a;
	}
	return res;
}

int gcdExtendido(int a, int b, int *x, int *y){
	if(a == 0){
		*x = 0;
		*y = 1;
		return b;
	}
	int x1, y1;
	int gcd = gcdExtendido(b%a,a,&x1,&y1);
	
	*x = y1-(b/a)*x1;
	*y = x1;
	return gcd;
}

int modInverso(int a, int m){
	int x, y;
	int g = gcdExtendido(a,m,&x,&y);
	if(g!=1) return -1;
	else return (x%m + m)%m;
}

/****************************************
*************P*L*A*N*T*I*L*L*A************
*****************************************/

const int N = 6000+5;
const int M = 1000000+5;

int n;
int len;
vi G[N];
int ans;
int c[N];
int st[2*M];

void update(int p, int value){
	p += len;
	st[p] = value;
	for( ; p > 1 ; p >>= 1){
		st[p >> 1] = max(st[p],st[p^1]);
	}
}

int query(int l, int r){
	int act = 0;
	l += len;
	r += len;
	for( ; l < r; l >>= 1, r >>= 1){
		if(l&1) act = max(act,st[l++]);
		if(r&1) act = max(act,st[--r]);
	}
	return act;
}

void DFS(int u, int p = 0){
	for(int i=0; i<G[u].size(); i++){
		int v = G[u][i];
		if(v != p){
			int act = query(0,c[v]) + 1;
			ans = max(ans,act);
			int last = query(c[v],c[v]+1);
			update(c[v],act);
			DFS(v,u);
			update(c[v],last);
		}
	}
}

int main(){
	ri(n);
	int a,b;
	int M = 0;
	set<int> S;
	map<int,int> id;
	int pos = 0;
	for(int i=1; i<=n; i++){
		ri(c[i]);
		S.insert(c[i]);
	}
	for(set<int>::iterator it=S.begin(); it!=S.end(); it++){
	    id[*it] = pos++;
	}
	for(int i=1; i<=n; i++){
	    c[i] = id[c[i]];
	}
	M = pos;
	len = 1;
	while(len < M) len <<= 1;
	for(int i=1; i<n; i++){
		ri2(a,b);
		G[a].pb(b);
		G[b].pb(a);
	}
	ans = 0;
	for(int i=1; i<=n; i++){
		for(int j=1; j<=n; j++){
			update(c[j],0);
		}
		int act = 1;
		ans = max(ans,act);
		update(c[i],act);
		DFS(i);
	}
	cout << ans << endl;
	return 0;
}