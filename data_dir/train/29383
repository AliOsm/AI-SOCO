#include <bits/stdc++.h>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
#define PI 3.14159265358979323846
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;

// Modular operations
const int MOD = 1E9 + 7;

int Add(int a, int b, int m = MOD){
  a += b;
  if(a >= m) a -= m;
  return a;
}

int Sub(int a, int b, int m = MOD){
  a -= b;
  if(a < 0) a += m;
  return a;
}

int AddTo(int& to, int w, int m = MOD){
  to += w;
  if(to >= m) to -= m;
  return to;
}

int SubTo(int& to, int w, int m = MOD){
  to -= w;
  if(to < 0) to += m;
  return to;
}

int Mult(int a, int b, int m = MOD){
  return (a * 1LL * b) % m;
}

int Pow(int a, ll deg, int m = MOD){
  int res = 1 % m;
  for(;deg > 0;deg >>= 1, a = Mult(a, a, m))
    if(deg & 1) res = Mult(res, a, m);
  return res;
}

int Oem(int to, int m = MOD){
  return Pow(to, m - 2, m);
}

int Div(int a, int b, int m = MOD){
  return Mult(a, Oem(b, m), m);
}

// Solution
const int MAXN = 1000010;

int n = 5, k = 2;

int fact[MAXN];
int ndk[MAXN];

int C(int n, int k){
  return Div(fact[n], Mult(fact[k], fact[n - k]));
}

int Dk(int l);

int Ndk(int l){
  if(l <= k) return 0;
  if(ndk[l] >= 0) return ndk[l];

  ndk[l] = Add(
    Mult(l, Ndk(l - 1)),
    Mult(Mult(C(l - 1, k), fact[k]),
         Dk(l - k - 1)));

  return ndk[l];
}

int Dk(int l){
  return Sub(fact[l], Ndk(l));
}

int main(){
  memset(ndk, -1, sizeof ndk);

  fact[0] = 1;
  for(int i = 1;i < MAXN;++i)
    fact[i] = Mult(fact[i - 1], i);

  scanf("%d%d", &n, &k);

  int ans = 0;
  for(int i = 1;i < n;++i){
    //cout << i << ' ' << Ndk(i) << endl;
    AddTo(ans,
          Mult(Mult(Ndk(i), fact[n - 1 - i]),
               C(n - 1, n - 1 - i)));
  }

  printf("%d\n", ans);

  return 0;
}
