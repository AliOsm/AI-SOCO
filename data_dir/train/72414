#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <atomic>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <array>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <complex>
#include <tuple>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
const int INF = (int)(1e9 + 1e5);
const int64 LINF = (int64)(2e18);
const int64 BASE = 1003;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL() (*(int*)(0))++
#define ASSERT(exp) {if (!(exp)) exit(0);}
#define y1 fjgjf
#ifdef _MY_DEBUG
#define I64d lld
#endif
//typedef complex<double> comp;
const int MOD = 1000000007;

int tnum;

int add(int a, int b) {
    a += b;
    if (a >= MOD) {
        a -= MOD;
    }
    return a;
}

int sub(int a, int b) {
    a -= b;
    if (a < 0) {
        a += MOD;
    }
    return a;
}

int mul(int a, int b) {
    return int64(a) * b % MOD;
}

const int MAXN = 300500;

int n;
string s;
int a[MAXN];
int64 ans;
int pw[MAXN];
int h1[MAXN], h2[MAXN];
int best[MAXN];

int get_hash(int l, int r, int h[]) {
    return sub(h[r], mul(pw[r - l], h[l - 1]));
}

int get_h1(int l, int r) {
    return get_hash(l, r, h1);
}

int get_h2(int l, int r) {
    return get_hash(n - r + 1, n - l + 1, h2);
}

void init() {
    cin >> s;
    n = s.size();
    for (int i = 1; i <= n; ++i) {
        a[i] = s[i - 1] - '0';
    }
}

void solve() {
    //memset(best, 63, sizeof(best));
    for (int i = 1; i <= n; ++i) {
        int mx = min(n - i, i - 1);
        for (int j = 1; j <= mx; ++j) {
            if (a[i - j] == a[i] && a[i] == a[i + j]) {
                best[i + j] = max(i - j, best[i + j]);
                break;
            }
        }
    }
    for (int i = 1; i <= n; ++i) {
        //cerr << i << ": " << best[i] << " ";
        best[i] = max(best[i], best[i - 1]);
        //cerr << best[i] << "\n";
        if (best[i]) {
            ans += best[i];
        }
    }
}

void print_answer() {
    cout << ans;
}

void precalc() {
}

void run()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(getenv("OUTPUT_PATH"), "wt", stdout);
#endif // _MY_DEBUG
    precalc();
    int t = 1; //cin >> t;
    for (tnum = 1; tnum <= t; ++tnum)
    {
        init();
        solve();
        print_answer();
    }
}

int main()
{
    srand(92);
    ios_base::sync_with_stdio(false); cin.tie(0);
    run();
    return 0;
}