#define _CRT_SECURE_NO_WARNINGS
#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <math.h>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <bitset>
#include <map>
using namespace std;

typedef complex<double> base;

#define int64 long long
#define TASK ""
#define mp make_pair
#define pub push_back

#ifdef _DEBUG
const int N = 2000010;
#else
const int N = 2500010;
#endif

const int L = 22;

int n, p[N], p1[N], cnt[N], c[L][N], pos[N], up[N][L], sc[N];
string s;

void build()
{
	memset(cnt, 0, sizeof(cnt));
	int n = s.length();
	for (int i = 0; i < n; i++)
		if (s[i] == '(') cnt[1]++;
		else if (s[i] == ')') cnt[2]++;
		else cnt[0]++;
	cnt[1] += cnt[0];
	cnt[2] += cnt[1];
	for (int i = n - 1; i >= 0; i--)
	{
		int c;
		if (s[i] == '(') c = 1;
		else if (s[i] == ')') c = 2;
		else c = 0;
		p[--cnt[c]] = i;
	}
	int classes = 1;
	for (int i = 0; i < n; i++)
	{
		if (i > 0 && s[p[i]] != s[p[i - 1]]) classes++;
		c[0][p[i]] = classes;
	}
	for (int k = 1; (1 << k) <= n; k++)
	{
		int len = (1 << k);
		int len1 = (1 << (k - 1));
		for (int i = 0; i < n; i++) p1[i] = (n + p[i] - len1) % n;
		memset(cnt, 0, sizeof(cnt));
		for (int i = 0; i < n; i++) cnt[c[k - 1][p[i]]]++;
		for (int i = 1; i <= classes; i++) cnt[i] += cnt[i - 1];
		for (int i = n - 1; i >= 0; i--) p[--cnt[c[k - 1][p1[i]]]] = p1[i];
		classes = 1;
		for (int i = 0; i < n; i++)
		{
			if (i == 0) c[k][p[i]] = 1;
			else 
			{
				if (c[k - 1][p[i]] != c[k - 1][p[i - 1]] || c[k - 1][(p[i] + len1) % n] != c[k - 1][(p[i - 1] + len1) % n]) classes++;
				c[k][p[i]] = classes;
			}
		}
	}
}

void calc()
{
	for (int i = 0; i < n; i++)
	{
		int cur;
		if (s[i] == '(') cur = 1;
		else cur = -1;
		if (i == 0) sc[i] = cur;
		else sc[i] = sc[i - 1] + cur;
	}
	memset(up, -1,  sizeof(up));
	for (int i = 0; i <= 2 * n; i++) pos[i] = -1;
	for (int i = 0; i < L; i++) up[n][i] = -1;
	for (int i = n - 1; i >= 0; i--)
	{
		if (s[i] == ')') 
		{
			for (int j = 0; j < L; j++) up[i][j] = -1;
		}
		else
		{
			int need;
			if (i > 0) need = sc[i - 1];
			else need = 0;
			if (pos[need + n] == -1)
			{
				for (int j = 0; j < L; j++) up[i][j] = -1;
			}
			else
			{
				int j = pos[need + n];
				up[i][0] = j + 1;
				for (int k = 1; k < L; k++)
					if (up[i][k - 1] != -1) up[i][k] = up[up[i][k - 1]][k - 1];
					else up[i][k] = -1;
			}
		}
		pos[sc[i] + n] = i;
	}
}

int F(int l, int r)
{
	//cout << l << " " << r << " ";
	int res = 0;
	for (int i = L - 1; i >= 0; i--)
		if (up[l][i] != -1 && up[l][i] - 1 <= r)
		{
			res += 1 << i;
			l = up[l][i];
		}
	//cout << res << endl;
	return res;
}

int lcp(int i, int j)
{
	int res = 0;
	for (int k = L - 1; k >= 0; k--)
	{
		int len = 1 << k;
		if (i + len - 1 < n && j + len - 1 < n)
		{
			if (c[k][i] == c[k][j]) 
			{
				res += len;
				i += len;
				j += len;
			}
		}
	}
	return res;
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	cin >> n;
	scanf("\n");
	cin >> s;
	s += '#';
	build();
	calc();
	int64 ans = 0;
	for (int i = 0; i < n; i++) ans += F(i, n - 1);
	for (int i = 1; i < n; i++) 
	{
		int j = lcp(p[i], p[i + 1]);
		ans -= F(p[i], p[i] + j - 1);
	}
	cout << ans;
	return 0;
}