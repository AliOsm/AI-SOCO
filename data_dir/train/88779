#include <bits/stdc++.h>
using namespace std;

typedef long long i64;

namespace InteractFake {
	const int NMAX = 100;
	int x[NMAX], y[NMAX];
	int n;

	int init() {
		int n;
		cin >> n;
		for (int i = 1; i <= n; i++)
			cin >> x[i] >> y[i];
		return n;
	}
	i64 det(int a, int b, int c) {
		return 1LL * (x[b] - x[a]) * (y[c] - y[a]) -
			1LL * (y[b] - y[a]) * (x[c] - x[a]);
	}

	i64 area(int a, int b, int c) {
		return abs(det(a, b, c));
	}

	bool trigo_order(int a, int b, int c) {
		return det(a, b, c) > 0;
	}
}
namespace Interact {

	int init() {
		int n;
		cin >> n;
		return n;
	}
	i64 area(int a, int b, int c) {
		cout << "1 " << a << ' ' << b << ' ' << c << endl;
		i64 ans;
		cin >> ans;
		return ans;
	}

	bool trigo_order(int a, int b, int c) {
		cout << "2 " << a << ' ' << b << ' ' << c << endl;
		i64 ans;
		cin >> ans;
		return (ans == 1);
	}
}

vector <int> order_edge(int a, int b, vector <int> in_order)
{
	/// in_order contains the edges sorted by heigth from (a, b)
	vector <int> st = { a }, dr = { b };
	for (int i = 0; i < in_order.size(); i++) {
		if (i + 1 == in_order.size()) {
			st.push_back(in_order[i]);
			continue;
		}
		if (Interact::trigo_order(a, in_order[i], in_order[i + 1]))
			dr.push_back(in_order[i]);
		else
			st.push_back(in_order[i]);
	}
	while (!st.empty())
		dr.push_back(st.back()), st.pop_back();
	return dr;
}

void solve(int n)
{
	int a = 1, b = 2;
	vector <pair <i64, int>> up, down;
	for (int i = 3; i <= n; i++) {
		bool is_up = Interact::trigo_order(a, b, i);
		i64 d = Interact::area(a, b, i);
		if (is_up)
			up.push_back({ d, i });
		else
			down.push_back({ d, i });
	}

	sort(up.begin(), up.end());
	sort(down.begin(), down.end());

	vector <int> upper, lower;
	for (auto i : up)
		upper.push_back(i.second);
	for (auto i : down)
		lower.push_back(i.second);

	auto sol_sus = order_edge(a, b, upper);
	auto sol_jos = order_edge(b, a, lower);

	cout << "0 ";
	sol_sus.pop_back();
	sol_jos.pop_back();

	for (auto i : sol_jos)
		cout << i << ' ';
	for (auto i : sol_sus)
		cout << i << ' ';
	cout << endl;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	
	int n = Interact::init();

	solve(n);


	return 0;
}