//#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops")
//#pragma GCC target("avx,avx2")
//#pragma GCC target("avx2")
//#pragma GCC optimize("O3")

//# include <x86intrin.h>
# include <bits/stdc++.h>

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

inline void Input_Output () {
	//freopen(".in", "r", stdin);
   //freopen(".out", "w", stdout);
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
 
int n, k;
ll m, c;



int main () {
	SpeedForce;
	cin >> n >> m >> k;

	c = (m+n-1) / n;
	
	k = (k > c ? c : k);
	vector < int > a(n), p(n);
	For (i, 0, n-1) {
		cin >> a[i];
	}

	iota(every(p), 0);
	sort(every(p), [&](int x, int y) {return a[x] < a[y]; });

	vector < vector < int > > dp(n+1, vector < int > (k+1, 0));
	For (i, 0, n-1) dp[i][1] = 1;
	For (j, 2, k) {
		int ptr = 0, sum = 0;
		For (ii, 0, n-1) {
			int i = p[ii];
			while(ptr < n && a[p[ptr]] <= a[i]) {
				sum = (sum + dp[p[ptr]][j-1]) % mod;
				++ptr;
			}

			dp[i][j] = sum;
		}
	}
	int lst = (m-1) % n;
	ll ans = 0;
	For (i, 0, n-1) {
		For (j, 1, k) {
			
			ll t = (c-j+1ll) % mod;
			if (i > lst && m%n)
				--t;

			ans = (ans + t * dp[i][j]) % mod;
		   	
		}
	}

	if(ans < 0) ans += mod;
	ans %= mod;
	cout << ans << '\n';


	return Accepted;
}

// B...a