#include <bits/stdc++.h>
using namespace std;

struct UnionFind {
    vector<int> par;
    vector<int> sz;

    UnionFind(int n=0){
        if(n>0) initialize(n);
    }

    void initialize(int n){
        par.resize(n);
        sz.resize(n);
        for(int i=0; i<n; i++){
            par[i] = i;
            sz[i] = 1;
        }
    }

    int find(int x){
        if(par[x] == x){
            return x;
        }else{
            return par[x] = find(par[x]);
        }
    }

    bool unite(int x, int y){
        x = find(x);
        y = find(y);
        if(x == y) return false;
        if(sz[x] > sz[y]) swap(x, y);
        par[x] = y;
        sz[y] += sz[x];
        return true;
    }

    bool same(int x, int y){
        return find(x) == find(y);
    }

    int size(int x){
        return sz[find(x)];
    }
};

int main(){
    int N, M;
    cin >> N >> M;
    vector<int> edges[100000];
    int deg[100000] = {0};
    for(int i=0; i<M; i++){
        int a, b;
        cin >> a >> b;
        a--; b--;
        edges[a].push_back(b);
        edges[b].push_back(a);
        deg[a]++;
        deg[b]++;
    }
    int mn = min_element(deg, deg+N) - deg;
    
    UnionFind uf(N);
    auto check = [&](int i){
        vector<bool> one(N);
        for(int j : edges[i]) one[j] = 1;
        for(int j=0; j<N; j++) if(!one[j]) uf.unite(i, j);
    };
    check(mn);
    for(int j : edges[mn]) check(j);
    int ans = -1;
    for(int i=0; i<N; i++) if(uf.find(i) == i) ans++;
    cout << ans << endl;
    return 0;
}
