/*jai mata di
 let's rock*/
#include<bits/stdc++.h>
using namespace std;
const int N=504;
const int inf=1e9;
char s[N][N];
int fd[N];
int bd[N];
int r[N][N],l[N][N];
int dp[N][N];
int sval[N];
int tot[N];
int calc[N][N];
int index[N][N];
int n,m,K;
int dfs(int i,int kx)
{
    //printf("i=%d kx=%d\n",i,kx);
    if(kx<0)
        return inf;
    if(i==n+1)
        return 0;
    if(dp[i][kx]!=-1)
        return dp[i][kx];
    int res=inf;
    int j,cnt=0;
    res=min(res,dfs(i+1,kx)+sval[i]);
    /*for(j=1;j<=m;j++)
    {
        if(s[i][j]=='1')
        {
            cnt++;
            if(j<bd[i])
                 res=min(res,dfs(i+1,kx-cnt)+bd[i]-r[i][j]+1);
            else
                 res=min(res,dfs(i+1,kx-cnt));
        }
    }
    if(cnt==0)
        res=min(res,dfs(i+1,kx));
    else
    {
        cnt=0;
        for(j=m;j>=1;j--)
        {
            if(s[i][j]=='1')
            {
                cnt++;
                if(j>fd[i])
                   res=min(res,dfs(i+1,kx-cnt)+l[i][j]-fd[i]+1);
                else
                    res=min(res,dfs(i+1,kx-cnt));
            }
        }
    }*/


    res=min(res,dfs(i+1,kx-tot[i]));
    for(j=1;j<=tot[i];j++)
        res=min(res,dfs(i+1,kx-(tot[i]-j))+calc[i][j]);
    //printf("exit i=%d kx=%d res=%d\n",i,kx,res);
    dp[i][kx]=res;
    return res;
}
int main()
{
    scanf("%d %d %d",&n,&m,&K);
    memset(dp,-1,sizeof(dp));
    int i,j,k;
    for(i=1;i<=n;i++)
        scanf("%s",s[i]+1);
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=m;j++)
        {
            if(s[i][j]=='1')
            {
                bd[i]=j;
                if(fd[i]==0)
                    fd[i]=j;
            }
        }
    }
    for(i=1;i<=n;i++)
    {
        int id=1;
        for(j=1;j<=m;j++)
        {
            if(s[i][j]=='1')
                {
                    index[i][id++]=j;
                    tot[i]++;
                }
        }
    }
    for(i=1;i<=n;i++)
        for(j=1;j<=m;j++)
           calc[i][j]=inf;
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=tot[i];j++)
        {
            for(k=1;k<=tot[i]-j+1;k++)
            {
                int lt=k+j-1;
                calc[i][j]=min(calc[i][j],index[i][lt]-index[i][k]+1);
            }
        }
    }
    for(i=1;i<=n;i++)
    {
        int idx=0;
        for(j=1;j<=m;j++)
        {
           l[i][j]=idx;
           if(s[i][j]=='1')
              idx=j;
        }
    }
    for(i=1;i<=n;i++)
    {
        int idx=0;
        for(j=m;j>=1;j--)
        {
           r[i][j]=idx;
           if(s[i][j]=='1')
              idx=j;
        }
    }
    for(i=1;i<=n;i++)
    {
        if(fd[i]!=0)
            sval[i]=bd[i]-fd[i]+1;
        else sval[i]=0;
    }
    /*for(i=1;i<=n;i++)
    {
        printf("fd[%d]=%d bd[%d]=%d\n",i,fd[i],i,bd[i]);
        for(j=1;j<=m;j++)
        {
            printf("l[%d][%d]=%d r[%d][%d]=%d\n",i,j,l[i][j],i,j,r[i][j]);
        }
    }*/
    int ans=dfs(1,K);
    printf("%d\n",ans);
    return 0;
}
